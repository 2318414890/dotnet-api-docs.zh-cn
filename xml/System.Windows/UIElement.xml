<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="69fc14f8a143a8f000734a5dc38f8d88f9280a2f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="49cbb-101">
        <see cref="T:System.Windows.UIElement" /> 是 WPF 核心级实现的基类，这些实现是在 Windows Presentation Foundation (WPF) 元素和基本表示特性上生成的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="49cbb-101">
          <see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-102"><xref:System.Windows.UIElement> 用于元素布局特征，并作为派生类的虚方法可以重写，这可能会影响呈现行为的元素及其子元素的布局的公开提供一个起始点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-102"><xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</span></span>  
  
 <span data-ttu-id="49cbb-103">大部分的输入和焦点的元素的行为通常中也定义<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-103">Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="49cbb-104">这包括键盘、 鼠标和触笔输入和相关的状态属性的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-104">This includes the events for keyboard, mouse and stylus input, and related status properties.</span></span> <span data-ttu-id="49cbb-105">其中许多事件是路由的事件，并且有许多输入相关的事件的这两个冒泡路由版本，以及事件的隧道版本。</span><span class="sxs-lookup"><span data-stu-id="49cbb-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="49cbb-106">这些成对的事件通常是控件作者最感兴趣的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="49cbb-107"><xref:System.Windows.UIElement> 此外包括[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]与相关[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引发指定的方法路由源自元素实例的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-107"><xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="49cbb-108">根据体系结构，<xref:System.Windows.UIElement>就被认为是大致相当于窗口句柄以[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]编程中或中的某个元素[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]编程。</span><span class="sxs-lookup"><span data-stu-id="49cbb-108">In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming.</span></span> <span data-ttu-id="49cbb-109"><xref:System.Windows.UIElement> 是 WPF 核心级别的基本元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-109"><xref:System.Windows.UIElement> is a base element at the WPF core level.</span></span>  
  
 <span data-ttu-id="49cbb-110">A<xref:System.Windows.UIElement>具有以下功能专门定义的<xref:System.Windows.UIElement>类：</span><span class="sxs-lookup"><span data-stu-id="49cbb-110">A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:</span></span>  
  
-   <span data-ttu-id="49cbb-111">可以呈现为子元素 (<xref:System.Windows.UIElement>派生自<xref:System.Windows.Media.Visual>，高级别图形类)</span><span class="sxs-lookup"><span data-stu-id="49cbb-111">Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)</span></span>  
  
-   <span data-ttu-id="49cbb-112">包含用于调整大小和位置可能具有的子元素的逻辑<xref:System.Windows.UIElement>（时由布局系统解释）</span><span class="sxs-lookup"><span data-stu-id="49cbb-112">Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)</span></span>  
  
-   <span data-ttu-id="49cbb-113">可响应用户输入 （包括控件的位置输入获取发送到通过其处理的路由或路由的命令的事件）</span><span class="sxs-lookup"><span data-stu-id="49cbb-113">Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</span></span>  
  
-   <span data-ttu-id="49cbb-114">可以引发逻辑元素树路由的路由的事件</span><span class="sxs-lookup"><span data-stu-id="49cbb-114">Can raise routed events that travel a route through the logical element tree</span></span>  
  
-   <span data-ttu-id="49cbb-115">支持动画系统的某些方面</span><span class="sxs-lookup"><span data-stu-id="49cbb-115">Supports some aspects of the animation system</span></span>  
  
 <span data-ttu-id="49cbb-116"><xref:System.Windows.FrameworkElement> 是基于 WPF 框架级别实现类<xref:System.Windows.UIElement>，并添加与 WPF 框架级别的特定交互。</span><span class="sxs-lookup"><span data-stu-id="49cbb-116"><xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level.</span></span> <span data-ttu-id="49cbb-117"><xref:System.Windows.FrameworkElement> 添加并定义了以下功能：</span><span class="sxs-lookup"><span data-stu-id="49cbb-117"><xref:System.Windows.FrameworkElement> adds and defines the following capabilities:</span></span>  
  
-   <span data-ttu-id="49cbb-118">其他特定于框架的布局特征</span><span class="sxs-lookup"><span data-stu-id="49cbb-118">Additional framework-specific layout characteristics</span></span>  
  
-   <span data-ttu-id="49cbb-119">支持更丰富的元数据属性报告</span><span class="sxs-lookup"><span data-stu-id="49cbb-119">Support for richer metadata reporting on properties</span></span>  
  
-   <span data-ttu-id="49cbb-120">某些类特定的实现输入基类，这些类和其附加的属性或附加事件</span><span class="sxs-lookup"><span data-stu-id="49cbb-120">Class-specific implementation of certain input base classes and their attached properties or attached events</span></span>  
  
-   <span data-ttu-id="49cbb-121">样式支持</span><span class="sxs-lookup"><span data-stu-id="49cbb-121">Style support</span></span>  
  
-   <span data-ttu-id="49cbb-122">进一步动画支持</span><span class="sxs-lookup"><span data-stu-id="49cbb-122">Further animation support</span></span>  
  
 <span data-ttu-id="49cbb-123">另一个相关类是<xref:System.Windows.ContentElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-123">Another related class is <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="49cbb-124"><xref:System.Windows.ContentElement>类实现的相同的成员执行许多<xref:System.Windows.UIElement>; 这两个类之间的差异具有执行其预期与将放入总体内容模型。</span><span class="sxs-lookup"><span data-stu-id="49cbb-124">The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model.</span></span> <span data-ttu-id="49cbb-125">A<xref:System.Windows.UIElement>派生的类通常定义相对较严格的内容模型，这意味着将对哪些元素可能会在标记中的子元素的限制。</span><span class="sxs-lookup"><span data-stu-id="49cbb-125">A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</span></span> <span data-ttu-id="49cbb-126">可能有中采用限制性较弱的子内容的容量<xref:System.Windows.UIElement>，但该容量通常集中在指定的内容属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-126">There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties.</span></span> <span data-ttu-id="49cbb-127">A<xref:System.Windows.ContentElement>派生的类通常不是限制有关内容，以支持方案例如流格式的文档。</span><span class="sxs-lookup"><span data-stu-id="49cbb-127">A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49cbb-128"><xref:System.Windows.UIElement.Visibility%2A> 状态将影响处理由该元素的所有输入。</span><span class="sxs-lookup"><span data-stu-id="49cbb-128"><xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="49cbb-129">不可见的元素不参与的命中测试和不接收输入的事件，即使鼠标位于边界元素将如果可见。</span><span class="sxs-lookup"><span data-stu-id="49cbb-129">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-130">初始化 <see cref="T:System.Windows.UIElement" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-130">Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-131">创建的新实例的实际类型是<xref:System.Windows.UIElement>通常在应用程序代码中，因为<xref:System.Windows.UIElement>是基元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-131">Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element.</span></span> <span data-ttu-id="49cbb-132">请参阅[基元素概述](~/docs/framework/wpf/advanced/base-elements-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-132">See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-133">为指定的路由事件添加路由事件处理程序，并将该处理程序添加到当前元素的处理程序集合中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-133">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="49cbb-134">要处理的路由事件的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-134">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="49cbb-135">对处理程序实现的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-135">A reference to the handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-136">为指定的路由事件添加路由事件处理程序，并将该处理程序添加到当前元素的处理程序集合中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-137">可以将同一事件的同一处理程序添加多次而不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="49cbb-137">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="49cbb-138">但是，该处理程序实际调用的多次处理该事件时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-138">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="49cbb-139">因此，请考虑如何此行为可能会产生的负面影响，应考虑在处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-139">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="49cbb-140">通常使用此方法来提供的"添加"访问器实现[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自定义的路由事件的访问模式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-140">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="49cbb-141">要处理的路由事件的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-141">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="49cbb-142">对处理程序实现的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-142">A reference to the handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="49cbb-143">如果为 <see langword="true" />，则将按以下方式注册处理程序：即使路由事件在其事件数据中标记为已处理，也会调用该处理程序；如果为 <see langword="false" />，则使用默认条件注册处理程序，即当路由事件被标记为已处理时，将不调用处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-143">
              <see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span>
          </span>
          <span data-ttu-id="49cbb-144">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-144">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-145">请勿定期请求重新处理路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-145">Do not routinely ask to rehandle a routed event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-146">为指定的路由事件添加路由事件处理程序，并将该处理程序添加到当前元素的处理程序集合中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-146">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
          <span data-ttu-id="49cbb-147">将 <paramref name="handledEventsToo" /> 指定为 <see langword="true" />，可为已标记为由事件路由中的其他元素处理的路由事件调用所提供的处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-147">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-148">处理低级别的输入的事件中切实可行的方法是一个复杂的任务。</span><span class="sxs-lookup"><span data-stu-id="49cbb-148">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="49cbb-149">许多控件实现的行为其中特定事件被标记为已处理，而替换为另一个更直观的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-149">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="49cbb-150">通常情况下，控制为已处理某个设计意图要求这样做是否只是标注平台输入的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-150">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="49cbb-151">在某些情况下，这些设计意图可能不是你的输入事件的特定处理的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-151">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="49cbb-152">它为这些方案是该注册处理程序替换`handledEventsToo`作为`true`适合。</span><span class="sxs-lookup"><span data-stu-id="49cbb-152">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="49cbb-153">但你不应该这样做例行。</span><span class="sxs-lookup"><span data-stu-id="49cbb-153">But you should not do this routinely.</span></span> <span data-ttu-id="49cbb-154">调用以响应所有事件处理程序，即使处理将使你自己的应用程序事件处理逻辑。</span><span class="sxs-lookup"><span data-stu-id="49cbb-154">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="49cbb-155">如果处理程序逻辑是庞大，可能会看到导致性能降低。</span><span class="sxs-lookup"><span data-stu-id="49cbb-155">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="49cbb-156">你应保留使用附加的已处理事件的情况下，你已检测到在开发过程中，某些控件正在处理你仍想要使用应用程序逻辑处理的事件的处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-156">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="49cbb-157">避免处理的某些事件控件组合的行为的类的另一种方法是使用该事件的预览版的替代项。</span><span class="sxs-lookup"><span data-stu-id="49cbb-157">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="49cbb-158">例如，如果<xref:System.Windows.UIElement.MouseLeftButtonDown>标记为已处理类处理，你可能能够为添加处理程序<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>相反。</span><span class="sxs-lookup"><span data-stu-id="49cbb-158">For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="49cbb-159">可以将同一事件的同一处理程序添加多次而不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="49cbb-159">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="49cbb-160">但是，该处理程序实际调用的多次处理该事件时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-160">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="49cbb-161">因此，请考虑如何此行为可能会产生的负面影响，应考虑在处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-161">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="49cbb-162">通常使用此方法来提供的"添加"访问器实现[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自定义的路由事件的访问模式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-162">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-163">下面的示例实现一个处理程序调用<xref:System.Windows.FrameworkElement.Initialized>将定义处理程序附加到一个页面使用的命名元素的页面上的事件`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-163">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="49cbb-164">将调用此处理程序，即使在路由过程的另一个元素标记为已处理之前已到达路线中的处理元素共享的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-164">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">
          <span data-ttu-id="49cbb-165">要向其添加处理程序的事件路由。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-165">The event route that handlers are added to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="49cbb-166">用于添加处理程序的事件数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-166">The event data that is used to add the handlers.</span>
          </span>
          <span data-ttu-id="49cbb-167">此方法使用事件数据的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 属性创建处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-167">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-168">将处理程序添加到当前 <see cref="T:System.Windows.EventRoute" /> 事件处理程序集合的指定 <see cref="T:System.Windows.UIElement" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-168">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-169">此方法可以由内容主机元素 (实现<xref:System.Windows.IContentHost>或那些不) 添加到的子元素的处理程序<xref:System.Windows.EventRoute>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-169">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span> <span data-ttu-id="49cbb-170">通常，这不需要<xref:System.Windows.UIElement>，这是因为处理程序会自动添加的已完成的逻辑树中找到的所有元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-170">Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree.</span></span> <span data-ttu-id="49cbb-171">但是，在某些情况下其中<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>模板树，干扰来自模板需要添加到路由的元素中混合。</span><span class="sxs-lookup"><span data-stu-id="49cbb-171">However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</span></span> <span data-ttu-id="49cbb-172">同时<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>支持此方法的版本。</span><span class="sxs-lookup"><span data-stu-id="49cbb-172">Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-173">获取或设置一个值，该值指示此元素能否用作拖放操作的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-173">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span>
          </span>
          <span data-ttu-id="49cbb-174">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-174">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-175">如果此元素可用作拖放操作的目标，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-175">
              <see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-176">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-176">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-177">拖放操作默认情况下，不启用和必须通过设置有意启用<xref:System.Windows.UIElement.AllowDrop%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-177">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="49cbb-178">除了此基本设置，拖放行为完全是特定的实现，并且未定义的<xref:System.Windows.UIElement>或任何其他类，该类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-178">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class.</span></span> <span data-ttu-id="49cbb-179">例如，某些控件<xref:System.Windows.Controls.RichTextBox>，是否有一个默认行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-179">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="49cbb-180">拖放的详细信息，请参阅[拖放概述](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-180">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="49cbb-181"><xref:System.Windows.FrameworkElement> 重写在其实现此依赖项属性的元数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-181"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="49cbb-182">具体而言，<xref:System.Windows.FrameworkElement>指定此属性以允许属性值继承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`元数据中)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-182">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="49cbb-183">在此上下文中的属性值继承意味着，如果有任何其他值的子元素<xref:System.Windows.UIElement.AllowDrop%2A>通过本地值或样式，最接近的父元素的值与此值分配 （也是在样式，默认情况下分配值或本地值），则通过属性系统情况下，从父元素的值将分配给所有以前未分配的子元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-183">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</span></span> <span data-ttu-id="49cbb-184">实际上这意味着你可以指定是否在根元素中，允许拖放操作并且值将传播到所有子元素尚未专门为其分配`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-184">In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-185">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-185">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-186">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-186">Identifier field</span></span>|<xref:System.Windows.UIElement.AllowDropProperty>|  
|<span data-ttu-id="49cbb-187">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-187">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-188">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-188">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-189">下面的标记示例设置<xref:System.Windows.UIElement.AllowDrop%2A>属性`true`上使用属性<xref:System.Windows.Controls.TextBox>、 以及某些其他设置与相关的属性来聚合中实现这<xref:System.Windows.Controls.TextBox>将要目标的多行文本数据对象时拖动它。</span><span class="sxs-lookup"><span data-stu-id="49cbb-189">The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in.</span></span> <span data-ttu-id="49cbb-190">有关完整的示例，请参阅[加载删除文件示例](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-190">For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).</span></span>  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-191">标识 <see cref="P:System.Windows.UIElement.AllowDrop" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-191">Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-192">将动画应用到此元素的指定依赖属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-192">Applies an animation to a specified dependency property on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-193">此方法是密封的，不能对其进行重写。</span><span class="sxs-lookup"><span data-stu-id="49cbb-193">This method is sealed and cannot be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="49cbb-194">要进行动画处理的属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-194">The identifier for the property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="49cbb-195">控制和声明动画的动画时钟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-195">The animation clock that controls and declares the animation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-196">将动画应用到此元素的指定依赖属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-196">Applies an animation to a specified dependency property on this element.</span>
          </span>
          <span data-ttu-id="49cbb-197">任何现有动画均停止并替换为新动画。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-197">Any existing animations are stopped and replaced with the new animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-198">若要从属性中移除动画，指定为该属性的标识符`dp`并指定`clock`作为`null`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-198">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="49cbb-199">这将删除动画和动画的属性设置为其基值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-199">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="49cbb-200">但是，不会停止最初关联的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="49cbb-200">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="49cbb-201">分配给该时钟的任何其他动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="49cbb-201">Any other animations assigned to that clock will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-202">在下面的示例中， <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle`已应用于它通过调用特定的计时动画<xref:System.Windows.UIElement.ApplyAnimationClock%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-202">In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="49cbb-203">要进行动画处理的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-203">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="49cbb-204">控制和声明动画的动画时钟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-204">The animation clock that controls and declares the animation.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="49cbb-205">枚举的一个值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-205">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="49cbb-206">默认值为 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />，这会停止任何现有动画并将其替换为新动画。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-206">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-207">向此元素的指定依赖属性应用动画，并且可以指定当该属性已有正在运行的动画时所要执行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-207">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-208">若要从属性中移除动画，指定为该属性的标识符`dp`并指定`clock`作为`null`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-208">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="49cbb-209">这将删除动画和动画的属性设置为其基值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-209">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="49cbb-210">但是，不会停止最初关联的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="49cbb-210">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="49cbb-211">分配给该时钟的任何其他动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="49cbb-211">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-212">获取一个值，该值指示在此元素上是否至少捕获了一次触摸。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-212">Gets a value that indicates whether at least one touch is captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-213">如果在此元素上至少捕获了一次触摸，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-213">
              <see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-214">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-214">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-215">获取一个值，该值指示在此元素或其可视化树中的任何子元素上是否至少捕获了一次触摸。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-215">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-216">如果在此元素或其可视化树中的任何子元素上至少捕获了一次触摸，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-216">
              <see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-217">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-217">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-218">获取一个值，该值指示在此元素上是否至少按下了一次触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-218">Gets a value that indicates whether at least one touch is pressed over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-219">如果在此元素上至少按下了一次触摸设备，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-219">
              <see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-220">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-220">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-221">获取一个值，该值指示在此元素或其可视化树中的任何子元素上是否至少按下了一次触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-221">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-222">如果在此元素或其可视化树中的任何子元素上至少按下了一次触摸设备，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-222">
              <see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-223">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-223">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="49cbb-224">父元素为子元素计算的最终大小，表示为 <see cref="T:System.Windows.Rect" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-224">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-225">定位子元素，并确定 <see cref="T:System.Windows.UIElement" /> 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-225">Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="49cbb-226">父元素从它们的 <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> 实现（或者是 WPF 框架级别等效项）调用此方法，以便形成递归布局更新。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-226">Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</span>
          </span>
          <span data-ttu-id="49cbb-227">此方法产生第二次布局更新。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-227">This method constitutes the second pass of a layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-228">对于 WPF 框架级别元素派生方案，行为<xref:System.Windows.UIElement.Arrange%2A>更改不应 （而且不能除非使用阴影）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-228">For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="49cbb-229">相反，应重写<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>中你的类的实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-229">Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class.</span></span> <span data-ttu-id="49cbb-230">你<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>内部调用实现<xref:System.Windows.UIElement.Arrange%2A>作为默认 WPF 框架级别布局操作的一部分。</span><span class="sxs-lookup"><span data-stu-id="49cbb-230">Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="49cbb-231">你<xref:System.Windows.UIElement.ArrangeCore%2A>实现还应调用<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>每个子元素，如果它包含子元素上。</span><span class="sxs-lookup"><span data-stu-id="49cbb-231">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.</span></span>  
  
 <span data-ttu-id="49cbb-232">对于 WPF 核心级元素派生方案的行为<xref:System.Windows.UIElement.Arrange%2A>更改不应 （而且不能除非使用阴影）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-232">For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="49cbb-233">相反，应重写<xref:System.Windows.UIElement.ArrangeCore%2A>类中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-233">Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class.</span></span> <span data-ttu-id="49cbb-234">你<xref:System.Windows.UIElement.ArrangeCore%2A>内部调用实现<xref:System.Windows.UIElement.Arrange%2A>作为默认 WPF 框架级别布局操作的一部分。</span><span class="sxs-lookup"><span data-stu-id="49cbb-234">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="49cbb-235">但是，这假定你在使用 WPF 框架级别布局和其布局系统，通常不是这种情况，如果你专门派生元素出现在 WPF 核心级别从<xref:System.Windows.UIElement>基类元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-235">However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class.</span></span> <span data-ttu-id="49cbb-236">你<xref:System.Windows.UIElement.ArrangeCore%2A>实现还应调用<xref:System.Windows.UIElement.Arrange%2A>每个子元素，如果它包含子元素上。</span><span class="sxs-lookup"><span data-stu-id="49cbb-236">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements.</span></span> <span data-ttu-id="49cbb-237">请注意，WPF 核心级方案意味着你不使用<xref:System.Windows.FrameworkElement>派生类，因为<xref:System.Windows.FrameworkElement>密封<xref:System.Windows.FrameworkElement.ArrangeCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-237">Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-238">计算中的 WPF 框架级别布局定位[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]组成<xref:System.Windows.UIElement.Measure%2A>调用和<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-238">Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="49cbb-239">期间<xref:System.Windows.UIElement.Measure%2A>调用，该布局系统确定使用提供的元素的大小要求<xref:System.Windows.Size>(`availableSize`) 自变量。</span><span class="sxs-lookup"><span data-stu-id="49cbb-239">During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument.</span></span> <span data-ttu-id="49cbb-240">期间<xref:System.Windows.UIElement.Arrange%2A>调用，该布局系统完成大小和元素的位置的边界框。</span><span class="sxs-lookup"><span data-stu-id="49cbb-240">During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.</span></span>  <span data-ttu-id="49cbb-241">有关详细信息，请参阅[布局](~/docs/framework/wpf/advanced/layout.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-241">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
 <span data-ttu-id="49cbb-242">`availableSize` 可以是从零到无穷大任何数字。</span><span class="sxs-lookup"><span data-stu-id="49cbb-242">`availableSize` can be any number from zero to infinity.</span></span> <span data-ttu-id="49cbb-243">要进行布局的元素返回的最小<xref:System.Windows.Size>它们需要通过`availableSize`参数。</span><span class="sxs-lookup"><span data-stu-id="49cbb-243">Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.</span></span>  
  
 <span data-ttu-id="49cbb-244">当首次实例化布局时，它始终会收到<xref:System.Windows.UIElement.Measure%2A>之前调用<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-244">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="49cbb-245">但是后第一个布局处理过程，, 它可能会收到<xref:System.Windows.UIElement.Arrange%2A>调用而无需<xref:System.Windows.UIElement.Measure%2A>; 这可能会在一个属性，仅影响<xref:System.Windows.UIElement.Arrange%2A>更改 （如对齐方式），或当父收到<xref:System.Windows.UIElement.Arrange%2A>而无需<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="49cbb-245">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="49cbb-246">A<xref:System.Windows.UIElement.Measure%2A>调用将自动使失效<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-246">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="49cbb-247">以异步方式 （一次由布局系统） 通常执行布局更新。</span><span class="sxs-lookup"><span data-stu-id="49cbb-247">Layout updates generally occur asynchronously (at a time determined by the layout system).</span></span> <span data-ttu-id="49cbb-248">元素可能不会立即反映对影响元素大小的属性的更改 (如<xref:System.Windows.FrameworkElement.Width%2A>)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-248">An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49cbb-249">可以通过强制布局更新<xref:System.Windows.UIElement.UpdateLayout%2A>方法; 但是，调用此函数不建议，因为它，通常没有必要，也可能会导致性能不佳。</span><span class="sxs-lookup"><span data-stu-id="49cbb-249">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</span></span> <span data-ttu-id="49cbb-250">在许多情况下，调用<xref:System.Windows.UIElement.UpdateLayout%2A>可能适合、 布局系统将可能已处理更新。</span><span class="sxs-lookup"><span data-stu-id="49cbb-250">In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates.</span></span> <span data-ttu-id="49cbb-251">布局系统可以处理可以优化作为包的一部分的所有必要的更新的方式的布局更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-251">The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</span></span>  
  
 <span data-ttu-id="49cbb-252">布局系统保留的一些无效的布局，一个用于两个单独的队列<xref:System.Windows.UIElement.Measure%2A>，另一个用于<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-252">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="49cbb-253">布局队列根据可视化树中的元素的顺序排序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-253">The layout queue is sorted based upon the order of elements in the visual tree.</span></span> <span data-ttu-id="49cbb-254">元素树中较高级别的顶部，是队列的为了避免冗余布局父级中的重复更改所造成的。</span><span class="sxs-lookup"><span data-stu-id="49cbb-254">Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="49cbb-255">从队列中，自动删除重复项，并且如果它们尚存在有效自动从队列删除元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-255">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</span></span>  
  
 <span data-ttu-id="49cbb-256">更新布局时，<xref:System.Windows.UIElement.Measure%2A>队列为空首先后, 跟<xref:System.Windows.UIElement.Arrange%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="49cbb-256">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="49cbb-257">中的某个元素<xref:System.Windows.UIElement.Arrange%2A>中的某个元素时，绝不会排列队列<xref:System.Windows.UIElement.Measure%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="49cbb-257">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="49cbb-258">父级中应使用元素排列自身及其子元素的最终区域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-258">The final area within the parent that element should use to arrange itself and its child elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-259">定义 WPF 核心级别排列布局定义的模板。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-259">Defines the template for WPF core-level arrange layout definition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="49cbb-260">重写此方法才适当派生在 WPF 核心级别，并且不使用 WPF 框架级别布局系统和<xref:System.Windows.FrameworkElement>派生类，因为<xref:System.Windows.FrameworkElement>密封<xref:System.Windows.FrameworkElement.ArrangeCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-260">Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span> <span data-ttu-id="49cbb-261">如果你使用的 WPF 框架级别布局系统，合适的方法来重写特定于类的布局的排列行为是<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-261">If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-262"><xref:System.Windows.UIElement.ArrangeCore%2A> 实现应调用基实现来返回一个大小，然后调用<xref:System.Windows.UIElement.Arrange%2A>方法的每个可见子元素，并将这些返回的大小对帐<xref:System.Windows.UIElement.Arrange%2A>大小为基实现的调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-262"><xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation.</span></span> <span data-ttu-id="49cbb-263">对帐方面的逻辑<xref:System.Windows.UIElement.ArrangeCore%2A>实现可能有所不同，具体取决于您的元素的布局特征。</span><span class="sxs-lookup"><span data-stu-id="49cbb-263">The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element.</span></span> <span data-ttu-id="49cbb-264">在下面的示例模板中，`VisualChildren`是您的元素可以定义来帮助枚举其内容，则假设属性<xref:System.Windows.UIElement>不会定义内容的集合在此级别的 WPF 框架级别体系结构将推迟到派生的元素，如特定控件或控件的基类的内容行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-264">In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-265">如果你正在开发的 WPF 核心级别处的元素，则应重写此方法，以便为您的 WPF 核心级元素唯一排列布局行为，或以正确的布局决策有关所选的元素的子元素。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-265">If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</span>
            </span>
            <span data-ttu-id="49cbb-266">重写可能有必要，如果这些子元素不可识别从定义的模式如<see cref="T:System.Windows.Controls.ItemCollection" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-266">An override might be necessary if those child elements are not recognizable from a defined pattern such as an <see cref="T:System.Windows.Controls.ItemCollection" />.</span>
            </span>
            <span data-ttu-id="49cbb-267">父元素必须调用特定于类的<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />上每个子元素，否则这些子元素不会呈现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-267">A parent element must call the class-specific <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child element, otherwise those child elements are not rendered.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-268">为此元素的指定要进行动画处理的属性启动动画。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-268">Starts an animation for a specified animated property on this element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="49cbb-269">要进行动画处理的属性，它被指定为依赖项属性标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-269">The property to animate, which is specified as a dependency property identifier.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="49cbb-270">要启动的动画的时间线。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-270">The timeline of the animation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-271">为此元素的指定要进行动画处理的属性启动动画。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-271">Starts an animation for a specified animated property on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-272">当你检查属性是否动画处理时，请注意动画将开始，并被视为非动画的起始点以外的第一帧呈现时进行动画处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-272">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="49cbb-273">如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>为`animation`是`null`，然后将删除当前的任何动画，并且保持的属性的当前值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-273">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="49cbb-274">如果整个`animation`值是`null`、 从属性中移除所有动画和属性值将恢复为其基值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-274">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="49cbb-275">但是，不会停止最初关联的动画时间线。</span><span class="sxs-lookup"><span data-stu-id="49cbb-275">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="49cbb-276">分配给该时间线中的任何其他动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="49cbb-276">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-277">下面的示例创建动画、 其进行分配，并随后调用<xref:System.Windows.UIElement.BeginAnimation%2A>来启动它。</span><span class="sxs-lookup"><span data-stu-id="49cbb-277">The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="49cbb-278">要进行动画处理的属性，它被指定为依赖项属性标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-278">The property to animate, which is specified as the dependency property identifier.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="49cbb-279">要应用的动画的时间线。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-279">The timeline of the animation to be applied.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="49cbb-280">一个枚举值，用来指定新动画如何与已在影响属性值的任何当前（正在运行的）动画进行交互。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-280">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-281">为此元素的指定要进行动画处理的属性启动特定的动画，并可以指定当该属性已有正在运行的动画时所要执行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-281">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-282">当你检查属性是否动画处理时，请注意动画将开始，并被视为非动画的起始点以外的第一帧呈现时进行动画处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-282">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="49cbb-283">如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>为`animation`是`null`，然后将删除当前的任何动画，并且保持的属性的当前值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-283">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="49cbb-284">如果整个`animation`值是`null`、 从属性中移除所有动画和属性值将恢复为其基值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-284">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="49cbb-285">但是，不会停止最初关联的动画时间线。</span><span class="sxs-lookup"><span data-stu-id="49cbb-285">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="49cbb-286">分配给该时间线中的任何其他动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="49cbb-286">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-287">下面的示例实现一个处理程序以从资源，然后调用获取现有动画<xref:System.Windows.UIElement.BeginAnimation%2A>使用指定的提交行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-287">The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.</span></span>  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-288">获取或设置一个位图效果，该效果将直接应用到此元素所呈现的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-288">Gets or sets a bitmap effect that applies directly to the rendered content for this element.</span>
          </span>
          <span data-ttu-id="49cbb-289">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-289">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-290">要应用的位图效果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-290">The bitmap effect to apply.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-291"><xref:System.Windows.Media.Effects.BitmapEffect> 是抽象类型，因此[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用法要求的已实现的派生的类<xref:System.Windows.Media.Effects.BitmapEffect>，如<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-291"><xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</span></span> <span data-ttu-id="49cbb-292">请注意一个实现派生类是集合类型，，您可以指定多个顺序<xref:System.Windows.Media.Effects.BitmapEffect>，使用嵌套的标记语法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-292">Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.</span></span>  
  
 <span data-ttu-id="49cbb-293">没有现有的派生类<xref:System.Windows.Media.Effects.BitmapEffect>支持的类型转换器，因此[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用于此属性的语法通常是属性元素语法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-293">No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.</span></span>  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-294">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-294">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-295">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-295">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|<span data-ttu-id="49cbb-296">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-296">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-297">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-297">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-298">下面的示例设置的位图效果，使用<xref:System.Windows.Media.Effects.BlurBitmapEffect>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-298">The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.</span></span>  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-299">获取或设置位图效果的输入源，该效果将直接应用到此元素所呈现的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-299">Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</span>
          </span>
          <span data-ttu-id="49cbb-300">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-300">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-301">位图效果的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-301">The source for bitmap effects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-302">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-302">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-303">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-303">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|<span data-ttu-id="49cbb-304">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-304">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-305">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-305">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-306">标识 <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-306">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-307">标识 <see cref="P:System.Windows.UIElement.BitmapEffect" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-307">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-308">获取或设置 <see cref="T:System.Windows.UIElement" /> 的缓存表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-308">Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-309">
            <see cref="T:System.Windows.Media.CacheMode" />，用于容纳 <see cref="T:System.Windows.UIElement" /> 的缓存表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-309">A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-310">设置<xref:System.Windows.UIElement.CacheMode%2A>属性时需要增加为长时间才能呈现程序内容的性能。</span><span class="sxs-lookup"><span data-stu-id="49cbb-310">Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render.</span></span> <span data-ttu-id="49cbb-311">有关详情，请参阅<xref:System.Windows.Media.BitmapCache>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-311">For more information, see <xref:System.Windows.Media.BitmapCache>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-312">标识 <see cref="P:System.Windows.UIElement.CacheMode" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-312">Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-313">尝试将鼠标强制捕获到此元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-313">Attempts to force capture of the mouse to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-314">如果成功捕获了鼠标，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-314">
              <see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-315">若要捕获，必须启用一个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-315">To be captured, an element must be enabled.</span></span> <span data-ttu-id="49cbb-316">检查是否<xref:System.Windows.UIElement.IsEnabled%2A>是`true`之前调用<xref:System.Windows.UIElement.CaptureMouse%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-316">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-317">如果调用<xref:System.Windows.UIElement.CaptureMouse%2A>返回`true`，然后<xref:System.Windows.UIElement.IsMouseCaptured%2A>也`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-317">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="49cbb-318">如果调用<xref:System.Windows.UIElement.CaptureMouse%2A>返回`true`，则<xref:System.Windows.UIElement.GotMouseCapture>和<xref:System.Windows.UIElement.IsMouseCapturedChanged>引发的事件，与<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>在事件数据报告为元素其中<xref:System.Windows.UIElement.CaptureMouse%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-318">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="49cbb-319">如果强制捕获时，你可能干扰现有捕获-尤其是在具有与拖放与鼠标相关的捕获。</span><span class="sxs-lookup"><span data-stu-id="49cbb-319">If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="49cbb-320">若要清除从所有元素的鼠标捕获，请调用<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>与`element`参数作为提供`null`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-320">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-321">下面的示例实现一对用于鼠标和键的输入的组合，将鼠标捕获 （和取消捕获） 的处理程序，并启用一种用于查看三维模型的特殊鼠标模式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-321">The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-322">尝试将触笔强制捕获到此元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-322">Attempts to force capture of the stylus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-323">如果成功捕获了触笔，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-323">
              <see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-324">始终根据基础默认触笔设备的默认实现返回`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-324">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="49cbb-325">但是，如果你要扩展提供在输入系统的设备实现的输入的设备，则可能与一个备用的触笔设备实现，可能会返回不同的结果中创建系统。</span><span class="sxs-lookup"><span data-stu-id="49cbb-325">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="49cbb-326">当元素捕获触笔时，它会接收触笔输入，即使触笔超出界限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-326">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="49cbb-327">通常，将触笔捕获仅在拖放操作过程。</span><span class="sxs-lookup"><span data-stu-id="49cbb-327">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="49cbb-328">调用此方法调用基础静态<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-328">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="49cbb-329">由活动的触笔设备实现实现实际捕获行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-329">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="49cbb-330">若要捕获，必须启用一个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-330">To be captured, an element must be enabled.</span></span> <span data-ttu-id="49cbb-331">检查是否<xref:System.Windows.UIElement.IsEnabled%2A>是`true`返回你在调用之前<xref:System.Windows.UIElement.CaptureStylus%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-331">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-332">如果调用<xref:System.Windows.UIElement.CaptureStylus%2A>返回`true`，<xref:System.Windows.UIElement.IsStylusCaptured%2A>也`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-332">If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="49cbb-333">要捕获的设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-333">The device to capture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-334">尝试将触摸屏输入强制捕获到此元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-334">Attempts to force capture of a touch to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-335">如果将指定触摸屏输入捕获到此元素，则为 <see langword="true" /> ；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-335">
              <see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-336"><xref:System.Windows.UIElement.CaptureTouch%2A> 将返回`false`如果<xref:System.Windows.Input.TouchDevice>当前捕获到另一个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-336"><xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="49cbb-337">如果<xref:System.Windows.UIElement.CaptureTouch%2A>返回`true`，则<xref:System.Windows.UIElement.GotTouchCapture>引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-337">If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="49cbb-338">若要释放的单个触摸从此元素的捕获，请使用<xref:System.Windows.UIElement.ReleaseTouchCapture%2A>方法并指定要释放的触摸设备。</span><span class="sxs-lookup"><span data-stu-id="49cbb-338">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="49cbb-339">若要释放所有触摸从此元素，请使用<xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-339">To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49cbb-340">
            <paramref name="touchDevice" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-340">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-341">获取或设置用于定义元素内容轮廓的几何图形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-341">Gets or sets the geometry used to define the outline of the contents of an element.</span>
          </span>
          <span data-ttu-id="49cbb-342">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-342">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-343">用于剪裁区域大小的几何图形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-343">The geometry to be used for clipping area sizing.</span>
          </span>
          <span data-ttu-id="49cbb-344">默认值为 null <see cref="T:System.Windows.Media.Geometry" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-344">The default is a null <see cref="T:System.Windows.Media.Geometry" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-345">将呈现布局中以可视方式剪辑几何图形外部的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-345">Elements outside the geometry will be visually clipped in the rendered layout.</span></span> <span data-ttu-id="49cbb-346">几何图形不必是矩形。</span><span class="sxs-lookup"><span data-stu-id="49cbb-346">The geometry does not have to be rectangular.</span></span>  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-347">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-347">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-348">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-348">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipProperty>|  
|<span data-ttu-id="49cbb-349">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-349">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-350">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-350">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-351">此示例演示如何定义框架元素的<xref:System.Windows.UIElement.Clip%2A>区域。</span><span class="sxs-lookup"><span data-stu-id="49cbb-351">This example shows how to define a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="49cbb-352">若要定义一个剪辑，使用<xref:System.Windows.Media.Geometry>(例如，<xref:System.Windows.Media.EllipseGeometry>设置元素的<xref:System.Windows.UIElement.Clip%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-352">To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry> to set the element's <xref:System.Windows.UIElement.Clip%2A> property.</span></span> <span data-ttu-id="49cbb-353">仅位于的几何图形的区域内的区域将可见。</span><span class="sxs-lookup"><span data-stu-id="49cbb-353">Only the area that is within the region of the geometry will be visible.</span></span>  
  
 <span data-ttu-id="49cbb-354">下面的示例演示<xref:System.Windows.Controls.Image>没有定义的剪辑区域元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-354">The following example shows an <xref:System.Windows.Controls.Image> element without a defined clip region.</span></span> <span data-ttu-id="49cbb-355">由于定义没有剪辑区域，则将显示整个图像。</span><span class="sxs-lookup"><span data-stu-id="49cbb-355">Because no clip region is defined, the entire image is displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 <span data-ttu-id="49cbb-356">![应用剪辑区域之前的对象](~/add/media/mil-task-clip-region-noclip.png "之前应用剪辑区域的对象")</span><span class="sxs-lookup"><span data-stu-id="49cbb-356">![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png "An object before applying a clip region")</span></span>  
<span data-ttu-id="49cbb-357">没有剪辑区域的图像</span><span class="sxs-lookup"><span data-stu-id="49cbb-357">Image with No Clip Region</span></span>  
  
 <span data-ttu-id="49cbb-358">在下一步的示例中，创建相同的映像，只不过它具有定义的剪辑区域。</span><span class="sxs-lookup"><span data-stu-id="49cbb-358">In the next example, an identical Image is created, except that it has a defined clip region.</span></span> <span data-ttu-id="49cbb-359">只有在区域内的映像的部分<xref:System.Windows.Media.EllipseGeometry>将显示。</span><span class="sxs-lookup"><span data-stu-id="49cbb-359">Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry> will be displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 <span data-ttu-id="49cbb-360">![经过剪辑的对象](~/add/media/mil-task-clip-region-ellispe.PNG "经过剪辑的对象")</span><span class="sxs-lookup"><span data-stu-id="49cbb-360">![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG "A clipped object")</span></span>  
<span data-ttu-id="49cbb-361">椭圆的剪辑区域与映像</span><span class="sxs-lookup"><span data-stu-id="49cbb-361">Image with an Elliptical Clip Region</span></span>  
  
 <span data-ttu-id="49cbb-362">下面的示例演示如何动态显示的 framework 元素的<xref:System.Windows.UIElement.Clip%2A>区域。</span><span class="sxs-lookup"><span data-stu-id="49cbb-362">The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="49cbb-363">在此示例中，<xref:System.Windows.Media.EllipseGeometry>用于定义的椭圆的剪辑区域<xref:System.Windows.Controls.Image>元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-363">In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element.</span></span> <span data-ttu-id="49cbb-364">A<xref:System.Windows.Media.Animation.PointAnimation>进行动画处理的椭圆几何图形<xref:System.Windows.Media.EllipseGeometry.Center%2A>从属性 （0，0） 到 （200，150）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-364">A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150).</span></span> <span data-ttu-id="49cbb-365">此动画开始播放后图像加载，并且无限期地重复。</span><span class="sxs-lookup"><span data-stu-id="49cbb-365">The animation starts playing after the image is loaded and repeats indefinitely.</span></span>  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 <span data-ttu-id="49cbb-366">有关完整示例，请参阅[剪辑区域示例](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-366">For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-367">标识 <see cref="P:System.Windows.UIElement.Clip" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-367">Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-368">获取或设置一个值，该值指示是否剪切此元素的内容(或来自此元素的子元素的内容)使其适合包含元素的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-368">Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</span>
          </span>
          <span data-ttu-id="49cbb-369">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-369">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-370">如果应剪切内容，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-370">
              <see langword="true" /> if the content should be clipped; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-371">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-371">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-372">子元素<xref:System.Windows.UIElement.ClipToBounds%2A>有不同的效果，具体取决于是否的高度和宽度的父元素由所决定的布局行为<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>或<xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="49cbb-372">For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span> <span data-ttu-id="49cbb-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> 无论的值始终遵循的父元素<xref:System.Windows.UIElement.ClipToBounds%2A>和有效剪辑始终将剪切内容内容根据这些最大值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums.</span></span> <span data-ttu-id="49cbb-374">父级<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>设置不会剪裁内容时<xref:System.Windows.UIElement.ClipToBounds%2A>是`false`，但将剪切内容如果<xref:System.Windows.UIElement.ClipToBounds%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-374">The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.</span></span>  
  
 <span data-ttu-id="49cbb-375">请注意，默认为`false`是常规行为，在中实现<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-375">Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="49cbb-376">它是派生自任何给定元素可能<xref:System.Windows.UIElement>重写此属性默认为该实例中的依赖项属性元数据`true`相反。</span><span class="sxs-lookup"><span data-stu-id="49cbb-376">It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead.</span></span> <span data-ttu-id="49cbb-377">多个现有的派生的类重写此元数据和/或调整依赖项属性的默认值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-377">Several existing derived classes override this metadata and/or adjust the dependency property default value.</span></span>  
  
 <span data-ttu-id="49cbb-378"><xref:System.Windows.Controls.InkCanvas><xref:System.Windows.Controls.InkPresenter>，和<xref:System.Windows.Controls.Primitives.Popup>每个重写此默认值为`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-378"><xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.</span></span>  
  
 <span data-ttu-id="49cbb-379"><xref:System.Windows.FrameworkElement> 重写此依赖项属性的元数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-379"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property.</span></span> <span data-ttu-id="49cbb-380">具体而言，<xref:System.Windows.FrameworkElement>指定此属性以允许属性值继承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`元数据中)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-380">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="49cbb-381">在此上下文中的属性值继承意味着，如果有任何其他值的子元素<xref:System.Windows.UIElement.ClipToBounds%2A>通过本地值或样式，最接近的父元素的值与此值分配 （也是在样式，默认情况下分配值，或本地值)，则通过属性系统情况下，从父元素的值将分配给所有未分配的子元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-381">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="49cbb-382">实际上这意味着你可以指定是否允许剪切到边界在根元素中，并且值将传播到所有子元素尚未专门为其分配`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-382">In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-383">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-383">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-384">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-384">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|<span data-ttu-id="49cbb-385">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-385">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-386">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-386">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-387">标识 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-387">Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-388">获取与此元素关联的 <see cref="T:System.Windows.Input.CommandBinding" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-388">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span>
          </span>
          <span data-ttu-id="49cbb-389">
            <see cref="T:System.Windows.Input.CommandBinding" /> 为此元素启用命令处理，并声明命令、命令的事件和由此元素附加的处理程序之间的链接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-389">A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-390">所有 <see cref="T:System.Windows.Input.CommandBinding" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-390">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-391">另一种典型的方法来填充<xref:System.Windows.UIElement.CommandBindings%2A>集合是使用<xref:System.Windows.Input.CommandManager>方法以编程方式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-391">Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="49cbb-392">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="49cbb-392">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="49cbb-393">XAML 值</span><span class="sxs-lookup"><span data-stu-id="49cbb-393">XAML Values</span></span>  
 <span data-ttu-id="49cbb-394">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="49cbb-394">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="49cbb-395">一个或多个<xref:System.Windows.Input.CommandBinding>元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-395">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="49cbb-396">每个都应当有<xref:System.Windows.Input.CommandBinding.Command%2A>属性设置为所知的命令，并且属性设置为<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-396">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="49cbb-397">有关详细信息，请参阅 <xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-397">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-398">下面的示例添加<xref:System.Windows.Input.CommandBinding>窗口使用标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-398">The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup.</span></span> <span data-ttu-id="49cbb-399">请注意，在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、<xref:System.Windows.Input.CommandBindingCollection>未在为一个元素; 的标记中声明的集合对象将该属性接受，类型推断并填充一个或多个具有的属性元素<xref:System.Windows.Input.CommandBinding>元素：</span><span class="sxs-lookup"><span data-stu-id="49cbb-399">Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 <span data-ttu-id="49cbb-400">有关详细信息[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法的集合，请参见[在详细信息的 XAML 语法](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-400">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 <span data-ttu-id="49cbb-401">下面的示例执行的代码中实质上是相同的操作：</span><span class="sxs-lookup"><span data-stu-id="49cbb-401">The following example does essentially the same thing in code:</span></span>  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-402">获取在布局流程的度量传递过程中此元素计算所得的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-402">Gets the size that this element computed during the measure pass of the layout process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-403">计算所得大小，它将成为排列过程所需的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-403">The computed size, which becomes the desired size for the arrange pass.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-404">返回此属性的值才有效的度量值的<xref:System.Windows.UIElement.IsMeasureValid%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-404">The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="49cbb-405"><xref:System.Windows.UIElement.DesiredSize%2A> 通常已选中，因为其中一个度量因素时实现布局行为如覆盖<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>， <xref:System.Windows.FrameworkElement.MeasureOverride%2A>，或<xref:System.Windows.UIElement.OnRender%2A>(在<xref:System.Windows.UIElement.OnRender%2A>种情况下，您可以检查<xref:System.Windows.UIElement.RenderSize%2A>相反，但这取决于你实现）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-405"><xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation).</span></span> <span data-ttu-id="49cbb-406">根据方案，<xref:System.Windows.UIElement.DesiredSize%2A>可能会完全遵循你实现逻辑，约束上<xref:System.Windows.UIElement.DesiredSize%2A>可能会应用，而此类约束也可能更改该父元素或子元素的其他特征。</span><span class="sxs-lookup"><span data-stu-id="49cbb-406">Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</span></span> <span data-ttu-id="49cbb-407">例如，支持可滚动区域 （但选择不从已启用可滚动区域的 WPF 框架级别控件派生） 的控件无法比较可用大小与<xref:System.Windows.UIElement.DesiredSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-407">For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="49cbb-408">然后，该控件可以设置启用中的滚动条的内部状态[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]该控件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-408">The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control.</span></span> <span data-ttu-id="49cbb-409">或者，<xref:System.Windows.UIElement.DesiredSize%2A>可能还在某些方案中被忽略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-409">Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-410">下面的示例演示<xref:System.Windows.UIElement.DesiredSize%2A>作为的一部分<xref:System.Windows.FrameworkElement.MeasureOverride%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-410">The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation.</span></span> <span data-ttu-id="49cbb-411">请注意如何<xref:System.Windows.UIElement.Measure%2A>获取之前调用<xref:System.Windows.UIElement.DesiredSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-411">Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="49cbb-412">这可以确保<xref:System.Windows.UIElement.DesiredSize%2A>保存合法值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-412">This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.</span></span>  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-413">在输入系统报告出现以此元素为拖动目标的基础拖动事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-413">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-414">此事件创建一个别名<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-414">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-415">事件处理程序附加到<xref:System.Windows.UIElement.DragEnter>事件附加到基础<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-415">Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-416">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-417">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-417">Identifier field</span></span>|<xref:System.Windows.UIElement.DragEnterEvent>|  
|<span data-ttu-id="49cbb-418">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-418">Routing strategy</span></span>|<span data-ttu-id="49cbb-419">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-419">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-420">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-420">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-421">对应的隧道事件<xref:System.Windows.UIElement.PreviewDragEnter>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-421">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="49cbb-422">重写<xref:System.Windows.UIElement.OnDragEnter%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-422">Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-423">标识 <see cref="E:System.Windows.UIElement.DragEnter" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-423">Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-424">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-424">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-425">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-425">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-426">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-426">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-427">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-427">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-428">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-428">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-429">在输入系统报告出现以此元素为拖动起点的基础拖动事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-429">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-430">此事件创建一个别名<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-430">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-431">事件处理程序附加到<xref:System.Windows.UIElement.DragLeave>事件附加到基础<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-431">Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-432">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-432">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-433">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-433">Identifier field</span></span>|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|<span data-ttu-id="49cbb-434">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-434">Routing strategy</span></span>|<span data-ttu-id="49cbb-435">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-435">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-436">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-436">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-437">对应的隧道事件<xref:System.Windows.DragDrop.PreviewDragLeave>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-437">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="49cbb-438">重写<xref:System.Windows.UIElement.OnDragLeave%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-438">Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-439">标识 <see cref="E:System.Windows.UIElement.DragLeave" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-439">Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-440">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-440">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-441">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-441">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-442">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-442">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-443">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-443">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-444">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-444">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-445">在输入系统报告出现以此元素为可能放置目标的基础拖动事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-445">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-446">如果即使拖动源自于元素边界，则会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-446">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="49cbb-447">如果拖动的范围之外启动，然后将移动内，也会引发此事件，以及<xref:System.Windows.UIElement.DragEnter>和相关预览事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-447">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="49cbb-448">此事件创建一个别名<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-448">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-449">事件处理程序附加到<xref:System.Windows.UIElement.DragOver>事件附加到基础<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-449">Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-450">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-450">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-451">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-451">Identifier field</span></span>|<xref:System.Windows.UIElement.DragOverEvent>|  
|<span data-ttu-id="49cbb-452">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-452">Routing strategy</span></span>|<span data-ttu-id="49cbb-453">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-453">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-454">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-454">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-455">对应的隧道事件<xref:System.Windows.DragDrop.PreviewDragOver>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-455">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="49cbb-456">重写<xref:System.Windows.UIElement.OnDragOver%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-456">Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-457">标识 <see cref="E:System.Windows.UIElement.DragOver" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-457">Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-458">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-458">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-459">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-459">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-460">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-460">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-461">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-461">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-462">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-462">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-463">在输入系统报告出现将此元素作为放置目标的基础放置事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-463">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-464">此事件创建一个别名<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.Drop?displayProperty=nameWithType>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-464">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-465">事件处理程序附加到<xref:System.Windows.UIElement.Drop>事件附加到基础<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-465">Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-466">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-467">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-467">Identifier field</span></span>|<xref:System.Windows.UIElement.DropEvent>|  
|<span data-ttu-id="49cbb-468">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-468">Routing strategy</span></span>|<span data-ttu-id="49cbb-469">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-469">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-470">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-470">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-471">对应的隧道事件<xref:System.Windows.UIElement.PreviewDrop>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="49cbb-472">重写<xref:System.Windows.UIElement.OnDrop%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-472">Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-473">标识 <see cref="E:System.Windows.UIElement.Drop" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-473">Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-474">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-475">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-476">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-477">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-478">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-479">获取或设置要应用于 <see cref="T:System.Windows.UIElement" /> 的位图效果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-479">Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="49cbb-480">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-480">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-481">一个表示位图效果的 <see cref="T:System.Windows.Media.Effects.Effect" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-481">An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-482">使用<xref:System.Windows.UIElement.Effect%2A>属性，将应用到一个位图效果效果<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-482">Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.</span></span>  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-483">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-483">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-484">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-484">Identifier field</span></span>|<xref:System.Windows.UIElement.EffectProperty>|  
|<span data-ttu-id="49cbb-485">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-485">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-486">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-486">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-487">下面的 XAML 演示如何分配自定义<xref:System.Windows.Media.Effects.ShaderEffect>到<xref:System.Windows.UIElement.Effect%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-487">The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.</span></span>  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-488">标识 <see cref="P:System.Windows.UIElement.Effect" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-488">Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-489">尝试将焦点设定到此元素上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-489">Attempts to set focus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-490">如果键盘焦点和逻辑焦点同时设定到此元素上，则为 <see langword="true" />；如果只有逻辑焦点设定到此元素上或此方法调用未强制更改焦点，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-490">
              <see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-491">可获得焦点，<xref:System.Windows.UIElement.Focusable%2A>和<xref:System.Windows.UIElement.IsEnabled%2A>必须都是`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-491">To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="49cbb-492">即使元素是特定的树中的焦点并已启用，事件处理，（例如，用于复合控件） 可能会响应预览焦点事件通过不允许焦点，因此此方法将返回`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-492">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="49cbb-493">焦点通常由两个不同的概念： 键盘焦点和逻辑焦点，并不总是相同。</span><span class="sxs-lookup"><span data-stu-id="49cbb-493">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span>  <span data-ttu-id="49cbb-494">有关详细信息，请参阅[焦点概述](~/docs/framework/wpf/advanced/focus-overview.md)或[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-494">For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="49cbb-495">如果调用<xref:System.Windows.UIElement.Focus%2A>返回`true`，<xref:System.Windows.UIElement.IsKeyboardFocused%2A>和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>也`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-495">If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="49cbb-496">如果相关的属性不是已`true`，则在调用<xref:System.Windows.UIElement.Focus%2A>，一个或多个以下事件将按照以下顺序引发： <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> （来源为新的焦点目标）， <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>，<xref:System.Windows.UIElement.LostKeyboardFocus>， <xref:System.Windows.UIElement.GotKeyboardFocus> （来源为新的焦点目标）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-496">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="49cbb-497">在此调用会成功，需以前就具有焦点的应用程序中的某些其他元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-497">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-498">下面的示例将焦点设置到<xref:System.Windows.Controls.TextBox>所引用的<xref:System.Windows.FrameworkElement.Name%2A>，然后调整中光标的位置和<xref:System.Windows.Controls.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-498">The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-499">获取或设置一个值，该值指示元素能否得到焦点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-499">Gets or sets a value that indicates whether the element can receive focus.</span>
          </span>
          <span data-ttu-id="49cbb-500">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-500">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-501">如果该元素可获得焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-501">
              <see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-502">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-502">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-503">具有焦点的元素收到键盘输入。</span><span class="sxs-lookup"><span data-stu-id="49cbb-503">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="49cbb-504"><xref:System.Windows.UIElement.Focusable%2A> 是[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]它实际上是依赖项属性的属性访问器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-504"><xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="49cbb-505">此特定的依赖项属性非常普遍地具有派生的元素类，尤其是在控件中以不同方式设置其原本"默认"值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-505">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</span></span> <span data-ttu-id="49cbb-506">这通常发生在两种方式之一：</span><span class="sxs-lookup"><span data-stu-id="49cbb-506">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="49cbb-507">依赖项属性继承的特定派生类中，但该派生类重写依赖项属性的元数据，更改属性默认值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-507">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
-   <span data-ttu-id="49cbb-508">样式或模板应用到元素，从而以不同方式设置的依赖项属性值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-508">A style or template is applied to an element, which sets that dependency property value differently.</span></span>  
  
 <span data-ttu-id="49cbb-509">例如，明显"默认"的<xref:System.Windows.UIElement.Focusable%2A>为<xref:System.Windows.Controls.Button>控件将是`true`，即使<xref:System.Windows.Controls.Button>继承<xref:System.Windows.UIElement.Focusable%2A>作为[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]直接从属性<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-509">For example, the apparent "default" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="49cbb-510">这是因为应用的元数据值，则为<xref:System.Windows.UIElement.Focusable%2A>依赖项属性已被重写中的静态构造函数<xref:System.Windows.Controls.Control>基类，该基类位于之间<xref:System.Windows.Controls.Button>和<xref:System.Windows.UIElement>类层次结构中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-510">This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.</span></span>  
  
 <span data-ttu-id="49cbb-511">当通过继承<xref:System.Windows.Controls.Control>或其派生的类，<xref:System.Windows.Controls.Control>重新定义为此属性的默认值`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-511">When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.</span></span>  
  
 <span data-ttu-id="49cbb-512">当通过继承<xref:System.Windows.Controls.Label>(即<xref:System.Windows.Controls.Control>派生类)，默认值再次重新定义为`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-512">When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-513">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-514">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-514">Identifier field</span></span>|<xref:System.Windows.UIElement.FocusableProperty>|  
|<span data-ttu-id="49cbb-515">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-515">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-516">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-516">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-517">下面的代码示例演示用于特定的自定义控件，设置控件模板<xref:System.Windows.UIElement.Focusable%2A>`false`其中一个模板内的元素上。</span><span class="sxs-lookup"><span data-stu-id="49cbb-517">The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.</span></span>  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-518">从派生时<see cref="T:System.Windows.UIElement" />直接 (而不是从<see cref="T:System.Windows.Controls.Control" />)，应考虑是否希望您可获得焦点，因为默认情况下该元素将不能获得焦点的元素。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-518">When deriving from <see cref="T:System.Windows.UIElement" /> directly (as opposed to from <see cref="T:System.Windows.Controls.Control" />), consider whether you wish your element to be focusable, because by default the element will not be focusable.</span>
            </span>
            <span data-ttu-id="49cbb-519">如果你想使元素可获得焦点，重写此属性类型的静态构造函数中的元数据，如下所示：</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-519">If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</span>
            </span>  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 <span data-ttu-id="49cbb-520">其中<paramref name="myElement" />应该重写元数据值的类型的类名称。</span><span class="sxs-lookup"><span data-stu-id="49cbb-520">where <paramref name="myElement" /> should be the class name of the type that you are overriding the metadata value on.</span></span></para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-521">当 <see cref="P:System.Windows.UIElement.Focusable" /> 属性的值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-521">Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-522">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-522">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-523">标识 <see cref="P:System.Windows.UIElement.Focusable" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-523">Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="49cbb-524">要检查的依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-524">The dependency property to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-525">为此元素上的指定属性返回基属性值，忽略任何可能来自正在运行或已停止的动画的动画值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-525">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-526">就像没有动画被附加到指定的依赖属性一样的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-526">The property value as if no animations are attached to the specified dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-527">如果没有动画被附加到属性，则<xref:System.Windows.UIElement.GetAnimationBaseValue%2A>返回值也始终等于<xref:System.Windows.DependencyObject.GetValue%2A>返回值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-527">If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="49cbb-528">如果没有附加的动画，然后所有可能的动画派生值包括开始和停止值将被忽略，并确定基于所有其他可能的输入属性值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-528">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="49cbb-529">有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-529">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-530">下面的示例实现的处理程序报告的动画的基础价值<xref:System.Windows.FrameworkElement.Width%2A>属性<xref:System.Windows.Controls.Button>，以及转换的基础价值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-530">The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">
          <span data-ttu-id="49cbb-531">元素提供的可用大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-531">The available size provided by the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-532">返回另外一个剪辑几何图形，该图形表示当 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 设置为 <see langword="true" /> 时将被剪辑的区域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-532">Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-533">可能的剪辑几何图形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-533">The potential clipping geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-534">默认实现将返回合法的值，但不使用`layoutSlotSize`其计算中的参数。</span><span class="sxs-lookup"><span data-stu-id="49cbb-534">The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations.</span></span> <span data-ttu-id="49cbb-535">而是使用的值<xref:System.Windows.UIElement.RenderSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-535">Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-536">大体上重写此方法直接派生的<xref:System.Windows.FrameworkElement>类，与<xref:System.Windows.FrameworkElement>替代生成的常规的 WPF 框架级别元素更为复杂的行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-536">This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements.</span></span> <span data-ttu-id="49cbb-537">有关详细信息，请参阅<xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-537">For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-538">在派生类中重写时，如果不存在可视父级，则返回其他[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 父级。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-538">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-539">如果派生类的实现具有要报告的替代父级连接，则为一个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-539">An object, if implementation of a derived class has an alternate parent connection to report.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-540">此方法的默认虚拟实现返回`null`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-540">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="49cbb-541"><xref:System.Windows.FrameworkElement> 提供实际实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-541"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="49cbb-542">备用父级是用于路由事件，在其中元素创建备用父级结构，以便其事件路由偏离到标准的父级的可视化树向上路由的标准模式的方式的情况下或向下预览路由策略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-542">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-543">在输入系统报告出现涉及此元素的基础拖放操作时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-543">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-544"><xref:System.Windows.UIElement.GiveFeedback>事件允许拖动事件，以便为用户可视反馈提供拖放操作期间修改鼠标指针的外观的源。</span><span class="sxs-lookup"><span data-stu-id="49cbb-544">The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="49cbb-545">视觉反馈用于强调拖放操作正在进行。</span><span class="sxs-lookup"><span data-stu-id="49cbb-545">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="49cbb-546">此事件创建一个别名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.GiveFeedback>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-546">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-547">事件处理程序附加到<xref:System.Windows.UIElement.GiveFeedback>事件附加到基础<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-547">Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-548">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-548">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-549">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-549">Identifier field</span></span>|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|<span data-ttu-id="49cbb-550">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-550">Routing strategy</span></span>|<span data-ttu-id="49cbb-551">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-551">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-552">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-552">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="49cbb-553">对应的隧道事件<xref:System.Windows.UIElement.PreviewGiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-553">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="49cbb-554">重写<xref:System.Windows.UIElement.OnGiveFeedback%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-554">Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-555">标识 <see cref="E:System.Windows.UIElement.GiveFeedback" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-555">Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-556">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-556">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-557">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-557">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-558">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-558">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-559">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-559">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-560">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-560">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-561">在此元素获得逻辑焦点时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-561">Occurs when this element gets logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-562">如果有意通过某个方法调用强制焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。</span><span class="sxs-lookup"><span data-stu-id="49cbb-562">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="49cbb-563">在这种情况下，键盘焦点将保持其所在的元素的和其中<xref:System.Windows.UIElement.Focus%2A>调用方法仍获取逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-563">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="49cbb-564">此事件的更精确地解释是它时引发的值<xref:System.Windows.UIElement.IsFocused%2A>路线中的元素的属性更改从`false`到`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-564">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="49cbb-565">由于此事件使用冒泡路由，接收到焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-565">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-566">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际获得焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-566">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-567">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-567">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-568">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-568">Identifier field</span></span>|<xref:System.Windows.UIElement.GotFocusEvent>|  
|<span data-ttu-id="49cbb-569">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-569">Routing strategy</span></span>|<span data-ttu-id="49cbb-570">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-570">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-571">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-571">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="49cbb-572">没有相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-572">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-573">重写<xref:System.Windows.UIElement.OnGotFocus%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-573">Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-574">标识 <see cref="E:System.Windows.UIElement.GotFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-574">Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-575">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-575">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-576">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-576">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-577">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-577">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-578">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-578">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-579">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-579">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-580">在此元素聚焦于键盘时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-580">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-581"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 是一个类似事件，跟踪中维护的一个元素; 的焦点状态的属性的状态更改<xref:System.Windows.UIElement.GotKeyboardFocus>在很多相同的情况下引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-581"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="49cbb-582">由于此事件使用冒泡路由，具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-582">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-583">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际具有焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-583">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="49cbb-584">此事件创建一个别名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.GotKeyboardFocus>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-584">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-585">事件处理程序附加到<xref:System.Windows.UIElement.GotKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-585">Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-586">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-586">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-587">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-587">Identifier field</span></span>|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="49cbb-588">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-588">Routing strategy</span></span>|<span data-ttu-id="49cbb-589">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-589">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-590">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-590">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="49cbb-591">对应的隧道事件<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-591">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="49cbb-592">重写<xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-592">Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-593">标识 <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-593">Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-594">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-594">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-595">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-595">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-596">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-596">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-597">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-597">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-598">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-598">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-599">在此元素捕获鼠标时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-599">Occurs when this element captures the mouse.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-600">在元素捕获鼠标，它会接收鼠标输入，即使在鼠标指针位于超出界限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-600">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="49cbb-601">鼠标通常仅在拖放操作期间捕获，并且将保持捕获，直到发生拖放操作。</span><span class="sxs-lookup"><span data-stu-id="49cbb-601">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="49cbb-602">由于此事件使用冒泡路由，具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-602">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-603">检查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件数据以确定实际的元素具有鼠标捕获。</span><span class="sxs-lookup"><span data-stu-id="49cbb-603">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="49cbb-604">此事件创建一个别名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.GotMouseCapture>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-604">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-605">事件处理程序附加到<xref:System.Windows.UIElement.GotMouseCapture>事件附加到基础<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-605">Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-606">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-606">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-607">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-607">Identifier field</span></span>|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="49cbb-608">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-608">Routing strategy</span></span>|<span data-ttu-id="49cbb-609">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-609">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-610">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-610">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="49cbb-611">没有定义相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-611">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-612">重写<xref:System.Windows.UIElement.OnGotMouseCapture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-612">Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-613">标识 <see cref="E:System.Windows.UIElement.GotMouseCapture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-613">Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-614">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-614">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-615">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-615">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-616">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-616">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-617">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-617">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-618">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-618">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-619">在此元素捕获触笔时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-619">Occurs when this element captures the stylus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-620">当元素捕获触笔时，它会接收触笔输入，即使在指针位于超出界限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-620">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="49cbb-621">触笔通常仅在拖放操作期间捕获和捕获之前发生拖放操作的状态将保持。</span><span class="sxs-lookup"><span data-stu-id="49cbb-621">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="49cbb-622">由于此事件使用冒泡路由，具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-622">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-623">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定已捕获的实际元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-623">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="49cbb-624">此事件创建此类的附加事件的别名，以便<xref:System.Windows.UIElement.GotStylusCapture>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-624">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-625">事件处理程序附加到<xref:System.Windows.UIElement.GotStylusCapture>事件附加到基础<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-625">Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-626">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-626">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-627">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-627">Identifier field</span></span>|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="49cbb-628">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-628">Routing strategy</span></span>|<span data-ttu-id="49cbb-629">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-629">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-630">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-630">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-631">没有定义相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-631">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-632">重写<xref:System.Windows.UIElement.OnGotStylusCapture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-632">Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-633">标识 <see cref="E:System.Windows.UIElement.GotStylusCapture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-633">Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-634">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-634">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-635">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-635">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-636">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-636">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-637">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-637">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-638">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-638">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-639">在此元素上捕获触摸屏输入时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-639">Occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-640">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-640">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-641">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-641">Identifier field</span></span>|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="49cbb-642">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-642">Routing strategy</span></span>|<span data-ttu-id="49cbb-643">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-643">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-644">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-644">Delegate</span></span>|<span data-ttu-id="49cbb-645"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-645"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-646">重写<xref:System.Windows.UIElement.OnGotTouchCapture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-646">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-647">标识 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-647">Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-648">获取一个值，该值指示此元素是否具有任何进行动画处理的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-648">Gets a value indicating whether this element has any animated properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-649">如果此元素具有附加到其任何属性的动画，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-649">
              <see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-650">此属性返回`true`为永久性 （无时间限制，始终运行） 动画，或具有特定的时间线的动画。</span><span class="sxs-lookup"><span data-stu-id="49cbb-650">This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-651">获取一个值，该值指示 <see cref="T:System.Windows.UIElement" /> 是否具有焦点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-651">Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-652">如果 <see cref="T:System.Windows.UIElement" /> 具有焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-652">
              <see langword="true" /> if the <see cref="T:System.Windows.UIElement" /> has focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-653">子类可以重写此属性指定当此元素具有键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-653">Subclasses can override this property to specify when the element has keyboard focus.</span></span>  <span data-ttu-id="49cbb-654">这是有用时你<xref:System.Windows.UIElement>包含可将键盘焦点的元素，并且你希望你报告其具有焦点的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-654">This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-655">实现 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> 以提供基元素命中测试行为。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-655">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">
          <span data-ttu-id="49cbb-656">描述要执行的命中测试，包括初始命中点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-656">Describes the hit test to perform, including the initial hit point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-657">实现 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> 以提供基元素命中测试行为（返回 <see cref="T:System.Windows.Media.GeometryHitTestResult" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-657">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-658">测试结果，包括计算的几何图形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-658">Results of the test, including the evaluated geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-659">请参阅原始虚拟方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>信息进一步重写此方法在派生类的。</span><span class="sxs-lookup"><span data-stu-id="49cbb-659">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="49cbb-660">请注意，几个特定控件 (<xref:System.Windows.Controls.TextBlock>，例如) 是否具有不同的实现，重写此。</span><span class="sxs-lookup"><span data-stu-id="49cbb-660">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.</span></span>  
  
 <span data-ttu-id="49cbb-661">此方法不应从你的应用程序代码中调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-661">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="49cbb-662">此方法支持内部 （鼠标指针是否为通过元素，例如） 公开的输入的系统的各个方面的命中测试行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-662">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">
          <span data-ttu-id="49cbb-663">描述要执行的命中测试，包括初始命中点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-663">Describes the hit test to perform, including the initial hit point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-664">实现 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> 以提供基元素命中测试行为（返回 <see cref="T:System.Windows.Media.HitTestResult" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-664">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-665">包括计算的点的测试结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-665">Results of the test, including the evaluated point.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-666">请参阅原始虚拟方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>信息进一步重写此方法在派生类的。</span><span class="sxs-lookup"><span data-stu-id="49cbb-666">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="49cbb-667">请注意，几个特定控件 (<xref:System.Windows.Controls.TextBlock>，例如) 是否具有不同的实现，重写<xref:System.Windows.UIElement.HitTestCore%2A>由定义<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-667">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-668">此方法不应从你的应用程序代码中调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-668">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="49cbb-669">此方法支持内部 （鼠标指针是否为通过元素，例如） 公开的输入的系统的各个方面的命中测试行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-669">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-670">获取与此元素关联的输入绑定的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-670">Gets the collection of input bindings associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-671">输入绑定的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-671">The collection of input bindings.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-672">输入的绑定支持命令来输入设备的绑定。</span><span class="sxs-lookup"><span data-stu-id="49cbb-672">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="49cbb-673">例如，<xref:System.Windows.Input.MouseBinding>实现的输入包括特定于鼠标设备的属性的绑定。</span><span class="sxs-lookup"><span data-stu-id="49cbb-673">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="49cbb-674">适用于类型的输入的绑定以及输入声明的实例的绑定，将包括的输入绑定的集合。</span><span class="sxs-lookup"><span data-stu-id="49cbb-674">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="49cbb-675">相关的属性， <xref:System.Windows.UIElement.CommandBindings%2A>，保持命令绑定的集合。</span><span class="sxs-lookup"><span data-stu-id="49cbb-675">A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="49cbb-676">这些不同于输入绑定，因为它们表示下一个级别的命令处理的操作依赖于已知的命令。</span><span class="sxs-lookup"><span data-stu-id="49cbb-676">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="49cbb-677">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="49cbb-677">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="49cbb-678">XAML 值</span><span class="sxs-lookup"><span data-stu-id="49cbb-678">XAML Values</span></span>  
 <span data-ttu-id="49cbb-679">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="49cbb-679">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="49cbb-680">一个或多个<xref:System.Windows.Input.InputBinding>元素 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>派生类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-680">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="49cbb-681">其中每个都应<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>属性设置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-681">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-682">下面的示例填充此属性上<xref:System.Windows.Window>，与单个<xref:System.Windows.Input.KeyBinding>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-682">The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.</span></span>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="49cbb-683">有关详细信息[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法的集合，请参见[在详细信息的 XAML 语法](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-683">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="49cbb-684">此元素中的偏移坐标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-684">The offset coordinates within this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-685">返回指定坐标上的当前元素中的输入元素（相对于当前元素的源）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-685">Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-686">位于指定位置的子元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-686">The element child that is located at the given position.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-687"><xref:System.Windows.IInputElement> 返回作为返回类型，因为该类型是一个通用界面执行同时<xref:System.Windows.UIElement>和<xref:System.Windows.ContentElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-687"><xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="49cbb-688">然后，可以相应地，强制转换返回类型或接口实例用于定义的某些成员<xref:System.Windows.IInputElement>接口。</span><span class="sxs-lookup"><span data-stu-id="49cbb-688">You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.</span></span>  
  
 <span data-ttu-id="49cbb-689">应用程序代码中通常不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-689">This method typically is not called from your application code.</span></span> <span data-ttu-id="49cbb-690">调用此方法仅是如果你想要重新实现大量的较低级别的输入功能已提供，如重新创建鼠标设备逻辑的适当的。</span><span class="sxs-lookup"><span data-stu-id="49cbb-690">Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</span></span>  
  
 <span data-ttu-id="49cbb-691"><xref:System.Windows.IContentHost> 协定<xref:System.Windows.IContentHost.InputHitTest%2A>具有相同签名，某些元素选择以显式实现的方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-691"><xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-692">使元素排列状态（布局）无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-692">Invalidates the arrange state (layout) for the element.</span>
          </span>
          <span data-ttu-id="49cbb-693">使其无效后，将会更新元素的布局，除非随后被 <see cref="M:System.Windows.UIElement.UpdateLayout" /> 强制执行，否则该更新将会异步发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-693">After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-694">频繁调用<xref:System.Windows.UIElement.InvalidateArrange%2A>或在特定于<xref:System.Windows.UIElement.UpdateLayout%2A>具有显著的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="49cbb-694">Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="49cbb-695">因此，避免调用此方法，除非绝对需要精确布局状态以便后续调用其他[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]在代码中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-695">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span> <span data-ttu-id="49cbb-696">高级的方案中可能会在其中调用<xref:System.Windows.UIElement.InvalidateArrange%2A>是如果您创建<xref:System.Windows.PropertyChangedCallback>用于不在的依赖项属性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>派生时，它将更改仍然影响布局的排列处理的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-696">An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-697">使元素度量状态（布局）无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-697">Invalidates the measurement state (layout) for the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-698">调用此方法还调用<xref:System.Windows.UIElement.InvalidateArrange%2A>内部，没有无需调用<xref:System.Windows.UIElement.InvalidateMeasure%2A>和<xref:System.Windows.UIElement.InvalidateArrange%2A>连续。</span><span class="sxs-lookup"><span data-stu-id="49cbb-698">Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession.</span></span> <span data-ttu-id="49cbb-699">使无效后，该元素将更新，则会出现以异步方式，除非其布局<xref:System.Windows.UIElement.UpdateLayout%2A>调用以强制进行同步的布局更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-699">After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.</span></span>  
  
 <span data-ttu-id="49cbb-700">WPF 框架级别布局系统进行的更改在可视化树中的元素，其自己处理和在最常见布局失效的情况下该布局系统时调用此方法在必要时等效。</span><span class="sxs-lookup"><span data-stu-id="49cbb-700">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</span></span> <span data-ttu-id="49cbb-701">如果你生成完整的布局实现，直接操作元素树中，或类似高级方案，仅应调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-701">You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</span></span> <span data-ttu-id="49cbb-702">其中一种高级的方案是如果您创建<xref:System.Windows.PropertyChangedCallback>用于不在的依赖项属性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>派生类时，它将更改仍然影响布局的测量过程。</span><span class="sxs-lookup"><span data-stu-id="49cbb-702">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.</span></span>  
  
 <span data-ttu-id="49cbb-703">频繁调用<xref:System.Windows.UIElement.InvalidateMeasure%2A>或在特定于<xref:System.Windows.UIElement.UpdateLayout%2A>具有显著的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="49cbb-703">Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="49cbb-704">因此，避免调用此方法，除非绝对需要精确布局状态以便后续调用其他[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]在代码中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-704">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-705">使元素的呈现失效，并强制执行完整的新布局处理过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-705">Invalidates the rendering of the element, and forces a complete new layout pass.</span>
          </span>
          <span data-ttu-id="49cbb-706">布局循环完成后，调用 <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-706">
              <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-707">此方法调用<xref:System.Windows.UIElement.InvalidateArrange%2A>内部。</span><span class="sxs-lookup"><span data-stu-id="49cbb-707">This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.</span></span>  
  
 <span data-ttu-id="49cbb-708">通常从你的应用程序代码不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-708">This method is not generally called from your application code.</span></span> <span data-ttu-id="49cbb-709">WPF 框架级别布局系统进行的更改在可视化树中的元素，其自己处理，并会在必要时此方法等效于在调用已。</span><span class="sxs-lookup"><span data-stu-id="49cbb-709">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</span></span> <span data-ttu-id="49cbb-710">调用此方法是仅适用于高级方案必需的。</span><span class="sxs-lookup"><span data-stu-id="49cbb-710">Calling this method is necessary only for advanced scenarios.</span></span> <span data-ttu-id="49cbb-711">其中一种高级的方案是如果您创建<xref:System.Windows.PropertyChangedCallback>用于不在的依赖项属性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>派生时，它将更改仍然影响布局的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-711">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-712">获取一个值，该值指示此元素布局中的子元素的计算大小和位置是否有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-712">Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-713">如果布局的大小和位置都有效，则为 <see langword="true" />，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-713">
              <see langword="true" /> if the size and position of layout are valid; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-714">你可以强制排列方式，可以通过调用失效<xref:System.Windows.UIElement.InvalidateArrange%2A>对此元素 （或其父级）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-714">You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents).</span></span> <span data-ttu-id="49cbb-715">在布局系统确定如次时，此标志重新组合的布局。</span><span class="sxs-lookup"><span data-stu-id="49cbb-715">This flags the layout for recomposition at such time as the layout system determines.</span></span> <span data-ttu-id="49cbb-716">或者，直接调用到<xref:System.Windows.UIElement.UpdateLayout%2A>无法进行，但这只应该在确定，没有其他挂起的挂起 （大量不必要的强制更新具有性能产生负面影响）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-716">Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</span></span>  
  
 <span data-ttu-id="49cbb-717"><xref:System.Windows.UIElement.IsArrangeValid%2A> 不能为`true`除非<xref:System.Windows.UIElement.IsMeasureValid%2A>也`true`（在布局过程中，排列方式不能有效而无需首先被有效的度量）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-717"><xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-718">获取或设置一个值，该值指示是否在[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中启用了此元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-718">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="49cbb-719">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-719">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-720">如果启用了该元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-720">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-721">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-721">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-722">请注意，此属性会影响的类特定于实现<xref:System.Windows.UIElement.IsEnabledCore%2A>对于特定的元素，通常在运行时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-722">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="49cbb-723">因此，此处列出的默认值有时不是有效。</span><span class="sxs-lookup"><span data-stu-id="49cbb-723">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="49cbb-724">例如，<xref:System.Windows.Controls.Primitives.ScrollBar>将<xref:System.Windows.UIElement.IsEnabled%2A>`false`每当确定是否有不需要支持滚动条。</span><span class="sxs-lookup"><span data-stu-id="49cbb-724">For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar.</span></span> <span data-ttu-id="49cbb-725">正在尝试设置此值将也有可能被替代返回的值<xref:System.Windows.UIElement.IsEnabledCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-725">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-726">未启用的元素不参与命中测试或获得焦点，并因此将不会输入事件的源。</span><span class="sxs-lookup"><span data-stu-id="49cbb-726">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-727">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-727">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-728">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-728">Identifier field</span></span>|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|<span data-ttu-id="49cbb-729">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-729">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-730">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-730">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-731">下面的示例演示一个处理程序，一个按钮上，执行的将设置时<xref:System.Windows.UIElement.IsEnabled%2A>`false`上另一个命名按钮`b1`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-731">The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.</span></span>  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-732">在此元素的 <see cref="P:System.Windows.UIElement.IsEnabled" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-732">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-733">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-733">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-734">获取一个值，该值成为派生类中 <see cref="P:System.Windows.UIElement.IsEnabled" /> 的返回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-734">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-735">如果启用了该元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-735">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-736">此属性的默认实现缓存的值，并还计算是否启用此元素的父元素。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-736">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span>
            </span>
            <span data-ttu-id="49cbb-737">(如果未启用父，子元素不能有效地启用中实际[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。)如果你选择重写此实现，请确保调用基实现来保留此行为。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-737">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span>
            </span>
            <span data-ttu-id="49cbb-738">
              <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />类提供了此属性的现有重写实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-738">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class provides an existing override implementation of this property.</span>
            </span>
            <span data-ttu-id="49cbb-739">此替代确定内容呈现区域中的内容是否超出了可用的区域。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-739">This override determines whether the content inside the content presentation area exceeds the available area.</span>
            </span>
            <span data-ttu-id="49cbb-740">如果内容超出区域，则启用的滚动条部分。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-740">If the content does exceed the area, the scrollbar portion is enabled.</span>
            </span>
            <span data-ttu-id="49cbb-741">否则，不启用滚动条。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-741">Otherwise, the scrollbar is not enabled.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-742">标识 <see cref="P:System.Windows.UIElement.IsEnabled" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-742">Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-743">获取一个值，该值确定此元素是否具有逻辑焦点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-743">Gets a value that determines whether this element has logical focus.</span>
          </span>
          <span data-ttu-id="49cbb-744">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-744">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-745">如果此元素具有逻辑焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-745">
              <see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-746">如果应用程序中有多个焦点分支，例如，菜单的内容和应用程序的其余部分之间，逻辑焦点将与键盘焦点可能会与不同。</span><span class="sxs-lookup"><span data-stu-id="49cbb-746">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="49cbb-747">在此方案中，键盘焦点仅可在应用程序 UI 的一个元素，但是，其他焦点分支中的某些元素仍可能保留逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-747">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="49cbb-748">有关逻辑焦点的详细信息，请参阅[焦点概述](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-748">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="49cbb-749">通过设置此属性 （它是只读的） 未设置焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-749">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="49cbb-750">此属性的典型用途是将其用作依赖项属性的<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-750">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="49cbb-751">若要以编程方式设置焦点，请调用<xref:System.Windows.UIElement.Focus%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-751">To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>.</span></span> <span data-ttu-id="49cbb-752">由用户操作或控件实现，其中可能包括鼠标捕获行为，则还可以设置焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-752">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-753">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-753">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-754">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-754">Identifier field</span></span>|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|<span data-ttu-id="49cbb-755">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-755">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-756">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-756">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-757">下面的示例是当它已设定焦点时，更改控件的背景的代码处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-757">The following example is a code handler that changes the background of a control when it is focused.</span></span>  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 <span data-ttu-id="49cbb-758">另一种常见的方法来实现此相同的效果是将<xref:System.Windows.Trigger>中<xref:System.Windows.Style>的控件，则此方法不需要处理与隐藏代码的特定事件，并允许更大的交互式和图形性质访问的设计器[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="49cbb-758">Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="49cbb-759">有关示例，请参阅[如何： 创建外部的发光效果](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-759">For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-760">标识 <see cref="P:System.Windows.UIElement.IsFocused" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-760">Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-761">获取或设置一个值，该值声明是否可以返回此元素作为其呈现内容的某些部分的点击测试结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-761">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span>
          </span>
          <span data-ttu-id="49cbb-762">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-762">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-763">如果此元素可以从至少一个点上作为命中测试结果返回，则为 <see langword="true" />，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-763">
              <see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-764">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-764">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-765">此属性的有效值受命中可测试的元素的逻辑树中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-765">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="49cbb-766">例如，如果一个元素的子元素的元素将是不会命中测试可见，对子属性的有效值将保持`false`，即使尝试本地设置该值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-766">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="49cbb-767">为此，务必不要设置<xref:System.Windows.UIElement.IsHitTestVisible%2A>到`false`复合控件除非你不需要任何输入或命中测试该控件上。</span><span class="sxs-lookup"><span data-stu-id="49cbb-767">For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="49cbb-768">有关命中测试的详细信息，请参阅[可视化层中的命中测试](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-768">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-769">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-769">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-770">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-770">Identifier field</span></span>|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|<span data-ttu-id="49cbb-771">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-771">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-772">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-772">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-773">在此元素的 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依赖项属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-773">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-774">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-774">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-775">标识 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-775">Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-776">获取一个值，该值指示是否启用一个输入法系统（如[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]），以便用于处理此元素的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-776">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-777">如果输入法处于活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-777">
              <see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-778">基础附加属性的默认值是<see langword="true;" />但是，这会受到输入法在运行时的实际状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-778">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-779">此属性返回的附加属性返回的值<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType>的当前已启用输入法 （键盘、 语音和其他输入的设备）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-779">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-780">获取一个值，该值表示该元素是否具有键盘焦点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-780">Gets a value indicating whether this element has keyboard focus.</span>
          </span>
          <span data-ttu-id="49cbb-781">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-781">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-782">如果此元素具有键盘焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-782">
              <see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-783">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-783">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-784">更改此属性的确定值可能伴随与焦点相关的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-784">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="49cbb-785"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>通常用于在类事件处理程序内其他输入相关的事件，例如以确定此元素已具有键盘焦点，还是进行确定当鼠标事件和键盘事件一起出现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-785"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-786">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-786">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-787">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-787">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="49cbb-788">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-788">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-789">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-789">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-790">在此元素的 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-790">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-791">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-791">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-792">标识 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-792">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-793">获取一个值，该值指示键盘焦点是否位于元素或其可视化树子元素内的任意位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-793">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span>
          </span>
          <span data-ttu-id="49cbb-794">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-794">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-795">如果键盘焦点在元素或其子元素上，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-795">
              <see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-796">更改此属性的值通常引发<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件，除非派生的类已重写<xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>以禁止此事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-796">Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="49cbb-797">不能直接，设置此属性，但你可以通过调用将焦点设置到的元素<xref:System.Windows.UIElement.Focus%2A>，或通过使<xref:System.Windows.UIElement.MoveFocus%2A>请求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-797">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="49cbb-798">这些方法调用任一可能会更改此属性的值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-798">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="49cbb-799"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>通常用于在类事件处理程序内其他输入相关的事件，例如以确定此元素已具有键盘焦点，还是进行确定当鼠标事件和键盘事件一起出现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-799"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-800">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-800">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-801">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-801">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="49cbb-802">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-802">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-803">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-803">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-804">在此元素的 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-804">Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-805">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-805">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-806">标识 <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-806">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-807">获取或设置一个值，该值指示是否对此 <see cref="T:System.Windows.UIElement" /> 启用操作事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-807">Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-808">如果对此 <see cref="T:System.Windows.UIElement" /> 启用操作事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-808">
              <see langword="true" /> if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-809">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-809">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-810">设置此属性设置为 true，如果你想<xref:System.Windows.UIElement>接收<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationStarted>， <xref:System.Windows.UIElement.ManipulationDelta>， <xref:System.Windows.UIElement.ManipulationInertiaStarting>， <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>，和<xref:System.Windows.UIElement.ManipulationCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-810">Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events.</span></span> <span data-ttu-id="49cbb-811">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-811">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="49cbb-812">响应操作的应用程序的示例，请参阅[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-812">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-813">下面的示例创建具有红色矩形的应用程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-813">The following example creates an application that has a red Rectangle.</span></span>  <span data-ttu-id="49cbb-814"><xref:System.Windows.UIElement.IsManipulationEnabled%2A>的矩形的属性设置为 true，应用程序的窗口订阅<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationDelta>，和<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-814">The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events.</span></span> <span data-ttu-id="49cbb-815">此示例摘自在更大的示例[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-815">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-816">标识 <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-816">Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-817">获取一个值，该值指示布局测量返回的当前大小是否有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-817">Gets a value indicating whether the current size returned by layout measure is valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-818">如果布局的测量处理过程返回一个有效的当前值，则为 <see langword="true" />，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-818">
              <see langword="true" /> if the measure pass of layout returned a valid and current value; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-819">你可以强制测量和排列可以通过调用失效<xref:System.Windows.UIElement.InvalidateMeasure%2A>对此元素 （或上的可视化树的任何父元素）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-819">You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree).</span></span> <span data-ttu-id="49cbb-820">这将指定以进行重新组合布局以异步方式发生由布局系统一次。</span><span class="sxs-lookup"><span data-stu-id="49cbb-820">This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</span></span> <span data-ttu-id="49cbb-821">或者，你可以进行直接调用<xref:System.Windows.UIElement.UpdateLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-821">Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>.</span></span> <span data-ttu-id="49cbb-822">但是，你应只调用<xref:System.Windows.UIElement.UpdateLayout%2A>如果则很可能，没有其他挂起的挂起 （大量不必要的强制更新将产生性能后果）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-822">However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</span></span>  
  
 <span data-ttu-id="49cbb-823">如果<xref:System.Windows.UIElement.IsMeasureValid%2A>是`false`，<xref:System.Windows.UIElement.IsArrangeValid%2A>还必须是`false`（由在布局流程的强制执行逻辑，排列方式不能有效而无需首先被有效的度量）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-823">If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-824">获取一个值，该值指示此元素是否捕获了鼠标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-824">Gets a value indicating whether the mouse is captured to this element.</span>
          </span>
          <span data-ttu-id="49cbb-825">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-825">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-826">如果元素具有鼠标捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-826">
              <see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-827">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-827">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-828">鼠标捕获状态与相关进程内拖放操作。</span><span class="sxs-lookup"><span data-stu-id="49cbb-828">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-829">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-829">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-830">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-830">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="49cbb-831">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-831">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-832">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-832">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-833">下面的示例打开鼠标捕获状态或关闭基于元素是否已捕获鼠标。</span><span class="sxs-lookup"><span data-stu-id="49cbb-833">The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</span></span>  
  
 <span data-ttu-id="49cbb-834">如果鼠标捕获是在其他位置，鼠标捕获设置为该元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-834">If mouse capture is elsewhere, the mouse capture is set to that element.</span></span> <span data-ttu-id="49cbb-835">如果元素具有鼠标捕获，它通过调用清除<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>使用 null 输入。</span><span class="sxs-lookup"><span data-stu-id="49cbb-835">If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with a null input.</span></span>  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-836">在此元素的 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-836">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-837">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-837">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-838">标识 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-838">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-839">获取一个值，该值确定鼠标捕获是由此元素还是其可视化树中的子元素持有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-839">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span>
          </span>
          <span data-ttu-id="49cbb-840">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-840">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-841">如果此元素或其包含的元素具有鼠标捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-841">
              <see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-842">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-842">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-843">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-843">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="49cbb-844">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-844">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-845">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-845">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-846">在此元素的 <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> 值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-846">Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-847">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-847">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-848">标识 <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-848">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-849">获取一个值，该值指示在考虑元素组合的情况下，鼠标指针的位置是否与命中测试结果相对应。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-849">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span>
          </span>
          <span data-ttu-id="49cbb-850">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-850">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-851">
            <see langword="true" /> 如果鼠标指针位于与命中测试; 相同的元素结果否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-851">
              <see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-852">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-852">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-853">与不同<xref:System.Windows.UIElement.IsMouseOver%2A>，此属性才`true`如果鼠标指针位于 literal 元素-按原样命中测试。</span><span class="sxs-lookup"><span data-stu-id="49cbb-853">Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test.</span></span> <span data-ttu-id="49cbb-854">而如果鼠标指针悬停在子元素上，具体而言，鼠标指针所包含的元素的更深层的模板和合成，元素，此属性将为`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-854">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="49cbb-855">除非你知道如何控件的组合 （例如，你使用此属性在自定义控件模板中的控件，你定义），此属性可能会返回意外的结果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-855">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="49cbb-856">对于大多数情况下不创作控件的情况，使用<xref:System.Windows.UIElement.IsMouseOver%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="49cbb-856">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="49cbb-857">如果此元素是否捕获了鼠标，并且此属性是`true`在捕获时，此属性将继续返回`true`丢失鼠标捕获并且鼠标指针不位于其边界之前。</span><span class="sxs-lookup"><span data-stu-id="49cbb-857">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-858">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-858">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-859">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-859">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="49cbb-860">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-860">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-861">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-861">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-862">在此元素的 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-862">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-863">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-863">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-864">标识 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-864">Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-865">获取一个值，该值指示鼠标指针是否位于此元素（包括可视化树中的子元素）的上方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-865">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span>
          </span>
          <span data-ttu-id="49cbb-866">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-866">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-867">如果鼠标指针悬停于此元素或其子元素上，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-867">
              <see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-868">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-868">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-869">通常情况下，控件都是复合，以便控件 （可视树） 中的各种元素都将报告包含控件的鼠标状态。</span><span class="sxs-lookup"><span data-stu-id="49cbb-869">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="49cbb-870">例如，<xref:System.Windows.Controls.ListBox>样式控件将报告<xref:System.Windows.UIElement.IsMouseOver%2A>作为`true`如果鼠标位于其几何图形，包括任何<xref:System.Windows.Controls.ListBoxItem>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-870">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="49cbb-871">尽管类似"等效于"事件不存在，将执行多个类似事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-871">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="49cbb-872">例如，你可以处理<xref:System.Windows.UIElement.MouseEnter>， <xref:System.Windows.UIElement.MouseMove>，和<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-872">For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="49cbb-873">如果此元素捕获鼠标，则此属性保持`true`丢失鼠标捕获并且鼠标指针离开元素边界之前。</span><span class="sxs-lookup"><span data-stu-id="49cbb-873">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="49cbb-874">某些控件有意捕获鼠标似乎未直接涉及鼠标某些操作。</span><span class="sxs-lookup"><span data-stu-id="49cbb-874">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="49cbb-875">这可能会导致<xref:System.Windows.UIElement.IsMouseOver%2A>正在`true`即使看似未移动鼠标。</span><span class="sxs-lookup"><span data-stu-id="49cbb-875">This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-876">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-876">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-877">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-877">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|<span data-ttu-id="49cbb-878">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-878">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-879">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-879">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-880">下面的示例引用此属性的属性类型作为<xref:System.Windows.Trigger>的\<Style.Triggers > 块。</span><span class="sxs-lookup"><span data-stu-id="49cbb-880">The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \<Style.Triggers> block.</span></span> <span data-ttu-id="49cbb-881">如果鼠标位于控件上方，控件文本将变为蓝色，光标变成手的形状。</span><span class="sxs-lookup"><span data-stu-id="49cbb-881">If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</span></span>  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-882">标识 <see cref="P:System.Windows.UIElement.IsMouseOver" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-882">Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-883">获取一个值，该值表示此元素是否捕获了触笔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-883">Gets a value indicating whether the stylus is captured by this element.</span>
          </span>
          <span data-ttu-id="49cbb-884">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-884">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-885">如果元素具有触笔捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-885">
              <see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-886">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-886">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-887">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-887">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-888">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-888">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-889">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-889">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-890">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-890">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="49cbb-891">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-891">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-892">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-892">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-893">在此元素的 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-893">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-894">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-894">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-895">标识 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-895">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-896">获取一个值，该值确定触笔捕获是由此元素还是由元素边界内的元素及其可视化树持有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-896">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span>
          </span>
          <span data-ttu-id="49cbb-897">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-897">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-898">如果此元素或其包含的元素具有触笔捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-898">
              <see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-899">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-899">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-900">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-900">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-901">有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)和[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-901">For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-902">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-902">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-903">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-903">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="49cbb-904">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-904">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-905">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-905">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-906">在此元素的 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-906">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-907">这是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-907">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-908">标识 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-908">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-909">获取一个值，该值指示在考虑元素组合的情况下，触笔的位置是否与命中测试结果相对应。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-909">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span>
          </span>
          <span data-ttu-id="49cbb-910">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-910">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-911">如果触笔指针与命中测试位于同一元素结果上，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-911">
              <see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-912">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-912">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-913">与不同<xref:System.Windows.UIElement.IsStylusOver%2A>，此属性才`true`如果触笔位于元素上。</span><span class="sxs-lookup"><span data-stu-id="49cbb-913">Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="49cbb-914">如果触笔改为子元素或元素上方的元素的更深入地组合 （可视树） 的一部分，此属性将`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-914">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="49cbb-915">除非你知道如何控件的组合 （例如，你使用此属性在自定义控件模板中的控件，你定义），此属性可能会返回意外的结果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-915">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="49cbb-916">对于大多数情况下不创作控件的情况，使用<xref:System.Windows.UIElement.IsStylusOver%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="49cbb-916">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="49cbb-917">如果此元素具有触笔捕获，并且此属性为`true`捕获时，此属性将保持`true`丢失触笔捕获并且触笔不到其边界之前。</span><span class="sxs-lookup"><span data-stu-id="49cbb-917">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="49cbb-918">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-918">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-919">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-919">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-920">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-920">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-921">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-921">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="49cbb-922">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-922">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-923">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-923">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-924">在此元素的 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-924">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-925">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-925">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-926">标识 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-926">Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-927">获取一个值，该值指示触笔指针是否位于此元素（包括可视化子元素）的上方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-927">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span>
          </span>
          <span data-ttu-id="49cbb-928">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-928">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-929">如果触笔光标位于此元素或其子元素上，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-929">
              <see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-930">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-930">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-931">如果此元素具有触笔捕获，此属性将继续返回`true`直到触笔捕获为丢失，指针超出界限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-931">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="49cbb-932">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-932">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-933">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-933">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-934">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-934">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-935">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-935">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|<span data-ttu-id="49cbb-936">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-936">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-937">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-937">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-938">标识 <see cref="P:System.Windows.UIElement.IsStylusOver" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-938">Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-939">获取一个值，该值指示此元素在[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中是否可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-939">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="49cbb-940">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-940">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-941">如果该元素可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-941">
              <see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-942">确定<xref:System.Windows.UIElement.IsVisible%2A>值将布局的所有因素考虑在内。</span><span class="sxs-lookup"><span data-stu-id="49cbb-942">Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account.</span></span> <span data-ttu-id="49cbb-943">与此相反， <xref:System.Windows.UIElement.Visibility%2A>，这是可设置属性，仅表示想要以编程方式使元素可见或不可见。</span><span class="sxs-lookup"><span data-stu-id="49cbb-943">In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="49cbb-944">元素其中<xref:System.Windows.UIElement.IsVisible%2A>是`false`不参与输入的事件 （或命令），请执行不影响的测量或排列布局，不可获得焦点，不在 tab 键序列中，并且将不会报告中的命中测试。</span><span class="sxs-lookup"><span data-stu-id="49cbb-944">Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="49cbb-945">相反，元素其中<xref:System.Windows.UIElement.IsEnabled%2A>是`false`仍将参与事件或命令，以及命中测试，但不还可获得焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-945">In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-946">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-946">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-947">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-947">Identifier field</span></span>|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|<span data-ttu-id="49cbb-948">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-948">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-949">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-949">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-950">在此元素的 <see cref="P:System.Windows.UIElement.IsVisible" /> 属性值更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-950">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-951">如果元素不呈现为以外的值的原因的布局系统，则不会引发此事件<xref:System.Windows.UIElement.IsVisible%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-951">This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property.</span></span> <span data-ttu-id="49cbb-952">例如，元素可能没有关联的可视。</span><span class="sxs-lookup"><span data-stu-id="49cbb-952">For example, the element might not have an associated visual.</span></span>  
  
 <span data-ttu-id="49cbb-953">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-953">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-954">标识 <see cref="P:System.Windows.UIElement.IsVisible" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-954">Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-955">当焦点在该元素上时按下某个键后发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-955">Occurs when a key is pressed while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-956">密钥处理与其他平台功能，例如发出命令和文本组合进行交互。</span><span class="sxs-lookup"><span data-stu-id="49cbb-956">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="49cbb-957"><xref:System.Windows.UIElement.KeyDown>事件是可能无法如期出现在某些控件上的较低级别文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-957">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="49cbb-958">这是文本的因为某些控件有控件组合或提供的更高级别的版本的类处理输入处理和相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-958">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="49cbb-959">此事件创建一个别名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.KeyDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-959">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-960">事件处理程序附加到<xref:System.Windows.UIElement.KeyDown>事件附加到基础<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-960">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-961">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-961">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-962">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-962">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyDownEvent>|  
|<span data-ttu-id="49cbb-963">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-963">Routing strategy</span></span>|<span data-ttu-id="49cbb-964">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-964">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-965">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-965">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="49cbb-966">对应的隧道事件<xref:System.Windows.UIElement.PreviewKeyDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-966">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-967">重写<xref:System.Windows.UIElement.OnKeyDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-967">Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-968">标识 <see cref="E:System.Windows.UIElement.KeyDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-968">Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-969">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-969">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-970">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-970">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-971">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-971">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-972">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-972">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-973">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-973">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-974">当焦点在该元素上时松开某个键后发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-974">Occurs when a key is released while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-975">此事件创建一个别名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加此类事件，以便<xref:System.Windows.UIElement.KeyUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-975">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-976">事件处理程序附加到<xref:System.Windows.UIElement.KeyUp>事件附加到基础<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-976">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-977">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-977">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-978">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-978">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyUpEvent>|  
|<span data-ttu-id="49cbb-979">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-979">Routing strategy</span></span>|<span data-ttu-id="49cbb-980">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-980">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-981">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-981">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="49cbb-982">对应的隧道事件<xref:System.Windows.UIElement.PreviewKeyUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-982">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-983">重写<xref:System.Windows.UIElement.OnKeyUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-983">Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-984">标识 <see cref="E:System.Windows.UIElement.KeyUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-984">Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-985">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-985">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-986">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-986">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-987">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-987">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-988">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-988">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-989">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-989">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-990">在与当前 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的各种可视元素的布局更改时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-990">Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-991">布局更新会导致属性更改、 调整窗口大小或显式用户请求发生。</span><span class="sxs-lookup"><span data-stu-id="49cbb-991">A layout update can occur as a result of a property change, a window resize, or an explicit user request.</span></span>  
  
 <span data-ttu-id="49cbb-992">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-992">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-993">在此元素丢失逻辑焦点时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-993">Occurs when this element loses logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-994">如果有意通过某个方法调用强制失去了焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。</span><span class="sxs-lookup"><span data-stu-id="49cbb-994">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="49cbb-995">在这种情况下、 其所在的键盘焦点保持和元素其中<xref:System.Windows.UIElement.Focus%2A>调用方法仍获取逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-995">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="49cbb-996">此事件的更精确地解释是它时引发的值<xref:System.Windows.UIElement.IsFocused%2A>路线中的元素的属性更改从`true`到`false`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-996">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="49cbb-997">由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-997">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-998">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际获得焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-998">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-999">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-999">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1000">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1000">Identifier field</span></span>|<xref:System.Windows.UIElement.LostFocusEvent>|  
|<span data-ttu-id="49cbb-1001">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1001">Routing strategy</span></span>|<span data-ttu-id="49cbb-1002">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1002">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1003">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1003">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="49cbb-1004">没有相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1004">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-1005">重写<xref:System.Windows.UIElement.OnLostFocus%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1005">Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1006">标识 <see cref="E:System.Windows.UIElement.LostFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1006">Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1007">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1007">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1008">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1008">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1009">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1009">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1010">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1010">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1011">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1011">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1012">在键盘焦点不再位于此元素上时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1012">Occurs when the keyboard is no longer focused on this element,.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1013">由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1013">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-1014">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际失去焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1014">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="49cbb-1015">此事件创建一个别名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.LostKeyboardFocus>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1015">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1016">事件处理程序附加到<xref:System.Windows.UIElement.LostKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1016">Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1017">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1017">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1018">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1018">Identifier field</span></span>|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="49cbb-1019">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1019">Routing strategy</span></span>|<span data-ttu-id="49cbb-1020">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1020">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1021">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1021">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="49cbb-1022">对应的隧道事件<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1022">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="49cbb-1023">重写<xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1023">Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1024">标识 <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1024">Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1025">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1025">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1026">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1026">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1027">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1027">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1028">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1028">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1029">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1029">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1030">在此元素丢失鼠标捕获时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1030">Occurs when this element loses mouse capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1031">在元素捕获鼠标，它会接收鼠标输入，即使在指针位于超出界限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1031">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="49cbb-1032">通常仅在拖放操作期间捕获了鼠标。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1032">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="49cbb-1033">由于此事件使用冒泡路由，丢失捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1033">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-1034">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定丢失捕获的实际元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1034">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="49cbb-1035">此事件创建一个别名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.LostMouseCapture>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1035">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1036">事件处理程序附加到<xref:System.Windows.UIElement.LostMouseCapture>事件附加到基础<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1036">Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1037">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1037">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1038">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1038">Identifier field</span></span>|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="49cbb-1039">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1039">Routing strategy</span></span>|<span data-ttu-id="49cbb-1040">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1040">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1041">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1041">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="49cbb-1042">没有定义相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1042">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-1043">重写<xref:System.Windows.UIElement.OnLostMouseCapture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1043">Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1044">标识 <see cref="E:System.Windows.UIElement.LostMouseCapture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1044">Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1045">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1045">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1046">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1046">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1047">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1047">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1048">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1048">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1049">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1049">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1050">在此元素丢失触笔捕获时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1050">Occurs when this element loses stylus capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1051">当元素捕获触笔时，它会接收触笔输入，即使在指针位于超出界限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1051">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="49cbb-1052">通常，将触笔捕获仅在拖放操作过程。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1052">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="49cbb-1053">由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1053">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-1054">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际失去焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1054">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="49cbb-1055">此事件创建一个别名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.LostStylusCapture>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1055">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1056">事件处理程序附加到<xref:System.Windows.UIElement.LostStylusCapture>事件附加到基础<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1056">Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1057">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1057">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1058">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1058">Identifier field</span></span>|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="49cbb-1059">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1059">Routing strategy</span></span>|<span data-ttu-id="49cbb-1060">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1060">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1061">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1061">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-1062">没有定义相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1062">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-1063">重写<xref:System.Windows.UIElement.OnLostStylusCapture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1063">Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1064">标识 <see cref="E:System.Windows.UIElement.LostStylusCapture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1064">Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1065">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1065">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1066">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1066">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1067">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1067">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1068">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1068">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1069">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1069">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1070">在此元素失去触摸屏输入捕获时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1070">Occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1071">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1071">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1072">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1072">Identifier field</span></span>|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="49cbb-1073">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1073">Routing strategy</span></span>|<span data-ttu-id="49cbb-1074">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1074">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1075">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1075">Delegate</span></span>|<span data-ttu-id="49cbb-1076"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1076"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-1077">重写<xref:System.Windows.UIElement.OnLostTouchCapture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1077">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1078">标识 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1078">Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1079">当操作遇到边界时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1079">Occurs when the manipulation encounters a boundary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1080">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1080">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1081">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1081">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|<span data-ttu-id="49cbb-1082">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1082">Routing strategy</span></span>|<span data-ttu-id="49cbb-1083">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1083">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1084">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1084">Delegate</span></span>|<span data-ttu-id="49cbb-1085"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1085"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1086">标识 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1086">Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1087">对于 <see cref="T:System.Windows.UIElement" /> 对象的操作和延时完毕时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1087">Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1088">此事件可用于完成时获取有关操作的信息。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1088">You can use this event to get information about the manipulation when it completes.</span></span>  <span data-ttu-id="49cbb-1089">例如，你可以使用<xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType>属性来确定总金额的操作的位置更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1089">For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> property to determine the total amount the position of the manipulation changed.</span></span>  
  
 <span data-ttu-id="49cbb-1090">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1090">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="49cbb-1091">响应操作的应用程序的示例，请参阅[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1091">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1092">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1092">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1093">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1093">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|<span data-ttu-id="49cbb-1094">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1094">Routing strategy</span></span>|<span data-ttu-id="49cbb-1095">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1095">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1096">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1096">Delegate</span></span>|<span data-ttu-id="49cbb-1097"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1097"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1098">标识 <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1098">Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1099">当输入设备在操作期间更改位置时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1099">Occurs when the input device changes position during a manipulation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1100"><xref:System.Windows.UIElement.ManipulationDelta>事件出现多次，当用户拖动手指在屏幕上在操作过程后再试惯性发生时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1100">The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</span></span>  <span data-ttu-id="49cbb-1101">你可以使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>属性检查是否在惯性期间出现事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1101">You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.</span></span>  
  
 <span data-ttu-id="49cbb-1102">元素上的<xref:System.Windows.UIElement.ManipulationDelta>事件发生在事件发生时不影响以任何方式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1102">The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.</span></span>  <span data-ttu-id="49cbb-1103">必须提供到要操作的元素的逻辑。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1103">You must provide the logic to the element that is to be manipulated.</span></span>  <span data-ttu-id="49cbb-1104"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>和<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>属性，这些类型的属性<xref:System.Windows.Input.ManipulationDelta>，包含有关如何更改该操作的位置的数据，并且解释为移动、 调整大小或旋转对象。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1104">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</span></span>  <span data-ttu-id="49cbb-1105">将该信息应用到要操作的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1105">You apply that information to the element that is to be manipulated.</span></span>  
  
 <span data-ttu-id="49cbb-1106">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1106">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="49cbb-1107">响应操作的应用程序的示例，请参阅[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1107">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1108">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1108">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1109">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1109">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|<span data-ttu-id="49cbb-1110">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1110">Routing strategy</span></span>|<span data-ttu-id="49cbb-1111">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1111">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1112">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1112">Delegate</span></span>|<span data-ttu-id="49cbb-1113"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationDeltaEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1113"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-1114">下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationDelta>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1114">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="49cbb-1115">该示例使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>属性用于移动、 调整大小，请和旋转<xref:System.Windows.Shapes.Rectangle>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1115">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span>  <span data-ttu-id="49cbb-1116">该示例还将检查是否<xref:System.Windows.UIElement.ManipulationDelta>惯性和矩形是否处理窗口的边缘期间发生的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1116">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span>  <span data-ttu-id="49cbb-1117">如果这种情况下都为真，应用程序将停止操作后，若要防止将应用程序的可见区域的矩形。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1117">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="49cbb-1118">此示例摘自在更大的示例[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1118">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1119">标识 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1119">Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1120">当输入设备在操作期间与 <see cref="T:System.Windows.UIElement" /> 对象失去联系且延时开始时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1120">Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1121"><xref:System.Windows.UIElement.ManipulationInertiaStarting>时在用户在操作过程中抬起手指从屏幕的所有事件发生。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1121">The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation.</span></span> <span data-ttu-id="49cbb-1122">例如，如果用户的"引发"<xref:System.Windows.UIElement>在表面，用户将触摸<xref:System.Windows.UIElement>要开始操作，在以短距离，屏幕上移动上方的手指，然后松开<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1122">For example, if a user "throws" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="49cbb-1123">当用户释放元素时，开始惯性和<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件发生。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1123">When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.</span></span>  <span data-ttu-id="49cbb-1124"><xref:System.Windows.UIElement>继续接收在<xref:System.Windows.UIElement.ManipulationDelta>事件，指出在元素上发生了惯性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1124">The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.</span></span>  
  
 <span data-ttu-id="49cbb-1125">此事件可用于指定惯性的行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1125">You can use this event to specify the behavior of the inertia.</span></span>  <span data-ttu-id="49cbb-1126">例如，你可以设置惯性开始时使用的初始速度。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1126">For example, you can set the initial velocity that is used when inertia begins.</span></span>  <span data-ttu-id="49cbb-1127">通过设置所需的减速或通过设置所需的位置，还可以指定惯性量。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1127">You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</span></span>  <span data-ttu-id="49cbb-1128">您可以单独设置每种类型操作 （翻译、 扩展或旋转） 的这些值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1128">You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</span></span>  <span data-ttu-id="49cbb-1129">有关详情，请参阅<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1129">For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>  
  
 <span data-ttu-id="49cbb-1130">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1130">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="49cbb-1131">响应操作的应用程序的示例，请参阅[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1131">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1132">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1132">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1133">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1133">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|<span data-ttu-id="49cbb-1134">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1134">Routing strategy</span></span>|<span data-ttu-id="49cbb-1135">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1135">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1136">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1136">Delegate</span></span>|<span data-ttu-id="49cbb-1137"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1137"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-1138">下面的示例演示<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件处理程序和设置需要的减速转换、 扩展以及在惯性过程中使用的旋转。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1138">The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</span></span> <span data-ttu-id="49cbb-1139">此示例摘自在更大的示例[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1139">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1140">标识 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1140">Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1141">当输入设备对 <see cref="T:System.Windows.UIElement" /> 对象开始操作时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1141">Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1142"><xref:System.Windows.UIElement.ManipulationStarted>事件发生后<xref:System.Windows.UIElement.ManipulationStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1142">The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span>  <span data-ttu-id="49cbb-1143">你可以通过执行以下<xref:System.Windows.Input.ManipulationStartedEventArgs>:</span><span class="sxs-lookup"><span data-stu-id="49cbb-1143">You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span></span>  
  
-   <span data-ttu-id="49cbb-1144">获取操作的位置是相对于使用的元素<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1144">Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="49cbb-1145">使用获取操作的原点<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1145">Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.</span></span>  
  
-   <span data-ttu-id="49cbb-1146">通过调用取消操作<xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1146">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.</span></span>  
  
 <span data-ttu-id="49cbb-1147">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1147">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="49cbb-1148">响应操作的应用程序的示例，请参阅[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1148">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1149">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1149">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1150">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1150">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|<span data-ttu-id="49cbb-1151">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1151">Routing strategy</span></span>|<span data-ttu-id="49cbb-1152">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1152">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1153">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1153">Delegate</span></span>|<span data-ttu-id="49cbb-1154"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationStartedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1154"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1155">标识 <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1155">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1156">在首次创建操作处理器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1156">Occurs when the manipulation processor is first created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1157"><xref:System.Windows.UIElement.ManipulationStarting>上具有的元素，发生事件<xref:System.Windows.UIElement.IsManipulationEnabled%2A>属性设置为`true`当用户在其上将手指。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1157">The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it.</span></span> <span data-ttu-id="49cbb-1158">默认情况下，后续操作事件报告的位置相对于元素具有操作<xref:System.Windows.UIElement.IsManipulationEnabled%2A>设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1158">By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.</span></span>  <span data-ttu-id="49cbb-1159">你可以指定位置应为相对于另一个元素通过设置<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1159">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="49cbb-1160">例如，可以相对于元素的父级的操作。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1160">For example, you can make the manipulation relative to the parent of the element.</span></span>  
  
 <span data-ttu-id="49cbb-1161">你还可以执行的事件处理程序中的以下<xref:System.Windows.UIElement.ManipulationStarting>:</span><span class="sxs-lookup"><span data-stu-id="49cbb-1161">You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:</span></span>  
  
-   <span data-ttu-id="49cbb-1162">指定用户是否需要通过设置执行操作的多个手指<xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1162">Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="49cbb-1163">指定哪些类型的操作启用通过设置<xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType>属性<xref:System.Windows.Input.ManipulationModes>枚举。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1163">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="49cbb-1164">通过设置指定单指旋转中心的<xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1164">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="49cbb-1165">通过调用取消操作<xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1165">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="49cbb-1166">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1166">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="49cbb-1167">响应操作的应用程序的示例，请参阅[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1167">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1168">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1168">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1169">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1169">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|<span data-ttu-id="49cbb-1170">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1170">Routing strategy</span></span>|<span data-ttu-id="49cbb-1171">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1171">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1172">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1172">Delegate</span></span>|<span data-ttu-id="49cbb-1173"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1173"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-1174">下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationStarting>事件和集<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>接收操作事件，以便操作的坐标相对于父元素的父元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1174">The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</span></span>  <span data-ttu-id="49cbb-1175">此示例摘自在更大的示例[演练： 创建你的第一个 Touch 应用](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1175">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1176">标识 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1176">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="49cbb-1177">父元素可以为子元素分配的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1177">The available space that a parent element can allocate a child element.</span>
          </span>
          <span data-ttu-id="49cbb-1178">子元素可以请求大于可用空间的空间；如果可在当前元素的内容模型中进行滚动，则提供的大小可以适应此空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1178">A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1179">更新 <see cref="P:System.Windows.UIElement.DesiredSize" /> 的 <see cref="T:System.Windows.UIElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1179">Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="49cbb-1180">父元素从其自身的 <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> 实现调用此方法以形成递归布局更新。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1180">Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update.</span>
          </span>
          <span data-ttu-id="49cbb-1181">调用此方法构成布局更新的第一个处理过程（“测量”处理过程）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1181">Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1182">中的布局位置的计算[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]组成<xref:System.Windows.UIElement.Measure%2A>调用和<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1182">Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="49cbb-1183">期间<xref:System.Windows.UIElement.Measure%2A>调用，元素通过确定其大小要求`availableSize`输入。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1183">During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input.</span></span> <span data-ttu-id="49cbb-1184">期间<xref:System.Windows.UIElement.Arrange%2A>完成调用时，元素大小。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1184">During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.</span></span>  
  
 <span data-ttu-id="49cbb-1185">`availableSize` 可以是任何数字从零到无限。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1185">`availableSize` can be any number from zero to infinite.</span></span> <span data-ttu-id="49cbb-1186">参与布局的元素应返回的最小<xref:System.Windows.Size>它们需要给定`availableSize`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1186">Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.</span></span>  
  
 <span data-ttu-id="49cbb-1187">当首次实例化布局时，它始终会收到<xref:System.Windows.UIElement.Measure%2A>之前调用<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1187">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="49cbb-1188">但是后第一个布局处理过程，, 它可能会收到<xref:System.Windows.UIElement.Arrange%2A>调用而无需<xref:System.Windows.UIElement.Measure%2A>; 这可能会在一个属性，仅影响<xref:System.Windows.UIElement.Arrange%2A>更改 （如对齐方式），或当父收到<xref:System.Windows.UIElement.Arrange%2A>而无需<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="49cbb-1188">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="49cbb-1189">A<xref:System.Windows.UIElement.Measure%2A>调用将自动使失效<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1189">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="49cbb-1190">布局更新异步发生，以便主线程并不会等待每个可能的布局更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1190">Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</span></span> <span data-ttu-id="49cbb-1191">查询通过隐藏代码检查的属性值的元素可能不会立即反映对交互具有调整大小或布局特性的属性的更改 (<xref:System.Windows.FrameworkElement.Width%2A>属性，例如)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1191">Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49cbb-1192">可以通过强制布局更新<xref:System.Windows.UIElement.UpdateLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1192">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method.</span></span> <span data-ttu-id="49cbb-1193">但是，调用此方法是通常不必要的并且可能会导致性能不佳。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1193">However, calling this method is usually unnecessary and can cause poor performance.</span></span>  
  
 <span data-ttu-id="49cbb-1194">布局系统保留的一些无效的布局，一个用于两个单独的队列<xref:System.Windows.UIElement.Measure%2A>，另一个用于<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1194">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="49cbb-1195">根据执行布局; 的元素的可视化树中的元素的顺序排序布局队列元素树中更高版本是队列，以便避免冗余布局父级中的重复更改所造成的顶部。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1195">The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="49cbb-1196">从队列中，自动删除重复项，并且如果它们尚存在布局验证自动从队列删除元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1196">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</span></span>  
  
 <span data-ttu-id="49cbb-1197">更新布局时，<xref:System.Windows.UIElement.Measure%2A>队列为空首先后, 跟<xref:System.Windows.UIElement.Arrange%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1197">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="49cbb-1198">中的某个元素<xref:System.Windows.UIElement.Arrange%2A>中的某个元素时，绝不会排列队列<xref:System.Windows.UIElement.Measure%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1198">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="49cbb-1199">父元素可以为子元素分配的可用大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1199">The available size that the parent element can allocate for the child.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1200">在派生类中重写时，提供测量逻辑来适当地调整此元素的大小，兼顾任何子元素内容的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1200">When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-1201">此元素在布局中的所需大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1201">The desired size of this element in layout.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1202">它是更常见的是派生的元素从<xref:System.Windows.FrameworkElement>而非<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1202">It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="49cbb-1203">如果派生自<xref:System.Windows.FrameworkElement>，请注意，重写<xref:System.Windows.UIElement.MeasureCore%2A>上<xref:System.Windows.FrameworkElement>密封<xref:System.Windows.UIElement.MeasureCore%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1203">If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method.</span></span> <span data-ttu-id="49cbb-1204">因此，你只覆盖<xref:System.Windows.UIElement.MeasureCore%2A>作为一种方法更改布局测量特征，如果派生自<xref:System.Windows.UIElement>通过不包括继承<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1204">Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="49cbb-1205">如果你尝试在上生成您自己的实现，这可能是这种情况[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]核心级别。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1205">This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level.</span></span> <span data-ttu-id="49cbb-1206">否则为如果派生自<xref:System.Windows.FrameworkElement>，度量值行为的实现模板则<xref:System.Windows.FrameworkElement>的实现。<xref:System.Windows.FrameworkElement.MeasureOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1206">Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-1207">子元素的父元素必须调用<xref:System.Windows.UIElement.Measure%2A>在每个的子活动，否则为这些子元素不调整大小或排列和有效地将从布局中消失。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1207">A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-1208">典型重写<xref:System.Windows.UIElement.MeasureCore%2A>遵循这种近似模式 (不是一个名为的内置集合`VisualChildren`;`VisualChildren`是一个占位符，表示你元素维护任何子集合)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1208">A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   <span data-ttu-id="49cbb-1209">必须调用<xref:System.Windows.UIElement.Measure%2A>每个子元素上。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1209">You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
-   <span data-ttu-id="49cbb-1210">通常情况下，您的实现应缓存之间的测量信息<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法调用在同一元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1210">Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.</span></span>  
  
-   <span data-ttu-id="49cbb-1211">调用的基实现<xref:System.Windows.UIElement.MeasureCore%2A>不是必需的但在的基实现，提供所需的布局功能可能正合适。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1211">Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.</span></span>  
  
-   <span data-ttu-id="49cbb-1212">调用<xref:System.Windows.UIElement.Measure%2A>上子元素应传递属于相同`availableSize`作为的父项或区域的子集，具体取决于的布局的类型的父元素支持。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1212">Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports.</span></span> <span data-ttu-id="49cbb-1213">例如，它将有效以删除特定元素的边框或填充、 滚动条，或自定义控件的区域。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1213">For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1214">实现必须能够处理提供的值<paramref name="availableSize" />即无限。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1214">Implementations must be able to process a value provided for <paramref name="availableSize" /> that is infinite.</span>
            </span>
            <span data-ttu-id="49cbb-1215">无限值表示没有请求的约束，并有效地将推迟到父元素，通过递归调用度量值的度量值选择。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1215">An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</span>
            </span>
            <span data-ttu-id="49cbb-1216">实现可以考虑为提供的值<paramref name="availableSize" />要软约束。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1216">Implementations can consider the value provided for <paramref name="availableSize" /> to be a soft constraint.</span>
            </span>
            <span data-ttu-id="49cbb-1217">子元素可能指定更大的大小，即使应用程序代码的其他方面是能够确定父元素的当前实际大小。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1217">The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</span>
            </span>
            <span data-ttu-id="49cbb-1218">大的大小，请求是指示子元素查询您的父元素是否可以支持内容滚动内容的显示区域内的约定。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1218">The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1219">在指针位于此元素上并且按下任意鼠标按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1219">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1220">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1220">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1221">事件处理程序附加到<xref:System.Windows.UIElement.MouseDown>事件附加到基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1221">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-1222"><xref:System.Windows.UIElement.MouseDown>事件通常一起引发<xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>，这对应于按下的某个之一的两个标准鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1222">The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="49cbb-1223"><xref:System.Windows.UIElement.MouseLeftButtonDown> 和<xref:System.Windows.UIElement.MouseRightButtonDown>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1223"><xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="49cbb-1224">请参阅备注以<xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1224">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49cbb-1225">某些控件可能具有固有鼠标按钮事件处理的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1225">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="49cbb-1226">按下事件鼠标左键是最可能的事件，能够在控件中处理的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1226">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="49cbb-1227">类通常处理标记基础<xref:System.Windows.Input.Mouse>类为已处理的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1227">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="49cbb-1228">一旦事件被标记为已处理，其他实例处理程序附加到该元素通常不会引发。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1228">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="49cbb-1229">通常也不会引发的任何其他类或实例处理程序附加到冒泡方向向 UI 树的根节点中的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1229">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="49cbb-1230">可以解决前面的重要说明中介绍了此问题，从而仍在接收<xref:System.Windows.UIElement.MouseDown>鼠标左键按下具有类处理通过使用这些解决方案的派生类上的事件的事件：</span><span class="sxs-lookup"><span data-stu-id="49cbb-1230">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="49cbb-1231">附加处理程序<xref:System.Windows.UIElement.PreviewMouseDown>未标记为已由控件处理的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1231">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="49cbb-1232">请注意，由于这是预览事件，则路由从根开始并挖掘到控件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1232">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="49cbb-1233">： 分步骤注册控件上的处理程序，通过调用<xref:System.Windows.UIElement.AddHandler%2A>并选择使处理程序能够侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1233">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1234">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1234">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1235">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1235">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseDownEvent>|  
|<span data-ttu-id="49cbb-1236">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1236">Routing strategy</span></span>|<span data-ttu-id="49cbb-1237">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1237">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1238">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1238">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-1239">对应的隧道事件<xref:System.Windows.UIElement.PreviewMouseDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1239">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-1240">重写<xref:System.Windows.UIElement.OnMouseDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1240">Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1241">标识 <see cref="E:System.Windows.UIElement.MouseDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1241">Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1242">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1242">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1243">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1243">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1244">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1244">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1245">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1245">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1246">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1246">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1247">在鼠标指针进入此元素的边界时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1247">Occurs when the mouse pointer enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1248"><xref:System.Windows.UIElement.MouseEnter> 是，使用直接的事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1248"><xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="49cbb-1249">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1249">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="49cbb-1250">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1250">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="49cbb-1251">尽管<xref:System.Windows.UIElement.MouseEnter>跟踪何时鼠标指针进入的元素边界内，此事件能够更确切地报告<xref:System.Windows.UIElement.IsMouseOver%2A>属性值已更改，不再`false`到`true`针对此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1251">Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="49cbb-1252">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseEnter>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1252">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1253">事件处理程序附加到<xref:System.Windows.UIElement.MouseEnter>事件附加到基础<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1253">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-1254">A <xref:System.Windows.Controls.Button> (或任何<xref:System.Windows.Controls.Primitives.ButtonBase>派生类) 具有本机处理<xref:System.Windows.UIElement.KeyDown>事件按钮有焦点，并按下的键是空间条。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1254">A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar.</span></span> <span data-ttu-id="49cbb-1255">本机处理引发<xref:System.Windows.Controls.Primitives.ButtonBase.Click>与作为源，该按钮的事件并且还会捕获鼠标，即使鼠标指针似乎未移动。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1255">The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</span></span> <span data-ttu-id="49cbb-1256">由于鼠标捕获，<xref:System.Windows.UIElement.MouseEnter>与作为源的按钮也会引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1256">As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source.</span></span> <span data-ttu-id="49cbb-1257">通常，如果在元素捕获鼠标，然后<xref:System.Windows.UIElement.MouseEnter>引发时，以及<xref:System.Windows.UIElement.GotMouseCapture>以及可能其他特定于控件的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1257">In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1258">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1258">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1259">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1259">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|<span data-ttu-id="49cbb-1260">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1260">Routing strategy</span></span>|<span data-ttu-id="49cbb-1261">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-1261">Direct</span></span>|  
|<span data-ttu-id="49cbb-1262">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1262">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="49cbb-1263">重写<xref:System.Windows.UIElement.OnMouseEnter%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1263">Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1264">标识 <see cref="E:System.Windows.UIElement.MouseEnter" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1264">Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1265">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1265">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1266">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1266">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1267">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1267">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1268">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1268">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1269">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1269">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1270">在鼠标指针离开此元素的边界时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1270">Occurs when the mouse pointer leaves the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1271"><xref:System.Windows.UIElement.MouseLeave> 是，使用直接的事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1271"><xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="49cbb-1272">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1272">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="49cbb-1273">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1273">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="49cbb-1274">尽管<xref:System.Windows.UIElement.MouseLeave>跟踪何时鼠标离开元素，此事件的详细信息确切地报告<xref:System.Windows.UIElement.IsMouseOver%2A>属性值已更改，不再`true`到`false`针对此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1274">Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="49cbb-1275">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseLeave>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1275">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1276">事件处理程序附加到<xref:System.Windows.UIElement.MouseLeave>事件附加到基础<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1276">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1277">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1277">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1278">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1278">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|<span data-ttu-id="49cbb-1279">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1279">Routing strategy</span></span>|<span data-ttu-id="49cbb-1280">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-1280">Direct</span></span>|  
|<span data-ttu-id="49cbb-1281">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1281">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="49cbb-1282">重写<xref:System.Windows.UIElement.OnMouseLeave%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1282">Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1283">标识 <see cref="E:System.Windows.UIElement.MouseLeave" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1283">Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1284">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1284">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1285">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1285">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1286">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1286">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1287">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1287">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1288">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1288">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1289">在鼠标指针位于此元素上并且按下鼠标左键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1289">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1290">尽管这看起来要遵循的冒泡通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1290">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-1291">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1291">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-1292">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1292">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-1293">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1293">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-1294">如果你将标记<xref:System.Windows.UIElement.MouseLeftButtonDown>处理，您实质上标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1294">If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="49cbb-1295">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1295">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="49cbb-1296">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1296">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-1297">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1297">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-1298">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1298">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49cbb-1299">某些控件类可能具有固有鼠标按钮事件处理的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1299">Some control classes might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="49cbb-1300">按下事件鼠标左键是最可能的事件，能够在控件中处理的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1300">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="49cbb-1301">类通常处理标记基础<xref:System.Windows.Input.Mouse>类为已处理的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1301">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="49cbb-1302">一旦事件被标记为已处理，其他实例处理程序附加到该元素通常不会引发。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1302">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="49cbb-1303">通常也不会引发的任何其他类或实例处理程序附加到冒泡方向向 UI 树的根节点中的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1303">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="49cbb-1304">可以解决前面的重要说明中介绍了此问题，从而仍在接收<xref:System.Windows.UIElement.MouseLeftButtonDown>鼠标左键按下具有类处理通过使用这些解决方案的派生类上的事件的事件：</span><span class="sxs-lookup"><span data-stu-id="49cbb-1304">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="49cbb-1305">附加处理程序<xref:System.Windows.UIElement.PreviewMouseDown>未标记为已由控件处理的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1305">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="49cbb-1306">请注意，由于这是预览事件，则路由从根开始并挖掘到控件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1306">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="49cbb-1307">： 分步骤注册控件上的处理程序，通过调用<xref:System.Windows.UIElement.AddHandler%2A>并选择使处理程序能够侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1307">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1308">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1308">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1309">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1309">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="49cbb-1310">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1310">Routing strategy</span></span>|<span data-ttu-id="49cbb-1311">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-1311">Direct</span></span>|  
|<span data-ttu-id="49cbb-1312">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1312">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-1313">重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1313">Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1314">标识 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1314">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1315">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1316">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1317">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1318">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1319">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1320">在鼠标指针位于此元素上并且松开鼠标左键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1320">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1321">尽管这看起来要遵循的冒泡通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1321">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-1322">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1322">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-1323">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1323">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-1324">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1324">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-1325">如果你将标记<xref:System.Windows.UIElement.MouseLeftButtonUp>处理，您实质上标记<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1325">If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="49cbb-1326">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1326">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-1327">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1327">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-1328">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1328">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1329">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1330">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1330">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="49cbb-1331">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1331">Routing strategy</span></span>|<span data-ttu-id="49cbb-1332">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-1332">Direct</span></span>|  
|<span data-ttu-id="49cbb-1333">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1333">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-1334">重写<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1334">Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1335">标识 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1335">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1336">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1336">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1337">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1337">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1338">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1338">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1339">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1339">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1340">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1340">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1341">在鼠标指针位于此元素上并且移动鼠标指针时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1341">Occurs when the mouse pointer moves while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1342">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1342">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1343">事件处理程序附加到<xref:System.Windows.UIElement.MouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1343">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1344">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1344">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1345">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1345">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|<span data-ttu-id="49cbb-1346">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1346">Routing strategy</span></span>|<span data-ttu-id="49cbb-1347">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1347">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1348">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1348">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="49cbb-1349">对应的隧道事件<xref:System.Windows.UIElement.PreviewMouseMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1349">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-1350">重写<xref:System.Windows.UIElement.OnMouseMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1350">Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1351">标识 <see cref="E:System.Windows.UIElement.MouseMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1351">Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1352">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1352">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1353">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1353">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1354">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1354">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1355">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1355">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1356">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1356">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1357">在鼠标指针位于此元素上并且按下鼠标右键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1357">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1358">尽管这看起来要遵循的冒泡通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1358">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-1359">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1359">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-1360">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1360">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-1361">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1361">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-1362">如果你将标记<xref:System.Windows.UIElement.MouseRightButtonDown>处理，您实质上标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1362">If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="49cbb-1363">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1363">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="49cbb-1364">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1364">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-1365">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1365">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-1366">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1366">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-1367">右侧的按钮的鼠标事件，通常在应用程序方案具有本机处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1367">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="49cbb-1368">例如，向下的鼠标右键按钮可能显示上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1368">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="49cbb-1369">请参阅[ContextMenu 概述](~/docs/framework/wpf/controls/contextmenu-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1369">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1370">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1370">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1371">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1371">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="49cbb-1372">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1372">Routing strategy</span></span>|<span data-ttu-id="49cbb-1373">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-1373">Direct</span></span>|  
|<span data-ttu-id="49cbb-1374">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1374">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-1375">重写<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1375">Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1376">标识 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1376">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1377">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1377">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1378">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1378">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1379">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1379">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1380">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1380">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1381">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1381">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1382">在鼠标指针位于此元素上并且松开鼠标右键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1382">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1383">尽管这看起来要遵循的冒泡通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1383">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-1384">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1384">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-1385">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1385">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-1386">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1386">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-1387">如果你将标记<xref:System.Windows.UIElement.MouseRightButtonUp>处理，您实质上标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1387">If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="49cbb-1388">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1388">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-1389">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1389">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-1390">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1390">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1391">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1391">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1392">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1392">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="49cbb-1393">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1393">Routing strategy</span></span>|<span data-ttu-id="49cbb-1394">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-1394">Direct</span></span>|  
|<span data-ttu-id="49cbb-1395">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1395">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-1396">重写<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1396">Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1397">标识 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1397">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1398">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1398">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1399">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1399">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1400">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1400">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1401">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1401">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1402">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1402">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1403">在鼠标指针位于此元素上并且松开任意鼠标按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1403">Occurs when any mouse button is released over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1404">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1404">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1405">事件处理程序附加到<xref:System.Windows.UIElement.MouseUp>事件附加到基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1405">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-1406"><xref:System.Windows.UIElement.MouseUp>事件通常一起引发<xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>，这对应于两个标准鼠标按钮之一的版本。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1406">The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="49cbb-1407"><xref:System.Windows.UIElement.MouseLeftButtonUp> 和<xref:System.Windows.UIElement.MouseRightButtonUp>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1407"><xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="49cbb-1408">请参阅备注以<xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1408">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1409">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1409">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1410">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1410">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseUpEvent>|  
|<span data-ttu-id="49cbb-1411">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1411">Routing strategy</span></span>|<span data-ttu-id="49cbb-1412">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1412">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1413">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1413">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-1414">对应的隧道事件<xref:System.Windows.UIElement.PreviewMouseUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1414">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-1415">重写<xref:System.Windows.UIElement.OnMouseUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1415">Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1416">标识 <see cref="E:System.Windows.UIElement.MouseUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1416">Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1417">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1417">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1418">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1418">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1419">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1419">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1420">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1420">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1421">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1421">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1422">在鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1422">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1423">焦点或鼠标捕获优先于其中鼠标指针位于;因此，如果你收到<xref:System.Windows.UIElement.MouseWheel>的已设定焦点或捕获元素中的事件，鼠标指针实际上可能是通过另一个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1423">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="49cbb-1424">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseWheel>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1424">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-1425">事件处理程序附加到<xref:System.Windows.UIElement.MouseWheel>事件附加到基础<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1425">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-1426">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-1426">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-1427">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-1427">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|<span data-ttu-id="49cbb-1428">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-1428">Routing strategy</span></span>|<span data-ttu-id="49cbb-1429">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-1429">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-1430">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-1430">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="49cbb-1431">对应的隧道事件<xref:System.Windows.UIElement.PreviewMouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1431">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="49cbb-1432">重写<xref:System.Windows.UIElement.OnMouseWheel%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1432">Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1433">标识 <see cref="E:System.Windows.UIElement.MouseWheel" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1433">Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1434">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1434">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-1435">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1435">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-1436">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1436">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-1437">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1437">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-1438">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1438">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="49cbb-1439">一个遍历请求，其中包含一个属性，该属性指示以现有 Tab 键顺序遍历的模式或视觉移动的方向。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1439">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1440">尝试将焦点从此元素移到其他元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1440">Attempts to move focus from this element to another element.</span>
          </span>
          <span data-ttu-id="49cbb-1441">移动焦点的方向由指导方向指定，该方向在此元素的可视父级的组织结构中解释。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1441">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-1442">如果执行了请求的遍历，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1442">
              <see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1443">请确保检查此方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1443">Make sure you check the return value of this method.</span></span> <span data-ttu-id="49cbb-1444">返回值`false`如果遇到控件的组合所定义的制表位遍历并且遍历请求未请求包装可能会返回。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1444">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1445">访问键事件的事件数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1445">The event data to the access key event.</span>
          </span>
          <span data-ttu-id="49cbb-1446">事件数据报告哪个键被调用，并指示控制发送这些事件的 <see cref="T:System.Windows.Input.AccessKeyManager" /> 对象是否也将此访问键调用发送到其他元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1446">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1447">在调用对于此元素有意义的访问键时提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1447">Provides class handling for when an access key that is meaningful for this element is invoked.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1448">在没有实际 AccessKey 事件<xref:System.Windows.UIElement>类，或在其他位置，您可以引发或附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1448">There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="49cbb-1449">相反，此事件是通过专用管理器类， <xref:System.Windows.Input.AccessKeyManager>，其中进行后续处理所有输入要搜索适用于整个输入模型的访问密钥。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1449">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1450">在此方法的默认实现<see cref="T:System.Windows.UIElement" />将键盘焦点移到此元素 (通过调用<see cref="M:System.Windows.UIElement.Focus" />)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1450">The default implementation of this method in <see cref="T:System.Windows.UIElement" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement.Focus" />).</span>
            </span>
            <span data-ttu-id="49cbb-1451">如果它们可获得焦点，因为它是可访问性方案的预期的行为，则实现应该保留此行为。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1451">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span>
            </span>
            <span data-ttu-id="49cbb-1452">请注意，不执行任何操作与传递的事件数据的基实现，并且引发任何进一步的事件;它只是将焦点设置。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1452">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="49cbb-1453">重新调整其大小的子元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1453">The child element that is being resized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1454">重新调整子元素的大小时支持布局行为。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1454">Supports layout behavior when a child element is resized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1455">应用程序代码通常不能调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1455">This method is typically not called by your application code.</span></span> <span data-ttu-id="49cbb-1456">公开此方法以便对其自己的可能是无效的布局状态检查该类可以进行进一步的派生的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1456">It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</span></span> <span data-ttu-id="49cbb-1457">类可能还会尝试优化，以最大程度减少基于子元素的大小更改了布局过程的处理时间。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1457">Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</span></span> <span data-ttu-id="49cbb-1458">示例派生元素类实现<xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A>是<xref:System.Windows.Controls.Grid>控件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1458">An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1459">
              <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />方法具有调用的默认实现<see cref="M:System.Windows.UIElement.InvalidateMeasure" />本身上。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1459">The <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> method has the default implementation of calling <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> on itself.</span>
            </span>
            <span data-ttu-id="49cbb-1460">典型的实现将会是： 执行自己的元素的任何优化支持，，然后通常调用基<see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />从至少一个代码分支 （一个指示每个度量值缓存逻辑的"脏"状态）。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1460">A typical implementation would be: do whatever optimization your own element supports, and then typically call base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</span>
            </span>
            <span data-ttu-id="49cbb-1461">仅在布局处理，如果它是子元素本身，产生了大小更改中调用此方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1461">This method is only called in the layout processing if it was the child itself that originated the size changes.</span>
            </span>
            <span data-ttu-id="49cbb-1462">否则为如果启动了父元素<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />传递，根据布局系统规则，父正在重新计算布局已。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1462">Otherwise, if the parent element initiates the <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pass, according to the layout system rules, the parent is recalculating layout already.</span>
            </span>
            <span data-ttu-id="49cbb-1463">布局系统处理顺序子级到父级的布局，因此需要从子元素布局调用无返回到父元素大小调整。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1463">The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-1464">为 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构返回特定于类的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1464">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-1465">特定于类型的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1465">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1466">此方法的实现是通常调用特定的构造函数<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />实现，并将其作为返回值。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1466">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span>
            </span>
            <span data-ttu-id="49cbb-1467">所有<see cref="T:System.Windows.UIElement" />派生的类应实现此方法，以便提供其各自的特定<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />到实现[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]基础结构。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1467">All <see cref="T:System.Windows.UIElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
            </span>
            <span data-ttu-id="49cbb-1468">有关实现此模式的详细信息，请参阅<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1468">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1469">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1469">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1470">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1470">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1471">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1471">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1472">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1472">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1473">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1473">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1474">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1474">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1475">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1475">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1476">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1476">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1477">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1477">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1478">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1478">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1479">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1479">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1480">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1480">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1481">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1481">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1482">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragLeave" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1482">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1483">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1483">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1484">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1484">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1485">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1485">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1486">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1486">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1487">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1487">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1488">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1488">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1489">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1489">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1490">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1490">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1491">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1491">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1492">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1492">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1493">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1493">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1494">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragOver" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1494">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1495">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1495">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1496">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1496">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1497">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1497">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1498">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1498">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1499">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1499">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1500">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1500">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1501">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1501">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1502">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1502">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1503">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1503">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1504">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1504">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1505">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1505">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1506">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1506">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1507">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1507">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1508">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1508">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1509">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1509">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1510">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1510">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1511">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1511">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1512">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1512">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1513">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1513">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1514">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1514">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1515">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1515">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1516">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1516">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1517">包含事件数据的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1517">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1518">当某个未处理的 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1518">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1519">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1519">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1520">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1520">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1521">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1521">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1522">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1522">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1523">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1523">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1524">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1524">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1525">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1525">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1526">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1526">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1527">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1527">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1528">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1528">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1529">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1529">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="49cbb-1530">此事件数据必须包含 <see cref="E:System.Windows.UIElement.GotFocus" /> 事件的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1530">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1531">使用所提供的事件数据引发 <see cref="E:System.Windows.UIElement.GotFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1531">Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1532">此方法，虽然但虚拟的具有引发事件的默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1532">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="49cbb-1533">这在 \* 方法实现用于引发事件，并且内部调用此方法的实现来引发事件时<xref:System.Windows.UIElement.IsFocused%2A>属性值更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1533">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="49cbb-1534"><xref:System.Windows.UIElement.OnGotFocus%2A>实现不同于其他某些[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 实现，后者只提供了一种简便方式为该事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1534">The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1535">除非有特意需求不引发焦点事件，请确保您的实现将调用基实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1535">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span>
            </span>
            <span data-ttu-id="49cbb-1536">否则为<see cref="E:System.Windows.UIElement.GotFocus" />在通常将焦点设置到此元素的典型用户操作期间不会引发事件。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1536">Otherwise, the <see cref="E:System.Windows.UIElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span>
            </span>
            <span data-ttu-id="49cbb-1537">如果不想使用您可获得焦点的元素，你可以通过将阻止元素<see cref="P:System.Windows.UIElement.Focusable" />到<see langword="false" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1537">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1538">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1538">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1539">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1539">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1540">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1540">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1541">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1541">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1542">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1542">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1543">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1543">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1544">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1544">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1545">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1545">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1546">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1546">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1547">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1547">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1548">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1548">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1549">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1549">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1550">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1550">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1551">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1551">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1552">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1552">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1553">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1553">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1554">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1554">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1555">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1555">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1556">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1556">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1557">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1557">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1558">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1558">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1559">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1559">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1560">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1560">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1561">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1561">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1562">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1562">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1563">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1563">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1564">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1564">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1565">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1565">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1566">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1566">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1567">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1567">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1568">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1568">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1569">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1569">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1570">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1570">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1571">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1571">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1572">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1572">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1573">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1573">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1574">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1574">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1575">为在此元素上捕获触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1575">Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1576"><xref:System.Windows.UIElement.OnGotTouchCapture%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1576">The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1577">重写<xref:System.Windows.UIElement.OnGotTouchCapture%2A>在派生类来处理<xref:System.Windows.UIElement.GotTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1577">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event.</span></span> <span data-ttu-id="49cbb-1578">一定要调用基类的<xref:System.Windows.UIElement.OnGotTouchCapture%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1578">Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1579">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1579">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1580">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1580">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1581">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1581">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1582">此虚方法引发时的值<xref:System.Windows.UIElement.IsKeyboardFocused%2A>依赖项属性更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1582">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="49cbb-1583">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1583">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1584">则<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1584">Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1585">请注意，<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1585">Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="49cbb-1586">因此，你不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1586">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1587">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1587">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1588">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1588">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1589">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1589">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1590">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1590">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1591">在此元素引发 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 事件前的那一刻调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1591">Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span>
          </span>
          <span data-ttu-id="49cbb-1592">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1592">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1593">此虚方法引发时的值<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>依赖项属性更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1593">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes .</span></span> <span data-ttu-id="49cbb-1594">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1594">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1595">则<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1595">Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1596">请注意，<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1596">Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="49cbb-1597">因此，你不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1597">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1598">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1598">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1599">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1599">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1600">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1600">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1601">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1601">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1602">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1602">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1603">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1603">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1604">此虚方法引发时的值<xref:System.Windows.UIElement.IsMouseCaptured%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1604">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="49cbb-1605">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1605">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1606">则<xref:System.Windows.UIElement.IsMouseCapturedChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1606">Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1607">请注意，<xref:System.Windows.UIElement.IsMouseCapturedChanged>事件不是路由的事件。因此，你不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1607">Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1608">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1608">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1609">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1609">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1610">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1610">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1611">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1611">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1612">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1612">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1613">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1613">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1614">此虚方法引发时的值<see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />依赖项属性更改其值。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1614">This virtual method is raised when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property changes its value.</span>
            </span>
            <span data-ttu-id="49cbb-1615">虚方法首先引发，并可以处理所需的事件数据。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1615">The virtual method is raised first and can manipulate the event data as necessary.</span>
            </span>
            <span data-ttu-id="49cbb-1616">则<see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />与该相同的事件数据实例引发事件。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1616">Then the <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span>
            </span>
            <span data-ttu-id="49cbb-1617">请注意，事件不是路由的事件。因此，你不能将其标记为已处理的类处理程序中。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1617">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span>
            </span>
            <span data-ttu-id="49cbb-1618">此方法不具有默认实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1618">This method has no default implementation.</span>
            </span>
            <span data-ttu-id="49cbb-1619">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1619">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span>
            </span>
            <span data-ttu-id="49cbb-1620">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1620">You may call base either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1621">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1621">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1622">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1622">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1623">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1623">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1624">此虚方法引发时的值<xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1624">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="49cbb-1625">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1625">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1626">则<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1626">Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1627">请注意，<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1627">Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="49cbb-1628">因此，你不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1628">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1629">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1629">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1630">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1630">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1631">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1631">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1632">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1632">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1633">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1633">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1634">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1634">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1635">此虚方法引发时的值<xref:System.Windows.UIElement.IsStylusCaptured%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1635">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="49cbb-1636">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1636">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1637">则<xref:System.Windows.UIElement.IsStylusCapturedChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1637">Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1638">请注意，事件不路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1638">Notice that the event is not a routed event.</span></span> <span data-ttu-id="49cbb-1639">因此，你不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1639">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1640">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1640">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1641">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1641">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1642">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1642">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1643">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1643">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1644">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1644">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1645">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1645">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1646">此虚方法引发时的值<xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1646">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="49cbb-1647">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1647">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1648">则<xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1648">Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1649">请注意，事件不路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1649">Notice that the event is not a routed event.</span></span> <span data-ttu-id="49cbb-1650">因此，你不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1650">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1651">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1651">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1652">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1652">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1653">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1653">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1654">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1654">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1655">在此元素上引发未处理的 <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> 事件时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1655">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1656">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1656">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1657">此虚方法引发时的值<xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1657">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="49cbb-1658">虚方法首先引发，并可以处理所需的事件数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1658">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="49cbb-1659">则<xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1659">Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="49cbb-1660">请注意，事件不路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1660">Notice that the event is not a routed event.</span></span> <span data-ttu-id="49cbb-1661">因此你无法将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1661">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="49cbb-1662">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1662">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1663">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1663">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1664">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1664">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1665">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1665">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1666">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1666">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1667">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1667">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1668">击键的专用输入管理器来处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1668">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="49cbb-1669">之前被视为常规击键公开，其他编程功能，依赖于击键，例如，输入和命令绑定，可能处理击键。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1669">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="49cbb-1670">如果这些输入系统功能将事件标记为已处理，则<xref:System.Windows.UIElement.OnKeyDown%2A>不会被调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1670">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1671">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1671">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1672">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1672">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1673">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1673">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1674">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1674">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1675">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1675">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1676">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1676">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1677">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1677">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1678">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1678">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1679">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1679">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1680">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1680">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1681">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1681">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1682">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1682">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1683">击键的专用输入管理器来处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1683">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="49cbb-1684">之前被视为常规击键公开，其他编程功能，依赖于击键，例如，输入和命令绑定，可能处理击键。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1684">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="49cbb-1685">如果这些输入系统功能将事件标记为已处理，则<xref:System.Windows.UIElement.OnKeyUp%2A>不会被调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1685">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1686">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1686">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1687">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1687">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1688">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1688">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1689">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1689">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1690">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1690">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1691">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1691">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1692">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1692">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1693">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1693">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1694">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1694">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1695">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1695">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="49cbb-1696">此事件数据必须包含 <see cref="E:System.Windows.UIElement.LostFocus" /> 事件的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1696">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1697">使用提供的事件数据引发 <see cref="E:System.Windows.UIElement.LostFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1697">Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1698">此方法，虽然但虚拟的具有引发事件的默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1698">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="49cbb-1699">这在 \* 方法实现用于引发事件，并且内部调用此方法的实现来引发事件时<xref:System.Windows.UIElement.IsFocused%2A>属性值更改。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1699">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="49cbb-1700">此实现不同于其他某些[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 实现，后者只提供了一种简便方式为该事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1700">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-1701">除非有特意需求不引发焦点事件，请确保您的实现将调用基实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1701">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span>
            </span>
            <span data-ttu-id="49cbb-1702">否则为<see cref="E:System.Windows.UIElement.LostFocus" />在通常将焦点设置到此元素的典型用户操作期间不会引发事件。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1702">Otherwise, the <see cref="E:System.Windows.UIElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span>
            </span>
            <span data-ttu-id="49cbb-1703">如果不想使用您可获得焦点的元素，你可以通过将阻止元素<see cref="P:System.Windows.UIElement.Focusable" />到<see langword="false" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-1703">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1704">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1704">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1705">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1705">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1706">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1706">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1707">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1707">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1708">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1708">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1709">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1709">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1710">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1710">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1711">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1711">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1712">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1712">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1713">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1713">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1714">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1714">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1715">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1715">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1716">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1716">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1717">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1717">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1718">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1718">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1719">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1719">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1720">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1720">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1721">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1721">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1722">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1722">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1723">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1723">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1724">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1724">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1725">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1725">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1726">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1726">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1727">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1727">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1728">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1728">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1729">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1729">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1730">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1730">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1731">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1731">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1732">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1732">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1733">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1733">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1734">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1734">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1735">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1735">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1736">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1736">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1737">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1737">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1738">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1738">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1739">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1739">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1740">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1740">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1741">为在此元素失去触摸屏输入捕获时发生的 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1741">Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1742"><xref:System.Windows.UIElement.OnLostTouchCapture%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1742">The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1743">重写<xref:System.Windows.UIElement.OnLostTouchCapture%2A>在派生类来处理<xref:System.Windows.UIElement.LostTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1743">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event.</span></span> <span data-ttu-id="49cbb-1744">一定要调用基类的<xref:System.Windows.UIElement.OnLostTouchCapture%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1744">Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1745">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1745">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1746">在 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件发生时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1746">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1747"><xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1747">The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1748">重写<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>在派生类来处理<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1748">Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event.</span></span> <span data-ttu-id="49cbb-1749">一定要调用<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>方法的基类，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1749">Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1750">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1750">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1751">在 <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 事件发生时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1751">Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1752"><xref:System.Windows.UIElement.OnManipulationCompleted%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1752">The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1753">重写<xref:System.Windows.UIElement.OnManipulationCompleted%2A>在派生类来处理<xref:System.Windows.UIElement.ManipulationCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1753">Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event.</span></span> <span data-ttu-id="49cbb-1754">一定要调用<xref:System.Windows.UIElement.OnManipulationCompleted%2A>方法的基类，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1754">Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1755">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1755">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1756">在 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 事件发生时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1756">Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1757"><xref:System.Windows.UIElement.OnManipulationDelta%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1757">The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1758">重写<xref:System.Windows.UIElement.OnManipulationDelta%2A>在派生类来处理<xref:System.Windows.UIElement.ManipulationDelta>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1758">Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="49cbb-1759">一定要调用<xref:System.Windows.UIElement.OnManipulationDelta%2A>方法的基类，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1759">Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1760">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1760">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1761">在 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 事件发生时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1761">Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1762"><xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1762">The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1763">重写<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>在派生类来处理<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1763">Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event.</span></span> <span data-ttu-id="49cbb-1764">一定要调用<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>方法的基类，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1764">Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1765">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1765">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1766">在 <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 事件发生时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1766">Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1767"><xref:System.Windows.UIElement.OnManipulationStarted%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1767">The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1768">重写<xref:System.Windows.UIElement.OnManipulationStarted%2A>在派生类来处理<xref:System.Windows.UIElement.ManipulationStarted>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1768">Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event.</span></span> <span data-ttu-id="49cbb-1769">一定要调用<xref:System.Windows.UIElement.OnManipulationStarted%2A>方法的基类，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1769">Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1770">包含事件数据的 <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1770">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1771">为在首次创建操作处理器时发生的 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1771">Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1772"><xref:System.Windows.UIElement.OnManipulationStarting%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1772">The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-1773">重写<xref:System.Windows.UIElement.OnManipulationStarting%2A>在派生类来处理<xref:System.Windows.UIElement.ManipulationStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1773">Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span> <span data-ttu-id="49cbb-1774">一定要调用基类的<xref:System.Windows.UIElement.OnManipulationStarting%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1774">Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1775">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1775">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-1776">此事件数据报告有关按下鼠标按钮和已处理状态的详细信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1776">This event data reports details about the mouse button that was pressed and the handled state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1777">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1777">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1778">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1778">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1779">处理鼠标按钮操作也是通过一个专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1779">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="49cbb-1780">其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，它公开作为常规鼠标按钮操作之前可能调用操作的处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1780">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="49cbb-1781">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件为已处理，<xref:System.Windows.UIElement.OnMouseDown%2A>不会被调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1781">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1782">如果使用此类处理程序将该事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.MouseLeftButtonDown>和<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1782">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="49cbb-1783">任一这些事件可能会在接收元素上引发时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1783">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="49cbb-1784">如果你将标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们将传递中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1784">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="49cbb-1785">如果在类处理中处理该事件，除非你显式将不会调用实例为子事件的处理程序<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`为了附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1785">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="49cbb-1786">类处理程序也不会调用除非这些类处理程序已注册到<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1786">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="49cbb-1787">通过处理<xref:System.Windows.UIElement.OnMouseDown%2A>，则意味着类处理负责按下操作的所有可能的鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1787">By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="49cbb-1788">此行为可能不需要;因此，此虚方法用于将事件标记为已处理时要小心。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1788">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="49cbb-1789">每个按钮特定直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些按钮特定的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1789">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="49cbb-1790">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1790">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1791">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1791">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1792">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1792">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1793">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1793">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1794">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1794">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1795">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1795">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1796">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1796">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1797">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1797">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1798">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1798">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1799">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1799">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1800">当此元素引发未处理的 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 附加事件时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1800">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1801">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1801">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1802">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1802">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1803">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1803">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1804">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1804">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="49cbb-1805">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1805">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1806">在这种情况下匹配的事件是具有直接路由策略的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1806">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="49cbb-1807">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1807">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1808">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1808">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1809">当此元素引发未处理的 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 附加事件时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1809">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1810">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1810">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1811">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1811">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1812">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1812">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-1813">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1813">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="49cbb-1814">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1814">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1815">在这种情况下匹配的事件是具有直接路由策略的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1815">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="49cbb-1816">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1816">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1817">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1817">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-1818">事件数据报告称已按下鼠标左键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1818">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1819">当此元素引发未处理的 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 路由事件时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1819">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element.</span>
          </span>
          <span data-ttu-id="49cbb-1820">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1820">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1821"><xref:System.Windows.UIElement.MouseLeftButtonDown>事件看起来进行冒泡路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1821">The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-1822"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是基础是气泡，路由的事件和每个<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1822"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="49cbb-1823">尽管您可以将标记<xref:System.Windows.UIElement.MouseLeftButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1823">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-1824">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1824">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1825">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1825">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-1826">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1826">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-1827">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1827">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-1828">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1828">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-1829">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1829">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="49cbb-1830">你是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1830">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="49cbb-1831">无法调用基禁用基实现，也应调用该鼠标事件的默认输入的处理<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1831">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="49cbb-1832">例如，你可以从派生<xref:System.Windows.Controls.Button>，并重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>在派生类而不会调用基实现中; 但是，此重写禁用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1832">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1833">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1833">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-1834">事件数据报告称已松开鼠标左键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1834">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1835">当某个未处理的 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1835">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1836">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1836">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1837"><xref:System.Windows.UIElement.MouseLeftButtonUp>事件看起来进行冒泡路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1837">The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-1838"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是基础是气泡，路由的事件和每个<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1838"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="49cbb-1839">尽管您可以将标记<xref:System.Windows.UIElement.MouseLeftButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1839">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-1840">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1840">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1841">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1841">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-1842">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1842">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-1843">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1843">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-1844">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1844">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1845">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1845">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1846">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1846">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1847">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1847">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1848">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1848">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1849">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1849">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1850">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1850">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1851">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1851">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1852">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1852">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1853">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1853">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1854">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1854">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1855">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1855">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1856">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1856">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1857">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1857">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-1858">事件数据报告称已按下鼠标右键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1858">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1859">当某个未处理的 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1859">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1860">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1860">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1861"><xref:System.Windows.UIElement.MouseRightButtonDown>事件看起来进行冒泡路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1861">The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-1862"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是基础是气泡，路由的事件和每个<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1862"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="49cbb-1863">尽管您可以将标记<xref:System.Windows.UIElement.MouseRightButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1863">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-1864">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1864">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1865">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1865">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-1866">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1866">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-1867">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1867">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-1868">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1868">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-1869">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1869">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="49cbb-1870">你是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1870">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="49cbb-1871">无法调用基禁用基实现，也应调用该鼠标事件的默认输入的处理<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1871">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="49cbb-1872">例如，你可以从派生<xref:System.Windows.Controls.Control>，并重写<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>但是，而无需调用基实现; 在派生类中此替代禁用上下文菜单上的服务控件，都是一部分的<xref:System.Windows.Controls.Control>默认行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1872">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1873">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1873">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-1874">事件数据报告称已释放鼠标右键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1874">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1875">当某个未处理的 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1875">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1876">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1876">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1877"><xref:System.Windows.UIElement.MouseRightButtonUp>事件看起来进行冒泡路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1877">The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-1878"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是基础是气泡，路由的事件和每个<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1878"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="49cbb-1879">尽管您可以将标记<xref:System.Windows.UIElement.MouseRightButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1879">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-1880">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1880">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1881">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1881">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-1882">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1882">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-1883">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1883">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-1884">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1884">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1885">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1885">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-1886">事件数据将报告已松开了鼠标按钮。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1886">The event data reports that the mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1887">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1887">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1888">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1888">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1889">处理鼠标按钮操作也是通过一个专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1889">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="49cbb-1890">其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，它公开作为常规鼠标按钮操作之前可能调用操作的处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1890">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="49cbb-1891">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件为已处理，<xref:System.Windows.UIElement.OnMouseUp%2A>不会被调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1891">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="49cbb-1892">如果使用此类处理程序将该事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.MouseLeftButtonUp>和<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1892">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="49cbb-1893">上述任一事件，可能会引发接收元素上时<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1893">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="49cbb-1894">如果你将标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们将传递中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1894">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="49cbb-1895">如果在类处理中处理该事件，除非你显式将不会调用实例为子事件的处理程序<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`为了附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1895">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="49cbb-1896">类处理程序也不会调用除非这些类处理程序已注册到<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1896">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="49cbb-1897">通过处理<xref:System.Windows.UIElement.OnMouseUp%2A>，则意味着，在类处理说明进行操作的所有可能的鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1897">By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="49cbb-1898">此行为可能不需要;因此，此虚方法用于将事件标记为已处理时要小心。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1898">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="49cbb-1899">每个按钮特定直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些按钮特定的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1899">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="49cbb-1900">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1900">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1901">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1901">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1902">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1902">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1903">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1903">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1904">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1904">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1905">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1905">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1906">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1906">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1907">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1907">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1908">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1908">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1909">包含事件数据的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1909">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1910">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1910">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1911">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1911">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1912">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1912">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1913">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1913">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1914">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1914">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1915">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1915">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1916">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1916">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1917">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1917">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1918">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1918">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1919">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1919">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1920">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1920">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1921">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1921">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1922">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1922">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1923">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1923">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1924">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1924">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1925">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1925">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1926">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1926">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1927">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1927">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1928">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1928">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1929">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1929">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1930">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1930">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1931">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1931">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1932">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1932">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-1933">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1933">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1934">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1934">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1935">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1935">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1936">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1936">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1937">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1937">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1938">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1938">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1939">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1939">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1940">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1940">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1941">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1941">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1942">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1942">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1943">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1943">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1944">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1944">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1945">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1945">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-1946">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1946">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1947">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1947">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1948">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1948">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1949">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1949">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1950">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1950">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1951">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1951">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1952">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1952">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1953">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1953">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1954">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1954">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1955">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1955">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1956">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1956">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1957">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1957">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1958">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1958">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-1959">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1959">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1960">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1960">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1961">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1961">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1962">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1962">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1963">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1963">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1964">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1964">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1965">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1965">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1966">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1966">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1967">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1967">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1968">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1968">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1969">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1969">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1970">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1970">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1971">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1971">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-1972">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1972">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1973">包含事件数据的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1973">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1974">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1974">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1975">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1975">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1976">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1976">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1977">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1977">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1978">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1978">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1979">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1979">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1980">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1980">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1981">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1981">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1982">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1982">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1983">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1983">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1984">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1984">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-1985">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1985">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1986">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1986">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-1987">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1987">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-1988">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1988">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-1989">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1989">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-1990">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1990">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-1991">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1991">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-1992">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1992">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-1993">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1993">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-1994">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1994">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-1995">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1995">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-1996">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1996">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-1997">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1997">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-1998">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-1998">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-1999">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-1999">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2000">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2000">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2001">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2001">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2002">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2002">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2003">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2003">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2004">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2004">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2005">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2005">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2006">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2006">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2007">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2007">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2008">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2008">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2009">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2009">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2010">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2010">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2011">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2011">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2012">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2012">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2013">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2013">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2014">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2014">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2015">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2015">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2016">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2016">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2017">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2017">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2018">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2018">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2019">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2019">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2020">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2020">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2021">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2021">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2022">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2022">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2023">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2023">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2024">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2024">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2025">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2025">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2026">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2026">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2027">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2027">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2028">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2028">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2029">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2029">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2030">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2030">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2031">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2031">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2032">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2032">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2033">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2033">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2034">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2034">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2035">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2035">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2036">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2036">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2037">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2037">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2038">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2038">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-2039">事件数据报告称已按下一个或多个鼠标按钮。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2039">The event data reports that one or more mouse buttons were pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2040">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 附加路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2040">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2041">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2041">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2042">处理鼠标按钮操作也是通过一个专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2042">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="49cbb-2043">其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，它公开作为常规鼠标按钮操作之前可能调用操作的处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2043">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="49cbb-2044">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件为已处理，<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>不会被调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2044">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="49cbb-2045">如果使用此类处理程序将该事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2045">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="49cbb-2046">任一这些事件可能会在接收元素上引发时<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2046">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="49cbb-2047">如果你将标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们将传递中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2047">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="49cbb-2048">如果在类处理中处理该事件，除非你显式将不会调用实例为子事件的处理程序<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`为了附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2048">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="49cbb-2049">类处理程序也不会调用除非这些类处理程序已注册到<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2049">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="49cbb-2050">通过处理<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>，则意味着类处理负责按下操作的所有可能的鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2050">By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="49cbb-2051">此行为可能不需要;因此，此虚方法用于将事件标记为已处理时要小心。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2051">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="49cbb-2052">每个按钮特定直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些按钮特定的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2052">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="49cbb-2053">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2053">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2054">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2054">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2055">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2055">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2056">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2056">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2057">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2057">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2058">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2058">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2059">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2059">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2060">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2060">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2061">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2061">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2062">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2062">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2063">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2063">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-2064">事件数据报告称已按下鼠标左键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2064">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2065">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2065">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2066">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2066">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2067"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>事件看起来进行隧道路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2067">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-2068"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 是为隧道路由，并且每个基础事件<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2068"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="49cbb-2069">尽管您可以将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2069">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-2070">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2070">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-2071">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2071">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-2072">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2072">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-2073">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2073">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-2074">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2074">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-2075">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2075">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="49cbb-2076">你是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2076">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="49cbb-2077">无法调用基禁用基实现，也应调用该鼠标事件的默认输入的处理<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2077">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="49cbb-2078">例如，你可以从派生<xref:System.Windows.Controls.Button>，并重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>在派生类而不会调用基实现中; 但是，此重写禁用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2078">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2079">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2079">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-2080">事件数据报告称已松开鼠标左键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2080">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2081">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2081">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2082">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2082">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2083"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>事件看起来进行隧道路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2083">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-2084"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 是为隧道路由，并且每个基础事件<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2084"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="49cbb-2085">尽管您可以将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2085">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-2086">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2086">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-2087">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2087">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-2088">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2088">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-2089">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2089">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-2090">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2090">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2091">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2091">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2092">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2092">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2093">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2093">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2094">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2094">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2095">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2095">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2096">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2096">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2097">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2097">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2098">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2098">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2099">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2099">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2100">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2100">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2101">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2101">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2102">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2102">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2103">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2103">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2104">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2104">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-2105">事件数据报告称已按下鼠标右键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2105">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2106">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2106">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2107">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2107">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2108"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown>事件看起来进行隧道路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2108">The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-2109"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 是为隧道路由，并且每个基础事件<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2109"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="49cbb-2110">尽管您可以将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2110">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-2111">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2111">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-2112">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2112">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-2113">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2113">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-2114">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2114">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-2115">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2115">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-2116">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2116">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="49cbb-2117">你是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2117">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="49cbb-2118">无法调用基禁用基实现，也应调用该鼠标事件的默认输入的处理<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2118">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="49cbb-2119">例如，你可以从派生<xref:System.Windows.Controls.Control>，并重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>但是，而无需调用基实现; 在派生类中此替代禁用上下文菜单上的服务控件，都是一部分的<xref:System.Windows.Controls.Control>默认行为。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2119">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2120">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2120">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-2121">事件数据报告称已释放鼠标右键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2121">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2122">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2122">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2123">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2123">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2124"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp>事件看起来进行隧道路由，但实际上是以的间接方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2124">The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="49cbb-2125"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 是为隧道路由，并且每个基础事件<xref:System.Windows.UIElement>沿着事件路由将使用相同的处理对引发直接路由的事件<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2125"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="49cbb-2126">尽管您可以将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2126">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="49cbb-2127">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2127">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="49cbb-2128">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>和将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2128">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="49cbb-2129">如果你想要重写此逻辑，必须创建一个派生的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2129">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="49cbb-2130">在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2130">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49cbb-2131">无法更改鼠标处理行为<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2131">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2132">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2132">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="49cbb-2133">事件数据将报告已释放了一个或多个鼠标按钮。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2133">The event data reports that one or more mouse buttons were released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2134">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2134">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2135">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2135">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2136">处理鼠标按钮操作也是通过一个专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2136">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="49cbb-2137">其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，它公开作为常规鼠标按钮操作之前可能调用操作的处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2137">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="49cbb-2138">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件为已处理，<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>不会被调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2138">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="49cbb-2139">如果使用此类处理程序将该事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2139">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="49cbb-2140">上述任一事件，可能会引发接收元素上时<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2140">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="49cbb-2141">如果你将标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们将传递中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2141">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="49cbb-2142">如果在类处理中处理该事件，除非你显式将不会调用实例为子事件的处理程序<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`为了附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2142">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="49cbb-2143">类处理程序也不会调用除非这些类处理程序已注册到<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2143">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="49cbb-2144">通过处理<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>，则意味着，在类处理说明进行操作的所有可能的鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2144">By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="49cbb-2145">此行为可能不需要;因此，此虚方法用于将事件标记为已处理时要小心。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2145">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="49cbb-2146">每个按钮特定直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些按钮特定的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2146">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="49cbb-2147">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2147">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2148">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2148">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2149">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2149">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2150">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2150">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2151">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2151">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2152">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2152">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2153">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2153">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2154">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2154">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2155">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2155">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2156">包含事件数据的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2156">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2157">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2157">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2158">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2158">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2159">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2159">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2160">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2160">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2161">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2161">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2162">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2162">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2163">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2163">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2164">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2164">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2165">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2165">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2166">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2166">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2167">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2167">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2168">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2168">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2169">包含事件数据的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2169">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2170">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2170">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2171">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2171">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2172">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2172">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2173">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2173">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2174">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2174">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2175">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2175">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2176">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2176">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2177">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2177">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2178">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2178">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2179">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2179">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2180">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2180">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2181">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2181">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2182">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2182">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2183">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2183">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2184">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2184">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2185">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2185">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2186">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2186">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2187">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2187">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2188">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2188">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2189">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2189">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2190">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2190">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2191">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2191">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2192">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2192">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2193">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2193">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2194">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2194">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2195">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2195">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2196">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2196">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2197">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2197">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2198">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2198">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2199">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2199">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2200">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2200">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2201">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2201">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2202">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2202">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2203">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2203">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2204">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2204">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2205">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2205">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2206">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2206">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2207">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2207">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2208">包含事件数据的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2208">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2209">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2209">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2210">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2210">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2211">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2211">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2212">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2212">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2213">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2213">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2214">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2214">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2215">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2215">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2216">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2216">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2217">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2217">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2218">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2218">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2219">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2219">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2220">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2220">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2221">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2221">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2222">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2222">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2223">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2223">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2224">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2224">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2225">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2225">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2226">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2226">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2227">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2227">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2228">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2228">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2229">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2229">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2230">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2230">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2231">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2231">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2232">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2232">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2233">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2233">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2234">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2234">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2235">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2235">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2236">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2236">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2237">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2237">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2238">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2238">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2239">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2239">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2240">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2240">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2241">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2241">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2242">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2242">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2243">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2243">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2244">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2244">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2245">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2245">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2246">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2246">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2247">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2247">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2248">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2248">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2249">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2249">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2250">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2250">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2251">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2251">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2252">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2252">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2253">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2253">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2254">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2254">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2255">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2255">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2256">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2256">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2257">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2257">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2258">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2258">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2259">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2259">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2260">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2260">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2261">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2261">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2262">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2262">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2263">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2263">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2264">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2264">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2265">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2265">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2266">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2266">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2267">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2267">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2268">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2268">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2269">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2269">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2270">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2270">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2271">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2271">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2272">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2272">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2273">包含事件数据的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2273">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2274">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2274">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2275">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2275">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2276">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2276">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2277">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2277">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2278">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2278">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2279">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2279">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2280">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2280">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2281">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2281">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2282">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2282">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2283">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2283">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2284">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2284">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2285">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2285">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2286">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2286">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2287">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2287">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2288">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2288">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2289">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2289">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2290">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2290">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2291">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2291">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2292">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2292">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2293">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2293">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2294">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2294">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2295">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2295">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2296">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2296">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2297">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2297">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2298">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2298">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2299">包含事件数据的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2299">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2300">当某个未处理的 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2300">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2301">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2301">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2302">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2302">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2303">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2303">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2304">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2304">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2305">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2305">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2306">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2306">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2307">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2307">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2308">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2308">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2309">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2309">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2310">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2310">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="49cbb-2311">另一个专用于预览事件的情况是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2311">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2312">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2312">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2313">为在触摸屏输入按下此元素时发生的 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2313">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2314"><xref:System.Windows.UIElement.OnPreviewTouchDown%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2314">The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2315">重写<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>在派生类来处理<xref:System.Windows.UIElement.PreviewTouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2315">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="49cbb-2316">一定要调用基类的<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2316">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2317">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2317">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2318">为在此元素内部移动触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2318">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2319"><xref:System.Windows.UIElement.OnPreviewTouchMove%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2319">The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2320">重写<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>在派生类来处理<xref:System.Windows.UIElement.PreviewTouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2320">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="49cbb-2321">一定要调用基类的<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2321">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2322">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2322">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2323">为在此元素内部释放触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2323">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2324"><xref:System.Windows.UIElement.OnPreviewTouchUp%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2324">The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2325">重写<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>在派生类来处理<xref:System.Windows.UIElement.PreviewTouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2325">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="49cbb-2326">一定要调用基类的<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2326">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2327">包含事件数据的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2327">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2328">当某个未处理的 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2328">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2329">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2329">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2330">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2330">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2331">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2331">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2332">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2332">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2333">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2333">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2334">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2334">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2335">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2335">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2336">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2336">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2337">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2337">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2338">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2338">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2339">包含事件数据的 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2339">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2340">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2340">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2341">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2341">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2342">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2342">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2343">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2343">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2344">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2344">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2345">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2345">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2346">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2346">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2347">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2347">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2348">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2348">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2349">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2349">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2350">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2350">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">
          <span data-ttu-id="49cbb-2351">特定元素的绘制指令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2351">The drawing instructions for a specific element.</span>
          </span>
          <span data-ttu-id="49cbb-2352">此上下文是为布局系统提供的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2352">This context is provided to the layout system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2353">在派生类中重写时，会参与由布局系统控制的呈现操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2353">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span>
          </span>
          <span data-ttu-id="49cbb-2354">调用此方法时，不直接使用此元素的呈现指令，而是将其保留供布局和绘制在以后异步使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2354">The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2355">在此方法有没有默认实现<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2355">This method has no default implementation in the <xref:System.Windows.UIElement> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-2356">下面的代码示例演示面板派生类的可能实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2356">The following code example shows a possible implementation for a panel derived class.</span></span>  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-2357">
              <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />可以重写方法能够添加更多图形元素 （以前未在逻辑树中定义） 到呈现元素，例如效果或装饰器。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2357">The <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</span>
            </span>
            <span data-ttu-id="49cbb-2358">A<see cref="T:System.Windows.Media.DrawingContext" />对象作为参数，它提供绘制形状、 文本、 图像或视频方法传递。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2358">A <see cref="T:System.Windows.Media.DrawingContext" /> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="49cbb-2359">打包的参数 (<see cref="T:System.Windows.SizeChangedInfo" />)，其中包括新旧大小，其尺寸实际上发生了改变。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2359">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2360">在派生类中重写时，会参与由布局系统控制的呈现操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2360">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span>
          </span>
          <span data-ttu-id="49cbb-2361">如果元素的 <see cref="P:System.Windows.UIElement.RenderSize" /> 已因布局更新而更改，则在布局更新之后以及呈现之前调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2361">This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2362">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2362">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2363">典型的 WPF 框架级别元素使用替代实现从<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2363">A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="49cbb-2364"><xref:System.Windows.FrameworkElement>实现失效<xref:System.Windows.FrameworkElement.Width%2A>和<xref:System.Windows.FrameworkElement.Height%2A>属性并处理更新布局的基础知识。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2364">The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout.</span></span> <span data-ttu-id="49cbb-2365">重写<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>在<xref:System.Windows.UIElement>级别意味着元素实现以防出现故意不使用 WPF 框架级别实现，且因此您的元素必须处理的布局逻辑更直接的办法，通常通过编写替换布局系统。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2365">Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2366">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2366">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2367">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2367">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2368">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2368">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2369">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2369">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2370">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2370">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2371">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2371">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2372">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2372">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2373">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2373">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2374">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2374">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2375">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2375">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2376">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2376">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2377">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2377">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2378">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2378">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2379">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2379">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2380">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2380">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2381">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2381">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2382">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2382">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2383">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2383">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2384">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2384">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2385">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2385">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2386">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2386">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2387">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2387">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2388">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2388">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2389">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2389">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2390">包含事件数据的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2390">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2391">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2391">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2392">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2392">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2393">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2393">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2394">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2394">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2395">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2395">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2396">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2396">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2397">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2397">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2398">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2398">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2399">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2399">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2400">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2400">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2401">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2401">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2402">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2402">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2403">当此元素引发未处理的 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2403">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="49cbb-2404">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2404">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2405">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2405">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2406">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2406">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-2407">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2407">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="49cbb-2408">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2408">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2409">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2409">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2410">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2410">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2411">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2411">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2412">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2412">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2413">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2413">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2414">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2414">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2415">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2415">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2416">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2416">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2417">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2417">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2418">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2418">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2419">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2419">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2420">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2420">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2421">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2421">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2422">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2422">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2423">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2423">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2424">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2424">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2425">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2425">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2426">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2426">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2427">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2427">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2428">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2428">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2429">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2429">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2430">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2430">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2431">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2431">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2432">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2432">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2433">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2433">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2434">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2434">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2435">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2435">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2436">当此元素引发未处理的 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2436">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="49cbb-2437">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2437">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2438">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2438">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2439">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2439">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="49cbb-2440">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2440">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="49cbb-2441">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2441">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2442">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2442">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2443">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2443">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2444">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2444">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2445">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2445">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2446">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2446">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2447">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2447">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2448">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2448">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2449">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2449">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2450">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2450">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2451">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2451">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2452">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2452">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2453">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2453">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2454">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2454">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2455">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2455">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2456">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2456">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2457">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2457">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2458">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2458">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2459">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2459">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2460">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2460">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2461">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2461">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2462">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2462">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2463">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2463">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2464">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2464">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2465">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2465">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2466">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2466">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2467">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2467">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2468">包含事件数据的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2468">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2469">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2469">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2470">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2470">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2471">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2471">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2472">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2472">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2473">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2473">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2474">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2474">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2475">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2475">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2476">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2476">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2477">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2477">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2478">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2478">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2479">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2479">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2480">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2480">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2481">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2481">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2482">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2482">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2483">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2483">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2484">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2484">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2485">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2485">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2486">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2486">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2487">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2487">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2488">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2488">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2489">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2489">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2490">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2490">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2491">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2491">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2492">包含事件数据的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2492">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2493">当某个未处理的 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2493">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="49cbb-2494">实现此方法可为此事件添加类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2494">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2495">此方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2495">This method has no default implementation.</span></span> <span data-ttu-id="49cbb-2496">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2496">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="49cbb-2497">此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2497">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="49cbb-2498">在这种情况下匹配的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2498">In this case the matching event is a routed event.</span></span> <span data-ttu-id="49cbb-2499">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定的元素，将会调用处理程序引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2499">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="49cbb-2500">因此，您的实现需要检查的事件数据的源属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2500">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="49cbb-2501">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2501">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="49cbb-2502">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2502">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="49cbb-2503">一个类处理适合的方案是处理的事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2503">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2504">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2504">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2505">为在此元素内按下触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.TouchDown" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2505">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2506"><xref:System.Windows.UIElement.OnTouchDown%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2506">The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2507">重写<xref:System.Windows.UIElement.OnTouchDown%2A>在派生类来处理<xref:System.Windows.UIElement.TouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2507">Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event.</span></span> <span data-ttu-id="49cbb-2508">一定要调用基类的<xref:System.Windows.UIElement.OnTouchDown%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2508">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2509">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2509">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2510">为在触摸屏输入从此元素边界外部移动到其内部时发生的 <see cref="E:System.Windows.UIElement.TouchEnter" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2510">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2511"><xref:System.Windows.UIElement.OnTouchEnter%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2511">The <xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2512">重写<xref:System.Windows.UIElement.OnTouchEnter%2A>在派生类来处理<xref:System.Windows.UIElement.TouchEnter>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2512">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event.</span></span> <span data-ttu-id="49cbb-2513">一定要调用基类的<xref:System.Windows.UIElement.OnTouchEnter%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2513">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2514">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2514">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2515">为在触摸屏输入从此 <see cref="E:System.Windows.UIElement.TouchLeave" /> 边界内部移动到其外部时发生的 <see cref="T:System.Windows.UIElement" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2515">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2516"><xref:System.Windows.UIElement.OnTouchLeave%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2516">The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2517">重写<xref:System.Windows.UIElement.OnTouchLeave%2A>在派生类来处理<xref:System.Windows.UIElement.TouchLeave>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2517">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event.</span></span> <span data-ttu-id="49cbb-2518">一定要调用基类的<xref:System.Windows.UIElement.OnTouchLeave%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2518">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2519">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2519">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2520">为在此元素内部移动触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.TouchMove" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2520">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2521"><xref:System.Windows.UIElement.OnTouchMove%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2521">The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2522">重写<xref:System.Windows.UIElement.OnTouchMove%2A>在派生类来处理<xref:System.Windows.UIElement.TouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2522">Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event.</span></span> <span data-ttu-id="49cbb-2523">一定要调用基类的<xref:System.Windows.UIElement.OnTouchMove%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2523">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-2524">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2524">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2525">为在此元素内部释放触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.TouchUp" /> 路由事件提供类处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2525">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2526"><xref:System.Windows.UIElement.OnTouchUp%2A>方法不具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2526">The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="49cbb-2527">重写<xref:System.Windows.UIElement.OnTouchUp%2A>在派生类来处理<xref:System.Windows.UIElement.TouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2527">Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event.</span></span> <span data-ttu-id="49cbb-2528">一定要调用基类的<xref:System.Windows.UIElement.OnTouchUp%2A>方法，从而基本类对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2528">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="49cbb-2529">先前的父项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2529">The previous parent.</span>
          </span>
          <span data-ttu-id="49cbb-2530">如果 <see cref="T:System.Windows.DependencyObject" /> 先前不具有父元素，则此项可以提供为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2530">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2531">在此 <see cref="T:System.Windows.UIElement" /> 的父元素报告其基础可视父元素发生更改时，调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2531">Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="49cbb-2532">如果你重写此方法，始终调用基实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2532">If you override this method, always call the base implementation.</span>
            </span>
            <span data-ttu-id="49cbb-2533">默认的基实现执行某些内部维护的反向继承属性状态。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2533">The default base implementation performs some internal maintenance of reverse-inherited property state.</span>
            </span>
            <span data-ttu-id="49cbb-2534">无法调用基实现将使此状态无效。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2534">Failing to call the base implementation will invalidate this state.</span>
            </span>
            <span data-ttu-id="49cbb-2535">此方法重写 <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2535">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span>
            </span>
            <span data-ttu-id="49cbb-2536">
              <see cref="T:System.Windows.FrameworkElement" /> 和<see cref="T:System.Windows.Window" />也都重写<see cref="T:System.Windows.UIElement" />实现<see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />，和<see cref="T:System.Windows.Window" />对其进行密封。</span>
            <span class="sxs-lookup">
              <span data-stu-id="49cbb-2536">
                <see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement" /> implementation of <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2537">获取或设置当 <see cref="T:System.Windows.UIElement" /> 在[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中呈现时为其整体应用的不透明度因子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2537">Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="49cbb-2538">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2538">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-2539">不透明度因子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2539">The opacity factor.</span>
          </span>
          <span data-ttu-id="49cbb-2540">默认不透明度为 1.0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2540">Default opacity is 1.0.</span>
          </span>
          <span data-ttu-id="49cbb-2541">值应介于 0.0 和 1.0 之间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2541">Expected values are between 0.0 and 1.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2542">1.0 的默认值是此依赖项属性的初始元数据的默认设置<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2542">The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="49cbb-2543">其他派生的类可能可能将此默认值更改通过重写从其类构造函数内的元数据。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2543">Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</span></span>  
  
 <span data-ttu-id="49cbb-2544">值<xref:System.Windows.UIElement.Opacity%2A>将不会应用到实际的布局，除非该元素也将可见 (<xref:System.Windows.UIElement.IsVisible%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2544">The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).</span></span>  
  
 <span data-ttu-id="49cbb-2545"><xref:System.Windows.UIElement.Opacity%2A> 是从父元素应用上元素树下到子元素，但设置不各个子元素的属性值中所示的嵌套不透明度的可视效果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2545"><xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</span></span> <span data-ttu-id="49cbb-2546">例如，如果一个列表包含 50%(0.5) 不透明度，并且它的一个列表项具有自己的不透明度设置为 20%(0.2)，该列表项的 net 可见不透明度将呈现，就好像 10%(0.1)，但列表项的属性值<xref:System.Windows.UIElement.Opacity%2A>属性仍将为 0.2 查询时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2546">For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.</span></span>  
  
 <span data-ttu-id="49cbb-2547">即使声明或计算不透明度为 0，则元素将仍参与输入的事件和命令，并能够获得焦点。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2547">Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</span></span> <span data-ttu-id="49cbb-2548">此方面很有用，例如可用于不透明度为零的对象 （如形状） 屏蔽透明元素的基础对象。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2548">This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</span></span> <span data-ttu-id="49cbb-2549">不透明度为零的对象然后可处理所有输入的事件处理为基础的区域。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2549">The opacity-zero object can then handle all the input event processing for an underlying area.</span></span> <span data-ttu-id="49cbb-2550">但是，`Background`或`Fill`对象或形状的应设置为一个值，即使它是<xref:System.Windows.Media.Brushes.Transparent%2A>，否则不启用的命中测试，并且会接收任何事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2550">However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.</span></span>  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-2551">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2551">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2552">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2552">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityProperty>|  
|<span data-ttu-id="49cbb-2553">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-2553">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-2554">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-2554">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2555">获取或设置不透明蒙板，作为应用于此元素已呈现内容的任何 Alpha 通道蒙板的 <see cref="T:System.Windows.Media.Brush" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2555">Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.</span>
          </span>
          <span data-ttu-id="49cbb-2556">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2556">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-2557">要用于不透明蒙板的画笔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2557">The brush to use for opacity masking.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2558">此属性仅使用 alpha 通道值是为所提供的任何<xref:System.Windows.Media.Brush>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2558">This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>.</span></span> <span data-ttu-id="49cbb-2559">其他通道<xref:System.Windows.Media.Brush>的呈现 （红色、 绿色还是蓝色） 的内容将被忽略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2559">The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.</span></span>  
  
 <span data-ttu-id="49cbb-2560">大多数典型<xref:System.Windows.Media.Brush>为此目的<xref:System.Windows.Media.ImageBrush>，可用于各种照片蒙板技术，如虚光照。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2560">The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette.</span></span> <span data-ttu-id="49cbb-2561">但任何定义<xref:System.Windows.Media.Brush>(如<xref:System.Windows.Media.LinearGradientBrush>) 可用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2561">But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.</span></span>  
  
 <span data-ttu-id="49cbb-2562">在[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]，此属性的值，可以使用特定于的每个实现内联语法<xref:System.Windows.Media.Brush>抽象类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2562">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class.</span></span> <span data-ttu-id="49cbb-2563">有关详细信息，请参阅[使用纯色和渐变概述绘制](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2563">For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-2564">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2564">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2565">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2565">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|<span data-ttu-id="49cbb-2566">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-2566">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-2567">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-2567">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-2568">下面的标记的示例演示<xref:System.Windows.Media.ImageBrush>应用于另一个不透明蒙板<xref:System.Windows.Controls.Image>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2568">The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.</span></span>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2569">标识 <see cref="P:System.Windows.UIElement.OpacityMask" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2569">Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2570">标识 <see cref="P:System.Windows.UIElement.Opacity" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2570">Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2571">获取一个唯一标识此元素的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2571">Gets a value that uniquely identifies this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-2572">此元素的唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2572">The unique identifier for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2573"><xref:System.Windows.UIElement.PersistId%2A> 唯一标识每个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2573"><xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element.</span></span> <span data-ttu-id="49cbb-2574">元素保留相同<xref:System.Windows.UIElement.PersistId%2A>每次相同[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]加载 （包括二进制表示形式）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2574">An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations).</span></span> <span data-ttu-id="49cbb-2575">此标识符用于内部加载、 分析和序列化要求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2575">This identifier is used for internal loading, parsing and serialization requirements.</span></span> <span data-ttu-id="49cbb-2576">它不是由应用程序代码使用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2576">It is not intended to be used by your application code.</span></span>  
  
 <span data-ttu-id="49cbb-2577">此属性无关<xref:System.Object.GetHashCode%2A>对于任何给定实例的结果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2577">This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <span data-ttu-id="49cbb-2578">请求的焦点遍历的方向。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2578">The direction of the requested focus traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-2579">当在派生类中重写时，返回将按指定焦点遍历方向接收焦点的元素，而不用实际将焦点移至该元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2579">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-2580">如果实际调用了 <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />，则为接收焦点的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2580">The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2581">此方法在此类的默认实现不完整，并始终返回`null`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2581">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2582">在输入系统报告出现以此元素为拖动目标的基础拖动事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2582">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2583">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDragEnter>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2583">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2584">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDragEnter>事件附加到基础<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2584">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2585">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2585">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2586">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2586">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="49cbb-2587">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2587">Routing strategy</span></span>|<span data-ttu-id="49cbb-2588">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2588">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2589">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2589">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-2590">对应的冒泡事件<xref:System.Windows.UIElement.DragEnter>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2590">The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="49cbb-2591">重写<xref:System.Windows.UIElement.OnPreviewDragEnter%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2591">Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2592">标识 <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2592">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2593">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2593">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2594">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2594">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2595">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2595">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2596">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2596">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2597">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2597">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2598">在输入系统报告出现以此元素为拖动起点的基础拖动事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2598">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2599">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDragLeave>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2599">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2600">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDragLeave>事件附加到基础<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2600">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2601">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2601">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2602">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2602">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="49cbb-2603">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2603">Routing strategy</span></span>|<span data-ttu-id="49cbb-2604">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2604">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2605">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2605">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-2606">对应的冒泡事件<xref:System.Windows.UIElement.DragLeave>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2606">The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="49cbb-2607">重写<xref:System.Windows.UIElement.OnPreviewDragLeave%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2607">Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2608">标识 <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2608">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2609">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2609">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2610">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2610">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2611">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2611">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2612">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2612">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2613">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2613">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2614">在输入系统报告出现以此元素为可能放置目标的基础拖动事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2614">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2615">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDragOver>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2615">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2616">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDragOver>事件附加到基础<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2616">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2617">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2617">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2618">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2618">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|<span data-ttu-id="49cbb-2619">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2619">Routing strategy</span></span>|<span data-ttu-id="49cbb-2620">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2620">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2621">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2621">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-2622">对应的冒泡事件<xref:System.Windows.UIElement.DragOver>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2622">The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="49cbb-2623">重写<xref:System.Windows.UIElement.OnPreviewDragOver%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2623">Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2624">标识 <see cref="E:System.Windows.UIElement.PreviewDragOver" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2624">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2625">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2625">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2626">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2626">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2627">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2627">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2628">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2628">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2629">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2629">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2630">在输入系统报告出现将此元素作为放置目标的基础放置事件时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2630">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2631">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDrop>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2631">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2632">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDrop>事件附加到基础<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2632">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2633">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2633">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2634">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2634">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|<span data-ttu-id="49cbb-2635">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2635">Routing strategy</span></span>|<span data-ttu-id="49cbb-2636">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2636">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2637">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2637">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="49cbb-2638">对应的冒泡事件<xref:System.Windows.UIElement.Drop>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2638">The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.</span></span>  
  
-   <span data-ttu-id="49cbb-2639">重写<xref:System.Windows.UIElement.OnPreviewDrop%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2639">Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2640">标识 <see cref="E:System.Windows.UIElement.PreviewDrop" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2640">Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2641">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2641">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2642">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2642">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2643">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2643">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2644">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2644">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2645">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2645">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2646">在开始拖放操作时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2646">Occurs when a drag-and-drop operation is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2647"><xref:System.Windows.UIElement.PreviewGiveFeedback>事件允许拖动事件，以修改鼠标指针的外观，以便为用户可视反馈提供拖放操作期间的源。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2647">The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="49cbb-2648">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewGiveFeedback>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2648">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2649">事件处理程序附加到<xref:System.Windows.UIElement.PreviewGiveFeedback>事件附加到基础<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2649">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2650">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2650">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2651">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2651">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="49cbb-2652">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2652">Routing strategy</span></span>|<span data-ttu-id="49cbb-2653">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2653">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2654">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2654">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="49cbb-2655">对应的冒泡事件<xref:System.Windows.UIElement.GiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2655">The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="49cbb-2656">重写<xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2656">Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2657">标识 <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2657">Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2658">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2658">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2659">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2659">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2660">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2660">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2661">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2661">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2662">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2662">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2663">在此元素聚焦于键盘时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2663">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2664">由于此事件使用隧道路由，具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2664">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-2665">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际具有焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2665">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="49cbb-2666">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2666">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2667">事件处理程序附加到<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2667">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2668">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2668">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2669">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2669">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="49cbb-2670">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2670">Routing strategy</span></span>|<span data-ttu-id="49cbb-2671">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2671">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2672">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2672">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="49cbb-2673">对应的冒泡事件<xref:System.Windows.UIElement.GotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2673">The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="49cbb-2674">重写<xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2674">Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2675">标识 <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2675">Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2676">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2676">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2677">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2677">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2678">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2678">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2679">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2679">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2680">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2680">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2681">当焦点在该元素上时按下某个键后发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2681">Occurs when a key is pressed while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2682">密钥处理与其他平台功能，例如发出命令和文本组合进行交互。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2682">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="49cbb-2683"><xref:System.Windows.UIElement.KeyDown>事件是可能无法如期出现在某些控件上的较低级别文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2683">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="49cbb-2684">这是文本的因为某些控件有控件组合或提供的更高级别的版本的类处理输入处理和相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2684">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="49cbb-2685">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewKeyDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2685">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2686">事件处理程序附加到<xref:System.Windows.UIElement.PreviewKeyDown>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2686">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2687">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2687">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2688">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2688">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="49cbb-2689">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2689">Routing strategy</span></span>|<span data-ttu-id="49cbb-2690">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2690">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2691">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2691">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="49cbb-2692">对应的冒泡事件<xref:System.Windows.UIElement.KeyDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2692">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-2693">重写<xref:System.Windows.UIElement.OnPreviewKeyDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2693">Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2694">标识 <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2694">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2695">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2695">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2696">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2696">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2697">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2697">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2698">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2698">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2699">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2699">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2700">当焦点在该元素上时松开某个键后发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2700">Occurs when a key is released while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2701">密钥处理与其他平台功能，例如发出命令和文本组合进行交互。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2701">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="49cbb-2702"><xref:System.Windows.UIElement.KeyUp>事件是可能无法如期出现在某些控件上的较低级别文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2702">The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="49cbb-2703">这是文本的因为某些控件有控件组合或提供的更高级别的版本的类处理输入处理和相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2703">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="49cbb-2704">有关详细信息，请检查单个控件的文档。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2704">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="49cbb-2705">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewKeyUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2705">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2706">事件处理程序附加到<xref:System.Windows.UIElement.PreviewKeyUp>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2706">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2707">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2707">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2708">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2708">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="49cbb-2709">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2709">Routing strategy</span></span>|<span data-ttu-id="49cbb-2710">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2710">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2711">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2711">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="49cbb-2712">对应的冒泡事件<xref:System.Windows.UIElement.KeyUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2712">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-2713">重写<xref:System.Windows.UIElement.OnPreviewKeyUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2713">Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2714">标识 <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2714">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2715">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2715">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2716">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2716">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2717">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2717">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2718">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2718">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2719">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2719">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2720">在此元素不再聚焦于键盘时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2720">Occurs when the keyboard is no longer focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2721">由于此事件使用隧道路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2721">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="49cbb-2722">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际失去焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2722">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="49cbb-2723">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2723">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2724">事件处理程序附加到<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2724">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2725">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2725">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2726">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2726">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="49cbb-2727">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2727">Routing strategy</span></span>|<span data-ttu-id="49cbb-2728">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2728">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2729">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2729">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="49cbb-2730">对应的冒泡事件<xref:System.Windows.UIElement.LostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2730">The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="49cbb-2731">重写<xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2731">Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2732">标识 <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2732">Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2733">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2733">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2734">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2734">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2735">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2735">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2736">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2736">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2737">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2737">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2738">在指针位于此元素上并且按下任意鼠标按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2738">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2739">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2739">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2740">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseDown>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2740">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2741"><xref:System.Windows.UIElement.PreviewMouseDown>事件通常一起引发<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>，这对应于按下的某个之一的两个标准鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2741">The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="49cbb-2742"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 和<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2742"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="49cbb-2743">请参阅备注以<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2743">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2744">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2744">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2745">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2745">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="49cbb-2746">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2746">Routing strategy</span></span>|<span data-ttu-id="49cbb-2747">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2747">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2748">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2748">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2749">对应的冒泡事件<xref:System.Windows.UIElement.MouseDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2749">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-2750">重写<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2750">Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2751">标识 <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2751">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2752">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2752">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2753">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2753">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2754">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2754">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2755">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2755">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2756">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2756">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2757">在鼠标指针位于此元素上并且按下鼠标左键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2757">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2758">尽管这看起来要遵循的隧道通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2758">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-2759">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2759">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-2760">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2760">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-2761">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2761">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-2762">如果你将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>处理，您实质上标记<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2762">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="49cbb-2763">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2763">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="49cbb-2764">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2764">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-2765">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2765">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-2766">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2766">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2767">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2767">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2768">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2768">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="49cbb-2769">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2769">Routing strategy</span></span>|<span data-ttu-id="49cbb-2770">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-2770">Direct</span></span>|  
|<span data-ttu-id="49cbb-2771">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2771">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2772">重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2772">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2773">标识 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2773">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2774">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2774">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2775">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2775">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2776">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2776">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2777">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2777">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2778">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2778">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2779">在鼠标指针位于此元素上并且松开鼠标左键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2779">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2780">尽管这看起来要遵循的隧道通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2780">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-2781">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2781">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-2782">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2782">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-2783">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2783">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-2784">如果你将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>处理，您实质上标记<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2784">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="49cbb-2785">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2785">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-2786">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2786">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-2787">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2787">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2788">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2788">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2789">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2789">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="49cbb-2790">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2790">Routing strategy</span></span>|<span data-ttu-id="49cbb-2791">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-2791">Direct</span></span>|  
|<span data-ttu-id="49cbb-2792">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2792">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2793">重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2793">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2794">标识 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2794">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2795">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2795">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2796">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2796">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2797">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2797">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2798">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2798">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2799">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2799">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2800">在鼠标指针位于此元素上并且移动鼠标指针时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2800">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2801">都会发生此事件当鼠标指针首次进入入元素边界，并还鼠标指针移动时仍剩余元素的边界内。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2801">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="49cbb-2802">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2802">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2803">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2803">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2804">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2804">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2805">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2805">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="49cbb-2806">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2806">Routing strategy</span></span>|<span data-ttu-id="49cbb-2807">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2807">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2808">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2808">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="49cbb-2809">对应的冒泡事件<xref:System.Windows.UIElement.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2809">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-2810">重写<xref:System.Windows.UIElement.OnPreviewMouseMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2810">Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2811">标识 <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2811">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2812">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2812">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2813">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2813">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2814">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2814">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2815">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2815">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2816">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2816">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2817">在鼠标指针位于此元素上并且按下鼠标右键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2817">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2818">尽管这看起来要遵循的隧道通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2818">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-2819">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2819">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-2820">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2820">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-2821">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2821">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-2822">如果你将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>处理，您实质上标记<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2822">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="49cbb-2823">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2823">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="49cbb-2824">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2824">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-2825">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2825">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-2826">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2826">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2827">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2827">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2828">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2828">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="49cbb-2829">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2829">Routing strategy</span></span>|<span data-ttu-id="49cbb-2830">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-2830">Direct</span></span>|  
|<span data-ttu-id="49cbb-2831">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2831">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2832">重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2832">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2833">标识 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2833">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2834">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2834">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2835">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2835">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2836">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2836">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2837">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2837">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2838">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2838">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2839">在鼠标指针位于此元素上并且松开鼠标右键时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2839">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2840">尽管这看起来要遵循的隧道通过元素树路由，但它实际上是直接的路由的事件引发和每个元素树沿遵循<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2840">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-2841">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，即处理为由事件路由每个元素的附加的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2841">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="49cbb-2842">此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2842">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="49cbb-2843">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2843">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="49cbb-2844">如果你将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>处理，您实质上标记<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2844">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="49cbb-2845">从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement>) 视为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2845">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="49cbb-2846">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2846">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="49cbb-2847">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>上类而不是那些<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2847">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2848">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2848">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2849">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2849">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="49cbb-2850">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2850">Routing strategy</span></span>|<span data-ttu-id="49cbb-2851">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-2851">Direct</span></span>|  
|<span data-ttu-id="49cbb-2852">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2852">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2853">重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2853">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2854">标识 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2854">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2855">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2855">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2856">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2856">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2857">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2857">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2858">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2858">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2859">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2859">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2860">在鼠标指针位于此元素上并且松开任意鼠标按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2860">Occurs when any mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2861">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2861">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2862">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseUp>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2862">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2863"><xref:System.Windows.UIElement.PreviewMouseUp>事件通常一起引发<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>，这对应于按下的某个之一的两个标准鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2863">The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="49cbb-2864"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 和<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2864"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="49cbb-2865">请参阅备注以<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2865">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2866">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2866">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2867">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2867">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="49cbb-2868">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2868">Routing strategy</span></span>|<span data-ttu-id="49cbb-2869">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2869">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2870">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2870">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2871">对应的冒泡事件<xref:System.Windows.UIElement.MouseUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2871">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-2872">重写<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2872">Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2873">标识 <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2873">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2874">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2874">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2875">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2875">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2876">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2876">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2877">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2877">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2878">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2878">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2879">在鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2879">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2880">焦点或鼠标捕获优先于其中鼠标指针位于;因此，如果您收到此事件来自的已设定焦点或捕获元素，鼠标指针实际上可能通过另一个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2880">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="49cbb-2881">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2881">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2882">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2882">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2883">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2883">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2884">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2884">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="49cbb-2885">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2885">Routing strategy</span></span>|<span data-ttu-id="49cbb-2886">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2886">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2887">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2887">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="49cbb-2888">对应的冒泡事件<xref:System.Windows.UIElement.MouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2888">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="49cbb-2889">重写<xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2889">Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2890">标识 <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2890">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2891">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2891">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2892">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2892">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2893">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2893">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2894">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2894">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2895">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2895">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2896">在拖放操作期间键盘或鼠标按钮的状态改变时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2896">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2897"><xref:System.Windows.UIElement.PreviewQueryContinueDrag>事件允许拖动源来声明是否应取消拖放操作。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2897">The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="49cbb-2898">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewQueryContinueDrag>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2898">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2899">事件处理程序附加到<xref:System.Windows.UIElement.PreviewQueryContinueDrag>事件附加到基础<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2899">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2900">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2900">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2901">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2901">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="49cbb-2902">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2902">Routing strategy</span></span>|<span data-ttu-id="49cbb-2903">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2903">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2904">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2904">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="49cbb-2905">对应的冒泡事件<xref:System.Windows.UIElement.QueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2905">The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="49cbb-2906">重写<xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2906">Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2907">标识 <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2907">Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2908">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2908">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2909">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2909">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2910">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2910">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2911">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2911">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2912">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2912">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2913">在指针位于此元素上并且按下触笔按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2913">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2914">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusButtonDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2914">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2915">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusButtonDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2915">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2916">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2916">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-2917">有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)和[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2917">For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2918">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2918">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2919">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2919">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="49cbb-2920">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2920">Routing strategy</span></span>|<span data-ttu-id="49cbb-2921">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2921">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2922">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2922">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2923">对应的冒泡事件<xref:System.Windows.UIElement.StylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2923">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-2924">重写<xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2924">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2925">标识 <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2925">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2926">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2926">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2927">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2927">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2928">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2928">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2929">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2929">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2930">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2930">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2931">在指针位于此元素上并且松开触笔按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2931">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2932">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusButtonUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2932">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2933">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusButtonUp>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2933">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2934">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2934">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-2935">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2935">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2936">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2936">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2937">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2937">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="49cbb-2938">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2938">Routing strategy</span></span>|<span data-ttu-id="49cbb-2939">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2939">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2940">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2940">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-2941">对应的冒泡事件<xref:System.Windows.UIElement.StylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2941">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-2942">重写<xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2942">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2943">标识 <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2943">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2944">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2944">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2945">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2945">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2946">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2946">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2947">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2947">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2948">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2948">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2949">当触笔位于元素上且触及数字化器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2949">Occurs when the stylus touches the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2950">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2950">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2951">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2951">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2952">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2952">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-2953">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2953">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2954">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2954">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2955">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2955">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="49cbb-2956">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2956">Routing strategy</span></span>|<span data-ttu-id="49cbb-2957">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2957">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2958">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2958">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="49cbb-2959">对应的冒泡事件<xref:System.Windows.UIElement.StylusDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2959">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-2960">重写<xref:System.Windows.UIElement.OnPreviewStylusDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2960">Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2961">标识 <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2961">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2962">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2962">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2963">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2963">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2964">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2964">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2965">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2965">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2966">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2966">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2967">在触笔掠过元素但并未实际接触数字化器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2967">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2968">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusInAirMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2968">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2969">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusInAirMove>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2969">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2970">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2970">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-2971">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2971">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2972">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2972">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2973">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2973">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="49cbb-2974">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2974">Routing strategy</span></span>|<span data-ttu-id="49cbb-2975">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2975">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2976">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2976">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-2977">对应的冒泡事件<xref:System.Windows.UIElement.StylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2977">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-2978">重写<xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2978">Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2979">标识 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2979">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2980">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2980">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2981">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2981">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-2982">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2982">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-2983">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2983">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-2984">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2984">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2985">在触笔位于此元素上并且触笔与数字化器之间的距离近到足以检测到触笔时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2985">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2986">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusInRange>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2986">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-2987">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusInRange>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2987">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-2988">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2988">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-2989">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2989">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-2990">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-2990">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-2991">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-2991">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="49cbb-2992">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-2992">Routing strategy</span></span>|<span data-ttu-id="49cbb-2993">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-2993">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-2994">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-2994">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-2995">对应的冒泡事件<xref:System.Windows.UIElement.StylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2995">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="49cbb-2996">重写<xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2996">Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-2997">标识 <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-2997">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-2998">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2998">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-2999">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-2999">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3000">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3000">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3001">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3001">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3002">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3002">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3003">在触笔位于元素上并且移动触笔时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3003">Occurs when the stylus moves while over the element.</span>
          </span>
          <span data-ttu-id="49cbb-3004">数字化器在检测触笔时，触笔必须处于移动状态才会引发此事件，否则将改为引发 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3004">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3005">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3005">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3006">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusMove>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3006">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3007">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3007">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3008">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3008">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3009">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3009">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3010">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3010">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="49cbb-3011">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3011">Routing strategy</span></span>|<span data-ttu-id="49cbb-3012">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3012">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3013">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3013">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3014">对应的冒泡事件<xref:System.Windows.UIElement.StylusMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3014">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-3015">重写<xref:System.Windows.UIElement.OnPreviewStylusMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3015">Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3016">标识 <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3016">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3017">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3017">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3018">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3018">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3019">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3019">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3020">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3020">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3021">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3021">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3022">在触笔与数字化仪之间的距离太远以致无法检测到触笔时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3022">Occurs when the stylus is too far from the digitizer to be detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3023">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusOutOfRange>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3023">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3024">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusOutOfRange>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3024">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3025">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3025">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3026">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3026">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3027">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3027">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3028">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3028">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="49cbb-3029">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3029">Routing strategy</span></span>|<span data-ttu-id="49cbb-3030">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3030">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3031">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3031">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3032">对应的冒泡事件<xref:System.Windows.UIElement.StylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3032">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="49cbb-3033">重写<xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3033">Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3034">标识 <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3034">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3035">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3035">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3036">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3036">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3037">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3037">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3038">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3038">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3039">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3039">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3040">在用户采用某一种触笔笔势时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3040">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3041">有关触笔笔势的信息，请参阅<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3041">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="49cbb-3042">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusSystemGesture>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3042">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3043">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusSystemGesture>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3043">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3044">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3044">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3045">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3045">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3046">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3046">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3047">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3047">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="49cbb-3048">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3048">Routing strategy</span></span>|<span data-ttu-id="49cbb-3049">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3049">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3050">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3050">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="49cbb-3051">对应的冒泡事件<xref:System.Windows.UIElement.StylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3051">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="49cbb-3052">重写<xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3052">Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3053">标识 <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3053">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3054">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3054">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3055">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3055">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3056">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3056">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3057">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3057">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3058">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3058">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3059">当触笔位于此元素上并且用户将触笔抬离数字化器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3059">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3060">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3060">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3061">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3061">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3062">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3062">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3063">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3063">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3064">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3064">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3065">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3065">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="49cbb-3066">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3066">Routing strategy</span></span>|<span data-ttu-id="49cbb-3067">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3067">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3068">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3068">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3069">对应的冒泡事件<xref:System.Windows.UIElement.StylusUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3069">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-3070">重写<xref:System.Windows.UIElement.OnPreviewStylusUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3070">Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3071">标识 <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3071">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3072">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3072">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3073">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3073">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3074">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3074">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3075">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3075">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3076">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3076">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3077">在此元素以设备无关模式获取文本时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3077">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3078"><xref:System.Windows.UIElement.PreviewTextInput>事件允许组件或应用程序侦听的文本输入以独立于设备的方式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3078">The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="49cbb-3079">键盘是主种<xref:System.Windows.UIElement.PreviewTextInput>; 但语音、 手写和其他输入的设备还可以生成<xref:System.Windows.UIElement.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3079">The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="49cbb-3080">由于键组合 — 默认键盘或输入的法编辑器-多个键事件可能会引发一个文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3080">Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="49cbb-3081">此事件创建一个别名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewTextInput>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3081">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3082">事件处理程序附加到<xref:System.Windows.UIElement.PreviewTextInput>事件附加到基础<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3082">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3083">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3083">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3084">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3084">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|<span data-ttu-id="49cbb-3085">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3085">Routing strategy</span></span>|<span data-ttu-id="49cbb-3086">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3086">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3087">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3087">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="49cbb-3088">对应的冒泡事件<xref:System.Windows.UIElement.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3088">The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="49cbb-3089">重写<xref:System.Windows.UIElement.OnPreviewTextInput%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3089">Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3090">标识 <see cref="E:System.Windows.UIElement.PreviewTextInput" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3090">Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3091">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3091">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3092">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3092">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3093">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3093">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3094">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3094">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3095">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3095">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3096">当悬停在此元素上方的手指触摸屏幕时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3096">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3097">默认情况下，<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>事件手指触摸屏幕并移动之前不会发生。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3097">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="49cbb-3098">手指在屏幕上按住但不移动会导致按并保存行为<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3098">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="49cbb-3099">按下并保持行为相当于鼠标右键单击。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3099">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="49cbb-3100">若要使<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>事件发生只要的手指触摸屏幕上，设置<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>附加到属性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3100">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3101">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3101">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3102">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3102">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="49cbb-3103">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3103">Routing strategy</span></span>|<span data-ttu-id="49cbb-3104">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3104">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3105">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3105">Delegate</span></span>|<span data-ttu-id="49cbb-3106"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3106"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3107">对应的冒泡事件<xref:System.Windows.UIElement.TouchDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3107">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-3108">重写<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3108">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3109">标识 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3109">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3110">当悬停在此元素上方的手指在屏幕上移动时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3110">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3111">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3111">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3112">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3112">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="49cbb-3113">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3113">Routing strategy</span></span>|<span data-ttu-id="49cbb-3114">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3114">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3115">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3115">Delegate</span></span>|<span data-ttu-id="49cbb-3116"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3116"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3117">对应的冒泡事件<xref:System.Windows.UIElement.TouchMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3117">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-3118">重写<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3118">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3119">标识 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3119">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3120">当悬停在此元素上方的手指从屏幕上移开时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3120">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3121">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3121">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3122">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3122">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="49cbb-3123">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3123">Routing strategy</span></span>|<span data-ttu-id="49cbb-3124">隧道</span><span class="sxs-lookup"><span data-stu-id="49cbb-3124">Tunneling</span></span>|  
|<span data-ttu-id="49cbb-3125">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3125">Delegate</span></span>|<span data-ttu-id="49cbb-3126"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3126"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3127">对应的冒泡事件<xref:System.Windows.UIElement.TouchUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3127">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-3128">重写<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3128">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3129">标识 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3129">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3130">在拖放操作期间键盘或鼠标按钮的状态改变时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3130">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3131"><xref:System.Windows.UIElement.QueryContinueDrag>事件允许拖动源确定是否应取消拖放操作。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3131">The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="49cbb-3132">此事件创建一个别名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.QueryContinueDrag>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3132">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3133">事件处理程序附加到<xref:System.Windows.UIElement.QueryContinueDrag>事件附加到基础<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3133">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3134">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3134">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3135">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3135">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|<span data-ttu-id="49cbb-3136">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3136">Routing strategy</span></span>|<span data-ttu-id="49cbb-3137">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3137">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3138">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3138">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="49cbb-3139">对应的隧道事件<xref:System.Windows.UIElement.PreviewQueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3139">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="49cbb-3140">重写<xref:System.Windows.UIElement.OnQueryContinueDrag%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3140">Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3141">标识 <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3141">Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3142">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3142">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3143">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3143">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3144">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3144">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3145">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3145">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3146">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3146">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3147">当请求显示光标时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3147">Occurs when the cursor is requested to display.</span>
          </span>
          <span data-ttu-id="49cbb-3148">每次鼠标指针移至新位置时都会在一个元素上引发此事件，这意味着光标对象可能需要根据其新位置进行更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3148">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3149">此事件创建一个别名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.QueryCursor>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3149">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3150">事件处理程序附加到<xref:System.Windows.UIElement.QueryCursor>事件附加到基础<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3150">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3151">此事件名称引用光标不一定是文本光标 （有时称为插入点）。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3151">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="49cbb-3152">相反，此上下文中的光标是声明的屏幕的图形显示与多个可能的输入相关的设备或中的概念相关的对象[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]编程。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3152">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming.</span></span> <span data-ttu-id="49cbb-3153">该对象表示由<xref:System.Windows.Input.Cursor>类[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3153">That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="49cbb-3154">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]在输入的系统使你能够更改此光标时它表示鼠标指针的屏幕位置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3154">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="49cbb-3155">你可以使用从的预定义的值<xref:System.Windows.Input.Cursors>枚举，也可以声明自定义光标以图像文件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3155">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="49cbb-3156">侦听<xref:System.Windows.UIElement.QueryCursor>事件不是游标管理的有效技术。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3156">Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="49cbb-3157">相反，每个元素应定义其自己的游标行为与<xref:System.Windows.FrameworkContentElement.Cursor%2A>和<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3157">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="49cbb-3158">你应仅依赖于<xref:System.Windows.UIElement.QueryCursor>如果你不使用 WPF 框架级别基元素，或中的特殊情况下，基于每个元素中定义的游标行为不满足你的需求。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3158">You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="49cbb-3159">有关详细信息在响应中实现的游标行为<xref:System.Windows.UIElement.QueryCursor>，请参阅<xref:System.Windows.Input.QueryCursorEventHandler>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3159">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3160">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3160">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3161">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3161">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|<span data-ttu-id="49cbb-3162">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3162">Routing strategy</span></span>|<span data-ttu-id="49cbb-3163">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3163">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3164">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3164">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="49cbb-3165">没有定义相应隧道事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3165">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="49cbb-3166">重写<xref:System.Windows.UIElement.OnQueryCursor%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3166">Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3167">标识 <see cref="E:System.Windows.UIElement.QueryCursor" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3167">Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3168">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3168">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3169">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3169">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3170">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3170">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3171">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3171">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3172">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3172">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="49cbb-3173">一个 <see cref="T:System.Windows.RoutedEventArgs" />，其中包含事件数据并标识要引发的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3173">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-3174">引发特定路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3174">Raises a specific routed event.</span>
          </span>
          <span data-ttu-id="49cbb-3175">在提供的 <see cref="T:System.Windows.RoutedEvent" /> 实例中标识要引发的 <see cref="T:System.Windows.RoutedEventArgs" />（作为该事件数据的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 属性）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3175">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3176">`e`参数被类型化为所有路由的事件数据的公共基类型; 但是，应作为最特定的事件数据类型，则使用有关要引发事件，因为给定的事件数据<xref:System.Windows.RoutedEventArgs>派生的类包含适用于特定事件时将引发此事件的实际的特定数据属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3176">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="49cbb-3177"><xref:System.Windows.RoutedEventArgs> 不只是事件; 的状态属性它还标识要引发的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3177"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="49cbb-3178">此事件引发模式和路由的事件数据均不同于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件和数据类，该类通常只包含与事件相关的属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3178">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-3179">下面的示例创建事件数据，将事件标识符追加到数据，然后使用事件数据实例引发自定义的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3179">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3180">从此元素中释放所有捕获的触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3180">Releases all captured touch devices from this element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3181">如果此元素具有鼠标捕获，则释放该捕获。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3181">Releases the mouse capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3182">如果此元素未持有捕获，调用此方法无效。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3182">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="49cbb-3183">请考虑在检查的值<xref:System.Windows.UIElement.IsMouseCaptured%2A>之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3183">Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-3184">下面的示例是为提供的示例相似<xref:System.Windows.UIElement.CaptureMouse%2A>： 它处理鼠标按钮，以释放鼠标捕获，并重新启用移动鼠标。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3184">The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3185">如果此元素具有触笔设备捕获，则释放该捕获。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3185">Releases the stylus device capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3186">如果此元素未持有捕获，调用此方法无效。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3186">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="49cbb-3187">请考虑在检查的值<xref:System.Windows.UIElement.IsStylusCaptured%2A>之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3187">Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="49cbb-3188">要释放的设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3188">The device to release.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-3189">尝试从此元素释放指定触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3189">Attempts to release the specified touch device from this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-3190">如果释放了触摸设备，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3190">
              <see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49cbb-3191">
            <paramref name="touchDevice" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3191">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="49cbb-3192">附加了处理程序的路由事件的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3192">The identifier of the routed event for which the handler is attached.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="49cbb-3193">要从此元素的事件处理程序集合中删除的特定处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3193">The specific handler implementation to remove from the event handler collection on this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-3194">从此元素中删除指定的路由事件处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3194">Removes the specified routed event handler from this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3195">最常见的方案使用此[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]，在实现[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]"包装器"自定义的路由事件，特别是，当你实现处理程序的"删除"逻辑与关联的事件[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]级别。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3195">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="49cbb-3196">下面的示例中这部分阐释了这种情况下的备注。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3196">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="49cbb-3197">如果没有注册的条件相匹配的方法调用的输入的参数没有处理程序，则调用此方法起任何作用。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3197">Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="49cbb-3198">如果多个处理程序附加条件相匹配，仅第一个处理程序事件删除处理程序存储区中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3198">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="49cbb-3199">此行为是与一致[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]行为`-=`运算符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3199">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="49cbb-3200">既不`routedEvent`也不`handler`可能`null`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3200">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="49cbb-3201">尝试提供上述任意值作为`null`将引发的异常。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3201">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="49cbb-3202">此方法将忽略`handledEventsToo`参数信息，如果处理程序最初提供添加与<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>启用的已处理事件的处理的签名。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3202">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="49cbb-3203">删除任一类型的处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3203">Either type of handler is removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-3204">下面的示例使用<xref:System.Windows.UIElement.RemoveHandler%2A>作为事件包装定义的一部分。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3204">The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.</span></span>  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3205">获取（或设置）此元素的最终呈现大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3205">Gets (or sets) the final render size of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3206">此元素的呈现大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3206">The rendered size for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="49cbb-3207">请不要尝试设置此属性，在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]或在代码中，如果使用的 WPF 框架级别布局系统。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3207">Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system.</span></span> <span data-ttu-id="49cbb-3208">几乎所有的典型应用程序方案将使用此布局系统。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3208">Nearly all typical application scenarios will use this layout system.</span></span> <span data-ttu-id="49cbb-3209">布局系统都不会遵循在中设置的大小<xref:System.Windows.UIElement.RenderSize%2A>直接属性。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3209">The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly.</span></span> <span data-ttu-id="49cbb-3210"><xref:System.Windows.UIElement.RenderSize%2A>属性声明为可写，只是为了支持某些 WPF 核心级桥接有意避开典型布局协议，如对支持的情况下<xref:System.Windows.Documents.Adorner>类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3210">The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.</span></span>  
  
 <span data-ttu-id="49cbb-3211">此属性可以用于检查布局系统中的适用呈现大小如替代<xref:System.Windows.UIElement.OnRender%2A>或<xref:System.Windows.UIElement.GetLayoutClip%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3211">This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.</span></span>  
  
 <span data-ttu-id="49cbb-3212">处理更为常见的方案<xref:System.Windows.FrameworkElement.SizeChanged>重写与类处理程序的事件或<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3212">A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.</span></span>  
  
## Examples  
 <span data-ttu-id="49cbb-3213">下面的示例演示如何使用自定义的装饰器<xref:System.Windows.UIElement.RenderSize%2A>值以便创建并将调整大小矩形图的一部分定义装饰器，其<xref:System.Windows.UIElement.OnRender%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3213">The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A> implementation.</span></span>  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3214">获取或设置影响此元素的呈现位置的转换信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3214">Gets or sets transform information that affects the rendering position of this element.</span>
          </span>
          <span data-ttu-id="49cbb-3215">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3215">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3216">描述所需呈现转换的细节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3216">Describes the specifics of the desired render transform.</span>
          </span>
          <span data-ttu-id="49cbb-3217">默认值为 <see cref="P:System.Windows.Media.Transform.Identity" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3217">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3218">呈现转换不会重新生成布局大小或呈现大小信息。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3218">A render transform does not regenerate layout size or render size information.</span></span> <span data-ttu-id="49cbb-3219">呈现转换通常用于动画处理或将临时效果应用于元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3219">Render transforms are typically intended for animating or applying a temporary effect to an element.</span></span> <span data-ttu-id="49cbb-3220">例如，元素可以在缩放时已设定焦点或鼠标悬停，或可能抖动负载要绘制到的该部分的人眼[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3220">For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-3221">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3221">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3222">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3222">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|<span data-ttu-id="49cbb-3223">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-3223">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-3224">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-3224">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3225">获取或设置由 <see cref="P:System.Windows.UIElement.RenderTransform" /> 声明的任何可能呈现转换的中心点，相对于元素的边界。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3225">Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.</span>
          </span>
          <span data-ttu-id="49cbb-3226">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3226">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3227">声明呈现转换的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3227">The value that declares the render transform.</span>
          </span>
          <span data-ttu-id="49cbb-3228">默认值是一个坐标为 (0,0) 的 <see cref="T:System.Windows.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3228">The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3229"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> 已使用某种程度上使用了非标准的<xref:System.Windows.Point>结构值，因为<xref:System.Windows.Point>不表示的坐标系统中的绝对位置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3229"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system.</span></span> <span data-ttu-id="49cbb-3230">相反，介于 0 和 1 之间的值被解释为范围中每对 x，y 轴的当前元素的一个因素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3230">Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</span></span> <span data-ttu-id="49cbb-3231">例如，(0.5，0.5) 将导致呈现转换的元素居中对齐或 (1，1) 将置于呈现转换的底部右下角的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3231">For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</span></span> <span data-ttu-id="49cbb-3232"><xref:System.Double.NaN> 不是一个可接受的值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3232"><xref:System.Double.NaN> is not an accepted value.</span></span>  
  
 <span data-ttu-id="49cbb-3233">0 和 1 以外的值也可以接受，并且将导致更多不寻常的转换效果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3233">Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</span></span> <span data-ttu-id="49cbb-3234">例如，如果你设置<xref:System.Windows.UIElement.RenderTransformOrigin%2A>为是 (5，5)，然后应用<xref:System.Windows.Media.RotateTransform>，旋转点将也位于该元素本身的边界之外。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3234">For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself.</span></span> <span data-ttu-id="49cbb-3235">转换将启动你周围大圆圈，圆圈源自超出右下角中的元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3235">The transform will spin your element around in a big circle that originates beyond bottom right.</span></span> <span data-ttu-id="49cbb-3236">原点某处可能在其父元素内，并且可能可能可能超出帧或视图。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3236">The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</span></span> <span data-ttu-id="49cbb-3237">负点值类似，这将超出界限向左上角。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3237">Negative point values are similar, these will go beyond the top left bounds.</span></span>  
  
 <span data-ttu-id="49cbb-3238">呈现转换不会影响布局，和通常用于执行动画或将临时效果应用于的一个元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3238">Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</span></span>  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="49cbb-3239">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="49cbb-3239">XAML Attribute Usage</span></span>  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="49cbb-3240">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="49cbb-3240">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="49cbb-3241">XAML 值</span><span class="sxs-lookup"><span data-stu-id="49cbb-3241">XAML Values</span></span>  
 <span data-ttu-id="49cbb-3242">*xOrigin*</span><span class="sxs-lookup"><span data-stu-id="49cbb-3242">*xOrigin*</span></span>  
 <span data-ttu-id="49cbb-3243">水平原点因子。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3243">The horizontal origin factor.</span></span> <span data-ttu-id="49cbb-3244">这通常是给定为 0 和 1 之间的值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3244">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="49cbb-3245">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3245">See Remarks.</span></span>  
  
 <span data-ttu-id="49cbb-3246">*yOrigin*</span><span class="sxs-lookup"><span data-stu-id="49cbb-3246">*yOrigin*</span></span>  
 <span data-ttu-id="49cbb-3247">垂直起点因素中。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3247">The vertical origin factor.</span></span> <span data-ttu-id="49cbb-3248">这通常是给定为 0 和 1 之间的值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3248">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="49cbb-3249">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3249">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-3250">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3250">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3251">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3251">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|<span data-ttu-id="49cbb-3252">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-3252">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-3253">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-3253">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-3254">下面的示例建立在代码中的元素，将应用<xref:System.Windows.UIElement.RenderTransformOrigin%2A>，，然后将应用<xref:System.Windows.UIElement.RenderTransform%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3254">The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.</span></span>  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3255">标识 <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3255">Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3256">标识 <see cref="P:System.Windows.UIElement.RenderTransform" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3256">Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3257">返回序列化进程是否应在此类的实例上序列化 <see cref="P:System.Windows.UIElement.CommandBindings" /> 属性的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3257">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-3258">如果应当序列化 <see cref="P:System.Windows.UIElement.CommandBindings" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3258">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3259">这将返回`true`如果<xref:System.Windows.UIElement.CommandBindings%2A>本地设置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3259">This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="49cbb-3260">这`ShouldSerialize`提供方法，因为<xref:System.Windows.UIElement.CommandBindings%2A>属性不具有简单的默认值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3260">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="49cbb-3261">此方法指示属性是否已从其默认值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3261">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="49cbb-3262">如果你正在开发的设计器，或可以开发自己的控件包含通常调用此方法<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3262">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-3263">有关详细信息，请参阅[使用 ShouldSerialize 和重置方法定义默认值](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3263">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3264">返回序列化进程是否应在此类的实例上序列化 <see cref="P:System.Windows.UIElement.InputBindings" /> 属性的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3264">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-3265">如果应当序列化 <see cref="P:System.Windows.UIElement.InputBindings" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3265">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3266">这将返回`true`如果<xref:System.Windows.UIElement.InputBindings%2A>本地设置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3266">This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="49cbb-3267">这`ShouldSerialize`提供方法，因为<xref:System.Windows.UIElement.InputBindings%2A>属性不具有简单的默认值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3267">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="49cbb-3268">此方法指示属性是否已从其默认值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3268">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="49cbb-3269">如果你正在开发的设计器，或可以开发自己的控件包含通常调用此方法<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3269">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="49cbb-3270">有关详细信息，请参阅[使用 ShouldSerialize 和重置方法定义默认值](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3270">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3271">获取或设置一个值，该值确定在呈现过程中，此元素的呈现是否应使用特定于设备的像素设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3271">Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</span>
          </span>
          <span data-ttu-id="49cbb-3272">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3272">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3273">如果元素应按照设备像素呈现，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3273">
              <see langword="true" /> if the element should render in accordance to device pixels; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49cbb-3274">在 <see cref="T:System.Windows.UIElement" /> 上声明的默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3274">The default as declared on <see cref="T:System.Windows.UIElement" /> is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3275">你可以将此属性设置为`true`上您的根元素，以便像素管理单元呈现整个 UI。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3275">You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI.</span></span> <span data-ttu-id="49cbb-3276">对于运行在大于 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]，像素对齐呈现可以尽量减少在单实线附近出现的抗锯齿视觉效果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3276">For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</span></span>  
  
 <span data-ttu-id="49cbb-3277">当通过继承<xref:System.Windows.FrameworkElement>或任何可能派生类中，<xref:System.Windows.FrameworkElement>重写要设置此依赖项属性的元数据<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>元数据属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3277">When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`.</span></span> <span data-ttu-id="49cbb-3278">这样做的结果是只最外面元素子树中的，需要指定<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>作为`true`，然后将报告所有子元素的子树<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>作为`true`都<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>视觉效果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3278">What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.</span></span>  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-3279">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3279">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3280">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3280">Identifier field</span></span>|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|<span data-ttu-id="49cbb-3281">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-3281">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-3282">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-3282">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3283">标识 <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3283">Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3284">在指针位于此元素上并且按下触笔按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3284">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3285">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusButtonDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3285">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3286">事件处理程序附加到<xref:System.Windows.UIElement.StylusButtonDown>事件附加到基础<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3286">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3287">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3287">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3288">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3288">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3289">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3289">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3290">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3290">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|<span data-ttu-id="49cbb-3291">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3291">Routing strategy</span></span>|<span data-ttu-id="49cbb-3292">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3292">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3293">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3293">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-3294">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3294">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-3295">重写<xref:System.Windows.UIElement.OnStylusButtonDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3295">Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3296">标识 <see cref="E:System.Windows.UIElement.StylusButtonDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3296">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3297">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3297">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3298">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3298">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3299">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3299">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3300">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3300">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3301">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3301">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3302">在指针位于此元素上并且松开触笔按钮时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3302">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3303">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusButtonUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3303">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3304">事件处理程序附加到<xref:System.Windows.UIElement.StylusButtonUp>事件附加到基础<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3304">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3305">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3305">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3306">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3306">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3307">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3307">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3308">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3308">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|<span data-ttu-id="49cbb-3309">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3309">Routing strategy</span></span>|<span data-ttu-id="49cbb-3310">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3310">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3311">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3311">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="49cbb-3312">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3312">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-3313">重写<xref:System.Windows.UIElement.OnStylusButtonUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3313">Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3314">标识 <see cref="E:System.Windows.UIElement.StylusButtonUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3314">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3315">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3316">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3317">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3318">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3319">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3320">在触笔位于此元素上且同时触及数字化器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3320">Occurs when the stylus touches the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3321">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusDown>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3321">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3322">事件处理程序附加到<xref:System.Windows.UIElement.StylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3322">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3323">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3323">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3324">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3324">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3325">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3326">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3326">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusDownEvent>|  
|<span data-ttu-id="49cbb-3327">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3327">Routing strategy</span></span>|<span data-ttu-id="49cbb-3328">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3328">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3329">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3329">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="49cbb-3330">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3330">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-3331">重写<xref:System.Windows.UIElement.OnStylusDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3331">Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3332">标识 <see cref="E:System.Windows.UIElement.StylusDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3332">Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3333">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3333">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3334">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3334">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3335">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3335">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3336">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3336">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3337">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3337">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3338">在触笔进入此元素的边界时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3338">Occurs when the stylus enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3339"><xref:System.Windows.UIElement.StylusEnter> 是，使用直接的事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3339"><xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="49cbb-3340">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3340">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="49cbb-3341">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3341">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="49cbb-3342">尽管<xref:System.Windows.UIElement.StylusEnter>跟踪何时触笔进入的元素边界内，此事件能够更确切地报告<xref:System.Windows.UIElement.IsStylusOver%2A>属性值已更改，不再`false`到`true`针对此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3342">Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="49cbb-3343">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusEnter>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3343">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3344">事件处理程序附加到<xref:System.Windows.UIElement.StylusEnter>事件附加到基础<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3344">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3345">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3345">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3346">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3346">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3347">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3347">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3348">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3348">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|<span data-ttu-id="49cbb-3349">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3349">Routing strategy</span></span>|<span data-ttu-id="49cbb-3350">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-3350">Direct</span></span>|  
|<span data-ttu-id="49cbb-3351">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3351">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3352">重写<xref:System.Windows.UIElement.OnStylusEnter%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3352">Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3353">标识 <see cref="E:System.Windows.UIElement.StylusEnter" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3353">Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3354">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3354">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3355">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3355">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3356">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3356">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3357">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3357">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3358">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3358">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3359">在触笔掠过元素但并未实际接触数字化器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3359">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3360">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusInAirMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3360">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3361">事件处理程序附加到<xref:System.Windows.UIElement.StylusInAirMove>事件附加到基础<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3361">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3362">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3362">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3363">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3363">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3364">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3364">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3365">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3365">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="49cbb-3366">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3366">Routing strategy</span></span>|<span data-ttu-id="49cbb-3367">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3367">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3368">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3368">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3369">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3369">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-3370">重写<xref:System.Windows.UIElement.OnStylusInAirMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3370">Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3371">标识 <see cref="E:System.Windows.UIElement.StylusInAirMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3371">Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3372">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3372">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3373">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3373">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3374">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3374">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3375">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3375">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3376">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3376">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3377">在触笔位于此元素上并且触笔与数字化器之间的距离近到足以检测到触笔时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3377">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3378">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusInRange>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3378">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3379">事件处理程序附加到<xref:System.Windows.UIElement.StylusInRange>事件附加到基础<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3379">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3380">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3380">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3381">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3381">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3382">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3382">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3383">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3383">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|<span data-ttu-id="49cbb-3384">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3384">Routing strategy</span></span>|<span data-ttu-id="49cbb-3385">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3385">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3386">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3386">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3387">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3387">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="49cbb-3388">重写<xref:System.Windows.UIElement.OnStylusInRange%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3388">Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3389">标识 <see cref="E:System.Windows.UIElement.StylusInRange" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3389">Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3390">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3390">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3391">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3391">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3392">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3392">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3393">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3393">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3394">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3394">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3395">在触笔离开元素的边界时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3395">Occurs when the stylus leaves the bounds of the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3396"><xref:System.Windows.UIElement.StylusLeave> 是，使用直接的事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3396"><xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="49cbb-3397">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3397">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="49cbb-3398">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3398">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="49cbb-3399">尽管<xref:System.Windows.UIElement.StylusLeave>触笔离开元素，此事件的边界的详细信息时，跟踪确切地报告<xref:System.Windows.UIElement.IsStylusOver%2A>属性值已更改，不再`true`到`false`针对此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3399">Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="49cbb-3400">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusLeave>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3400">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3401">事件处理程序附加到<xref:System.Windows.UIElement.StylusLeave>事件附加到基础<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3401">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3402">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3402">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3403">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3403">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3404">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3404">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3405">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3405">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|<span data-ttu-id="49cbb-3406">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3406">Routing strategy</span></span>|<span data-ttu-id="49cbb-3407">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-3407">Direct</span></span>|  
|<span data-ttu-id="49cbb-3408">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3408">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3409">重写<xref:System.Windows.UIElement.OnStylusLeave%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3409">Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3410">标识 <see cref="E:System.Windows.UIElement.StylusLeave" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3410">Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3411">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3411">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3412">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3412">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3413">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3413">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3414">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3414">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3415">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3415">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3416">在触笔移到此元素上时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3416">Occurs when the stylus moves over this element.</span>
          </span>
          <span data-ttu-id="49cbb-3417">触笔必须在位于数字化器上时移动，才会引发此事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3417">The stylus must move while on the digitizer to raise this event.</span>
          </span>
          <span data-ttu-id="49cbb-3418">否则，将改为引发 <see cref="E:System.Windows.UIElement.StylusInAirMove" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3418">Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3419">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusMove>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3419">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3420">事件处理程序附加到<xref:System.Windows.UIElement.StylusMove>事件附加到基础<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3420">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3421">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3421">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3422">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3422">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3423">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3423">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3424">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3424">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|<span data-ttu-id="49cbb-3425">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3425">Routing strategy</span></span>|<span data-ttu-id="49cbb-3426">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3426">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3427">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3427">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3428">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3428">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-3429">重写<xref:System.Windows.UIElement.OnStylusMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3429">Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3430">标识 <see cref="E:System.Windows.UIElement.StylusMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3430">Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3431">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3431">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3432">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3432">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3433">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3433">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3434">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3434">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3435">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3435">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3436">在触笔位于此元素上并且触笔与数字化器之间的距离太远以致无法检测到触笔时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3436">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3437">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusOutOfRange>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3437">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3438">事件处理程序附加到<xref:System.Windows.UIElement.StylusOutOfRange>事件附加到基础<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3438">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3439">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3439">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3440">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3440">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3441">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3441">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3442">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3442">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="49cbb-3443">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3443">Routing strategy</span></span>|<span data-ttu-id="49cbb-3444">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3444">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3445">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3445">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3446">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3446">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="49cbb-3447">重写<xref:System.Windows.UIElement.OnStylusOutOfRange%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3447">Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3448">标识 <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3448">Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3449">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3449">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3450">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3450">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3451">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3451">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3452">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3452">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3453">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3453">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3454">获取与此元素关联的所有触笔插件（自定义）对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3454">Gets a collection of all stylus plug-in (customization) objects associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3455">触笔插件的集合，作为专用集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3455">The collection of stylus plug-ins, as a specialized collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3456">填充此集合的控件的一个示例是<xref:System.Windows.Controls.InkCanvas>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3456">An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>.</span></span> <span data-ttu-id="49cbb-3457"><xref:System.Windows.Controls.InkCanvas> 将添加<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>为集合项，从而使<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>交互触笔输入并生成以响应事件驱动的触笔的唯一呈现。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3457"><xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.</span></span>  
  
 <span data-ttu-id="49cbb-3458">创建自定义插件的信息可以接收和解释触笔输入，请参阅[触笔截获输入](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3458">For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-3459">下面的示例创建<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>实例，并将其添加到<xref:System.Windows.UIElement.StylusPlugIns%2A>自定义墨迹处理控件的集合。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3459">The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.</span></span>  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3460">在用户采用某一种触笔笔势时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3460">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3461">有关触笔笔势的详细信息，请参阅<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3461">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="49cbb-3462">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusSystemGesture>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3462">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3463">事件处理程序附加到<xref:System.Windows.UIElement.StylusSystemGesture>事件附加到基础<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3463">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3464">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3464">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3465">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3465">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3466">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3467">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3467">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="49cbb-3468">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3468">Routing strategy</span></span>|<span data-ttu-id="49cbb-3469">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3469">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3470">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3470">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="49cbb-3471">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="49cbb-3472">重写<xref:System.Windows.UIElement.OnStylusSystemGesture%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3472">Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3473">标识 <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3473">Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3474">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3475">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3476">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3477">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3478">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3479">当触笔位于此元素上并且用户将触笔抬离数字化器时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3479">Occurs when the user raises the stylus off the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3480">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusUp>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3480">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3481">事件处理程序附加到<xref:System.Windows.UIElement.StylusUp>事件附加到基础<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3481">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="49cbb-3482">触摸、 鼠标和触笔输入存在特定的关系。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3482">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="49cbb-3483">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3483">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3484">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3484">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3485">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3485">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusUpEvent>|  
|<span data-ttu-id="49cbb-3486">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3486">Routing strategy</span></span>|<span data-ttu-id="49cbb-3487">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3487">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3488">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3488">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="49cbb-3489">对应的隧道事件<xref:System.Windows.UIElement.PreviewStylusUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3489">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-3490">重写<xref:System.Windows.UIElement.OnStylusUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3490">Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3491">标识 <see cref="E:System.Windows.UIElement.StylusUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3491">Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3492">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3492">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3493">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3493">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3494">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3494">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3495">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3495">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3496">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3496">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3497">在此元素以设备无关模式获取文本时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3497">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="49cbb-3498">处理的复合控件的内部实现，此事件可能已被标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3498">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="49cbb-3499">请参阅下面的备注。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3499">See Remark below.</span></span>  
  
 <span data-ttu-id="49cbb-3500"><xref:System.Windows.UIElement.TextInput>事件可能已被处理的复合控件的内部实现标记。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3500">The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="49cbb-3501">例如，<xref:System.Windows.Controls.TextBox>是一个复合控件，其中<xref:System.Windows.UIElement.TextInput>事件已被标记为处理; 中其组合。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3501">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="49cbb-3502">这么做是因为在控件需要解释某些类型的输入，如箭头键，为具有对该控件的特殊含义。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3502">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="49cbb-3503">如果你使用<xref:System.Windows.UIElement.PreviewTextInput>附加处理程序文本输入的位置的事件，你可能会收到更好的结果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3503">If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="49cbb-3504">该技术可以应对大多数情况下，其中控件组合已经此事件标记为已处理和防止接收为由事件路由事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3504">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="49cbb-3505"><xref:System.Windows.UIElement.TextInput>事件允许组件或应用程序侦听的文本输入以独立于设备的方式。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3505">The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="49cbb-3506">键盘是主种<xref:System.Windows.UIElement.TextInput>，但语音、 手写和其他输入的设备也可以引发<xref:System.Windows.UIElement.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3506">The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
 <span data-ttu-id="49cbb-3507">由于键组合 — 默认键盘或输入的法编辑器-多个键事件可能会引发一个文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3507">Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="49cbb-3508">此事件创建一个别名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.TextInput>摘自类的成员列出时<xref:System.Windows.UIElement>为该类继承。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3508">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="49cbb-3509">事件处理程序附加到<xref:System.Windows.UIElement.TextInput>事件附加到基础<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3509">Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3510">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3510">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3511">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3511">Identifier field</span></span>|<xref:System.Windows.UIElement.TextInputEvent>|  
|<span data-ttu-id="49cbb-3512">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3512">Routing strategy</span></span>|<span data-ttu-id="49cbb-3513">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3513">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3514">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3514">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="49cbb-3515">对应的隧道事件<xref:System.Windows.UIElement.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3515">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="49cbb-3516">重写<xref:System.Windows.UIElement.OnTextInput%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3516">Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3517">标识 <see cref="E:System.Windows.UIElement.TextInput" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3517">Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3518">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3518">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="49cbb-3519">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3519">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="49cbb-3520">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3520">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="49cbb-3521">有关注册路由事件的更多信息，请参见 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3521">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="49cbb-3522">有关使用路由事件标识符添加类处理程序的更多信息，请参见 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3522">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3523">当悬停在此元素上方的手指触摸屏幕时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3523">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3524">默认情况下，<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>事件手指触摸屏幕并移动之前不会发生。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3524">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="49cbb-3525">手指在屏幕上按住但不移动会导致按并保存行为<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3525">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="49cbb-3526">按下并保持行为相当于鼠标右键单击。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3526">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="49cbb-3527">若要使<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>事件发生只要的手指触摸屏幕上，设置<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>附加到属性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3527">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3528">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3528">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3529">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3529">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchDownEvent>|  
|<span data-ttu-id="49cbb-3530">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3530">Routing strategy</span></span>|<span data-ttu-id="49cbb-3531">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3531">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3532">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3532">Delegate</span></span>|<span data-ttu-id="49cbb-3533"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3533"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3534">对应的隧道事件<xref:System.Windows.UIElement.PreviewTouchDown>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3534">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="49cbb-3535">重写<xref:System.Windows.UIElement.OnTouchDown%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3535">Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3536">标识 <see cref="E:System.Windows.UIElement.TouchDown" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3536">Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3537">在触摸屏输入从此元素边界外部移动到其内部时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3537">Occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3538">始终引发此事件，指示触摸设备捕获到此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3538">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3539">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3539">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3540">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3540">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|<span data-ttu-id="49cbb-3541">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3541">Routing strategy</span></span>|<span data-ttu-id="49cbb-3542">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-3542">Direct</span></span>|  
|<span data-ttu-id="49cbb-3543">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3543">Delegate</span></span>|<span data-ttu-id="49cbb-3544"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3544"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3545">重写<xref:System.Windows.UIElement.OnTouchEnter%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3545">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3546">标识 <see cref="E:System.Windows.UIElement.TouchEnter" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3546">Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3547">获取在此元素上捕获的所有触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3547">Gets all touch devices that are captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3548">在此元素上捕获的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3548">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3549">获取在此元素或其可视化树中的任何子元素上捕获的所有触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3549">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3550">在此元素或其可视化树中的任何子元素上捕获的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3550">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3551">获取此元素上的所有触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3551">Gets all touch devices that are over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3552">位于此元素上的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3552">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3553">获取在此元素或其可视化树中的任何子元素上的所有触摸设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3553">Gets all touch devices that are over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3554">在此元素或其可视化树中的任何子元素上的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3554">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3555">在触摸屏输入从此元素边界内部移动到其外部时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3555">Occurs when a touch moves from inside to outside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3556">始终引发此事件，指示触摸设备捕获到此元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3556">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3557">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3557">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3558">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3558">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|<span data-ttu-id="49cbb-3559">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3559">Routing strategy</span></span>|<span data-ttu-id="49cbb-3560">直接</span><span class="sxs-lookup"><span data-stu-id="49cbb-3560">Direct</span></span>|  
|<span data-ttu-id="49cbb-3561">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3561">Delegate</span></span>|<span data-ttu-id="49cbb-3562"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3562"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3563">重写<xref:System.Windows.UIElement.OnTouchLeave%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3563">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3564">标识 <see cref="E:System.Windows.UIElement.TouchLeave" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3564">Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3565">当悬停在此元素上方的手指在屏幕上移动时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3565">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3566">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3566">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3567">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3567">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|<span data-ttu-id="49cbb-3568">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3568">Routing strategy</span></span>|<span data-ttu-id="49cbb-3569">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3569">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3570">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3570">Delegate</span></span>|<span data-ttu-id="49cbb-3571"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3571"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3572">对应的隧道事件<xref:System.Windows.UIElement.PreviewTouchMove>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3572">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="49cbb-3573">重写<xref:System.Windows.UIElement.OnTouchMove%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3573">Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3574">标识 <see cref="E:System.Windows.UIElement.TouchMove" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3574">Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3575">当悬停在此元素上方的手指从屏幕上移开时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3575">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="49cbb-3576">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3576">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3577">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3577">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchUpEvent>|  
|<span data-ttu-id="49cbb-3578">路由策略</span><span class="sxs-lookup"><span data-stu-id="49cbb-3578">Routing strategy</span></span>|<span data-ttu-id="49cbb-3579">冒泡</span><span class="sxs-lookup"><span data-stu-id="49cbb-3579">Bubbling</span></span>|  
|<span data-ttu-id="49cbb-3580">委托</span><span class="sxs-lookup"><span data-stu-id="49cbb-3580">Delegate</span></span>|<span data-ttu-id="49cbb-3581"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3581"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="49cbb-3582">对应的隧道事件<xref:System.Windows.UIElement.PreviewTouchUp>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3582">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="49cbb-3583">重写<xref:System.Windows.UIElement.OnTouchUp%2A>实现处理此事件在派生类中的类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3583">Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3584">标识 <see cref="E:System.Windows.UIElement.TouchUp" /> 路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3584">Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="49cbb-3585">相对于此元素的点值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3585">The point value, as relative to this element.</span>
          </span>
        </param>
        <param name="relativeTo">
          <span data-ttu-id="49cbb-3586">给定点转换后的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3586">The element to translate the given point into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49cbb-3587">将相对于此元素的点转换为相对于指定元素的坐标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3587">Translates a point relative to this element to coordinates that are relative to the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49cbb-3588">相对于目标元素而不是此源元素的点值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3588">A point value, now relative to the target element rather than this source element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3589">传递`null`为`relativeTo`允许存在，并且指示坐标应为相对于此元素所属的逻辑树中的根元素。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3589">Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</span></span>  
  
 <span data-ttu-id="49cbb-3590">此方法用于转换命中测试点值。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3590">This method is used for translating hit test point values.</span></span> <span data-ttu-id="49cbb-3591">如果您创作的控件，并且需要处理较低级别的输入，则调用此方法是主要相关。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3591">Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</span></span> <span data-ttu-id="49cbb-3592">如果你正在使用现有的控件，您通常可以假定已完成的控件将报告正确已翻译的命中的测试结果。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3592">If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3593">获取或设置此元素的唯一标识符（用于本地化）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3593">Gets or sets the unique identifier (for localization) for this element.</span>
          </span>
          <span data-ttu-id="49cbb-3594">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3594">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3595">一个字符串，该字符串是此元素的唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3595">A string that is the unique identifier for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3596">设计器用于获取`x:Uid`值 (请参阅[WPF 全球化和本地化概述](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)有关详细信息)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3596">Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-3597">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3597">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3598">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3598">Identifier field</span></span>|<xref:System.Windows.UIElement.UidProperty>|  
|<span data-ttu-id="49cbb-3599">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-3599">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-3600">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-3600">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3601">标识 <see cref="P:System.Windows.UIElement.Uid" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3601">Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3602">请确保此元素的所有可视子元素都正确地进行了布局更新。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3602">Ensures that all visual child elements of this element are properly updated for layout.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3603">当调用此方法，与元素<xref:System.Windows.UIElement.IsMeasureValid%2A>`false`或<xref:System.Windows.UIElement.IsArrangeValid%2A>`false`将调用特定于元素的<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法，这会强制布局更新，并将验证所有的计算的大小。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3603">When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.</span></span>  
  
 <span data-ttu-id="49cbb-3604">调用此方法不起如果布局未发生更改，或如果既不排列，也不度量的布局的状态无效。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3604">Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</span></span> <span data-ttu-id="49cbb-3605">但是，如果布局无效任一方面来说，<xref:System.Windows.UIElement.UpdateLayout%2A>调用将恢复整个布局。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3605">However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout.</span></span> <span data-ttu-id="49cbb-3606">因此，应避免调用<xref:System.Windows.UIElement.UpdateLayout%2A>元素树中每个增量版本号和次更改后。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3606">Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree.</span></span> <span data-ttu-id="49cbb-3607">布局系统将执行元素布局，以延迟方式，使用的算法的性能和货币、 平衡和为推迟到根更改，直到所有子元素都是有效的权重策略。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3607">The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</span></span> <span data-ttu-id="49cbb-3608">应只调用<xref:System.Windows.UIElement.UpdateLayout%2A>如果您绝对需要更新的大小和位置，并且您仅可以确信对您控制的和可能会影响布局的属性的所有更改都已都完成。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3608">You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3609">获取或设置此元素的[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 可见性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3609">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span>
          </span>
          <span data-ttu-id="49cbb-3610">这是依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3610">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49cbb-3611">枚举的一个值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3611">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="49cbb-3612">默认值为 <see cref="F:System.Windows.Visibility.Visible" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3612">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49cbb-3613">设置此属性将影响的值<xref:System.Windows.UIElement.IsVisible%2A>，这反过来可能会引起<xref:System.Windows.UIElement.IsVisibleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3613">Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event.</span></span> <span data-ttu-id="49cbb-3614">但是，<xref:System.Windows.UIElement.IsVisible%2A>具有其他因素影响，例如包含它的父项的可见性设置。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3614">However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="49cbb-3615">元素其中<xref:System.Windows.UIElement.Visibility%2A>不<xref:System.Windows.Visibility.Visible>不参与输入事件 （或命令）、 不会影响布局的测量或排列处理过程、 不在 tab 键序列中，和将不会报告中的命中测试。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3615">Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</span></span>  
  
 <span data-ttu-id="49cbb-3616">当通过继承<xref:System.Windows.Window>或其派生的类，<xref:System.Windows.Window>重新定义为此属性的默认值<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3616">When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="49cbb-3617">此操作将不运行上最初创建的布局的测量过程<xref:System.Windows.Window>，和<xref:System.Windows.UIElement.RenderSize%2A>返回 (0，0)。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3617">This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0).</span></span> <span data-ttu-id="49cbb-3618">有关详细信息，请参阅<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3618">For details, see <xref:System.Windows.Window>.</span></span> <span data-ttu-id="49cbb-3619"><xref:System.Windows.Controls.Primitives.Popup> 此外重新定义默认值为<xref:System.Windows.Visibility.Collapsed>，具有相似的结果行为<xref:System.Windows.Controls.Primitives.Popup>及其派生类。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3619"><xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="49cbb-3620">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="49cbb-3620">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="49cbb-3621">标识符字段</span><span class="sxs-lookup"><span data-stu-id="49cbb-3621">Identifier field</span></span>|<xref:System.Windows.UIElement.VisibilityProperty>|  
|<span data-ttu-id="49cbb-3622">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="49cbb-3622">Metadata properties set to `true`</span></span>|<span data-ttu-id="49cbb-3623">无</span><span class="sxs-lookup"><span data-stu-id="49cbb-3623">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49cbb-3624">下面的示例实现一个处理程序以引用旨在是互相排斥的方式对用户界面中的两个不同的命名的按钮。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3624">The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</span></span> <span data-ttu-id="49cbb-3625">在运行与按钮相关联的实际的程序逻辑之前, 按钮本身设置为<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>，并对中的其他按钮将设置为<xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49cbb-3625">Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, and the other button in the pair is set to <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49cbb-3626">标识 <see cref="P:System.Windows.UIElement.Visibility" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49cbb-3626">Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>