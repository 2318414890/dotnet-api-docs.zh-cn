<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c64500fcc9768d42490c1ff18e54293bdc46149c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="68f52-101">报告从 <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" /> 返回的信息。</span>
      <span class="sxs-lookup">
        <span data-stu-id="68f52-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-102">介绍的大多数信息的<xref:System.Windows.ValueSource>传输中包含<xref:System.Windows.ValueSource.BaseValueSource%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="68f52-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="68f52-103">此属性包含一个枚举值，指定的整体恰好一个方面[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统，它负责的依赖项属性的有效值。</span><span class="sxs-lookup"><span data-stu-id="68f52-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="68f52-104">除了基础值，可能需要关注有关依赖项属性值的其他信息是是否值进行动画处理，以及是否值涉及到 （如绑定或动态资源引用） 的表达式。</span><span class="sxs-lookup"><span data-stu-id="68f52-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="68f52-105">此信息报告的<xref:System.Windows.ValueSource.IsAnimated%2A>和<xref:System.Windows.ValueSource.IsExpression%2A>分别。</span><span class="sxs-lookup"><span data-stu-id="68f52-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="68f52-106">此外，如果对属性值执行强制，属性将保留所需的值，并且属性值将尝试达到该预期的值，如果更改或提升的特定强制约束。</span><span class="sxs-lookup"><span data-stu-id="68f52-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="68f52-107">一个强制转换后的属性，其预期值不会将报告<xref:System.Windows.ValueSource.IsCoerced%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="68f52-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="68f52-108">获取 <see cref="T:System.Windows.BaseValueSource" /> 枚举的值，该值报告向依赖项属性系统提供值的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="68f52-109">枚举的一个值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-109">A value of the enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-110">如果强制或动画行动的属性上，基础值不是有效的值。</span><span class="sxs-lookup"><span data-stu-id="68f52-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="68f52-111">检查<xref:System.Windows.ValueSource.IsAnimated%2A>和<xref:System.Windows.ValueSource.IsCoerced%2A>如果你想要确定基的值是否为有效的值。</span><span class="sxs-lookup"><span data-stu-id="68f52-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="68f52-112">你可能还想要检查<xref:System.Windows.ValueSource.IsExpression%2A>若要查看是否基的值计算出表达式。</span><span class="sxs-lookup"><span data-stu-id="68f52-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="68f52-113">与此 <see cref="T:System.Windows.ValueSource" /> 进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="68f52-114">返回一个值，指示此 <see cref="T:System.Windows.ValueSource" /> 是否与指定对象相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="68f52-115">如果提供的对象与当前 <see cref="T:System.Windows.ValueSource" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-115">
              <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-116">此实现支持基于每个每个属性值的值是否相等<xref:System.Windows.ValueSource>结构。</span><span class="sxs-lookup"><span data-stu-id="68f52-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="68f52-117">返回此 <see cref="T:System.Windows.ValueSource" /> 的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="68f52-118">32 位无符号整数哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-118">A 32-bit unsigned integer hash code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-119">此哈希代码基于<xref:System.Windows.ValueSource.BaseValueSource%2A>值。</span><span class="sxs-lookup"><span data-stu-id="68f52-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="68f52-120">获取一个值，该值声明是否对属性进行动画处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-120">Gets a value that declares whether the property is being animated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="68f52-121">如果对该属性进行动画处理，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-121">
              <see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-122">对于当前进行动画处理的任何属性，源报告的<xref:System.Windows.ValueSource.BaseValueSource%2A>没有立即关系，因为动画运行的依赖项属性优先权要高于基础值。</span><span class="sxs-lookup"><span data-stu-id="68f52-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="68f52-123">有关优先级和动画的详细信息，请参阅[依赖项属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="68f52-123">For more information about precedence and animations, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="68f52-124">获取一个值，声明此值是否是从应用于依赖属性的 <see cref="T:System.Windows.CoerceValueCallback" /> 实现中生成的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="68f52-125">如果此值是从应用于依赖项属性的 <see cref="T:System.Windows.CoerceValueCallback" /> 实现中生成的，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-125">
              <see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-126">如果对属性值执行强制，属性将保留所需的值，并且属性值将尝试达到该预期的值，如果更改或提升的特定强制约束。</span><span class="sxs-lookup"><span data-stu-id="68f52-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="68f52-127">一个强制转换后的属性，其预期值不会将报告<xref:System.Windows.ValueSource.IsCoerced%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="68f52-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="68f52-128">强制在优先权要高于基础值，作用和严格来说不是如何设置基础值的参与者。</span><span class="sxs-lookup"><span data-stu-id="68f52-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="68f52-129">因此会报告的并且被强制状态，按此属性，而不是值为<xref:System.Windows.BaseValueSource>枚举。</span><span class="sxs-lookup"><span data-stu-id="68f52-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="68f52-130">强制转换、 基础值和优先级有关的详细信息，请参阅[依赖项属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="68f52-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="68f52-131">获取一个值，该值声明是否由 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> 方法设置值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="68f52-132">如果由 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> 方法设置值，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-132">
              <see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="68f52-133">获取一个值，声明此值是否是从计算的表达式中生成的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-133">Gets a value that declares whether this value resulted from an evaluated expression.</span>
          </span>
          <span data-ttu-id="68f52-134">此表达式可能是支持绑定的 <see cref="T:System.Windows.Data.BindingExpression" />，或者是一个内部表达式，比如支持 [DynamicResource 标记扩展](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)的那些表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="68f52-135">如果值来自于计算出的表达式，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-135">
              <see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-136">计算的表达式还会报告设置条件表达式已应用，为中的值的特定基值<xref:System.Windows.ValueSource.BaseValueSource%2A>。</span><span class="sxs-lookup"><span data-stu-id="68f52-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="68f52-137"><xref:System.Windows.ValueSource.BaseValueSource%2A>仍是非常适用于任何属性其中<xref:System.Windows.ValueSource.IsExpression%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="68f52-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="68f52-138">了解通过表达式是否提供一个值可以设置值间接，例如根据通过模板或继承的属性值的情况特别有用。</span><span class="sxs-lookup"><span data-stu-id="68f52-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="68f52-139">如果无法计算表达式 （绑定失败; 找不到该名称的资源），则值将来自在属性系统中，最可能的一些其他参与者的默认值。</span><span class="sxs-lookup"><span data-stu-id="68f52-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="68f52-140">该源然后中报告<xref:System.Windows.ValueSource.BaseValueSource%2A>。</span><span class="sxs-lookup"><span data-stu-id="68f52-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="68f52-141">将返回失败的表达式计算`false`为<xref:System.Windows.ValueSource.IsExpression%2A>。</span><span class="sxs-lookup"><span data-stu-id="68f52-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="68f52-142">要比较的第一个 <see cref="T:System.Windows.ValueSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="68f52-143">要比较的第二个 <see cref="T:System.Windows.ValueSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="68f52-144">确定两个 <see cref="T:System.Windows.ValueSource" /> 实例是否具有相同的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="68f52-145">如果两个 <see cref="T:System.Windows.ValueSource" /> 实例等效，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-145">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-146">此实现中调用<xref:System.Windows.ValueSource.Equals%2A>，和支持值相等性的所有属性基于<xref:System.Windows.ValueSource>。</span><span class="sxs-lookup"><span data-stu-id="68f52-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="68f52-147">要比较的第一个 <see cref="T:System.Windows.ValueSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="68f52-148">要比较的第二个 <see cref="T:System.Windows.ValueSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="68f52-149">确定两个 <see cref="T:System.Windows.ValueSource" /> 实例是否具有不同的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="68f52-150">如果两个 <see cref="T:System.Windows.ValueSource" /> 实例不等效，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="68f52-150">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68f52-151">此实现中调用<xref:System.Windows.ValueSource.Equals%2A>，返回其求反，并支持基于的所有属性的值是否相等<xref:System.Windows.ValueSource>。</span><span class="sxs-lookup"><span data-stu-id="68f52-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>