<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="62d0c6b5a93fa38d970f0445e7a629dacdae551c" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48699215" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6a808-101">表示参与依赖属性系统的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6a808-101">Represents an object that participates in the dependency property system.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-102"><xref:System.Windows.DependencyObject>类启用[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]属性系统服务对其多个派生类。</span><span class="sxs-lookup"><span data-stu-id="6a808-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="6a808-103">属性系统的主要功能是计算属性的值，并提供有关已更改的值的系统通知。</span><span class="sxs-lookup"><span data-stu-id="6a808-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="6a808-104">参与属性系统的另一个关键类是<xref:System.Windows.DependencyProperty>。</span><span class="sxs-lookup"><span data-stu-id="6a808-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="6a808-105"><xref:System.Windows.DependencyProperty> 启用的依赖项属性的注册到属性系统中，并提供了标识和每个依赖项属性，信息而<xref:System.Windows.DependencyObject>如基类使对象能够使用依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="6a808-106"><xref:System.Windows.DependencyObject> 服务和特征包括：</span><span class="sxs-lookup"><span data-stu-id="6a808-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="6a808-107">承载支持的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-107">Dependency property hosting support.</span></span> <span data-ttu-id="6a808-108">通过调用注册依赖属性<xref:System.Windows.DependencyProperty.Register%2A>方法，并为您的类中的公共静态字段存储方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="6a808-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="6a808-109">承载支持附加的属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-109">Attached property hosting support.</span></span> <span data-ttu-id="6a808-110">通过调用注册附加的属性<xref:System.Windows.DependencyProperty.RegisterAttached%2A>方法，并将该方法的返回值存储为公共静态只读字段在类中。</span><span class="sxs-lookup"><span data-stu-id="6a808-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="6a808-111">(此外，还有其他成员要求; 请注意，这表示[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]附加属性的特定实现。</span><span class="sxs-lookup"><span data-stu-id="6a808-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="6a808-112">有关详细信息，请参阅[附加属性概述](~/docs/framework/wpf/advanced/attached-properties-overview.md)。)然后可以在任何派生的类上设置附加的属性<xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="6a808-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="6a808-113">获取、 设置和清除存在任何依赖项属性的值的实用工具方法<xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="6a808-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="6a808-114">元数据，强制转换值支持、 属性更改通知，以及重写依赖属性回调或附加属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="6a808-115">此外，<xref:System.Windows.DependencyObject>类有助于依赖项属性的每个所有者属性元数据。</span><span class="sxs-lookup"><span data-stu-id="6a808-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="6a808-116">类的公共基类派生自<xref:System.Windows.ContentElement>， <xref:System.Windows.Freezable>，或<xref:System.Windows.Media.Visual>。</span><span class="sxs-lookup"><span data-stu-id="6a808-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="6a808-117">(<xref:System.Windows.UIElement>，另一个基元素类，具有包含的类层次结构<xref:System.Windows.Media.Visual>。)</span><span class="sxs-lookup"><span data-stu-id="6a808-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-118">下面的示例从派生<xref:System.Windows.DependencyObject>创建新的抽象类。</span><span class="sxs-lookup"><span data-stu-id="6a808-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="6a808-119">然后，此类注册附加的属性，包括支持该附加属性的成员。</span><span class="sxs-lookup"><span data-stu-id="6a808-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6a808-120">初始化 <see cref="T:System.Windows.DependencyObject" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6a808-121">清除属性的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-121">Clears the local value of a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-122">要清除的由 <see cref="T:System.Windows.DependencyProperty" /> 对象引用指定的依赖属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-123">清除属性的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-123">Clears the local value of a property.</span>
          </span>
          <span data-ttu-id="6a808-124">要清除的属性由 <see cref="T:System.Windows.DependencyProperty" /> 标识符指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-125">通过调用清除的属性值<xref:System.Windows.DependencyObject.ClearValue%2A>不一定会赋予依赖项属性的依赖属性元数据中指定的默认值。</span><span class="sxs-lookup"><span data-stu-id="6a808-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="6a808-126">清除该属性只特别清除任何本地值可能已应用。</span><span class="sxs-lookup"><span data-stu-id="6a808-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="6a808-127">有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="6a808-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-128">下面的示例循环访问对象上设置了本地值的所有属性然后调用<xref:System.Windows.DependencyObject.ClearValue%2A>，清除每个此类属性的值。</span><span class="sxs-lookup"><span data-stu-id="6a808-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6a808-129">尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="6a808-130">要清除的依赖属性的关键字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-130">The key for the dependency property to be cleared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-131">清除只读属性的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-131">Clears the local value of a read-only property.</span>
          </span>
          <span data-ttu-id="6a808-132">要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" /> 指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-133">一个<xref:System.Windows.DependencyPropertyKey>标识只读依赖属性的属性系统操作。</span><span class="sxs-lookup"><span data-stu-id="6a808-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="6a808-134">定义只读依赖属性的类不应公开此密钥的公共访问权限。</span><span class="sxs-lookup"><span data-stu-id="6a808-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="6a808-135">公开提供的键将提供公共代码路径，它起作用的属性的只读的字符，如果方法<xref:System.Windows.DependencyObject.ClearValue%2A>或<xref:System.Windows.DependencyObject.SetValue%2A>类或引用键的程序集外部调用。</span><span class="sxs-lookup"><span data-stu-id="6a808-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="6a808-136">通过调用清除的属性值<xref:System.Windows.DependencyObject.ClearValue%2A>不一定会赋予依赖项属性的依赖属性元数据中指定的默认值。</span><span class="sxs-lookup"><span data-stu-id="6a808-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="6a808-137">清除值只特别清除任何本地值可能已应用。</span><span class="sxs-lookup"><span data-stu-id="6a808-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="6a808-138">有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="6a808-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6a808-139">尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-140">要强制转换的依赖项属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-140">The identifier for the dependency property to coerce.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-141">对指定依赖属性的值进行强制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-141">Coerces the value of the specified dependency property.</span>
          </span>
          <span data-ttu-id="6a808-142">通过对调用方 <see cref="T:System.Windows.DependencyObject" /> 上存在的依赖属性的属性元数据中所指定的任何 <see cref="T:System.Windows.CoerceValueCallback" /> 函数进行调用来完成此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-143">除了显式调用通过调用<xref:System.Windows.DependencyObject.CoerceValue%2A>，则<xref:System.Windows.CoerceValueCallback>依赖项属性也会调用在内部由重新计算依赖项属性值时[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统。</span><span class="sxs-lookup"><span data-stu-id="6a808-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="6a808-144">当调用<xref:System.Windows.DependencyObject.CoerceValue%2A>方法，最终调用指定的属性强制值回叫。</span><span class="sxs-lookup"><span data-stu-id="6a808-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="6a808-145">通常将调用<xref:System.Windows.DependencyObject.CoerceValue%2A>唯一，如果您知道该强制值回叫存在，并且知道强制转换的回调的条件。</span><span class="sxs-lookup"><span data-stu-id="6a808-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="6a808-146">调用的最常见方案<xref:System.Windows.DependencyObject.CoerceValue%2A>内的依赖方式影响彼此的值的相关属性的类处理或属性更改回调。</span><span class="sxs-lookup"><span data-stu-id="6a808-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="6a808-147">有关详细信息，请参阅[依赖属性回调和验证](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)。</span><span class="sxs-lookup"><span data-stu-id="6a808-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-148">下面的示例调用<xref:System.Windows.DependencyObject.CoerceValue%2A>内<xref:System.Windows.PropertyChangedCallback>实现，可作为<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>相同的类上的不同依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="6a808-149">这是一种常见模式，则返回 true 值之间引入依赖项依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6a808-150">指定的 <paramref name="dp" /> 或其值无效或不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a808-151">获取对此实例的 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6a808-152">对此实例的 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-153">此属性很有用，如果从方法返回的对象返回值类型为<xref:System.Windows.DependencyObject>并且你想要属性系统特定对其执行操作具体取决于它的类型。</span><span class="sxs-lookup"><span data-stu-id="6a808-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="6a808-154">例如是调用效率更高<xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>使用<xref:System.Windows.DependencyObjectType>而不是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]类型。</span><span class="sxs-lookup"><span data-stu-id="6a808-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="6a808-155"><xref:System.Windows.DependencyObjectType> 促进更快的查找。</span><span class="sxs-lookup"><span data-stu-id="6a808-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-156">在下面的伪代码示例中，`MySubClass`认为其他派生的类可能会更改的默认值`MyCustom`依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="6a808-157">类实现可以通过利用多态性上确定实际的派生的类的默认构造函数<xref:System.Windows.DependencyObjectType>值时为派生的类 instantiator 使用该构造函数。</span><span class="sxs-lookup"><span data-stu-id="6a808-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="6a808-158">要与当前实例进行比较的 <see cref="T:System.Windows.DependencyObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-159">确定提供的 <see cref="T:System.Windows.DependencyObject" /> 是否等效于当前 <see cref="T:System.Windows.DependencyObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6a808-160">如果两个实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-160">
              <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-161">此实现是引用相等性，且不会尝试评估所包含属性的值相等性。</span><span class="sxs-lookup"><span data-stu-id="6a808-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6a808-162">
              <see cref="T:System.Windows.DependencyObject" /> 重写，然后将两个基本的封装<see cref="T:System.Object" />方法：<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />和<see cref="M:System.Windows.DependencyObject.GetHashCode" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-162">
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span>
            </span>
            <span data-ttu-id="6a808-163">重写调用<see cref="T:System.Object" />实现，从而导致对象是否相等的行为。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span>
            </span>
            <span data-ttu-id="6a808-164">这些故意安排的重写的目的是为了防止派生的类尝试定义值相等性<see cref="T:System.Windows.DependencyObject" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span>
            </span>
            <span data-ttu-id="6a808-165">值相等性<see cref="T:System.Windows.DependencyObject" />永远不会是准确的将由于固有的属性值更改功能的<see cref="T:System.Windows.DependencyObject" />及其依赖项属性。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span>
            </span>
            <span data-ttu-id="6a808-166">这包括基本[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]功能，例如数据绑定和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6a808-167">获取此 <see cref="T:System.Windows.DependencyObject" /> 的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6a808-168">带符号 32 位整数哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-168">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6a808-169">
              <see cref="T:System.Windows.DependencyObject" /> 重写，然后将两个封装<see cref="T:System.Object" />方法：<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />和<see cref="M:System.Windows.DependencyObject.GetHashCode" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-169">
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span>
            </span>
            <span data-ttu-id="6a808-170">重写调用<see cref="T:System.Object" />实现，从而导致对象是否相等的行为。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span>
            </span>
            <span data-ttu-id="6a808-171">这些故意安排的重写的目的是为了防止派生的类尝试定义值相等性<see cref="T:System.Windows.DependencyObject" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span>
            </span>
            <span data-ttu-id="6a808-172">值相等性<see cref="T:System.Windows.DependencyObject" />永远不会是准确的将由于固有的属性值更改功能的<see cref="T:System.Windows.DependencyObject" />及其依赖项属性。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span>
            </span>
            <span data-ttu-id="6a808-173">这包括基本[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]功能，例如数据绑定和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6a808-174">创建一个专用的枚举数，用于确定哪些依赖项属性在此 <see cref="T:System.Windows.DependencyObject" /> 上具有以本地方式设置的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6a808-175">一个专用的本地值枚举数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-175">A specialized local value enumerator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-176">一个*本地值*是任何依赖项属性值所设置<xref:System.Windows.DependencyObject.SetValue%2A>，而不是属性系统的其他方面。</span><span class="sxs-lookup"><span data-stu-id="6a808-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="6a808-177"><xref:System.Windows.LocalValueEnumerator>获取通过调用<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>可用于枚举具有本地设置的属性值上<xref:System.Windows.DependencyObject>实例。</span><span class="sxs-lookup"><span data-stu-id="6a808-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="6a808-178">每个此类属性表示的枚举器中<xref:System.Windows.LocalValueEntry>具有引用特定的属性的对象<xref:System.Windows.DependencyProperty>及其值。</span><span class="sxs-lookup"><span data-stu-id="6a808-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="6a808-179">此方法通过本地设置枚举的值可用于优化或其他处理的本地值，如确定哪些属性值的<xref:System.Windows.DependencyObject>在清除会更改。</span><span class="sxs-lookup"><span data-stu-id="6a808-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6a808-180">返回<xref:System.Windows.LocalValueEnumerator>可能包含<xref:System.Windows.LocalValueEntry>是只读的依赖项属性或值通过属性系统的依赖项属性的记录。</span><span class="sxs-lookup"><span data-stu-id="6a808-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="6a808-181">例如，通过布局使用确定宽度的可视框架元素将报告为本地值<xref:System.Windows.FrameworkElement.ActualWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="6a808-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="6a808-182">如果为了重置它们获得本地值，检查<xref:System.Windows.DependencyProperty.ReadOnly%2A>上的每个属性标识符的值<xref:System.Windows.LocalValueEntry>来确认<xref:System.Windows.DependencyProperty>是否为只读的。</span><span class="sxs-lookup"><span data-stu-id="6a808-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-183">下面的示例循环访问对象上设置了本地值的所有属性然后调用<xref:System.Windows.DependencyObject.ClearValue%2A>，清除每个此类属性的值。</span><span class="sxs-lookup"><span data-stu-id="6a808-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-184">要为其检索值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-185">对 <see cref="T:System.Windows.DependencyObject" /> 的此实例返回依赖属性的当前有效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6a808-186">返回当前有效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-186">Returns the current effective value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-187">*有效值*是由属性系统返回到正在请求值的任何调用方的属性的值。</span><span class="sxs-lookup"><span data-stu-id="6a808-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="6a808-188">有效的值为具有评估参与属性系统值优先级中的所有可能的输入属性系统的结果。</span><span class="sxs-lookup"><span data-stu-id="6a808-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="6a808-189">这包括强制转换和动画。</span><span class="sxs-lookup"><span data-stu-id="6a808-189">This includes coercion and animation.</span></span> <span data-ttu-id="6a808-190">有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="6a808-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="6a808-191">此方法将永远不会返回<xref:System.Windows.DependencyProperty.UnsetValue>。</span><span class="sxs-lookup"><span data-stu-id="6a808-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="6a808-192"><xref:System.Windows.DependencyProperty.UnsetValue>是用在通过强制回调内部，有时也公开的各种功能的属性系统的 sentinel 值。</span><span class="sxs-lookup"><span data-stu-id="6a808-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="6a808-193">如果不确定属性的类型应该是什么，您可以查询请求的依赖关系属性，以确定是否存在多个特定的标识符<xref:System.Windows.DependencyProperty.PropertyType%2A>的返回值可以转换为。</span><span class="sxs-lookup"><span data-stu-id="6a808-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6a808-194">指定的 <paramref name="dp" /> 或其值无效，或者指定的 <paramref name="dp" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-195">要使其失效的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-196">重新计算指定依赖项属性的有效值</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-196">Re-evaluates the effective value for the specified dependency property</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-197">当您调用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>、 任何相关联的和适用<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>函数注册可能会调用该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="6a808-198">调用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>上设置其本地值的属性不会影响，因为本地值的优先级高于其他属性系统输入，动画除外。</span><span class="sxs-lookup"><span data-stu-id="6a808-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="6a808-199">但是，您可以调用<xref:System.Windows.DependencyObject.ClearValue%2A>，然后调用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="6a808-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="6a808-200">有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="6a808-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="6a808-201">调用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>不一定适用于许多依赖关系属性方案。</span><span class="sxs-lookup"><span data-stu-id="6a808-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="6a808-202">如果因任何组成部分的值变化而变得失效依赖项属性，属性系统使无效，并自动重新计算依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="6a808-203">但是，仍有一些适当的方案其中<xref:System.Windows.DependencyObject.InvalidateProperty%2A>非常有用。</span><span class="sxs-lookup"><span data-stu-id="6a808-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="6a808-204">具体而言，可以使用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>内的强制值或属性更改为不同的依赖项属性的回调。</span><span class="sxs-lookup"><span data-stu-id="6a808-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="6a808-205">此外可以使用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>以强制重新计算对不是能够实现建议的数据源绑定<xref:System.ComponentModel.INotifyPropertyChanged>通知机制 (也许如果使用的不能被派生，或其中数据是静态的数据类成员）。</span><span class="sxs-lookup"><span data-stu-id="6a808-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-206">下面的示例调用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>上自定义属性，只要无效的属性的计算中涉及的属性更改。</span><span class="sxs-lookup"><span data-stu-id="6a808-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="6a808-207">这是调用的替代技术<xref:System.Windows.DependencyObject.CoerceValue%2A>方法，因为导致失效属性将同时调用任何注册<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>。</span><span class="sxs-lookup"><span data-stu-id="6a808-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a808-208">获取一个值，该值指示此实例当前是否为密封的（只读）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6a808-209">如果此实例是密封的，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-209">
              <see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-210">此值是在内部设置。</span><span class="sxs-lookup"><span data-stu-id="6a808-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6a808-211">将包含相关依赖属性标识符、类型的属性元数据以及旧值和新值的事件数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-212">每当更新此 <see cref="T:System.Windows.DependencyObject" /> 上任何依赖项属性的有效值时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span>
          </span>
          <span data-ttu-id="6a808-213">更改的特定依赖属性将在事件数据中报告。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-213">The specific dependency property that changed is reported in the event data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-214">此方法不是通常将检测到单个属性更改或在每个用例的基础上执行的属性失效。</span><span class="sxs-lookup"><span data-stu-id="6a808-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="6a808-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 而被适用于修改常规失效模式中，如果特定的信息了解了宽分类的属性。</span><span class="sxs-lookup"><span data-stu-id="6a808-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="6a808-216">例如中, 更改<xref:System.Windows.Freezable>可能会发生更改的值类型<xref:System.Windows.Freezable>，或者可能是子属性，其中所做的更改是在其他<xref:System.Windows.Freezable>的引用。</span><span class="sxs-lookup"><span data-stu-id="6a808-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="6a808-217"><xref:System.Windows.Freezable>重写实现<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>使用内部信息来确定属性是否为子属性，并为任一种情况下提供了相应的基类逻辑。</span><span class="sxs-lookup"><span data-stu-id="6a808-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="6a808-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 一个对象的生命周期内可能调用多次。</span><span class="sxs-lookup"><span data-stu-id="6a808-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="6a808-219">因此，可以实现更好的总体属性系统的性能，如果重写特定属性的元数据，然后将附加<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>各个属性的函数。</span><span class="sxs-lookup"><span data-stu-id="6a808-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="6a808-220">但是，应使用此方法，如果<xref:System.Windows.DependencyObject>包括大量的值相关的依赖项属性，或如果它包含逻辑，例如呈现行为，必须重新运行多个相关的属性失效的情况。</span><span class="sxs-lookup"><span data-stu-id="6a808-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6a808-221">始终调用基实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-221">Always call the base implementation.</span>
            </span>
            <span data-ttu-id="6a808-222">如果不这样做将大大禁用整个[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统，从而导致不正确的值报告。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-223">要为其检索值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-224">如果存在，则返回依赖属性的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-224">Returns the local value of a dependency property, if it exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6a808-225">返回本地值，或在未设置本地值的情况下返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-226">应使用<xref:System.Windows.DependencyObject.GetValue%2A>的依赖属性的最典型的"get"操作。</span><span class="sxs-lookup"><span data-stu-id="6a808-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="6a808-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> 不会返回很多情况的生效值的值未在本地设置。</span><span class="sxs-lookup"><span data-stu-id="6a808-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="6a808-228">设置的样式、 主题和模板的值，从元数据或属性值继承的默认值是不被视为本地值。</span><span class="sxs-lookup"><span data-stu-id="6a808-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="6a808-229">但是，被视为绑定和其他表达式将本地值，在之后进行计算。</span><span class="sxs-lookup"><span data-stu-id="6a808-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="6a808-230">当没有本地值设置时，此方法返回<xref:System.Windows.DependencyProperty.UnsetValue>。</span><span class="sxs-lookup"><span data-stu-id="6a808-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="6a808-231">如果返回的值不是<xref:System.Windows.DependencyProperty.UnsetValue>，可以查询的请求的依赖关系属性，以确定是否存在更具体的类型的返回值可以转换为元数据。</span><span class="sxs-lookup"><span data-stu-id="6a808-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-232">要设置的依赖属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-232">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6a808-233">新的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-233">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-234">设置依赖属性的值而不更改其值源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-234">Sets the value of a dependency property without changing its value source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-235">以编程方式设置但不能禁用应用程序声明的属性使用一个自己的属性的值的组件使用此方法。</span><span class="sxs-lookup"><span data-stu-id="6a808-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="6a808-236"><xref:System.Windows.DependencyObject.SetCurrentValue%2A>方法将更改的有效值的属性，但现有的触发器、 数据绑定和样式将继续工作。</span><span class="sxs-lookup"><span data-stu-id="6a808-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6a808-237">尝试修改只读依赖项属性，或尝试修改密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6a808-238">
            <paramref name="value" /> 的类型不是为 <paramref name="dp" /> 属性注册时使用的正确类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-238">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6a808-239">设置依赖属性的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-239">Sets the local value of a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-240">要设置的依赖属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-240">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6a808-241">新的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-241">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-242">设置依赖属性的本地值，该值由其依赖属性标识符指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-243">如果提供的类型与声明的依赖项属性为最初注册该类型不匹配，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="6a808-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="6a808-244">`value`参数应始终提供为相应的类型。</span><span class="sxs-lookup"><span data-stu-id="6a808-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="6a808-245">异常条件可能会受<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>位于要设置的依赖项属性的依赖项属性标识符的回调。</span><span class="sxs-lookup"><span data-stu-id="6a808-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="6a808-246">否则，提供的值可能会失败 （例如，将字符串传递时的本机类型为 Double） 的一般类型检查条件。</span><span class="sxs-lookup"><span data-stu-id="6a808-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6a808-247">尝试修改只读依赖项属性，或尝试修改密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6a808-248">
            <paramref name="value" /> 的类型不是为 <paramref name="dp" /> 属性注册时使用的正确类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-248">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="6a808-249">要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6a808-250">新的本地值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-250">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-251">设置一个只读依赖属性的本地值，该值由依赖属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-252">当你设置由自定义类定义的只读依赖属性的值时，通常使用该签名。</span><span class="sxs-lookup"><span data-stu-id="6a808-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="6a808-253">通常情况下，<xref:System.Windows.DependencyObject.SetValue%2A>仅从已注册该依赖项属性，它实现为依赖属性提供确定的值的内部逻辑的类型。</span><span class="sxs-lookup"><span data-stu-id="6a808-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="6a808-254">有关详细信息，请参阅[只读依赖属性](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)。</span><span class="sxs-lookup"><span data-stu-id="6a808-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="6a808-255">如果提供的类型与声明的依赖项属性为最初注册该类型不匹配，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="6a808-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="6a808-256">`value`参数应始终提供为相应的类型。</span><span class="sxs-lookup"><span data-stu-id="6a808-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="6a808-257">异常条件可能会受<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>位于要设置的依赖项属性的依赖项属性标识符的回调。</span><span class="sxs-lookup"><span data-stu-id="6a808-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a808-258">下面的示例定义只读依赖属性，连同`public static readonly` <xref:System.Windows.DependencyProperty> ，它提供必要只读接触属性的使用者和的 get 访问器[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]包装器。</span><span class="sxs-lookup"><span data-stu-id="6a808-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="6a808-259">应被序列化的依赖项属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-259">The identifier for the dependency property that should be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a808-260">返回一个值，该值指示序列化进程是否应序列化所提供的依赖属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6a808-261">如果应对提供的依赖项属性的值进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a808-261">
              <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a808-262">默认实现返回`true`用于所有情况下，在其中一个依赖项属性具有上建立的本地值<xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="6a808-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6a808-263">重写此方法可能会以不同方式处理特定的依赖项属性。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6a808-263">Overrides for this method might handle specific dependency properties differently.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>