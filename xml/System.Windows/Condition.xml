<Type Name="Condition" FullName="System.Windows.Condition">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6151a6cc8d21e10726230abe59ccf1bb7786cb0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461650" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Condition : System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Condition extends System.Object implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Condition" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Condition&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Condition sealed : System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Condition = class&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.XamlSetMarkupExtension("ReceiveMarkupExtension")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XamlSetTypeConverter("ReceiveTypeConverter")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Windows.MultiTrigger" /> 和 <see cref="T:System.Windows.MultiDataTrigger" /> 的条件，它们两个将根据一组条件对属性值应用更改。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.MultiTrigger>s 和<xref:System.Windows.MultiDataTrigger>s 允许你设置基于一组条件的属性值。 指定的元素或数据项的属性值匹配时满足条件<xref:System.Windows.Condition.Value%2A>（引用相等性检查）。 如果满足所有指定的条件时，将应用该触发器。  
  
 下面是将导致异常的情况下的列表：  
  
-   每个<xref:System.Windows.Condition>，你仅可以设置<xref:System.Windows.Condition.Property%2A>属性或<xref:System.Windows.Condition.Binding%2A>属性。 如果设置这两个属性，将引发异常。  
  
-   如果<xref:System.Windows.Condition>为<xref:System.Windows.MultiTrigger>、<xref:System.Windows.Condition.Property%2A>属性不能为 null。  
  
-   如果<xref:System.Windows.Condition>为<xref:System.Windows.MultiDataTrigger>、<xref:System.Windows.Condition.Binding%2A>属性不能为 null。  
  
-   如果引发异常指定<xref:System.Windows.Condition.Value%2A>不是有效类型的指定<xref:System.Windows.Condition.Property%2A>。  
  
 请注意，如果<xref:System.Windows.Condition>为<xref:System.Windows.MultiTrigger>、<xref:System.Windows.Condition.Property%2A>和<xref:System.Windows.Condition.Value%2A>必须设置属性。 如果是出于<xref:System.Windows.MultiDataTrigger>、<xref:System.Windows.Condition.Binding%2A>和<xref:System.Windows.Condition.Value%2A>必须设置属性。  
  
   
  
## Examples  
 下面的示例包含两个<xref:System.Windows.MultiTrigger>s。 第一个集**MinWidth**属性值时**HasItems**属性为 false 和**宽度**属性是**自动**。第二个类似，但不适用于**MinHeight**属性。  
  
 [!code-xaml[ControlTemplateExamples_snip#MultiTriggerExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples_snip/CS/Page1.xaml#multitriggerexample1)]  
  
 请参阅<xref:System.Windows.Condition.Binding%2A>属性有关的条件中使用示例<xref:System.Windows.MultiDataTrigger>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Condition" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Condition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Condition();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Condition" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Condition (System.Windows.Data.BindingBase binding, object conditionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Data.BindingBase binding, object conditionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.#ctor(System.Windows.Data.BindingBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (binding As BindingBase, conditionValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Condition(System::Windows::Data::BindingBase ^ binding, System::Object ^ conditionValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Condition : System.Windows.Data.BindingBase * obj -&gt; System.Windows.Condition" Usage="new System.Windows.Condition (binding, conditionValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
        <Parameter Name="conditionValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binding">指定条件的属性的绑定。</param>
        <param name="conditionValue">条件的值。</param>
        <summary>初始化 <see cref="T:System.Windows.Condition" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Condition (System.Windows.DependencyProperty conditionProperty, object conditionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty conditionProperty, object conditionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.#ctor(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conditionProperty As DependencyProperty, conditionValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Condition(System::Windows::DependencyProperty ^ conditionProperty, System::Object ^ conditionValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Condition : System.Windows.DependencyProperty * obj -&gt; System.Windows.Condition" Usage="new System.Windows.Condition (conditionProperty, conditionValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conditionProperty" Type="System.Windows.DependencyProperty" />
        <Parameter Name="conditionValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="conditionProperty">条件的属性。</param>
        <param name="conditionValue">条件的值。</param>
        <summary>用指定的属性和值初始化 <see cref="T:System.Windows.Condition" /> 类的新实例。 此构造函数执行参数验证。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Condition (System.Windows.DependencyProperty conditionProperty, object conditionValue, string sourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty conditionProperty, object conditionValue, string sourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.#ctor(System.Windows.DependencyProperty,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conditionProperty As DependencyProperty, conditionValue As Object, sourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Condition(System::Windows::DependencyProperty ^ conditionProperty, System::Object ^ conditionValue, System::String ^ sourceName);" />
      <MemberSignature Language="F#" Value="new System.Windows.Condition : System.Windows.DependencyProperty * obj * string -&gt; System.Windows.Condition" Usage="new System.Windows.Condition (conditionProperty, conditionValue, sourceName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conditionProperty" Type="System.Windows.DependencyProperty" />
        <Parameter Name="conditionValue" Type="System.Object" />
        <Parameter Name="sourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="conditionProperty">条件的属性。</param>
        <param name="conditionValue">条件的值。</param>
        <param name="sourceName">具有 <c>conditionProperty</c> 的对象的 <c>x:Name</c>。</param>
        <summary>使用指定的属性、值和源对象的名称初始化 <see cref="T:System.Windows.Condition" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase Binding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase Binding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Condition.Binding" />
      <MemberSignature Language="VB.NET" Value="Public Property Binding As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingBase ^ Binding { System::Windows::Data::BindingBase ^ get(); void set(System::Windows::Data::BindingBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Binding : System.Windows.Data.BindingBase with get, set" Usage="System.Windows.Condition.Binding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定条件属性的绑定。 它仅适用于 <see cref="T:System.Windows.MultiDataTrigger" /> 对象。</summary>
        <value>默认值为 null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.MultiDataTrigger>s，可以设置基于返回的数据值的属性值。 例如，如果您要显示的任务项的列表，你可能想要显示包含一个红色背景的任务，如果它是高优先级，并且具有已看不到为两周以上。  
  
 创建绑定，并使用<xref:System.Windows.Data.Binding.Path%2A>属性将绑定到某个对象 （绑定源对象） 的属性。 例如，可能将绑定到*优先级*属性*任务*。 有关详细信息，请参阅 [数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 请注意，如果它是条件<xref:System.Windows.MultiDataTrigger>、<xref:System.Windows.Condition.Binding%2A>和<xref:System.Windows.Condition.Value%2A>必须设置属性。 设置<xref:System.Windows.Condition.Property%2A>值将在这种情况下会导致异常。  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlPropertyElementUsage_Binding"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Binding>  
    <Binding …/>  
  </object.Binding>  
</object>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 declaration  
 绑定声明。 请参阅[绑定声明概述](~/docs/framework/wpf/data/binding-declarations-overview.md)有关详细信息。  
  
   
  
## Examples  
 在下面的示例中，<xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>绑定到*位置*、<xref:System.Collections.ObjectModel.ObservableCollection%601>的*位置*对象。 *位置*对象具有属性*名称*和*状态*。  
  
 每个<xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Controls.ListBox>显示*位置*对象。 <xref:System.Windows.Style>在示例中为应用于每<xref:System.Windows.Controls.ListBoxItem>。 <xref:System.Windows.Condition>的 s<xref:System.Windows.MultiDataTrigger>指定以便如果*名称*和*状态*的*位置*数据项是"Portland"和"或者"分别，则相应的背景<xref:System.Windows.Controls.ListBoxItem>设置为青色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Condition.Property" />
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Condition.Property" />
      <MemberSignature Language="VB.NET" Value="Public Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); void set(System::Windows::DependencyProperty ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty with get, set" Usage="System.Windows.Condition.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置条件的属性。 它仅适用于 <see cref="T:System.Windows.MultiTrigger" /> 对象。</summary>
        <value>一个指定条件属性的 <see cref="T:System.Windows.DependencyProperty" />。 默认值为 null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.MultiTrigger>s，可以设置基于一组条件的属性值。 条件是满足属性的值 (指定的<xref:System.Windows.Condition.Property%2A>属性) 的元素匹配所指定<xref:System.Windows.Condition.Value%2A>（引用相等性检查）。 如果满足所有指定的条件时，将应用该触发器。  
  
 如果`TargetType`未对包含触发器的模板的样式设置。 然后需要限定属性名称使用`ClassName.PropertyName`语法。  
  
 请注意，如果它是条件<xref:System.Windows.MultiTrigger>、<xref:System.Windows.Condition.Property%2A>和<xref:System.Windows.Condition.Value%2A>必须设置属性。 设置<xref:System.Windows.Condition.Binding%2A>值将在这种情况下会导致异常。  
  
 有关<xref:System.Windows.Condition>中<xref:System.Windows.MultiDataTrigger>s，<xref:System.Windows.Condition.Binding%2A>属性应该使用而不是此属性。  
  
   
  
## Examples  
 下面的示例包含两个<xref:System.Windows.MultiTrigger>s。 第一个集**MinWidth**属性值时**HasItems**属性为 false 和**宽度**属性是**自动**。第二个类似，但不适用于**MinHeight**属性。  
  
 [!code-xaml[ControlTemplateExamples_snip#MultiTriggerExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples_snip/CS/Page1.xaml#multitriggerexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Condition.Binding" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMarkupExtension">
      <MemberSignature Language="C#" Value="public static void ReceiveMarkupExtension (object targetObject, System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveMarkupExtension(object targetObject, class System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.ReceiveMarkupExtension(System.Object,System.Windows.Markup.XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveMarkupExtension (targetObject As Object, eventArgs As XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveMarkupExtension(System::Object ^ targetObject, System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveMarkupExtension : obj * System.Windows.Markup.XamlSetMarkupExtensionEventArgs -&gt; unit" Usage="System.Windows.Condition.ReceiveMarkupExtension (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">标记扩展在其中设置值的对象。</param>
        <param name="eventArgs">与标记扩展处理有关的数据。</param>
        <summary>处理标记扩展为 <see cref="T:System.Windows.Condition" /> 对象的属性提供值的情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是应用所引用的方法<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>在类级别，这意味着此方法将处理所有尝试将值设置的属性<xref:System.Windows.Condition>与标记扩展。 不通常调用此方法直接。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTypeConverter">
      <MemberSignature Language="C#" Value="public static void ReceiveTypeConverter (object targetObject, System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveTypeConverter(object targetObject, class System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.ReceiveTypeConverter(System.Object,System.Windows.Markup.XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveTypeConverter (targetObject As Object, eventArgs As XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveTypeConverter(System::Object ^ targetObject, System::Windows::Markup::XamlSetTypeConverterEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveTypeConverter : obj * System.Windows.Markup.XamlSetTypeConverterEventArgs -&gt; unit" Usage="System.Windows.Condition.ReceiveTypeConverter (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">类型转换器在其中设置值的对象。</param>
        <param name="eventArgs">与类型转换器处理有关的数据。</param>
        <summary>处理类型转换器为 <see cref="T:System.Windows.Condition" /> 对象的属性提供值的情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是应用所引用的方法<xref:System.Windows.Markup.XamlSetTypeConverterAttribute>在类级别，这意味着此方法将处理所有尝试将值设置的属性<xref:System.Windows.Condition>与类型转换器。 不通常调用此方法直接。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Condition.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.Condition.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对象的名称，该对象具有可应用关联的 setter 的属性。 它仅适用于 <see cref="T:System.Windows.MultiTrigger" /> 对象。</summary>
        <value>默认属性为 <see langword="null" />。 如果此属性为 <see langword="null" />，则正在进行样式设置的对象的属性会导致应用关联的 setter。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以将此属性设置为应用触发器集合 （包含这种情况的触发器属于的集合） 的位置的作用域中的任何元素的名称。 这通常是包含的触发器的模板内的已命名的元素。  
  
 您可以命名对象使用[X:name 指令](~/docs/framework/xaml-services/x-name-directive.md)语法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">使用 <see cref="T:System.Windows.Condition" /> 之后，就不能再对其进行修改。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用信号通知对象初始化即将开始。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Condition> 实例强制转换为 <xref:System.ComponentModel.ISupportInitialize> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Condition.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用信号通知对象初始化已完成。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Condition> 实例强制转换为 <xref:System.ComponentModel.ISupportInitialize> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Condition.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.Condition.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.SetterTriggerConditionValueConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置条件的值。</summary>
        <value>对于给定的 <see cref="P:System.Windows.Condition.Value" />，<see cref="T:System.Windows.Condition" /> 属性不能为 null。  请参见“异常”部分。 默认值为 null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.MultiTrigger>s 和<xref:System.Windows.MultiDataTrigger>s 允许你设置基于一组条件的属性值。 指定的元素或数据项的属性值匹配时满足条件<xref:System.Windows.Condition.Value%2A>。 如果满足所有指定的条件时，将应用该触发器。 如果满足所有指定的条件时，将应用该触发器。  
  
   
  
## Examples  
 下面的示例包含两个<xref:System.Windows.MultiTrigger>s。 第一个集**MinWidth**属性值时**HasItems**属性为 false 和**宽度**属性是**自动**。第二个类似，但不适用于**MinHeight**属性。  
  
 [!code-xaml[ControlTemplateExamples_snip#MultiTriggerExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples_snip/CS/Page1.xaml#multitriggerexample1)]  
  
 请参阅<xref:System.Windows.Condition.Binding%2A>属性有关的条件中使用示例<xref:System.Windows.MultiDataTrigger>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支持表达式。</exception>
      </Docs>
    </Member>
  </Members>
</Type>