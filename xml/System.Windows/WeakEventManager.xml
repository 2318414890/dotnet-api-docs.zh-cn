<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac94cdae430bda3a59a21292d13f613f0012919d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="16d87-101">为在“弱事件模式”中使用的事件管理器提供基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="16d87-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      </span>
      <span data-ttu-id="16d87-102">管理器为也使用该模式的事件（或回调）添加和移除侦听器。</span>
      <span class="sxs-lookup">
        <span data-stu-id="16d87-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-103">当事件源具有对象生存期无关的事件侦听器时，通常使用弱事件模式。</span><span class="sxs-lookup"><span data-stu-id="16d87-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="16d87-104">使用中央事件调度能力<xref:System.Windows.WeakEventManager>允许该侦听器的处理程序进行垃圾回收，即使源对象仍然存在。</span><span class="sxs-lookup"><span data-stu-id="16d87-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="16d87-105">与此相反，常规事件挂钩使用`+=`运算符会导致可能断开连接的源来保存到侦听器的引用。</span><span class="sxs-lookup"><span data-stu-id="16d87-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="16d87-106">这可以防止接收方进行垃圾回收及时。</span><span class="sxs-lookup"><span data-stu-id="16d87-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="16d87-107">一种常见情况之间源和侦听器的生存期关系应使用其中的弱事件模式是来自数据绑定的更新事件的处理。</span><span class="sxs-lookup"><span data-stu-id="16d87-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="16d87-108">弱事件模式还可以用于回调事件和常规事件。</span><span class="sxs-lookup"><span data-stu-id="16d87-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="16d87-109">有关自定义的示例<see cref="T:System.Windows.WeakEventManager" />，请参阅[弱事件模式](~/docs/framework/wpf/advanced/weak-event-patterns.md)。</span>
        <span class="sxs-lookup">
          <span data-stu-id="16d87-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16d87-110">在基类值由派生类的构造函数用作初始值设定项时初始化基类值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="16d87-111">在其中处理事件的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-111">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="16d87-112">一个包含要传递的事件的事件数据的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-113">将正在托管的事件传送到每个侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-113">Delivers the event being managed to each listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-114">调用<xref:System.Windows.WeakEventManager.DeliverEvent%2A>从方法中的事件处理程序添加或移除<xref:System.Windows.WeakEventManager.StartListening%2A>和<xref:System.Windows.WeakEventManager.StopListening%2A>子类的实现。</span><span class="sxs-lookup"><span data-stu-id="16d87-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="16d87-115">如果调用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>方法在你`AddListener`实现你的类中，侦听器接收事件的列表就会保留在基础集合。</span><span class="sxs-lookup"><span data-stu-id="16d87-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="16d87-116">(`AddListener`不是类或接口协定的一部分。</span><span class="sxs-lookup"><span data-stu-id="16d87-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="16d87-117">`AddListener` 是管理器的类中调用的方法的建议的名称<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>并添加为事件弱事件模式侦听器。)</span><span class="sxs-lookup"><span data-stu-id="16d87-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="16d87-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 将侦听器添加到一个列表。</span><span class="sxs-lookup"><span data-stu-id="16d87-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="16d87-119">如果你管理器实现维护多个列表的每个事件侦听器，则不要使用<xref:System.Windows.WeakEventManager.DeliverEvent%2A>或<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="16d87-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="16d87-120">相反，你实现应创建其自己<xref:System.Windows.WeakEventManager.ListenerList>情况下，`AddListener`应将侦听器添加到相应的列表中，并且事件应通过调用传递到相应的侦听器列表<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>。</span><span class="sxs-lookup"><span data-stu-id="16d87-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="16d87-121">在其中处理事件的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-121">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="16d87-122">包含事件数据的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <param name="list">
          <span data-ttu-id="16d87-123">提供的 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-124">将正在托管的事件传送到所提供列表中的每个侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-124">Delivers the event being managed to each listener in the provided list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-125">此方法是必需的如果您管理器的实现维护单独的侦听器列表根据捕获事件数据中的信息。</span><span class="sxs-lookup"><span data-stu-id="16d87-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="16d87-126">如果你使用此高级的技术，必须创建并维护属于管理器实现，将单独的列表，你必须提供了如何将侦听器添加到的特定列表。</span><span class="sxs-lookup"><span data-stu-id="16d87-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="16d87-127">您侦听原始事件的处理程序实现的行为必须在条件时，使用来区分列表中，并将事件传送仅对的相应的列表或列表。</span><span class="sxs-lookup"><span data-stu-id="16d87-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="16d87-128">要为其获取 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-129">返回用于所提供类型的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16d87-130">匹配的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 实现调用此方法使用其传递`managerType`。</span><span class="sxs-lookup"><span data-stu-id="16d87-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="16d87-132">返回<xref:System.Windows.WeakEventManager>然后用作区分符，以确定已收到的事件，以及要调用的私有类处理程序。</span><span class="sxs-lookup"><span data-stu-id="16d87-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-133">所请求源的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-133">The zero-based index of the requested source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-134">获取或设置为指定的源存储的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-134">Gets or sets the data being stored for the specified source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16d87-135">通过此源的管理器存储的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-135">Data being stored by the manager for this source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-136">派生的类可以选择数据和将存储在此索引器的类型。</span><span class="sxs-lookup"><span data-stu-id="16d87-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="16d87-137">通常这作为实现<xref:System.Windows.WeakEventManager.ListenerList>，这是一份到侦听器的弱引用。</span><span class="sxs-lookup"><span data-stu-id="16d87-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="16d87-138">你只需更改此类型，如果<xref:System.Windows.WeakEventManager.ListenerList>类型不能包含你所需的信息。</span><span class="sxs-lookup"><span data-stu-id="16d87-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="16d87-139">如果这样，你将需要重写<xref:System.Windows.WeakEventManager.Purge%2A>方法，以便正确执行的基础类型的所有清理。</span><span class="sxs-lookup"><span data-stu-id="16d87-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16d87-140">返回包含事件侦听器的新对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-140">Returns a new object to contain listeners to an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16d87-141">包含事件侦听器的新对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-141">A new object to contain listeners to an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-142">处理程序代理订阅的源对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-142">The source object that the handler delegate subscribes to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="16d87-143">处理由 <c>source</c> 引发的事件的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-144">添加指定的委托为指定源的事件处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-144">Adds the specified delegate as an event handler of the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-145">要附加侦听器的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-145">The source to attach listeners to.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="16d87-146">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-147">将提供的侦听器添加到为托管事件所提供的源中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-147">Adds the provided listener to the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-148">调用此方法内管理器类`AddListener`方法<xref:System.Windows.WeakEventManager>实现。</span><span class="sxs-lookup"><span data-stu-id="16d87-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="16d87-149">`AddListener` 是建议的名称的静态方法在上定义的管理器类，允许其他类来添加侦听器为弱事件模式。</span><span class="sxs-lookup"><span data-stu-id="16d87-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="16d87-150">`AddListener` 应采用两个参数：`source`附加侦听器，其中和`listener`实例。</span><span class="sxs-lookup"><span data-stu-id="16d87-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="16d87-151">为你`AddListener`实现，请调用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>上的当前管理器和传递相同的两个参数的方法。</span><span class="sxs-lookup"><span data-stu-id="16d87-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="16d87-152">如果侦听器的列表是先前为空，<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>调用<xref:System.Windows.WeakEventManager.StartListening%2A>方法内部，这将调用您的特定<xref:System.Windows.WeakEventManager.StartListening%2A>多态性通过重写。</span><span class="sxs-lookup"><span data-stu-id="16d87-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="16d87-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 将侦听器添加到单个内部<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</span><span class="sxs-lookup"><span data-stu-id="16d87-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="16d87-154">如果你管理器实现维护的侦听器的每个事件源组合的多个列表，请不要使用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="16d87-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="16d87-155">相反，你实现应创建其自己<xref:System.Windows.WeakEventManager.ListenerList>情况下，`AddListener`应将侦听器添加到相应的列表中，并且事件应通过调用传递到相应的侦听器列表<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>而不是事件<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="16d87-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-156">要从中移除处理程序的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-156">The source to remove the handler from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="16d87-157">要从 <c>source</c> 移除的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-157">The delegate to remove from <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-158">从指定的源中移除以前添加的处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-158">Removes the previously added handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-159">要从中移除侦听器的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-159">The source to remove listeners from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="16d87-160">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-161">从提供的源中移除以前添加的侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-161">Removes a previously added listener from the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-162">调用此方法内管理器类`RemoveListener`方法<xref:System.Windows.WeakEventManager>实现。</span><span class="sxs-lookup"><span data-stu-id="16d87-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="16d87-163">`RemoveListener` 是建议的名称的静态方法在上定义的管理器类，允许其他类以删除侦听器为弱事件模式。</span><span class="sxs-lookup"><span data-stu-id="16d87-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="16d87-164">`RemoveListener` 应采用两个参数：`source`其中删除侦听器，则与`listener`类。</span><span class="sxs-lookup"><span data-stu-id="16d87-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="16d87-165">为你`RemoveListener`实现，请调用<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>上的当前管理器和传递相同的两个参数的方法。</span><span class="sxs-lookup"><span data-stu-id="16d87-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="16d87-166">如果调用<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>在列表中，删除最后一个侦听器<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>调用<xref:System.Windows.WeakEventManager.StopListening%2A>方法内部，这将调用您的特定<xref:System.Windows.WeakEventManager.StopListening%2A>多态性通过重写。</span><span class="sxs-lookup"><span data-stu-id="16d87-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="16d87-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 从单个内部中删除侦听器<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</span><span class="sxs-lookup"><span data-stu-id="16d87-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="16d87-168">如果你管理器实现维护的侦听器的每个事件源组合的多个列表，请不要使用<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="16d87-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="16d87-169">相反，你实现应创建其自己<xref:System.Windows.WeakEventManager.ListenerList>情况下，`RemoveListener`应从相应的列表中删除侦听器和事件应通过调用传递到相应的侦听器列表<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>方法而不是<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="16d87-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-170">要侦听的事件的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-170">The source for events being listened to.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="16d87-171">要检查的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-171">The data to check.</span>
          </span>
          <span data-ttu-id="16d87-172">此对象应为 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="16d87-173">设置为 <see langword="true" /> 可停止侦听 <c>source</c>，并从 <c>data</c> 中完全移除所有项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-173">
              <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-174">从所提供源的数据列表中移除不活动的侦听器项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-174">Removes inactive listener entries from the data list for the provided source.</span>
          </span>
          <span data-ttu-id="16d87-175">如果某些项实际上已经从列表中移除，则返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16d87-176">如果某些项实际上已经移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-176">
              <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-177"><xref:System.Windows.WeakEventManager.Purge%2A>方法具有一个默认实现，数据时，将删除所有条目<xref:System.Windows.WeakEventManager.ListenerList>。</span><span class="sxs-lookup"><span data-stu-id="16d87-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="16d87-178">如果的基础类型<see cref="P:System.Windows.WeakEventManager.Item(System.Object)" />而不是<see cref="T:System.Windows.WeakEventManager.ListenerList" />，或包含超过数据<see cref="T:System.Windows.WeakEventManager.ListenerList" />，必须重写<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span>
            </span>
            <span data-ttu-id="16d87-179">重写应为清除行为提供替代类型项列表。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-179">The override should provide purge behavior for the alternate type items list.</span>
            </span>
            <span data-ttu-id="16d87-180">通常情况下，重写应提供行为，而不会调用基实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-180">Generally, the override should provide behavior without calling the base implementation.</span>
            </span>
            <span data-ttu-id="16d87-181">如果特定<see cref="T:System.Windows.WeakEventManager.ListenerList" />仍然需要清除，请调用<see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16d87-182">在基础数据表上建立读取锁定，并返回 <see cref="T:System.IDisposable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16d87-183">一个对象，可用于在数据表成员上建立锁定，然后通过 <see langword="using" /> 构造被相应释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-184">在派生类中，查询中包含的表<xref:System.Windows.WeakEventManager.Item%2A>应总是出现在`using (ReadLock) { ... }`子句，除非已内的写入锁的查询。</span><span class="sxs-lookup"><span data-stu-id="16d87-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="16d87-185">这些查询可能有必要，如果你的类支持更复杂`AddListener`实施，需要更多的数据超出`source`和`listener`，并使用<xref:System.Windows.WeakEventManager.Item%2A>用于存储的额外信息集合。</span><span class="sxs-lookup"><span data-stu-id="16d87-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-186">要移除侦听器信息的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-186">The source to remove listener information for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-187">移除指定源的所有侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-187">Removes all listeners for the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16d87-188">要求在优先级较低的线程上清除基础侦听器列表中未使用的项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-189">调用<xref:System.Windows.WeakEventManager.ScheduleCleanup%2A>方法是类似于调用<xref:System.Windows.WeakEventManager.Purge%2A>当前管理器的列表，以较低的线程优先级，方法与`purgeAll`参数设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="16d87-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="16d87-190">要为其设置新事件管理器的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-190">The type to set the new event manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="16d87-191">新事件管理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-191">The new event manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-192">为指定的管理器类型设置当前管理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-192">Sets the current manager for the specified manager type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-193">调用<xref:System.Windows.WeakEventManager.SetCurrentManager%2A>方法以初始化管理器中，如果该需要通过调用你`CurrentManager`属性<xref:System.Windows.WeakEventManager>实现。</span><span class="sxs-lookup"><span data-stu-id="16d87-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-194">开始侦听的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-194">The source to begin listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-195">在派生类中重写时，开始侦听被托管的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-195">When overridden in a derived class, starts listening for the event being managed.</span>
          </span>
          <span data-ttu-id="16d87-196">第一次调用 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 方法后，只要处理了所提供源中的相关事件，管理器就应处于调用 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="16d87-197">
              <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 重写应将处理程序添加到提供<paramref name="source" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-197">
                <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span>
            </span>
            <span data-ttu-id="16d87-198">通过对管理器本身可声明处理程序。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-198">The handler is declared by the manager itself.</span>
            </span>
            <span data-ttu-id="16d87-199">类处理程序不应为公共的且它仅应调用以响应被托管的事件。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-199">The class handler should not be public, and it should only be called in response to the event being managed.</span>
            </span>
            <span data-ttu-id="16d87-200">类处理程序应调用<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />方法或<see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />方法相应地。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="16d87-201">停止侦听的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-201">The source to stop listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16d87-202">在派生类中重写时，停止为被托管的事件侦听所提供的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="16d87-203">
              <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 实现应移除类处理程序，通过添加<see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-203">
                <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span>
            </span>
            <span data-ttu-id="16d87-204">删除侦听器不应清除侦听器列表。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-204">Removing a listener should not clear the listener list.</span>
            </span>
            <span data-ttu-id="16d87-205">相反，它应仅断开连接的类处理程序 （可能是暂时的）。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span>
            </span>
            <span data-ttu-id="16d87-206">其他方法都可用于清除整个列表，如<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />方法替换<paramref name="purgeAll" />参数设置为<see langword="true" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="16d87-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16d87-207">在基础数据表上建立写入锁定，并返回 <see cref="T:System.IDisposable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16d87-208">一个对象，可用于在数据表成员上建立锁定，然后通过 <see langword="using" /> 构造被相应释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16d87-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16d87-209">在派生类中，对与基础数据表的所有修改应都发生在`using (WriteLock) { ... }`子句。</span><span class="sxs-lookup"><span data-stu-id="16d87-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="16d87-210">这些修改可能有必要，如果你的类支持更复杂`AddListener`实施，需要更多的数据超出`source`和`listener`，并使用<xref:System.Windows.WeakEventManager.Item%2A>用于存储的额外信息集合。</span><span class="sxs-lookup"><span data-stu-id="16d87-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>