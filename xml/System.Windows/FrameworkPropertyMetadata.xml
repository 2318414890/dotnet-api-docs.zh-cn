<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50e37bc8286c8ba1961d7a1c298161a3c9e3100c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492926" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e7ba8-101">为依赖属性报告或应用元数据（从而专门添加特定于框架的属性系统特征）。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e7ba8-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-102">此类派生自<xref:System.Windows.PropertyMetadata>(通过<xref:System.Windows.UIPropertyMetadata>)。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="e7ba8-103">对于大多数 WPF 框架级别的应用程序开发目的<xref:System.Windows.FrameworkPropertyMetadata>是为依赖属性元数据，所使用的类型，而不是基元数据类型<xref:System.Windows.PropertyMetadata>或<xref:System.Windows.UIPropertyMetadata>。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="e7ba8-104">这是对于现有依赖关系属性和大多数自定义依赖项属性的情况下，则返回 true。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="e7ba8-105">此声明的成员类用于补充<xref:System.Windows.PropertyMetadata>基类包括各种指定或报表的属性继承、 数据绑定和布局如 WPF 框架级别的属性系统行为的布尔属性。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="e7ba8-106">用于创建多个构造函数签名<xref:System.Windows.FrameworkPropertyMetadata>实例 take<xref:System.Windows.FrameworkPropertyMetadataOptions>参数。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="e7ba8-107"><xref:System.Windows.FrameworkPropertyMetadataOptions>枚举仅用于在构造函数中指定初始行为，否则不公开后<xref:System.Windows.FrameworkPropertyMetadata>构造。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="e7ba8-108">在构造实例中，可以获取或设置通过共享的名称的构造函数调用中使用的枚举值的各种属性的相应信息。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-109">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-109">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-110">此类通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-111">下面的示例获取依赖属性元数据上的特定所有者为初始基本<xref:System.Windows.PropertyMetadata>类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="e7ba8-112">元数据的强制转换为<xref:System.Windows.FrameworkPropertyMetadata>。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="e7ba8-113">如果强制转换返回的有效<xref:System.Windows.FrameworkPropertyMetadata>，然后各种<xref:System.Windows.FrameworkPropertyMetadata>通过一个简单的 UI （未显示） 报告属性值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-114">初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-115">初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-116">此签名的所有值都初始化<xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A>为其属性的默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="e7ba8-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> 将为`null`，并可使用多种<xref:System.Windows.FrameworkPropertyMetadata>布尔值属性将`false`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-118">依赖项属性的默认值，通常作为特定类型的值提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-118">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-119">使用指定的默认值初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-120">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-121">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-122">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-123">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-124">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-125">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-125">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-126">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-127">用指定的 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 回调初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e7ba8-128">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-129">依赖项属性的默认值，通常作为特定类型的值提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-129">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="e7ba8-130">元数据选项标志（<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的组合）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="e7ba8-131">这些选项指定依赖项对象的特性，如布局或数据绑定，它们与系统进行交互。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-132">使用提供的默认值和框架级别的元数据选项初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-133">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-134">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-135">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-136">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="e7ba8-137">值标记为设置标志`flags`参数将设置的布尔值<xref:System.Windows.FrameworkPropertyMetadata>相匹配的属性<xref:System.Windows.FrameworkPropertyMetadataOptions>标志的名称为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="e7ba8-138">只要元数据具有尚未应用到特定的属性系统操作，随后可以更改的元数据中的属性的值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-139">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-140">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-140">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-141">依赖项属性的默认值，通常作为特定类型的值提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-141">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-142">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-143">使用提供的默认值和指定的 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 回调初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-144">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-145">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-146">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-147">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-148">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-149">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-149">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-150">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="e7ba8-151">对处理程序实现的引用，每当属性系统调用此依赖项对象的 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时，都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-152">用指定的回调初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-153">此实现中调用基本初始值设定项，然后添加`coerceValueCallback`通过基实例上设置的属性。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-154">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-155">依赖项属性的默认值，通常作为特定类型的值提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-155">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="e7ba8-156">元数据选项标志（<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的组合）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="e7ba8-157">这些选项指定依赖项对象的特性，如布局或数据绑定，它们与系统进行交互。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-158">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-159">使用提供的默认值和框架元数据选项及指定的 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 回调初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-160">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-161">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-162">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-163">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="e7ba8-164">值标记为设置标志`flags`参数将设置的布尔值<xref:System.Windows.FrameworkPropertyMetadata>相匹配的属性<xref:System.Windows.FrameworkPropertyMetadataOptions>标志的名称为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="e7ba8-165">只要元数据具有尚未应用到特定的属性系统操作，你仍可以更改的元数据中的属性的值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-166">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-167">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-167">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-168">依赖项属性的默认值，通常作为特定类型提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-168">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-169">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="e7ba8-170">对处理程序实现的引用，每当属性系统调用该依赖项对象的 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时，都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-171">使用提供的默认值和指定的回调初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-172">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-173">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-174">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-175">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-176">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-177">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-177">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-178">依赖项属性的默认值，通常作为特定类型提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-178">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="e7ba8-179">元数据选项标志（<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的组合）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="e7ba8-180">这些选项指定依赖项对象的特性，如布局或数据绑定，它们与系统进行交互。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-181">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="e7ba8-182">对处理程序实现的引用，每当属性系统调用该属性的 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时，都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-183">使用提供的默认值和框架元数据选项及指定的回调初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-184">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-185">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-186">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-187">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="e7ba8-188">值标记为设置标志`flags`参数将设置的布尔值<xref:System.Windows.FrameworkPropertyMetadata>相匹配的属性<xref:System.Windows.FrameworkPropertyMetadataOptions>标志的名称为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="e7ba8-189">只要元数据具有尚未应用到特定的属性系统操作，你仍可以更改的元数据中的属性的值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-190">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-191">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-191">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-192">依赖项属性的默认值，通常作为特定类型提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-192">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="e7ba8-193">元数据选项标志（<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的组合）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="e7ba8-194">这些选项指定依赖项对象的特性，如布局或数据绑定，它们与系统进行交互。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-195">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="e7ba8-196">对处理程序实现的引用，每当属性系统调用该依赖项对象的 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时，都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="e7ba8-197">若为 <see langword="true" />，则防止属性系统对要应用此元数据的属性进行动画处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-197">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="e7ba8-198">如果尝试对此类属性进行动画处理，则它们会引发源自属性系统的运行时异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="e7ba8-199">若为 <see langword="false" />，则允许对属性进行动画处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-199">
              <see langword="false" /> to permit animating the property.</span>
          </span>
          <span data-ttu-id="e7ba8-200">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-200">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-201">使用提供的默认值和框架元数据选项、指定的回调及可以用来防止属性动画的布尔值初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-202">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-203">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-204">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-205">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="e7ba8-206">`isAnimationProhibited`参数设置的初始值<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>属性声明的直接基<xref:System.Windows.UIPropertyMetadata>类。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="e7ba8-207">值标记为设置标志`flags`参数将设置的布尔值<xref:System.Windows.FrameworkPropertyMetadata>相匹配的属性<xref:System.Windows.FrameworkPropertyMetadataOptions>标志的名称为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="e7ba8-208">只要元数据具有尚未应用到特定的属性系统操作，你仍可以更改的元数据中的属性的值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-209">下面的示例调用此构造函数签名：</span><span class="sxs-lookup"><span data-stu-id="e7ba8-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-210">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-210">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e7ba8-211">依赖项属性的默认值，通常作为特定类型提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-211">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="e7ba8-212">元数据选项标志（<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的组合）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="e7ba8-213">这些选项指定依赖项对象的特性，如布局或数据绑定，它们与系统进行交互。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="e7ba8-214">对处理程序实现的引用，每当属性的有效值更改时，属性系统都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="e7ba8-215">对处理程序实现的引用，每当属性系统调用该属性的 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时，都会调用此处理程序实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="e7ba8-216">若为 <see langword="true" />，则防止属性系统对要应用此元数据的属性进行动画处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-216">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="e7ba8-217">如果尝试对此类属性进行动画处理，则它们会引发源自属性系统的运行时异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="e7ba8-218">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-218">The default is <see langword="false" />.</span>
          </span>
        </param>
        <param name="defaultUpdateSourceTrigger">
          <span data-ttu-id="e7ba8-219">应用此属性的绑定时使用的 <see cref="T:System.Windows.Data.UpdateSourceTrigger" />，其 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 设置为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-220">使用提供的默认值和框架元数据选项、指定的回调、可以用来防止属性动画的布尔值及数据绑定更新触发器默认值初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-221">为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于的依赖项属性的原始注册中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="e7ba8-222">在编译期间不检测不匹配，是因为，则可能很难调试，元数据默认值类型的依赖属性应用于类型之间的不匹配。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="e7ba8-223">属性系统不到运行时评估的属性的有效值，因此默认值类型/属性类型不匹配的结果是运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="e7ba8-224">值<xref:System.Windows.DependencyProperty.UnsetValue>属性系统中具有特殊含义，不能用作依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="e7ba8-225">`isAnimationProhibited`参数设置的初始值<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>属性声明的直接基<xref:System.Windows.UIPropertyMetadata>类。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="e7ba8-226">有关绑定更新源行为的详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="e7ba8-227">值标记为设置标志`flags`参数将设置的布尔值<xref:System.Windows.FrameworkPropertyMetadata>相匹配的属性<xref:System.Windows.FrameworkPropertyMetadataOptions>标志的名称为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="e7ba8-228">只要元数据具有尚未应用到特定的属性系统操作，你仍可以更改的元数据中的属性的值。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-229">将 <paramref name="defaultValue" /> 设置为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-229">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-230">获取或设置一个值，该值表示依赖属性是否会影响布局引擎操作期间的排列过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-231">如果此元数据所在的依赖项对象可能会影响排列处理过程，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-231">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-232">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-232">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-233"><xref:System.Windows.FrameworkElement> 并<xref:System.Windows.FrameworkContentElement>包括的实现<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>监视到元素存在的所有依赖项属性的有效值更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="e7ba8-234">作为该逻辑的一部分，更改生效的依赖项属性值，并具有与元数据<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>设置为`true`将启动推迟的请求，以使该元素的可视内容无效 (调用<xref:System.Windows.UIElement.InvalidateArrange%2A>)。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="e7ba8-235">因为此 WPF 框架级别实现已到位，您通常不需要查找依赖项属性与<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>除非要大量替换或修改的 WPF 框架级别的布局行为。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="e7ba8-236">自定义<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>实现可以选择具有类似的行为依赖关系属性更改其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="e7ba8-237">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-238">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-239">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-240">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-241">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-241">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-242">此类的成员或者通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-243">下面的示例从各种依赖项属性字段中获取的默认元数据、 查询的各种值<xref:System.Windows.FrameworkPropertyMetadata>属性，并使用这些信息来填充表，以实现"元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-244">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-245">获取或设置一个值，该值表示依赖属性是否会影响布局引擎操作期间的测量过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-246">如果此元数据所在的依赖属性可能会影响测量过程，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-246">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-247">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-247">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-248"><xref:System.Windows.FrameworkElement> 并<xref:System.Windows.FrameworkContentElement>包括的实现<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>监视到元素存在的所有依赖项属性的有效值更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="e7ba8-249">作为该逻辑的一部分，更改生效的依赖项属性值，并具有与元数据<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>设置为`true`将启动推迟的请求，以使该元素的可视内容无效。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="e7ba8-250">因为此 WPF 框架级别实现已到位，您通常不需要查找依赖项属性与<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>除非要大量替换或修改的 WPF 框架级别的布局行为。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="e7ba8-251">自定义<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>实现可以选择具有类似的行为依赖关系属性更改其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="e7ba8-252">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-253">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-254">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-255">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-256">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-256">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-257">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-258">下面的示例从各种依赖项属性字段中获取的默认元数据、 查询的各种值<xref:System.Windows.FrameworkPropertyMetadata>属性，并使用这些信息来填充表，以实现"元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-259">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-260">获取或设置一个值，该值表示依赖属性是否会影响布局引擎操作期间父元素布局的排列处理过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-261">如果此元数据所在的依赖项对象可能会影响特定于其父元素的排列处理过程，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-261">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-262">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-263"><xref:System.Windows.FrameworkElement> 并<xref:System.Windows.FrameworkContentElement>包括的实现<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>监视到元素存在的所有依赖项属性的有效值更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="e7ba8-264">作为该逻辑的一部分，更改生效的依赖项属性值，并具有与元数据<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>设置为`true`将启动一个延迟的请求，要使之无效的父元素的视觉对象。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="e7ba8-265">通常情况下，您不需要的报告更改<xref:System.Windows.FrameworkElement>属性设置为父元素使用<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>因为元素本身可能已将其自己<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>作为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="e7ba8-266">这是通常足够，因为子元素中的更改通常可以启动一个父级排列在适当的时候。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="e7ba8-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> 有时用于<xref:System.Windows.FrameworkContentElement>派生的类。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="e7ba8-268">在此情况下，子元素设置了一个属性，但<xref:System.Windows.FrameworkContentElement>派生的类不会控制其自己的呈现。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="e7ba8-269">由处理呈现<xref:System.Windows.FrameworkElement>用作内容宿主的父元素。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="e7ba8-270">例如，对的值的更改<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType>遭到一个子元素的附加的属性使排列的父级，因为必须更改子级的父代中的位置。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="e7ba8-271">因此，<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType>附加的属性包含的元数据位置<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="e7ba8-272">另一个示例是<xref:System.Windows.Controls.Control.Padding%2A>; 如果此属性的更改，父级可能会更改子，具体取决于可用空间的位置。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="e7ba8-273">因为此 WPF 框架级别实现已到位，您通常不需要查找依赖项属性与<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>除非要大量替换或修改的 WPF 框架级别的布局行为。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="e7ba8-274">自定义<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>实现可以选择具有类似的行为依赖关系属性更改其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="e7ba8-275">属性在任何派生类的<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-276">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-277">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-278">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-279">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-279">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-280">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-281">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-282">获取或设置一个值，该值表示依赖属性是否会影响布局引擎操作期间其父元素布局的测量过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-283">如果此元数据所在的依赖属性可能会影响其父元素上的测量过程，则为 <see langword="true" />；否则为 <see langword="false" />。默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-283">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-284"><xref:System.Windows.FrameworkElement> 并<xref:System.Windows.FrameworkContentElement>包括的实现<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>监视到元素存在的所有依赖项属性的有效值更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="e7ba8-285">作为该逻辑的一部分，更改生效的依赖项属性值，并具有与元数据<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>设置为`true`将启动一个延迟的请求，要使之无效的父元素的视觉对象。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="e7ba8-286">因为此 WPF 框架级别实现已到位，您通常不需要查找依赖项属性与<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>除非要大量替换或修改的 WPF 框架级别的布局行为。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="e7ba8-287">通常情况下，您不需要的报告更改<xref:System.Windows.FrameworkElement>属性设置为父元素使用<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>因为元素本身可能已将其自己<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>作为`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="e7ba8-288">这是通常足够，因为子元素中的更改通常启动父度量值通过在适当的时候。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="e7ba8-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> 有时用于<xref:System.Windows.FrameworkContentElement>派生的类。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="e7ba8-290">在此情况下，子元素设置了一个属性，但<xref:System.Windows.FrameworkContentElement>派生的类不会控制其自己的呈现。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="e7ba8-291">由处理呈现<xref:System.Windows.FrameworkElement>用作内容宿主的父元素。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="e7ba8-292">例如，对的值的更改<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>遭到一个子元素的属性使无效的父度量值，因为段落的相对间隔可能会更改和可能会增加或减少内容宿主的大小。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="e7ba8-293">因此，<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>属性包含的元数据位置<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="e7ba8-294">内容宿主元素也经常查找依赖项属性中的更改其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>是`true`，内容主机呈现逻辑的一部分。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="e7ba8-295">例如，<xref:System.Windows.Controls.TextBox>元素必须响应中发生的某些更改可能要求的文本的边界框<xref:System.Windows.Controls.TextBox>本身进行更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="e7ba8-296">自定义<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>实现可以选择具有类似的行为依赖关系属性更改其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="e7ba8-297">属性在任何派生类的<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-298">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-299">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-300">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-301">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-301">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-302">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-303">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-304">获取或设置一个值，该值指示依赖属性是否会以某种方式（这种方式不会具体影响排列或测量，但将请求重绘）对常规布局造成潜在影响。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-305">如果该元数据所在的依赖项对象会影响呈现，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-305">
              <see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-306">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-306">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-307"><xref:System.Windows.FrameworkElement> 并<xref:System.Windows.FrameworkContentElement>包括的实现<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>监视到元素存在的所有依赖项属性的有效值更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="e7ba8-308">作为该逻辑的一部分，更改生效的依赖项属性值，并具有与元数据<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>设置为`true`将启动推迟的请求，以使该元素的可视内容无效。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="e7ba8-309">因为此 WPF 框架级别实现已到位，您通常不需要查找依赖项属性与<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>除非要大量替换或修改的 WPF 框架级别的布局行为。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="e7ba8-310">自定义<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>实现可以选择具有类似的行为依赖关系属性更改其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="e7ba8-311">属性在任何派生类的<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-312">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-313">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-314">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-315">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-315">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-316">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-317">下面的示例从各种依赖项属性字段中获取的默认元数据、 查询的各种值<xref:System.Windows.FrameworkPropertyMetadata>属性，并使用这些信息来填充表，以实现"元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-318">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-319">获取或设置一个值，该值指示默认情况下属性是否双向绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-319">Gets or sets a value that indicates whether the property binds two-way by default.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-320">如果此元数据所在的依赖属性默认情况下为双向绑定，则为 <see langword="true" />，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-320">
              <see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-321">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-322">中不存在此属性所`true`，绑定更新都是单向的默认情况下，基于的默认行为<xref:System.Windows.Data.Binding>构造函数或等效身份[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="e7ba8-323">在现有元素，经常会发现此属性设置为`true`报告状态且是可修改的用户执行任何操作，例如依赖项属性的元数据中<xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e7ba8-324">此属性只在一般情况下报告依赖项属性的默认绑定更新的特征。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="e7ba8-325">本地设置的任何绑定到实例上此属性设置可以<xref:System.Windows.Data.Binding.Mode%2A>绑定的属性和更改此默认设置。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="e7ba8-326">属性在任何派生类的<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-327">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-328">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-329">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-330">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-330">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-331">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-332">下面的示例从各种依赖项属性字段中获取的默认元数据、 查询的各种值<xref:System.Windows.FrameworkPropertyMetadata>属性，并使用这些信息来填充表，以实现"元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-333">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-334">获取或设置在应用具有该元数据的属性的绑定时要使用的 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 的默认值，这些绑定的 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 设置为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-335">除 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> 以外的枚举值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-336">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-337">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-338">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-339">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-340">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-340">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-341">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e7ba8-342">该属性设置为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />；您设置的值应成为绑定请求时的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-343">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-344">获取或设置一个值，该值指示依赖属性的值是否可继承。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-345">如果属性值是可继承的，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-345">
              <see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-346">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-346">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-347">属性值继承是一项功能[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]WPF 框架级别，因此某些依赖项属性可以本地设置在达到或接近的根元素上的属性系统[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]元素树，然后让其通过继承的值此外没有该属性的子元素的逻辑树中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="e7ba8-348">默认情况下，不启用属性值继承，并使其有一些性能影响。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="e7ba8-349">有关详细信息，请参阅[属性值继承](~/docs/framework/wpf/advanced/property-value-inheritance.md)。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e7ba8-350">虽然属性值继承看起来适用于非附加依赖项属性，但通过在运行时树中的某些对象部门的非附加属性的继承行为未定义。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="e7ba8-351">始终使用<xref:System.Windows.DependencyProperty.RegisterAttached%2A>来注册您在其中指定的属性<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>元数据中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="e7ba8-352">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-353">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-354">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-355">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-356">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-356">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-357">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-358">下面的示例从各种依赖项属性字段中获取的默认元数据、 查询的各种值<xref:System.Windows.FrameworkPropertyMetadata>属性，并使用这些信息来填充表，以实现"元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-359">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-360">获取一个值，该值指示依赖属性是否支持数据绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-360">Gets a value that indicates whether data binding is supported for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-361">如果要应用该元数据的依赖项对象支持数据绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-361">
              <see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-362">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-362">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-363">此属性报告`false`两个可能的情况之一： 不允许任一数据绑定到依赖项属性，因为依赖项属性为只读 （作为中报告的依赖项属性标识符，不是元数据），或的值另一个元数据属性<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>，设置为`true`此元数据中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="e7ba8-364">此属性公开为方便起见，以便调用方不需要两项全选<xref:System.Windows.DependencyProperty.ReadOnly%2A>和<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="e7ba8-365">若要尝试创建指定其他的读/写属性应不支持数据绑定的元数据，指定标志<xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable>(请注意与细微的命名约定差别在于<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>)。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-366">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-366">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-367">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7ba8-368">下面的示例从各种依赖项属性字段中获取的默认元数据、 查询的各种值<xref:System.Windows.FrameworkPropertyMetadata>属性，并使用这些信息来填充表，以实现"元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-369">获取或设置一个值，该值指示依赖属性是否支持数据绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-370">如果属性不支持数据绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-370">
              <see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-371">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-371">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-372">请注意，此元数据属性设置为`true`专门针对不应支持数据绑定，尽管读写属性的属性。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="e7ba8-373">预期结果是，在大多数情况下，依赖项属性的声明位置，需要数据绑定，因为数据绑定是依赖项属性是有用的重要方案之一。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="e7ba8-374">与不同<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>，这不会只是更改默认值更高版本上的特定绑定已更改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="e7ba8-375">将此属性设置`true`依赖项属性的元数据中的元数据将禁用所有绑定将它们通过表达式的值应用到该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="e7ba8-376">只读依赖属性不支持数据绑定 （因为它们可以应用更改后的值没有 setter），但仍将报告`false`为<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="e7ba8-377">这是因为属性对应于<xref:System.Windows.FrameworkPropertyMetadataOptions>值将报告与如何元数据的实际创建，而不是始终报告的属性命名可能暗示的最终结果行为的奇偶校验。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="e7ba8-378">若要确定给定的依赖属性是否允许将数据绑定，通常应检查<xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="e7ba8-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> 它同时检查提供了便利<xref:System.Windows.DependencyProperty.ReadOnly%2A>和<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>作为单个操作，从而生成预期的结果。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="e7ba8-380">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-381">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-382">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-383">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-384">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-384">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-385">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-386">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-387">获取或设置一个值，该值表示该属性是否包含应用程序可以或应该作为日记功能实现的一部分而存储的日记信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-388">
            <see langword="true" /> 如果应在此元数据应用于; 依赖属性上执行日记功能否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-388">
              <see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-389">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-389">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-390">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-391">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-392">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-393">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-394">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-394">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-395">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-396">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="e7ba8-397">要合并的基本元数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-397">The base metadata to merge.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e7ba8-398">此元数据被应用到的依赖属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-398">The dependency property this metadata is being applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-399">允许合并源元数据和基本元数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-399">Enables a merge of the source metadata with base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-400">重写元数据时，将在内部使用此方法。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e7ba8-401">
            <para>派生的类<see cref="T:System.Windows.PropertyMetadata" />（或特别是此类） 应重写此方法要考虑的他们已在其实现中添加了任何元数据属性。例如，您的实现可能会添加一个新的按标志枚举值，和<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />实现应能够正确组合这些标志。始终调用您自己的实现之前, 的基实现，因为基实现负责合并已在以前在层次结构中的类型上定义的所有属性。添加的行为<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />中的实现<see cref="T:System.Windows.FrameworkPropertyMetadata" />在于特定 WPF 框架级别属性如元数据中<see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />组合中的按位或操作。<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />行为还实现行为时通过调用替代现有依赖属性上的属性元数据<see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />。，使用重写元数据的<see cref="T:System.Windows.FrameworkPropertyMetadata" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-401">
              <para>Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations. For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.  Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.  The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.  The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="e7ba8-402">已应用了元数据的依赖项对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-402">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="e7ba8-403">与此元数据关联的类型（如果这是特定于类型的元数据）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-403">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="e7ba8-404">如果这是默认的元数据，则此值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-404">If this is default metadata, this value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e7ba8-405">当此元数据已经应用到一个属性时（这表明正在密封元数据）调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-405">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-406">数据结构的任何可变性<xref:System.Windows.FrameworkPropertyMetadata>实例应标记为不可变调用此方法。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-406">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e7ba8-407">
            <para>
              <see cref="T:System.Windows.FrameworkPropertyMetadata" />此方法的实现不执行任何操作超出调用基实现。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-407">
              <para>The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-408">获取或设置一个值，该值指示属性值继承计算是否应跨越元素逻辑树中的某些内容边界。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-408">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-409">如果属性值继承应跨越某些内容边界，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-409">
              <see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-410">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-410">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-411">此元数据在特殊的父元素的子元素边界报告对属性值继承行为的很少应用的修改。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-411">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="e7ba8-412">此类边界的典型例子是的内容<xref:System.Windows.Controls.Frame>，其中<xref:System.Windows.Controls.Frame>内容可能会获得重新加载独立是否存在于<xref:System.Windows.Controls.Frame>。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-412">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="e7ba8-413">所需的属性系统行为是属性值继承应遍历到的内容<xref:System.Windows.Controls.Frame>，因为这些内容可能会承载在框架的应用程序不拥有或控制的元素。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-413">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="e7ba8-414">指定元数据时<xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A>设置为`true`，并将<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>作为`true`，将导致在其应用了元数据为可继承即使属性<xref:System.Windows.Controls.Frame>边界或类似的边界。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-414">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="e7ba8-415">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-415">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-416">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-416">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-417">但是，作为调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-417">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-418">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-418">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-419">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-419">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-420">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-420">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-421">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-421">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7ba8-422">获取或设置一个值，该值指示依赖属性的子属性是否影响包含对象的呈现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-422">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7ba8-423">如果更改后，对子属性值的更改不影响呈现，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-423">
              <see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e7ba8-424">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-424">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7ba8-425">此元数据选项是相关的是引用类型，其中该类型具有其自己的属性值的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-425">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="e7ba8-426">通常情况下，布局系统逻辑是认为与子属性的依赖关系属性可能会影响布局，因为检查所有子属性的更改非常耗时比实际运行另一个呈现处理。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-426">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="e7ba8-427">此选项设置为`true`可用于优化性能的 WPF 框架级别的布局系统实现。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-427">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="e7ba8-428">在派生类的属性<xref:System.Windows.PropertyMetadata>通常定义为可读写的对象模型中。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-428">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="e7ba8-429">这是实例的使它们可以调整后的初始化。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-429">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="e7ba8-430">但是，一旦调用的一部分使用元数据<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和传达的元数据的详细信息的属性现在被视为不可变。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-430">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="e7ba8-431">尝试设置此属性后的<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-431">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="e7ba8-432">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="e7ba8-432">XAML Text Usage</span></span>  
 <span data-ttu-id="e7ba8-433">此类的成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e7ba8-433">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7ba8-434">已对依赖属性操作应用了元数据，因此元数据已密封，且无法设置其属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7ba8-434">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>