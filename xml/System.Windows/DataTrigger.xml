<Type Name="DataTrigger" FullName="System.Windows.DataTrigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="21fe456db341e92462a55b79faf2d31fbeb141e5" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39808131" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type DataTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.XamlSetMarkupExtension("ReceiveMarkupExtension")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个触发器，它会在绑定数据满足指定条件时应用属性值或执行操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Style><xref:System.Windows.Controls.ControlTemplate>，和<xref:System.Windows.DataTemplate>所有具有一个触发器集合。 一个<xref:System.Windows.DataTrigger>，可设置属性值与指定的数据对象的属性值匹配时<xref:System.Windows.Condition.Value%2A>。 例如，如果您要显示的列表`Employee`对象，可能想要不同的前景色基于每个`Employee's`当前的出席情况。 (例如，`Employees`谁当前正在度假以紫色前台显示。)在某些情况下可能会创建一个转换器或使用更适合<xref:System.Windows.Controls.DataTemplateSelector>。 有关详细信息，请参阅[数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 请注意，必须指定这两<xref:System.Windows.DataTrigger.Binding%2A>并<xref:System.Windows.DataTrigger.Value%2A>上的属性<xref:System.Windows.DataTrigger>数据触发器才有意义。 如果未指定一个或两个属性，将引发异常。  
  
 <xref:System.Windows.DataTrigger.Setters%2A>的属性<xref:System.Windows.DataTrigger>只能包含对象<xref:System.Windows.Setter>对象。 添加<xref:System.Windows.Setter>子级<xref:System.Windows.DataTrigger>对象隐式地将其添加到<xref:System.Windows.SetterBaseCollection>为<xref:System.Windows.DataTrigger>对象。 <xref:System.Windows.EventSetter> 不支持对象;仅<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType>支持<xref:System.Windows.EventSetter>对象。  
  
   
  
## Examples  
 在以下示例中，<xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>绑定到*位数*，则<xref:System.Collections.ObjectModel.ObservableCollection%601>的*位置*对象。 *位置*对象具有的属性*名称*并*状态*。  
  
 每个<xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Controls.ListBox>显示*位置*对象。 <xref:System.Windows.Style>示例中应用于每个<xref:System.Windows.Controls.ListBoxItem>。  
  
 <xref:System.Windows.DataTrigger>指定，如果*状态*的*位置*数据项为"WA"则相应的前景色<xref:System.Windows.Controls.ListBoxItem>设置为红色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 下面的示例演示如何使用<xref:System.Windows.DataTrigger>、 一个<xref:System.Windows.Media.Animation.BeginStoryboard>操作，和一个<xref:System.Windows.Media.Animation.Storyboard>属性进行动画处理绑定的数据满足指定的条件时。 此示例显示中的清单信息<xref:System.Windows.Controls.ListBox>控件。 它使用<xref:System.Windows.DataTrigger>进行动画处理<xref:System.Windows.UIElement.Opacity%2A>的每个<xref:System.Windows.Controls.ListBoxItem>，其中包含脱销的书籍。  
  
 [!code-xaml[AnimatePropertyStoryboards#GraphicsMMDataTriggerStoryboardWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/AnimatePropertyStoryboards/XAML/DataTriggerStoryboardExample.xaml#graphicsmmdatatriggerstoryboardwholepage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Trigger" />
    <altmember cref="T:System.Windows.MultiDataTrigger" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.DataTrigger" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase Binding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase Binding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Binding" />
      <MemberSignature Language="VB.NET" Value="Public Property Binding As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingBase ^ Binding { System::Windows::Data::BindingBase ^ get(); void set(System::Windows::Data::BindingBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Binding : System.Windows.Data.BindingBase with get, set" Usage="System.Windows.DataTrigger.Binding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置产生数据对象的属性值的绑定。</summary>
        <value>默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此绑定生成的属性值与指定的值进行比较<xref:System.Windows.DataTrigger.Value%2A>属性。 值将第一个转换为绑定 （如果可能） 的值的类型，然后使用比较两个值`Object.Equals`方法。 如果两个值相等，则关联的操作或资源库应用。  
  
 创建一个绑定和使用<xref:System.Windows.Data.Binding.Path%2A>属性绑定到特定对象 （绑定源对象） 的属性。 例如，可能会将绑定到*优先级*的属性*任务*。 有关详细信息，请参阅 [数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 请注意，必须指定这两<xref:System.Windows.DataTrigger.Binding%2A>并<xref:System.Windows.DataTrigger.Value%2A>上的属性<xref:System.Windows.DataTrigger>数据触发器才有意义。 如果未设置的一个或两个属性，将引发异常。  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlPropertyElementUsage_Binding"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Binding>  
    <Binding …/>  
  </object.Binding>  
</object>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 declaration  
 用逗号 （，） 分隔的零个或多个属性赋值子句。 请参阅[绑定标记扩展](~/docs/framework/wpf/advanced/binding-markup-extension.md)有关详细信息。  
  
   
  
## Examples  
 在以下示例中，<xref:System.Windows.DataTrigger>设置<xref:System.Windows.Controls.Border.BorderBrush%2A>的名为的元素`border`到`Yellow`如果`TaskType`属性是`TaskType.Home`。  
  
 [!code-xaml[DataTemplatingIntro#DT](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#dt)]  
[!code-xaml[DataTemplatingIntro#DataTrigger](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#datatrigger)]  
[!code-xaml[DataTemplatingIntro#AddingMore2](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#addingmore2)]  
  
 此示例的详细讨论，请参阅[数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DataTrigger.Value" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMarkupExtension">
      <MemberSignature Language="C#" Value="public static void ReceiveMarkupExtension (object targetObject, System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveMarkupExtension(object targetObject, class System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.ReceiveMarkupExtension(System.Object,System.Windows.Markup.XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveMarkupExtension (targetObject As Object, eventArgs As XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveMarkupExtension(System::Object ^ targetObject, System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveMarkupExtension : obj * System.Windows.Markup.XamlSetMarkupExtensionEventArgs -&gt; unit" Usage="System.Windows.DataTrigger.ReceiveMarkupExtension (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">标记扩展在其中设置值的对象。</param>
        <param name="eventArgs">与标记扩展处理有关的数据。</param>
        <summary>处理标记扩展为 <see cref="T:System.Windows.DataTrigger" /> 对象的属性提供值的情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是应用所引用的方法<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>特性在类级别，这意味着，此方法将处理所有设置的值的尝试<xref:System.Windows.DataTrigger>与标记扩展。 您不通常直接调用此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.DataTrigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Setter" /> 对象的集合，这些对象描述当数据项满足指定条件时要应用的属性值。</summary>
        <value>默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ZeroOrMoreSetters*  
 零个或多<xref:System.Windows.Setter>对象。  
  
 一个<xref:System.Windows.DataTrigger>可以启动操作，或者可以使用<xref:System.Windows.Setter>来应用属性值在数据项满足指定的条件时。  
  
 如果有多个相同的资源库集合中设置同一属性的 setter，声明的资源库上次使用。  
  
 <xref:System.Windows.DataTrigger.Setters%2A>的属性<xref:System.Windows.DataTrigger>只能包含对象<xref:System.Windows.Setter>对象。 添加<xref:System.Windows.Setter>子级<xref:System.Windows.DataTrigger>对象隐式地将其添加到<xref:System.Windows.SetterBaseCollection>为<xref:System.Windows.DataTrigger>对象。 <xref:System.Windows.EventSetter> 不支持对象;仅<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType>支持<xref:System.Windows.EventSetter>对象。  
  
   
  
## Examples  
 下面的示例演示两个<xref:System.Windows.DataTrigger>中定义的对象<xref:System.Windows.DataTemplate>。 <xref:System.Windows.DataTemplate>应用于*AuctionItem*数据对象 （不在此示例中所示），其具有属性*SpecialFeatures*。  
  
 第一个<xref:System.Windows.DataTrigger>指定，以便在数据对象具有*SpecialFeatures*的值*颜色*，项会显示与`DodgerBlue`具有深蓝色的标题的背景。 如果数据对象具有*SpecialFeatures*的值*突出显示*，然后第二个<xref:System.Windows.DataTrigger>将处于活动状态，从而导致要显示星号橙色边框的项。  
  
 有关完整示例，请参阅[数据绑定演示](http://go.microsoft.com/fwlink/?LinkID=163703)。  
  
 [!code-xaml[DataBindingLab#AuctionItemsDataTriggers](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemsdatatriggers)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要添加的子对象。</param>
        <summary>添加子对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.DataTrigger> 实例强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要添加到对象的文本。</param>
        <summary>将节点的文本内容添加到对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.DataTrigger> 实例强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.DataTrigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Markup.DependsOn("Binding")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要与数据对象的属性值比较的值。</summary>
        <value>默认值为 <see langword="null" />。 请参见“异常”部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
 此值与生成的属性值进行比较<xref:System.Windows.DataTrigger.Binding%2A>属性的<xref:System.Windows.DataTrigger>。 该比较是一项引用相等性检查。 如果两个值相等，则关联的操作或资源库应用。  
  
 请注意，必须指定这两<xref:System.Windows.DataTrigger.Binding%2A>并<xref:System.Windows.DataTrigger.Value%2A>上的属性<xref:System.Windows.DataTrigger>数据触发器才有意义。 如果未设置一个或两个属性，将引发异常。  
  
   
  
## Examples  
 在以下示例中，<xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>绑定到*位数*，则<xref:System.Collections.ObjectModel.ObservableCollection%601>的*位置*对象。 *位置*对象具有的属性*名称*并*状态*。  
  
 每个<xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Controls.ListBox>显示*位置*对象。 <xref:System.Windows.Style>示例中应用于每个<xref:System.Windows.Controls.ListBoxItem>。  
  
 <xref:System.Windows.DataTrigger>指定，如果*状态*的*位置*数据项为"WA"则相应的前景色<xref:System.Windows.Controls.ListBoxItem>设置为红色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 下面的示例演示两个<xref:System.Windows.DataTrigger>中定义的 s <xref:System.Windows.DataTemplate>。 <xref:System.Windows.DataTemplate>应用于*AuctionItem*数据对象 （不在此示例中所示），其具有属性*SpecialFeatures*。 请参阅[数据绑定演示](http://go.microsoft.com/fwlink/?LinkID=163703)有关完整示例。  
  
 第一个<xref:System.Windows.DataTrigger>指定，以便在数据对象具有*SpecialFeatures*的值*颜色*，则深蓝色标题 DodgerBlue 背景显示项。 如果数据对象具有*SpecialFeatures*的值*突出显示*，然后第二个<xref:System.Windows.DataTrigger>将处于活动状态，从而导致要显示星号橙色边框的项。  
  
 [!code-xaml[DataBindingLab#AuctionItemsDataTriggers](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemsdatatriggers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支持表达式。 不支持绑定。</exception>
        <altmember cref="P:System.Windows.DataTrigger.Binding" />
        <altmember cref="P:System.Windows.DataTrigger.Setters" />
      </Docs>
    </Member>
  </Members>
</Type>