<Type Name="TriggerBase" FullName="System.Windows.TriggerBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e565dd258eddecca7aa41eba26b4db95d5e22db" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30684561" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TriggerBase : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TriggerBase extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TriggerBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TriggerBase&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class TriggerBase abstract : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示用于在 <see cref="T:System.Windows.Style" /> 对象内指定条件值的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]样式和模板化模型，可指定触发器内的你<xref:System.Windows.Style>， <xref:System.Windows.Controls.ControlTemplate>，和<xref:System.Windows.DataTemplate>。 从根本上来说，<xref:System.Windows.TriggerBase>是允许你以应用更改时某些对象的基类条件 (如当某个属性值变为`true`，或者事件发生时) 对结果满意。  
  
   
  
## Examples  
 有多种不同类型的触发器： <xref:System.Windows.Trigger>， <xref:System.Windows.MultiTrigger>， <xref:System.Windows.EventTrigger>， <xref:System.Windows.DataTrigger>，和<xref:System.Windows.MultiDataTrigger>。  
  
 <xref:System.Windows.Trigger>类是最简单的触发器类型。 A<xref:System.Windows.Trigger>对象允许你应用基于属性的值的更改。 例如，下面的示例显示名为<xref:System.Windows.Style>供<xref:System.Windows.Controls.Button>控件。 <xref:System.Windows.Style>定义<xref:System.Windows.Trigger>更改的元素<xref:System.Windows.Controls.Control.Foreground%2A>按钮属性时<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>属性是`true`。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 如果你需要将应用基于多个属性的状态的更改，则可以使用<xref:System.Windows.MultiTrigger>。 有关示例，请参阅<xref:System.Windows.MultiTrigger>页。  
  
 <xref:System.Windows.EventTrigger>类可以在事件发生时应用更改。 下面的示例包含两个<xref:System.Windows.EventTrigger>对象，其中时发生鼠标进入元素和另一种情况鼠标离开元素。  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 这些事件也是<xref:System.Windows.DataTrigger>和<xref:System.Windows.MultiDataTrigger>类。 这些命令类似于<xref:System.Windows.Trigger>和<xref:System.Windows.MultiTrigger>只不过它们是用于数据绑定属性。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="EnterActions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection EnterActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection EnterActions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TriggerBase.EnterActions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnterActions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ EnterActions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在触发器对象变为活动状态时应用的 <see cref="T:System.Windows.TriggerAction" /> 对象的集合。 此属性不适用于 <see cref="T:System.Windows.EventTrigger" /> 类。</summary>
        <value>默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不适用于<xref:System.Windows.EventTrigger>类，因为事件表示时的时间点<xref:System.Windows.TriggerBase.EnterActions%2A>和<xref:System.Windows.TriggerBase.ExitActions%2A>对应于为对象状态。 有关<xref:System.Windows.EventTrigger>对象，请使用<xref:System.Windows.EventTrigger.Actions%2A>属性改为。  
  
> [!NOTE]
>  此属性仅在中设置[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]通过集合语法所示，或通过访问的集合对象，并使用它的各种方法，例如 Add。 要访问集合对象本身的属性是只读的该集合本身是读写。  
  
<a name="xamlPropertyElementUsage_EnterActions"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.EnterActions>  
    OneOrMoreTriggerActions  
  </object.EnterActions >  
</object>  
```  
  
<a name="xamlValues_EnterActions"></a>   
## <a name="xaml-values"></a>XAML 值  
 *OneOrMoreTriggerActions*  
 一个或多个<xref:System.Windows.TriggerAction>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitActions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection ExitActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection ExitActions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TriggerBase.ExitActions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitActions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ ExitActions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在触发器对象变为非活动状态时应用的 <see cref="T:System.Windows.TriggerAction" /> 对象的集合。 此属性不适用于 <see cref="T:System.Windows.EventTrigger" /> 类。</summary>
        <value>默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不适用于<xref:System.Windows.EventTrigger>类，因为事件表示时的时间点<xref:System.Windows.TriggerBase.EnterActions%2A>和<xref:System.Windows.TriggerBase.ExitActions%2A>对应于为对象状态。 有关<xref:System.Windows.EventTrigger>对象，请使用<xref:System.Windows.EventTrigger.Actions%2A>属性改为。  
  
> [!NOTE]
>  此属性仅在中设置[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]通过集合语法所示，或通过访问的集合对象，并使用它的各种方法，例如 Add。 要访问集合对象本身的属性是只读的该集合本身是读写。  
  
<a name="xamlPropertyElementUsage_ExitActions"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.ExitActions>  
    OneOrMoreTriggerActions  
  </object.ExitActions >  
</object>  
```  
  
<a name="xamlValues_ExitActions"></a>   
## <a name="xaml-values"></a>XAML 值  
 *OneOrMoreTriggerActions*  
 一个或多个<xref:System.Windows.TriggerAction>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>