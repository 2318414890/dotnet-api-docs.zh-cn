<Type Name="Style" FullName="System.Windows.Style">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6eb533f7ae505f7ec3b4a36d8cb5fc407111f309" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679841" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.ISealable, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.ISealable, class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope, IQueryAmbient, ISealable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::ISealable, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope, System::Windows::Markup::IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.ISealable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a64a1-101">在类型的不同实例之间共享属性、资源和事件处理程序。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a64a1-101">Enables the sharing of properties, resources, and event handlers between instances of a type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-102">你可以设置<xref:System.Windows.Style>派生自的任何元素<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-102">You can set a <xref:System.Windows.Style> on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="a64a1-103">一种样式最常声明内的资源为<xref:System.Windows.Application.Resources%2A>部分。</span><span class="sxs-lookup"><span data-stu-id="a64a1-103">A style is most commonly declared as a resource inside the <xref:System.Windows.Application.Resources%2A> section.</span></span> <span data-ttu-id="a64a1-104">由于样式资源，它们遵循相同的范围规则应用于所有资源，因此如果你声明一个样式位置应用该策略的影响。</span><span class="sxs-lookup"><span data-stu-id="a64a1-104">Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</span></span> <span data-ttu-id="a64a1-105">如果，例如，声明你的应用程序定义的根元素中的样式[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]文件，可以在你的应用程序中任意位置使用样式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-105">If, for instance, you declare the style in the root element of your application definition [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file, the style can be used anywhere in your application.</span></span> <span data-ttu-id="a64a1-106">如果要创建导航应用程序并且中其中一个应用程序的声明样式[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]文件，该样式可以使用只能在该[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]文件。</span><span class="sxs-lookup"><span data-stu-id="a64a1-106">If you are creating a navigation application and declare the style in one of the application's [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] files, the style can be used only in that [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span> <span data-ttu-id="a64a1-107">作用域资源的规则的详细信息，请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="a64a1-107">For more information on scoping rules for resources, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="a64a1-108">样式声明组成<xref:System.Windows.Style>对象，其中包含一个或多个集合<xref:System.Windows.Setter>对象。</span><span class="sxs-lookup"><span data-stu-id="a64a1-108">The style declaration consists of a <xref:System.Windows.Style> object that contains a collection of one or more <xref:System.Windows.Setter> objects.</span></span> <span data-ttu-id="a64a1-109">每个<xref:System.Windows.Setter>组成<xref:System.Windows.Setter.Property%2A>和<xref:System.Windows.Setter.Value%2A>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-109">Each <xref:System.Windows.Setter> consists of a <xref:System.Windows.Setter.Property%2A> and a <xref:System.Windows.Setter.Value%2A>.</span></span> <span data-ttu-id="a64a1-110">该属性是属性的元素样式的名称，将应用到。</span><span class="sxs-lookup"><span data-stu-id="a64a1-110">The property is the name of the property of the element the style is to apply to.</span></span> <span data-ttu-id="a64a1-111">样式声明为资源后，然后就像任何其他资源一样引用。</span><span class="sxs-lookup"><span data-stu-id="a64a1-111">After the style is declared as a resource, it can then be referenced just like any other resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a64a1-112">具有相同的 setter 集合中是否存在多个 setter<xref:System.Windows.Setter.Property%2A>使用上次属性值，声明 setter。</span><span class="sxs-lookup"><span data-stu-id="a64a1-112">If there is more than one setter in the setter collection with the same <xref:System.Windows.Setter.Property%2A> property value, the setter that is declared last is used.</span></span> <span data-ttu-id="a64a1-113">同样，如果你为相同属性的值样式并设置在元素上直接，直接在元素上设置的值优先。</span><span class="sxs-lookup"><span data-stu-id="a64a1-113">Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</span></span>  
  
 <span data-ttu-id="a64a1-114">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]样式和模板化模型允许维护和共享的查看，以及演示文稿和逻辑分离。</span><span class="sxs-lookup"><span data-stu-id="a64a1-114">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</span></span> <span data-ttu-id="a64a1-115">样式和模板化模型包含一套功能，可用于自定义你[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="a64a1-115">The styling and templating model includes a suite of features that enable you to customize your [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="a64a1-116">此套件的功能包括<xref:System.Windows.Style>类以及以下：</span><span class="sxs-lookup"><span data-stu-id="a64a1-116">This suite of features includes the <xref:System.Windows.Style> class as well as the following:</span></span>  
  
-   <xref:System.Windows.Trigger>  
  
-   <span data-ttu-id="a64a1-117"><xref:System.Windows.EventTrigger> 和 <xref:System.Windows.Media.Animation.Storyboard></span><span class="sxs-lookup"><span data-stu-id="a64a1-117"><xref:System.Windows.EventTrigger> and <xref:System.Windows.Media.Animation.Storyboard></span></span>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 <span data-ttu-id="a64a1-118">有关详细信息，请参阅[样式设置和模板化](~/docs/framework/wpf/controls/styling-and-templating.md)。</span><span class="sxs-lookup"><span data-stu-id="a64a1-118">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a64a1-119">下面的示例演示了将影响一个样式声明<xref:System.Windows.Controls.Control.Background%2A>属性<xref:System.Windows.Controls.Control>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-119">The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]   
  
 <span data-ttu-id="a64a1-120">若要应用上面的样式，请执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="a64a1-120">To apply the above style, do the following:</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
  
 <span data-ttu-id="a64a1-121">你还可以将样式通过使用应用于给定类型的所有元素<xref:System.Windows.Style.TargetType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="a64a1-121">You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property.</span></span> <span data-ttu-id="a64a1-122">将目标类型添加到样式意味着不再需要完全符合你设置与属性`ClassName.PropertyName`语法。</span><span class="sxs-lookup"><span data-stu-id="a64a1-122">Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax.</span></span> <span data-ttu-id="a64a1-123">下面的示例定义将应用于每个样式<xref:System.Windows.Controls.TextBlock>元素。</span><span class="sxs-lookup"><span data-stu-id="a64a1-123">The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
> [!NOTE]
>  <span data-ttu-id="a64a1-124">许多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控件包含其他组合[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控件，因此创建一种样式，适用于所有类型的控件可以具有广泛的影响。</span><span class="sxs-lookup"><span data-stu-id="a64a1-124">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="a64a1-125">例如，如果创建一种样式面向<xref:System.Windows.Controls.TextBlock>控制中的<xref:System.Windows.Controls.Canvas>，该样式应用于所有<xref:System.Windows.Controls.TextBlock>控件在画布上，即使<xref:System.Windows.Controls.TextBlock>属于另一个控件，如<xref:System.Windows.Controls.ListBox>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-125">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.</span></span>  
  
 <span data-ttu-id="a64a1-126">有关如何扩展或继承自定义样式的信息，请参阅<xref:System.Windows.Style.BasedOn%2A>页。</span><span class="sxs-lookup"><span data-stu-id="a64a1-126">For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-127">初始化 <see cref="T:System.Windows.Style" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-127">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-128">初始化 <see cref="T:System.Windows.Style" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-128">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-129">此构造函数调用需要延迟的验证<xref:System.Windows.Style.TargetType%2A>和<xref:System.Windows.Style.BasedOn%2A>设置类型的样式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-129">This constructor call requires delayed validation of <xref:System.Windows.Style.TargetType%2A> and <xref:System.Windows.Style.BasedOn%2A> style type.</span></span> <span data-ttu-id="a64a1-130">如果这适用于分析器的上下文之外，则行为不确定。</span><span class="sxs-lookup"><span data-stu-id="a64a1-130">If this is used outside the context of the parser, behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">
          <span data-ttu-id="a64a1-131">要应用该样式的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-131">The type to which the style will apply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-132">初始化 <see cref="T:System.Windows.Style" /> 类的一个新实例，以便在指定的 <see cref="T:System.Type" /> 上使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-132">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type, basedOn As Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType, System::Windows::Style ^ basedOn);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType">
          <span data-ttu-id="a64a1-133">要应用该样式的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-133">The type to which the style will apply.</span>
          </span>
        </param>
        <param name="basedOn">
          <span data-ttu-id="a64a1-134">此样式所基于的样式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-134">The style to base this style on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-135">基于指定的 <see cref="T:System.Windows.Style" /> 初始化 <see cref="T:System.Type" /> 类的一个新实例，以便在指定的 <see cref="T:System.Windows.Style" /> 上使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-135">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" /> and based on the specified <see cref="T:System.Windows.Style" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property BasedOn As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ BasedOn { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-136">获取或设置一个作为当前样式的基准的已定义样式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-136">Gets or sets a defined style that is the basis of the current style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a64a1-137">一个作为当前样式的基准的已定义样式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-137">A defined style that is the basis of the current style.</span>
          </span>
          <span data-ttu-id="a64a1-138">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-138">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-139">每个样式只支持一个<xref:System.Windows.Style.BasedOn%2A>值。</span><span class="sxs-lookup"><span data-stu-id="a64a1-139">Each style only supports one <xref:System.Windows.Style.BasedOn%2A> value.</span></span>  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a64a1-140">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a64a1-140">XAML Attribute Usage</span></span>  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a64a1-141">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a64a1-141">XAML Values</span></span>  
 <span data-ttu-id="a64a1-142">*myStyle*</span><span class="sxs-lookup"><span data-stu-id="a64a1-142">*myStyle*</span></span>  
 <span data-ttu-id="a64a1-143">现有的样式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-143">An existing style.</span></span> <span data-ttu-id="a64a1-144">通常情况下，使用[标记扩展和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)以引用现有的样式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-144">Typically, you use the [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md) to refer to an existing style.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a64a1-145">有多种方法中的样式[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]可以扩展或继承。</span><span class="sxs-lookup"><span data-stu-id="a64a1-145">There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] can be extended or inherited.</span></span> <span data-ttu-id="a64a1-146">样式可以基于通过此属性的其他样式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-146">Styles can be based on other styles through this property.</span></span> <span data-ttu-id="a64a1-147">当你使用此属性时，将新样式将继承不在将新样式中显式重新定义的原始样式的值。</span><span class="sxs-lookup"><span data-stu-id="a64a1-147">When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</span></span> <span data-ttu-id="a64a1-148">在下面的示例中，`Style2`继承<xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType>值`Yellow`，并将添加<xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType>值`Blue`。</span><span class="sxs-lookup"><span data-stu-id="a64a1-148">In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> value of `Blue`.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]   
  
 <span data-ttu-id="a64a1-149">同样，样式可以基于现有样式[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]元素，如下面的示例将新样式取决于的样式<xref:System.Windows.Controls.TextBlock>元素。</span><span class="sxs-lookup"><span data-stu-id="a64a1-149">Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]   
  
> [!NOTE]
>  <span data-ttu-id="a64a1-150">如果创建与样式<xref:System.Windows.Style.TargetType%2A>属性和它在另一台字形的基还定义<xref:System.Windows.Style.TargetType%2A>属性派生样式的目标类型必须相同或派生自基样式的类型。</span><span class="sxs-lookup"><span data-stu-id="a64a1-150">If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.</span></span>  
  
 <span data-ttu-id="a64a1-151">定义为特定类型的样式也可以基于其他样式，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="a64a1-151">Styles defined for specific types can also be based on other styles, as in the following example.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-152">返回此 <see cref="T:System.Windows.Style" /> 的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-152">Returns the hash code for this <see cref="T:System.Windows.Style" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a64a1-153">此 <see cref="T:System.Windows.Style" /> 的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-153">The hash code for this <see cref="T:System.Windows.Style" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-154">获取一个值，该值指示样式是否为只读（无法更改）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-154">Gets a value that indicates whether the style is read-only and cannot be changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a64a1-155">如果样式是密封的，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-155">
              <see langword="true" /> if the style is sealed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-156">当另一种样式基于时或第一次应用时都被密封的样式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-156">A style is sealed when another style is based on it or when it is applied for the first time.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="a64a1-157">要注册的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-157">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="a64a1-158">要映射到指定 <c>name</c> 的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-158">The object to map to the specified <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-159">在当前名称领域内注册一个新的名称-对象对。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-159">Registers a new name-object pair in the current namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-160">获取或设置可在此样式的范围内使用的资源的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-160">Gets or sets the collection of resources that can be used within the scope of this style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a64a1-161">可在此样式的范围内使用的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-161">The resources that can be used within the scope of this style.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a64a1-162">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a64a1-162">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
- or -   
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a64a1-163">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a64a1-163">XAML Values</span></span>  
 <span data-ttu-id="a64a1-164">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="a64a1-164">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="a64a1-165">一个或多个资源元素。</span><span class="sxs-lookup"><span data-stu-id="a64a1-165">One or more resource elements.</span></span> <span data-ttu-id="a64a1-166">若要更高版本中引用[否则标记扩展](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)或[DynamicResource 标记扩展](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)中的语法[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，resource 元素必须具有`x:Key`属性。</span><span class="sxs-lookup"><span data-stu-id="a64a1-166">To be referenced later in either [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.</span></span>  
  
 <span data-ttu-id="a64a1-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span><span class="sxs-lookup"><span data-stu-id="a64a1-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span></span>  
 <span data-ttu-id="a64a1-168">外部字典源。</span><span class="sxs-lookup"><span data-stu-id="a64a1-168">An external dictionary source.</span></span> <span data-ttu-id="a64a1-169">有关详细信息，请参阅[合并资源字典](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)。</span><span class="sxs-lookup"><span data-stu-id="a64a1-169">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seal ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seal();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-170">锁定此样式和所有工厂与触发器，使得它们无法被更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-170">Locks this style and all factories and triggers so they cannot be changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-171">获取 <see cref="T:System.Windows.Setter" /> 和 <see cref="T:System.Windows.EventSetter" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-171">Gets a collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a64a1-172">
            <see cref="T:System.Windows.Setter" /> 和 <see cref="T:System.Windows.EventSetter" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-172">A collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span>
          </span>
          <span data-ttu-id="a64a1-173">默认值为空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-173">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-174"><xref:System.Windows.Style.Setters%2A>属性<xref:System.Windows.Style>对象可以仅包含中的对象分配给<xref:System.Windows.SetterBase>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-174">The <xref:System.Windows.Style.Setters%2A> property of a <xref:System.Windows.Style> object can consist only of objects assignable to <xref:System.Windows.SetterBase>.</span></span> <span data-ttu-id="a64a1-175">添加<xref:System.Windows.SetterBase>子级到<xref:System.Windows.Style>对象隐式将其添加到<xref:System.Windows.SetterBaseCollection>为<xref:System.Windows.Style>对象。</span><span class="sxs-lookup"><span data-stu-id="a64a1-175">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span>  
  
 <span data-ttu-id="a64a1-176">有关显式属性元素用法<xref:System.Windows.Style.Setters%2A>也是相对常见。</span><span class="sxs-lookup"><span data-stu-id="a64a1-176">An explicit property element usage  for <xref:System.Windows.Style.Setters%2A> is also relatively common.</span></span> <span data-ttu-id="a64a1-177">这是一个有时可以帮助将区分开来的标记样式决定<xref:System.Windows.Style.Setters%2A>从<xref:System.Windows.Style.Resources%2A>和<xref:System.Windows.Style.Triggers%2A>复杂样式中的项。</span><span class="sxs-lookup"><span data-stu-id="a64a1-177">This is a markup style decision that can sometimes help distinguish <xref:System.Windows.Style.Setters%2A> from <xref:System.Windows.Style.Resources%2A> and <xref:System.Windows.Style.Triggers%2A> items in a complex style.</span></span> <span data-ttu-id="a64a1-178">例如:</span><span class="sxs-lookup"><span data-stu-id="a64a1-178">For example:</span></span>  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a64a1-179">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a64a1-179">XAML Property Element Usage</span></span>  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a64a1-180">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a64a1-180">XAML Values</span></span>  
 <span data-ttu-id="a64a1-181">*oneOrMoreSetters*</span><span class="sxs-lookup"><span data-stu-id="a64a1-181">*oneOrMoreSetters*</span></span>  
 <span data-ttu-id="a64a1-182">一个或多个<xref:System.Windows.Setter>或<xref:System.Windows.EventSetter>对象。</span><span class="sxs-lookup"><span data-stu-id="a64a1-182">One or more <xref:System.Windows.Setter> or <xref:System.Windows.EventSetter> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a64a1-183">下面的示例演示如何使用此属性。</span><span class="sxs-lookup"><span data-stu-id="a64a1-183">The following example shows how to use this property.</span></span>  
  
 [!code-csharp[listboxitemstyle#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 <span data-ttu-id="a64a1-184">添加<xref:System.Windows.SetterBase>子级到<xref:System.Windows.Style>对象隐式将其添加到<xref:System.Windows.SetterBaseCollection>为<xref:System.Windows.Style>对象。</span><span class="sxs-lookup"><span data-stu-id="a64a1-184">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span> <span data-ttu-id="a64a1-185">以下<xref:System.Windows.EventSetter>隐式添加到<xref:System.Windows.SetterBaseCollection>的样式：</span><span class="sxs-lookup"><span data-stu-id="a64a1-185">The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:</span></span>  
  
 [!code-xaml[eventovwsupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.CanSeal">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.CanSeal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.CanSeal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#CanSeal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CanSeal As Boolean Implements ISealable.CanSeal" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.CanSeal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.IsSealed">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#IsSealed" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSealed As Boolean Implements ISealable.IsSealed" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.Seal">
      <MemberSignature Language="C#" Value="void ISealable.Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.ISealable.Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#ISealable#Seal" />
      <MemberSignature Language="VB.NET" Value="Sub Seal () Implements ISealable.Seal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.ISealable.Seal() = System::Windows::ISealable::Seal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a64a1-186">要添加的子对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-186">The child object to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-187">添加子对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-187">Adds a child object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-188">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="a64a1-188">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a64a1-189">它只能在 <xref:System.Windows.Style> 实例强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="a64a1-189">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="a64a1-190">要添加到对象的文本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-190">The text to add to the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-191">将节点的文本内容添加到对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-191">Adds the text content of a node to the object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-192">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="a64a1-192">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a64a1-193">它只能在 <xref:System.Windows.Style> 实例强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="a64a1-193">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindName (name As String) As Object Implements INameScope.FindName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Windows.Markup.INameScope.FindName(System::String ^ name) = System::Windows::Markup::INameScope::FindName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.FindName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="a64a1-194">发出请求的对象的名称标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-194">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-195">返回具有提供的标识名称的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-195">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a64a1-196">对象（如果找到）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-196">The object, if found.</span>
          </span>
          <span data-ttu-id="a64a1-197">如果找不到该名称的对象，则返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-197">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-198">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="a64a1-198">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a64a1-199">它只能在 <xref:System.Windows.Style> 实例强制转换为 <xref:System.Windows.Markup.INameScope> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="a64a1-199">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.INameScope> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">
          <span data-ttu-id="a64a1-200">请求的环境属性的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-200">The name of the requested ambient property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-201">查询当前范围中是否有指定的环境属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-201">Queries whether a specified ambient property is available in the current scope.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a64a1-202">如果有所请求的环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-202">
              <see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-203">获取或设置此样式所针对的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-203">Gets or sets the type for which this style is intended.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a64a1-204">此样式的目标类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-204">The target type for this style.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-205">您可以对派生自任何元素设置样式<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-205">You can set a style on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="a64a1-206">因此，你的目标类型可以是任何这些元素。</span><span class="sxs-lookup"><span data-stu-id="a64a1-206">Therefore, your target type can be any of those elements.</span></span> <span data-ttu-id="a64a1-207">但是，如果创建与样式<xref:System.Windows.Style.TargetType%2A>属性和它在另一台字形的基还定义<xref:System.Windows.Style.TargetType%2A>属性，派生的样式的目标类型必须相同，或者派生自基样式的目标类型。</span><span class="sxs-lookup"><span data-stu-id="a64a1-207">However, if you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</span></span>  
  
 <span data-ttu-id="a64a1-208">如果不指定<xref:System.Windows.Style.TargetType%2A>，则必须指定`x:Key`为你<xref:System.Windows.Style>和也限定类名与你样式中的属性。</span><span class="sxs-lookup"><span data-stu-id="a64a1-208">If you do not specify a <xref:System.Windows.Style.TargetType%2A>, then you must specify an `x:Key` for your <xref:System.Windows.Style> and also qualify the properties in your style with a class name.</span></span>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a64a1-209">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a64a1-209">XAML Attribute Usage</span></span>  
  
```  
<object  TargetType="{x:Type typeName}"/>  
-or-  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a64a1-210">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a64a1-210">XAML Values</span></span>  
 `{x:Type ...}`  
 <span data-ttu-id="a64a1-211">[X:type 标记扩展](~/docs/framework/xaml-services/x-type-markup-extension.md)标记扩展用法。</span><span class="sxs-lookup"><span data-stu-id="a64a1-211">An [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md) markup extension usage.</span></span>  
  
 <span data-ttu-id="a64a1-212">*typeName*</span><span class="sxs-lookup"><span data-stu-id="a64a1-212">*typeName*</span></span>  
 <span data-ttu-id="a64a1-213">类的类型名称。</span><span class="sxs-lookup"><span data-stu-id="a64a1-213">The type name of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a64a1-214">下面的示例定义将应用于的所有实例样式<xref:System.Windows.Controls.TextBlock>元素。</span><span class="sxs-lookup"><span data-stu-id="a64a1-214">The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
 <span data-ttu-id="a64a1-215">设置<xref:System.Windows.Style.TargetType%2A>属性<xref:System.Windows.Controls.TextBlock>类型而不会设置`x:Key`隐式设置`x:Key`到`{x:Type TextBlock}`。</span><span class="sxs-lookup"><span data-stu-id="a64a1-215">Setting the <xref:System.Windows.Style.TargetType%2A> property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`.</span></span> <span data-ttu-id="a64a1-216">这也意味着，如果你向提供上述<xref:System.Windows.Style>`x:Key`值以外的其他任何内容`{x:Type TextBlock}`、<xref:System.Windows.Style>将不会应用于所有<xref:System.Windows.Controls.TextBlock>元素自动。</span><span class="sxs-lookup"><span data-stu-id="a64a1-216">This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically.</span></span> <span data-ttu-id="a64a1-217">相反，你需要将样式应用于<xref:System.Windows.Controls.TextBlock>元素显式。</span><span class="sxs-lookup"><span data-stu-id="a64a1-217">Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.</span></span>  
  
 <span data-ttu-id="a64a1-218">许多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控件包含其他组合[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控件，因此创建一种样式，适用于所有类型的控件可以具有广泛的影响。</span><span class="sxs-lookup"><span data-stu-id="a64a1-218">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="a64a1-219">例如，如果创建一种样式面向<xref:System.Windows.Controls.TextBox>控制中的<xref:System.Windows.Controls.Canvas>，该样式应用于所有<xref:System.Windows.Controls.TextBox>控件在画布上，即使<xref:System.Windows.Controls.TextBox>属于另一个控件，如<xref:System.Windows.Controls.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-219">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a64a1-220">获取基于指定条件应用属性值的 <see cref="T:System.Windows.TriggerBase" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-220">Gets a collection of <see cref="T:System.Windows.TriggerBase" /> objects that apply property values based on specified conditions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a64a1-221">
            <see cref="T:System.Windows.TriggerBase" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-221">A collection of <see cref="T:System.Windows.TriggerBase" /> objects.</span>
          </span>
          <span data-ttu-id="a64a1-222">默认值为空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-222">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a64a1-223">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]样式和模板化模型使您可以指定触发器内的你<xref:System.Windows.Style>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-223">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styling and templating model enables you to specify triggers within your <xref:System.Windows.Style>.</span></span> <span data-ttu-id="a64a1-224">实质上，触发器是对象，您可以应用更改时某些条件 (如当某个属性值变为`true`，或者事件发生时) 对结果满意。</span><span class="sxs-lookup"><span data-stu-id="a64a1-224">Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a64a1-225">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a64a1-225">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a64a1-226">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a64a1-226">XAML Values</span></span>  
 <span data-ttu-id="a64a1-227">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="a64a1-227">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="a64a1-228">类派生自的零个或多个对象元素<xref:System.Windows.TriggerBase>。</span><span class="sxs-lookup"><span data-stu-id="a64a1-228">Zero or more object elements that are classes deriving from <xref:System.Windows.TriggerBase>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a64a1-229">下面的示例演示命名<xref:System.Windows.Style>供<xref:System.Windows.Controls.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="a64a1-229">The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls.</span></span> <span data-ttu-id="a64a1-230"><xref:System.Windows.Style>定义<xref:System.Windows.Trigger>更改的元素<xref:System.Windows.Controls.Control.Foreground%2A>按钮属性时<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="a64a1-230">The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.</span></span>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.UnregisterName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="a64a1-231">要删除的映射的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-231">The name of the mapping to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a64a1-232">从名称领域内移除名称-对象映射。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a64a1-232">Removes a name-object mapping from the namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>