<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager+ListenerList.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59f0f2be98debc822496ae0fb7a0b36b79ece2165.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f0f2be98debc822496ae0fb7a0b36b79ece2165</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Provides a built-in collection list for storing listeners for a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">提供用于存储 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> 的侦听器的内置集合列表。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Although this list contains members that resemble those defined by <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>, and provide similar functionality, this class implements neither of those interfaces.</source>
          <target state="translated">尽管此列表包含类似于定义的那些成员<ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>，并提供类似的功能，此类将实现上述两个接口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Most <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> derived classes do not need to use any members on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated">大多数<ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>派生的类无需使用任何成员上<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> use a default <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> internally, one list for each <ph id="ph5">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>方法<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>使用一种默认<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>内部，一个列表，每个<ph id="ph5">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>You only need to call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> methods if your <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</source>
          <target state="translated">只需调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>方法如果你<ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph>类维护对于相同的事件源组合，具有到不同的事件的条件的帐户创建每个列表的多个列表。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>In this case, you would not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> and would instead implement <ph id="ph3">`AddListener`</ph> or <ph id="ph4">`RemoveListener`</ph> to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to <ph id="ph5">`AddListener`</ph> or <ph id="ph6">`RemoveListener`</ph>.</source>
          <target state="translated">在这种情况下，不会使用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>和应改为实现<ph id="ph3">`AddListener`</ph>或<ph id="ph4">`RemoveListener`</ph>操作中内部侦听器列表中，通常基于参数添加到其中一个侦听器<ph id="ph5">`AddListener`</ph>或<ph id="ph6">`RemoveListener`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Also, the handler implementation that receives the raw event cannot simply call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">此外，不能只需调用接收原始事件的处理程序实现<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; 而是必须跟踪的事件的详细信息，并将事件传送到相应的列表使用仅<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>The various methods of <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</source>
          <target state="translated">各种方法<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>，以便你可以使用内部列表并这样就可以阻止的事件的实际传送过程中修改列表提供。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>An example class that used this implementation technique is <ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>, which maintains separate listener lists for <ph id="ph2">`PropertyChanged`</ph> based on which property changed.</source>
          <target state="translated">使用此实现技术对示例类进行<ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>，并保留单独的侦听器列出<ph id="ph2">`PropertyChanged`</ph>根据更改的属性。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>XAML Text Usage</source>
          <target state="translated">XAML 文本用法</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>You cannot use this class in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">不能将在此类<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
          <source>The number of items that should be allocated in the initial list.</source>
          <target state="translated">应在初始列表中分配的项数。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class with the specified initial capacity.</source>
          <target state="translated">使用指定的初始容量初始化 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>The listener element to add to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 的侦听器元素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Adds a <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> 对象添加到 <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>The object provided as listener should be a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> that implements the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface and therefore has a working <ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementation.</source>
          <target state="translated">因为侦听器应该是提供的对象<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>实现<ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph>接口，并因此具有一个有效的<ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
          <target state="translated">始终应调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>之前更改列表的内容。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
          <target state="translated">否则为列表可能为： 传递事件对象，因此锁定原始。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph> call can still work on the clone.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>更改输入<ph id="ph2">`list`</ph>要克隆，以便你<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph>调用仍可在克隆上工作。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>返回<ph id="ph2">`true`</ph>，可能需要更新到列表中，你都应保留在你的代码的其他区域中的任何私有引用。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
          <source>The event handler to add to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">将添加到 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中的事件处理程序。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
          <source>Adds an event handler to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">将事件处理程序添加到 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>Declares the list to be in use.</source>
          <target state="translated">声明列表正在使用中。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>This prevents direct changes to the list during iterations of the list items.</source>
          <target state="translated">这可以防止在列表项迭代过程中直接更改列表。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the list was already declared to be in use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果列表已经声明为正在使用中，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>A <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation should call <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> before iterating through the list to deliver an event to the listeners, and should call <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph> when it is done.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>实现应调用<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph>之前循环访问列表将事件传送到侦听器，并应调用<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>完成时。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</source>
          <target state="translated">这可以防止另一个调用方为了事件传送迭代过程中修改列表。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>If the list is modified during this time, then the list is cloned.</source>
          <target state="translated">如果在此期间修改列表，则克隆列表。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>If the list is cloned, then <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, which means that you have missed a recent listener change in the last delivery.</source>
          <target state="translated">如果克隆列表，然后<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>返回<ph id="ph2">`true`</ph>，这意味着你丢失了最后一次传递中最近的侦听器更改。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Clone">
          <source>Creates a modifiable clone of this <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">创建此 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 的可修改复本。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Clone">
          <source>A modifiable clone of the current object.</source>
          <target state="translated">当前对象的可修改复本。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
          <source>The object to copy to.</source>
          <target state="translated">要复制到的对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
          <source>Copies the current <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph></source>
          <target state="translated">将当前的 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 复制到指定 <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Count">
          <source>Gets the number of items contained in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中包含的项的数量。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Count">
          <source>The number of items contained in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中包含的项的数量。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>The object that raised the event.</source>
          <target state="translated">引发事件的对象。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>An object that contains the event data.</source>
          <target state="translated">包含事件数据的对象。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> that calls this method.</source>
          <target state="translated">调用此方法的 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>Delivers the event being managed to each listener in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">将正在托管的事件传送到 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中的每个侦听器。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any of the listeners in the <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> refer to an object that has been garbage collected; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果任何一个 <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中侦听器引用的对象已被垃圾回收，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为<ph id="ph3">&lt;see langword="false" /&gt;</ph> 。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Empty">
          <source>Gets a value that represents an empty list for purposes of comparisons.</source>
          <target state="translated">获取表示用于对比的空列表的值。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Empty">
          <source>The empty list representation.</source>
          <target state="translated">空列表表示。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.EndUse">
          <source>Unlocks the locked state initiated by <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /&gt;</ph>.</source>
          <target state="translated">解除由 <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /&gt;</ph> 启动的锁定状态。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>Gets a value that declares whether this <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> is empty.</source>
          <target state="translated">获取声明此 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 是否为空的值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the list is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果列表为空，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>This method is equivalent to checking whether the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> is zero, and does not check whether any of the references in the list are now stale.</source>
          <target state="translated">此方法等效于检查是否<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph>为零，并且不检查是否任何列表中引用是否现在已过时。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>If you want to assure that all references are still valid, call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph> just prior to checking the empty status of the list.</source>
          <target state="translated">如果你想要确保所有引用都是否仍然有效，请调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph>之前检查列表的空状态。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>The zero-based index of the listener in the list.</source>
          <target state="translated">列表中侦听器的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>Gets or sets a specific listener item in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> .</source>
          <target state="translated">获取或设置 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中的特定侦听器项。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>The item at that index, or a null reference if no item was at that index.</source>
          <target state="translated">该索引处的项，如果该索引处没有项，则为 null 引用。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>The list to check for use state and potentially copy.</source>
          <target state="translated">要检查其使用状态和可能副本的列表。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</source>
          <target state="translated">检查是否正在使用提供的列表，如果正在使用，则将列表引用参数设置为该列表的副本，而不是原稿列表的副本。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided list was in use at the time of call and therefore the <ph id="ph2">&lt;paramref name="list" /&gt;</ph> parameter reference was reset to be a copy.</source>
          <target state="translated">如果调用时正在使用提供的列表，并因此 <ph id="ph2">&lt;paramref name="list" /&gt;</ph> 参数引用被重置为副本，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the provided list was not in use, in which case the <ph id="ph2">&lt;paramref name="list" /&gt;</ph> parameter reference remains unaltered.</source>
          <target state="translated">如果未使用提供的列表，在此情况下 <ph id="ph2">&lt;paramref name="list" /&gt;</ph> 参数引用保持不变，则为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>If the given list is in use (which means an event is currently being delivered), calling this method will replace the input <ph id="ph1">`list`</ph> with a clone.</source>
          <target state="translated">如果是使用给定的列表 （这意味着当前传送事件），调用此方法将替换输入<ph id="ph1">`list`</ph>使用克隆。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>The existing users will finish delivering the event to the original list, without interference from changes to the new list.</source>
          <target state="translated">现有用户将完成将事件传送到原始列表中，不受干扰从更改为新的列表。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>If the method returns <ph id="ph1">`true`</ph>, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</source>
          <target state="translated">如果该方法返回<ph id="ph1">`true`</ph>，调用方可能想要在他们自己的数据结构中插入新列表，因为这表示提供的列表不再是最新的可能性。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>This method calls <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> internally and then immediately calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
          <target state="translated">此方法调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph>内部，然后立即调用<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Therefore calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> does not itself introduce a lock on the list.</source>
          <target state="translated">因此调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>本身不会导致在列表上的锁。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Even the clone copy is done as a secondary operation after calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
          <target state="translated">即使克隆副本完成作为辅助操作之后调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Purge">
          <source>Removes all entries from the list where the underlying reference target is a null reference.</source>
          <target state="translated">从基础引用目标为 null 引用的列表中移除所有项。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Purge">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if any entries were purged; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果清除了所有项，则返回 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>The item to remove.</source>
          <target state="translated">要移除的项。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Removes the first occurrence of a listener item from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中移除侦听器项的第一个匹配项。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
          <target state="translated">始终应调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>之前更改列表的内容。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
          <target state="translated">否则为列表可能为： 传递事件对象，因此锁定原始。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph> call can still work on the clone.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>更改输入<ph id="ph2">`list`</ph>要克隆，以便你<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph>调用仍可在克隆上工作。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>返回<ph id="ph2">`true`</ph>，可能需要更新到列表中，你都应保留在你的代码的其他区域中的任何私有引用。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
          <source>The event handler to remove from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">要从 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 中移除的处理程序。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
          <source>Removes an event handler from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 目标中移除事件处理程序。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>