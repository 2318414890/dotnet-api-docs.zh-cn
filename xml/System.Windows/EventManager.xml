<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventManager.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c77ae0f0dbeb2878102af1c07c306ec83ccf92c4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c77ae0f0dbeb2878102af1c07c306ec83ccf92c4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.EventManager">
          <source>Provides event-related utility methods that register routed events for class owners and add class handlers.</source>
          <target state="translated">提供事件相关的实用工具方法，这些方法可为类所有者注册路由事件，并添加类处理程序。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>This class is most commonly used to register a new routed event, with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">此类通常用于注册新的路由的事件， <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>The second most common <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]</ph> usage is <ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">第二个最常见<ph id="ph1">[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]</ph>使用率<ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>You use this method to enable class handling of a routed event on the class, or an attached event.</source>
          <target state="translated">此方法用于启用路由类、 事件或附加的事件的类处理。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>For details, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>标记作为 Handled，和类处理的路由事件<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event.</source>
          <target state="translated">下面的示例演示如何使用此类以将新的路由的事件注册为类成员，以及重写添加的路由的事件"包装器"技术和删除实现<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>Returns identifiers for routed events that have been registered to the event system.</source>
          <target state="translated">为已注册到事件系统的路由事件返回标识符。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> that contains the registered objects.</source>
          <target state="translated">包含注册对象的 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> 类型的数组。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>More <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> objects can be registered later.</source>
          <target state="translated">详细<ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph>更高版本注册对象。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</source>
          <target state="translated">此方法获取快照，在应用程序的整个生存期内可写的路由事件的集合。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>The collection returned might be quite large.</source>
          <target state="translated">返回的集合可能会很大。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>Even just counting the events that are part of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, the collection count is in the high hundreds.</source>
          <target state="translated">即使只计数的一部分的事件<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>，高达数百是集合计数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>The type to start the search with.</source>
          <target state="translated">从其开始搜索的类型。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>Base classes are included in the search.</source>
          <target state="translated">搜索中包含基类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>Finds all routed event identifiers for events that are registered with the provided owner type.</source>
          <target state="translated">查找使用所提供的所有者类型注册的事件的所有路由事件标识符。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>An array of matching routed event identifiers if any match is found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果找到任何匹配项，则返回匹配路由事件标识符的数组；否则返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Windows.EventManager">
          <source>Registers a class handler for a particular routed event.</source>
          <target state="translated">为特定路由事件注册类处理程序。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">声明类处理的类的类型。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">要处理的事件的路由事件标识符。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">对类处理程序实现的引用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Registers a class handler for a particular routed event.</source>
          <target state="translated">为特定路由事件注册类处理程序。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">类处理是一种功能，可用于路由的事件，包括与备份的路由事件实现附加的事件。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">一个类处理程序就像存在类的所有实例的静态处理。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">因为该处理程序是静态的不能更改实例属性直接使用类处理程序，但你可以访问通过实例<ph id="ph1">`sender`</ph>参数和/或事件数据。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">在实例处理程序之前调用类处理程序。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">你可以实现的类处理程序已将该事件标记为已处理的行为。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">因此，除非专门为已处理的事件注册实例处理程序，不会调用实例的类处理事件的处理程序。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">许多<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>该类事件提供类处理虚方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> in static constructors.</source>
          <target state="translated">你可以通过重写继承的基类的类中的这些方法，实现类而不调用处理<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>在静态构造函数中。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">通常，这些类处理方法存在输入事件，并具有名称以"On"开头，并且类处理的事件的名称结尾。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">有关类处理的详细信息，请参阅<bpt id="p1">[</bpt>标记作为 Handled，和类处理的路由事件<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Using this signature, class handlers will be registered to invoke only in response to unhandled events.</source>
          <target state="translated">使用此签名，将对类处理程序被注册为仅在响应未经处理的事件中调用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>You can also register class handlers to invoke even if the event arguments are marked handled, by using the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature, with <ph id="ph2">`handledEventsToo`</ph> set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">你还可以注册类处理程序，即使事件自变量标记为已处理，通过调用<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>签名，与<ph id="ph2">`handledEventsToo`</ph>设置为<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>The following example adds a handler for <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>, calling <ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">下面的示例添加的处理程序<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>，则调用<ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">声明类处理的类的类型。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">要处理的事件的路由事件标识符。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">对类处理程序实现的引用。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to invoke this class handler even if arguments of the routed event have been marked as handled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to retain the default behavior of not invoking the handler on any marked-handled event.</source>
          <target state="translated">如果即使已将路由事件的参数标记为已处理时也调用此类处理程序，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果保留不对任何标记为已处理的事件调用处理程序的默认行为，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</source>
          <target state="translated">使用处理事件数据已标记为已处理的事件的选项，为特定路由事件注册类处理程序。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">类处理是一种功能，可用于路由的事件，包括与备份的路由事件实现附加的事件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">一个类处理程序就像存在类的所有实例的静态处理。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">因为该处理程序是静态的不能更改实例属性直接使用类处理程序，但你可以访问通过实例<ph id="ph1">`sender`</ph>参数和/或事件数据。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">在实例处理程序之前调用类处理程序。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">你可以实现的类处理程序已将该事件标记为已处理的行为。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">因此，除非专门为已处理的事件注册实例处理程序，不会调用实例的类处理事件的处理程序。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">许多<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>该类事件提供类处理虚方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> in static constructors.</source>
          <target state="translated">你可以通过重写继承的基类的类中的这些方法，实现类而不调用处理<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>在静态构造函数中。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">通常，这些类处理方法存在输入事件，并具有名称以"On"开头，并且类处理的事件的名称结尾。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">有关类处理的详细信息，请参阅<bpt id="p1">[</bpt>标记作为 Handled，和类处理的路由事件<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Using this signature, class handlers can be registered to invoke upon handled events, by setting <ph id="ph1">`handledEventsToo`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">使用此签名，类处理程序可能被注册来调用时处理的事件，通过设置<ph id="ph1">`handledEventsToo`</ph>设置为<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</source>
          <target state="translated">通常情况下，只有在你尝试要解决问题，例如鼠标或键盘事件从输入系统处理的已知的处理问题应执行此操作。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The name of the routed event.</source>
          <target state="translated">路由事件的名称。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The name must be unique within the owner type and cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph> or an empty string.</source>
          <target state="translated">该名称在所有者类型中必须是唯一的，并且不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 或空字符串。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The routing strategy of the event as a value of the enumeration.</source>
          <target state="translated">作为枚举值的事件的路由策略。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The type of the event handler.</source>
          <target state="translated">事件处理程序的类型。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This must be a delegate type and cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">该类型必须为委托类型，并且不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The owner class type of the routed event.</source>
          <target state="translated">路由事件的所有者类类型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">该类型不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>Registers a new routed event with the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> event system.</source>
          <target state="translated">向 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 事件系统注册新的路由事件。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The identifier for the newly registered routed event.</source>
          <target state="translated">新注册的路由事件的标识符。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</source>
          <target state="translated">现在可将该标识符对象存储为类中的静态字段，然后将其用作将处理程序附加到事件的方法的参数。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The routed event identifier is also used for other event system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">路由事件标识符也用于其他事件系统 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>Use the return value of this method to create the static declaration for a unique <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> identifier field.</source>
          <target state="translated">使用此方法的返回值创建一个唯一的静态声明<ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph>标识符字段。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This field should be stored within the owner type.</source>
          <target state="translated">此字段应存储在所有者类型。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</source>
          <target state="translated">有了相当多的约定，与如何路由事件相关联的最佳做法操作都应名为、 注册，和类中公开。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>For more information, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>