<Type Name="TextDecoration" FullName="System.Windows.TextDecoration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4322424d188ee5899926051bc94fffd8525dcc80" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TextDecoration : System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TextDecoration extends System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TextDecoration" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TextDecoration&#xA;Inherits Animatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextDecoration sealed : System::Windows::Media::Animation::Animatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.Animatable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个文本修饰，它是可添加到文本的视觉装饰（如下划线）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本修饰的四种类型： 下划线、 基线、 删除线和上划线。 下面的示例显示相对于文本的文本修饰的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
文本修饰类型的示例  
  
 下面的示例演示用线性渐变画笔和虚线的钢笔设计的文本修饰。  
  
 ![采用线性渐变下划线的文本效果](~/add/media/textdecoration02.png "采用线性渐变下划线的文本效果")  
示例中的下划线的风格使用线性渐变画笔和虚线的钢笔  
  
 请注意，<xref:System.Windows.TextDecoration>派生自<xref:System.Windows.Media.Animation.Animatable>。 这样便能将动画的效果应用于修饰元素，使用<xref:System.Windows.Media.Animation.DoubleAnimation>为<xref:System.Windows.TextDecoration.PenOffset%2A>和<xref:System.Windows.Media.Animation.ThicknessAnimation>为<xref:System.Windows.TextDecoration.Pen%2A>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.TextDecorations" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.TextDecoration" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextDecoration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TextDecoration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextDecoration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.TextDecoration" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值<xref:System.Windows.TextDecoration.Location%2A>属性是<xref:System.Windows.TextDecorationLocation.Underline>。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.TextDecoration>使用默认构造函数。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets2)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets2)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextDecoration (System.Windows.TextDecorationLocation location, System.Windows.Media.Pen pen, double penOffset, System.Windows.TextDecorationUnit penOffsetUnit, System.Windows.TextDecorationUnit penThicknessUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.TextDecorationLocation location, class System.Windows.Media.Pen pen, float64 penOffset, valuetype System.Windows.TextDecorationUnit penOffsetUnit, valuetype System.Windows.TextDecorationUnit penThicknessUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TextDecoration.#ctor(System.Windows.TextDecorationLocation,System.Windows.Media.Pen,System.Double,System.Windows.TextDecorationUnit,System.Windows.TextDecorationUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextDecoration(System::Windows::TextDecorationLocation location, System::Windows::Media::Pen ^ pen, double penOffset, System::Windows::TextDecorationUnit penOffsetUnit, System::Windows::TextDecorationUnit penThicknessUnit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="location" Type="System.Windows.TextDecorationLocation" />
        <Parameter Name="pen" Type="System.Windows.Media.Pen" />
        <Parameter Name="penOffset" Type="System.Double" />
        <Parameter Name="penOffsetUnit" Type="System.Windows.TextDecorationUnit" />
        <Parameter Name="penThicknessUnit" Type="System.Windows.TextDecorationUnit" />
      </Parameters>
      <Docs>
        <param name="location">文本修饰的位置。</param>
        <param name="pen">用于绘制文本修饰的 <see cref="T:System.Windows.Media.Pen" />。 如果该值为 <see langword="null" />，则文本修饰的颜色与它所应用于的文本的颜色相匹配，并且文本修饰的粗细将设置为字体的推荐粗细。</param>
        <param name="penOffset">相对于文本修饰位置的垂直位移。 如果为负值，则向下移动修饰；如果为正值，则向上移动修饰。</param>
        <param name="penOffsetUnit">用于解释 <c>penOffset</c> 值的单位。</param>
        <param name="penThicknessUnit">用于解释 <c>pen</c> 的 <see cref="P:System.Windows.Media.Pen.Thickness" /> 值的单位。</param>
        <summary>用指定的 <see cref="T:System.Windows.TextDecoration" />、<see cref="P:System.Windows.TextDecoration.Location" />、<see cref="P:System.Windows.TextDecoration.Pen" />、<see cref="P:System.Windows.TextDecoration.PenOffset" /> 和 <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" /> 值初始化 <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.TextDecoration>使用`location`， `pen`， `penOffset`， `penOffsetUnit`，和`penThicknessUnit`参数。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets6](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets6)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets6)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets6](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.TextDecoration Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.TextDecoration Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TextDecoration.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextDecoration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::TextDecoration ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecoration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.TextDecoration" /> 的可修改克隆，从而深度复制此对象的值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于生成的可修改副本冻结<xref:System.Windows.Freezable>对象 (或任何<xref:System.Windows.Freezable>对象)。 为方便起见，此方法将隐藏继承的强类型实现的版本。  
  
 有关详情，请参阅<xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>。  
  
 在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.TextDecoration CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.TextDecoration CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TextDecoration.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As TextDecoration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::TextDecoration ^ CloneCurrentValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecoration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.TextDecoration" /> 对象的可修改复本，从而深度复制此对象的当前值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性值为 <see langword="false" />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性值也将为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于生成的可修改副本冻结<xref:System.Windows.Freezable>对象 (或任何<xref:System.Windows.Freezable>对象)。 为方便起见，此方法将隐藏继承的强类型实现的版本。  
  
 有关详情，请参阅<xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>。  
  
 不复制资源引用、数据绑定和动画，而是复制其当前值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TextDecoration.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Windows.TextDecorationLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextDecorationLocation Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecoration.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As TextDecorationLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TextDecorationLocation Location { System::Windows::TextDecorationLocation get(); void set(System::Windows::TextDecorationLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文本修饰在绘制时的垂直位置。</summary>
        <value>文本修饰在绘制时的垂直位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示相对于文本的文本修饰的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
文本修饰类型的示例  
  
 <xref:System.Windows.TextDecoration.PenOffset%2A>属性使您能够偏移量从指定的文本修饰<xref:System.Windows.TextDecoration.Location%2A>。  
  
<a name="dependencyPropertyInfo_Location"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.TextDecoration.LocationProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的代码示例中，为笔纯色画笔创建带删除线的文本修饰。 <xref:System.Windows.TextDecoration.Location%2A> 属性设置为 <xref:System.Windows.TextDecorationLocation.Strikethrough>。  
  
 [!code-csharp[textdecorationsnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets1)]
 [!code-vb[textdecorationsnippets#TextDecorationSnippets1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets1)]
 [!code-xaml[textdecorationsnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LocationProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LocationProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.TextDecoration.LocationProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LocationProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LocationProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.TextDecoration.Location" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pen">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Pen Pen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Pen Pen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecoration.Pen" />
      <MemberSignature Language="VB.NET" Value="Public Property Pen As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Pen ^ Pen { System::Windows::Media::Pen ^ get(); void set(System::Windows::Media::Pen ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于绘制文本修饰的 <see cref="T:System.Windows.Media.Pen" />。</summary>
        <value>用于绘制文本修饰的 <see cref="T:System.Windows.Media.Pen" />。 如果此值为<c>null</c>，修饰颜色匹配的文本应用到的以及修饰的粗细将设置为字体的推荐粗细。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例演示用线性渐变画笔和虚线的钢笔设计的文本修饰。  
  
 ![采用线性渐变下划线的文本效果](~/add/media/textdecoration02.png "采用线性渐变下划线的文本效果")  
示例中的下划线的风格使用线性渐变画笔和虚线的钢笔  
  
<a name="dependencyPropertyInfo_Pen"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.TextDecoration.PenProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的代码示例中，使用虚线钢笔的线性渐变画笔创建下划线文本修饰。  
  
 [!code-csharp[textdecorationsnippets#TextDecorationSnippets3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets3)]
 [!code-vb[textdecorationsnippets#TextDecorationSnippets3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets3)]
 [!code-xaml[textdecorationsnippets#TextDecorationSnippets3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.TextDecoration.PenThicknessUnit" />
      </Docs>
    </Member>
    <Member MemberName="PenOffset">
      <MemberSignature Language="C#" Value="public double PenOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PenOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecoration.PenOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property PenOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double PenOffset { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文本修饰相对于其 <see cref="P:System.Windows.TextDecoration.Location" /> 的偏移量。</summary>
        <value>文本修饰相对于其 <see cref="P:System.Windows.TextDecoration.Location" /> 的偏移量。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 负值则表示更高版本，在文本效果本移动时正值表示移动较低的文本修饰。 使用<xref:System.Windows.TextDecoration.PenOffsetUnit%2A>属性来指定如何解释此值的单位。  
  
<a name="dependencyPropertyInfo_PenOffset"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.TextDecoration.PenOffsetProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的代码示例演示如何设置 <xref:System.Windows.TextDecoration.PenOffset%2A> 属性。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets7)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets7)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.TextDecoration.PenOffsetUnit" />
      </Docs>
    </Member>
    <Member MemberName="PenOffsetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PenOffsetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PenOffsetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.TextDecoration.PenOffsetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PenOffsetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PenOffsetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.TextDecoration.PenOffset" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PenOffsetUnit">
      <MemberSignature Language="C#" Value="public System.Windows.TextDecorationUnit PenOffsetUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextDecorationUnit PenOffsetUnit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecoration.PenOffsetUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PenOffsetUnit As TextDecorationUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TextDecorationUnit PenOffsetUnit { System::Windows::TextDecorationUnit get(); void set(System::Windows::TextDecorationUnit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于表示 <see cref="P:System.Windows.TextDecoration.PenOffset" /> 值的单位。</summary>
        <value>用于表示 <see cref="P:System.Windows.TextDecoration.PenOffset" /> 值的单位。 默认值为 <see cref="F:System.Windows.TextDecorationUnit.FontRecommended" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_PenOffsetUnit"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.TextDecoration.PenOffsetUnitProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的代码示例演示如何设置 <xref:System.Windows.TextDecoration.PenOffsetUnit%2A> 属性。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets7)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets7)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PenOffsetUnitProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PenOffsetUnitProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PenOffsetUnitProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.TextDecoration.PenOffsetUnitProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PenOffsetUnitProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PenOffsetUnitProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PenProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PenProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PenProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.TextDecoration.PenProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PenProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PenProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.TextDecoration.Pen" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PenThicknessUnit">
      <MemberSignature Language="C#" Value="public System.Windows.TextDecorationUnit PenThicknessUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextDecorationUnit PenThicknessUnit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecoration.PenThicknessUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PenThicknessUnit As TextDecorationUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TextDecorationUnit PenThicknessUnit { System::Windows::TextDecorationUnit get(); void set(System::Windows::TextDecorationUnit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于表示文本修饰的 <see cref="P:System.Windows.Media.Pen.Thickness" /> 的 <see cref="P:System.Windows.TextDecoration.Pen" /> 的单位。</summary>
        <value>用于表示文本修饰的 <see cref="P:System.Windows.Media.Pen.Thickness" /> 的 <see cref="P:System.Windows.TextDecoration.Pen" /> 的单位。 默认值为 <see cref="F:System.Windows.TextDecorationUnit.FontRecommended" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_PenThicknessUnit"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.TextDecoration.PenThicknessUnitProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的代码示例演示如何设置 <xref:System.Windows.TextDecoration.PenThicknessUnit%2A> 属性。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets7)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets7)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets7](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PenThicknessUnitProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PenThicknessUnitProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PenThicknessUnitProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.TextDecoration.PenThicknessUnitProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PenThicknessUnitProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PenThicknessUnitProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>