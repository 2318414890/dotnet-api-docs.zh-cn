<Type Name="ASCIIEncoding" FullName="System.Text.ASCIIEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab5211a8f9320a934d74d9b3f821ee108ec6cb24" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ASCIIEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ASCIIEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.ASCIIEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class ASCIIEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class ASCIIEncoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 Unicode 字符的 ASCII 字符编码。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编码是将一组 Unicode 字符转换为一个字节序列的过程。 解码是一组 Unicode 字符转换为编码字节的序列的过程。  
  
 <xref:System.Text.ASCIIEncoding> 对应于 Windows 代码页 20127。 由于 ASCII 是 7 位编码，ASCII 字符仅限于从 U + 0000 到 U + 007F 的最低 128 个 Unicode 字符。 如果使用返回的默认编码器<xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>属性或<xref:System.Text.ASCIIEncoding.%23ctor%2A>执行编码操作之前，会用问号 （？） 替换构造函数，该范围以外的字符。  因为<xref:System.Text.ASCIIEncoding>类支持仅一个有限的字符集， <xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，和<xref:System.Text.UTF32Encoding>类是更好地适合全球化应用程序。 以下注意事项可以帮助您决定是否使用<xref:System.Text.ASCIIEncoding>:  
  
-   某些协议要求 ASCII 或 ASCII 的子集。 在这些情况下 ASCII 编码是适当的。  
  
-   如果需要 8 位编码，则 ASCII 可能不正确的选择。 相反，请考虑使用 UTF8 而不 ASCII。 对于字符 U + 0000 到 U + 007F，结果是相同的但所有 Unicode 字符可表示采用 utf-8，这会避免数据丢失。  
  
> [!CAUTION]
>  <xref:System.Text.ASCIIEncoding> 不提供错误检测。 出于安全原因，应使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>并启用错误检测。  
  
 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法确定将多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.ASCIIEncoding.GetBytes%2A>方法执行实际的编码。  
  
 同样，<xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法确定有多少个字符的字节序列进行解码所导致和<xref:System.Text.ASCIIEncoding.GetChars%2A>和<xref:System.Text.ASCIIEncoding.GetString%2A>方法执行实际的解码。  
  
 请注意，默认值<xref:System.Text.ASCIIEncoding>构造函数本身可能没有你的应用程序的适当行为。 你可能想要考虑设置<xref:System.Text.Encoding.EncoderFallback%2A>或<xref:System.Text.Encoding.DecoderFallback%2A>属性<xref:System.Text.EncoderExceptionFallback>或<xref:System.Text.DecoderExceptionFallback>以防止与设置第 8 位的序列。 自定义行为也可能适合于这种情况。  
  
   
  
## Examples  
 下面的示例演示了如何编码成 ASCII Unicode 字符。 请注意出现时你的应用程序使用的数据丢失<xref:System.Text.ASCIIEncoding>ASCII 范围之外的 Unicode 字符进行编码。  
  
 [!code-cpp[System.Text.ASCIIEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ASCIIEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ASCIIEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.ASCIIEncoding" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <xref:System.Text.ASCIIEncoding>类不提供错误检测。 出于安全原因，应使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>类并启用错误检测。  
  
 如果你选择使用 ASCII 编码，则此构造函数可能无法为应用程序提供适当的回退行为。 它使用<xref:System.Text.EncoderReplacementFallback>和<xref:System.Text.DecoderReplacementFallback>类将替换为问号 （？） 的 U + 0000 到 U + 007F 范围之外的每个字符。 相反，您可以调用<xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>或<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法并将其传递<xref:System.Text.EncoderExceptionFallback>和<xref:System.Text.DecoderExceptionFallback>对象使用异常回退。  
  
> [!NOTE]
>  <xref:System.Text.ASCIIEncoding> 仅支持的 Unicode 字符值之间 U + 0000 到 U + 007F。 因此， <xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，和<xref:System.Text.UTF32Encoding>更适合全球化应用程序。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.Text.ASCIIEncoding>实例，并显示编码的名称。  
  
 [!code-cpp[System.Text.ASCIIEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计算对一组字符进行编码时产生的字节数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的 <see cref="T:System.String" />。</param>
        <summary>计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</summary>
        <returns>对指定字符进行编码后生成的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法返回的字符串使用进行编码所需的字节数<xref:System.Text.ASCIIEncoding>。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetByteCount2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/CPP/getbytecount-string.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetByteCount2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/CS/getbytecount-string.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetByteCount2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/VB/getbytecount-string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">指向第一个要编码的字符的指针。</param>
        <param name="count">要编码的字符的数目。</param>
        <summary>计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</summary>
        <returns>对指定字符进行编码后生成的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小于零。  
  
 或  
  
 得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的字符数组。</param>
        <param name="index">第一个要编码的字符的索引。</param>
        <param name="count">要编码的字符的数目。</param>
        <summary>计算对指定字符数组中的一组字符进行编码时产生的字节数。</summary>
        <returns>对指定字符进行编码后生成的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法以返回所需的使用 Unicode 字符数组进行编码的字节数<xref:System.Text.ASCIIEncoding>。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetByteCount1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetByteCount1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetByteCount1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
 或  
  
 得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一组字符编码为一个字节序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">指向第一个要编码的字符的指针。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。</param>
        <param name="byteCount">最多写入的字节数。</param>
        <summary>将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</summary>
        <returns>在由 <paramref name="bytes" /> 指示的位置处写入的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
 数据转换，如从流中读取的数据可以是仅在连续的块中可用。 在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.ASCIIEncoding.GetDecoder%2A>方法或<xref:System.Text.ASCIIEncoding.GetEncoder%2A>方法，分别。  
  
 <xref:System.Text.ASCIIEncoding> 不提供错误检测。 任何大于 U + 007F 的 Unicode 字符转换为 ASCII 问号按钮 ("？")。  
  
> [!CAUTION]
>  出于安全原因，你的应用程序建议使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>并启用错误检测。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="byteCount" /> 少于所产生的字节数。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的字符数组。</param>
        <param name="charIndex">第一个要编码的字符的索引。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">要包含所产生的字节序列的字节数组。</param>
        <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
        <summary>将指定字符数组中的一组字符编码到指定的字节数组中。</summary>
        <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
 数据转换，如从流中读取的数据可以是仅在连续的块中可用。 在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.ASCIIEncoding.GetDecoder%2A>方法或<xref:System.Text.ASCIIEncoding.GetEncoder%2A>方法，分别。  
  
 <xref:System.Text.ASCIIEncoding> 不提供错误检测。 任何大于 U + 007F 的 Unicode 字符编码为 ASCII 问号 ("？")。  
  
> [!CAUTION]
>  出于安全原因，你的应用程序建议使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>并启用错误检测。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetBytes%2A>方法对某个范围的从字符串的字符进行编码并将已编码的字符存储在某个范围的字节数组中的元素。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  
  
 或  
  
 <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
 或  
  
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的 <see cref="T:System.String" />。</param>
        <param name="charIndex">第一个要编码的字符的索引。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">要包含所产生的字节序列的字节数组。</param>
        <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
        <summary>将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</summary>
        <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
 数据转换，如从流中读取的数据可以是仅在连续的块中可用。 在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.ASCIIEncoding.GetDecoder%2A>方法或<xref:System.Text.ASCIIEncoding.GetEncoder%2A>方法，分别。  
  
 <xref:System.Text.ASCIIEncoding> 不提供错误检测。 任何大于 U + 007F 的 Unicode 字符编码为 ASCII 问号 ("？")。  
  
> [!CAUTION]
>  出于安全原因，你的应用程序建议使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>并启用错误检测。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetBytes%2A>方法进行编码的一系列 Unicode 字符数组中的元素并将已编码的字节存储在某个范围的字节数组中的元素。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetBytes2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetBytes2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetBytes2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  
  
 或  
  
 <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
 或  
  
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计算对一个字节序列进行解码所产生的字符数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">指向第一个要解码的字节的指针。</param>
        <param name="count">要解码的字节数。</param>
        <summary>计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</summary>
        <returns>对指定字节序列进行解码所产生的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.ASCIIEncoding.GetCharCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>。 <xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法通常执行得更快。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小于零。  
  
 或  
  
 得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="Overload:System.Text.ASCIIEncoding.GetChars" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解码的字节序列的字节数组。</param>
        <param name="index">第一个要解码的字节的索引。</param>
        <param name="count">要解码的字节数。</param>
        <summary>计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</summary>
        <returns>对指定字节序列进行解码所产生的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.ASCIIEncoding.GetCharCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>。 <xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法通常执行得更快。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetCharCount%2A>解码的字节数组中的元素范围由方法返回的字符数。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。  
  
 或  
  
 得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="Overload:System.Text.ASCIIEncoding.GetChars" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一个字节序列解码为一组字符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">指向第一个要解码的字节的指针。</param>
        <param name="byteCount">要解码的字节数。</param>
        <param name="chars">一个指针，指向开始写入所产生的字符集的位置。</param>
        <param name="charCount">要写入的最大字符数。</param>
        <summary>将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</summary>
        <returns>在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.ASCIIEncoding.GetCharCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>。 <xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法通常执行得更快。  
  
 数据转换，如从流中读取的数据可以是仅在连续的块中可用。 在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.ASCIIEncoding.GetDecoder%2A>方法或<xref:System.Text.ASCIIEncoding.GetEncoder%2A>方法，分别。  
  
 <xref:System.Text.ASCIIEncoding> 不提供错误检测。 任何大于 0x7F 十六进制的字节解码为 Unicode 问号 ("？")。  
  
> [!CAUTION]
>  出于安全原因，你的应用程序建议使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>并启用错误检测。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="charCount" /> 少于所产生的字符数。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解码的字节序列的字节数组。</param>
        <param name="byteIndex">第一个要解码的字节的索引。</param>
        <param name="byteCount">要解码的字节数。</param>
        <param name="chars">要用于包含所产生的字符集的字符数组。</param>
        <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
        <summary>将指定字节数组中的一个字节序列解码为指定的字符数组。</summary>
        <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.ASCIIEncoding.GetCharCount%2A>。 若要计算的最大数组大小，应用程序应使用<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>。 <xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法通常执行得更快。  
  
 数据转换，如从流中读取的数据可以是仅在连续的块中可用。 在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.ASCIIEncoding.GetDecoder%2A>方法或<xref:System.Text.ASCIIEncoding.GetEncoder%2A>方法，分别。  
  
 <xref:System.Text.ASCIIEncoding> 不提供错误检测。 任何大于 0x7F 十六进制的字节解码为 Unicode 问号 ("？")。  
  
> [!CAUTION]
>  出于安全原因，你的应用程序建议使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>并启用错误检测。  
  
   
  
## Examples  
 下面的示例演示如何进行解码的字节数组中的元素范围，并将结果存储在一组 Unicode 字符数组中的元素。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。  
  
 或  
  
 <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。  
  
 或  
  
 <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取可以将 ASCII 编码的字节序列转换为 Unicode 字符序列的解码器。</summary>
        <returns>
          <see cref="T:System.Text.Decoder" /> 用于将 ASCII 编码的字节序列转换为 Unicode 字符序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的块中的字符，方式类似于<xref:System.Text.ASCIIEncoding.GetChars%2A>此类的方法。 但是，<xref:System.Text.Decoder>因此它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。 <xref:System.Text.Decoder>还会保留在数据块的末尾的尾随字节，在下一步的解码操作中使用的尾随字节。 因此，<xref:System.Text.ASCIIEncoding.GetDecoder%2A>和<xref:System.Text.ASCIIEncoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取可将 Unicode 字符序列转换为 ASCII 编码的字节序列的编码器。</summary>
        <returns>一个 <see cref="T:System.Text.Encoder" />，它将一个 Unicode 字符序列转换为一个 ASCII 编码的字节序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的块中的字节，方式类似于<xref:System.Text.ASCIIEncoding.GetBytes%2A>此类的方法。 但是，<xref:System.Text.Encoder>以便其可以进行正确编码跨块的字符序列的调用之间维护状态信息。 <xref:System.Text.Encoder>还保留了尾随字符数据块的末尾，并在下一步的编码操作中使用的尾随字符。 例如，一个数据块可能结尾不匹配的高代理项，并且匹配的低代理项可能在下一个数据块中。 因此，<xref:System.Text.ASCIIEncoding.GetDecoder%2A>和<xref:System.Text.ASCIIEncoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">要编码的字符的数目。</param>
        <summary>计算对指定数目的字符进行编码时产生的最大字节数。</summary>
        <returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetBytes%2A>方法来存储所产生的字节，而<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法计算最大数组大小。 <xref:System.Text.ASCIIEncoding.GetByteCount%2A>方法通常分配的内存越少，但<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法通常执行得更快。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> 是一个最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.EncoderFallback>。  如果你选择了替换回退可能很大的字符串，<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>可以返回较大的值。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法考虑从以前的编码操作潜在剩余的代理项。 因此，如果<xref:System.Text.ASCIIEncoding>对象使用默认替换回退，或如果已在使用单个可能回退字符定义自定义替换回退，此方法返回`charCount`+ 1。 如果<xref:System.Text.ASCIIEncoding>对象使用多个可能的回退字符使用替换回退，该方法返回*n* * (`charCount` + 1)，其中*n*是回退的最大的数字符。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> 与无关<xref:System.Text.ASCIIEncoding.GetChars%2A>。 如果你的应用程序需要一个用于与的类似函数<xref:System.Text.ASCIIEncoding.GetChars%2A>，应使用<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>方法来计算对指定的数目的字符进行编码所需的字节数。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 小于零。  
  
 或  
  
 得到的字节数大于可作为整数返回的最大数量。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">要解码的字节数。</param>
        <summary>计算对指定数目的字节进行解码时产生的最大字符数。</summary>
        <returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法计算所需的精确数组大小<xref:System.Text.ASCIIEncoding.GetChars%2A>方法来存储所产生的字符，而<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法计算最大数组大小。 <xref:System.Text.ASCIIEncoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法通常执行得更快。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> 检索最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.DecoderFallback>。 如果存在则解码器回退，长度最大回退的*n*、<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法返回*n* * `byteCount`。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> 与无关<xref:System.Text.ASCIIEncoding.GetBytes%2A>。 如果你的应用程序需要一个用于与的类似函数<xref:System.Text.ASCIIEncoding.GetBytes%2A>，应使用<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>方法来计算最大对指定的数目的字节进行解码所需的字符数。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 小于零。  
  
 或  
  
 得到的字节数大于可作为整数返回的最大数量。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int byteIndex, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 byteIndex, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), byteIndex As Integer, byteCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解码的字节序列的字节数组。</param>
        <param name="byteIndex">第一个要解码的字节的索引。</param>
        <param name="byteCount">要解码的字节数。</param>
        <summary>将字节数组中某个范围的字节解码为一个字符串。</summary>
        <returns>包含指定字节序列解码结果的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据转换，如从流中读取的数据可以是仅在连续的块中可用。 在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.ASCIIEncoding.GetDecoder%2A>方法或<xref:System.Text.ASCIIEncoding.GetEncoder%2A>方法，分别。  
  
 <xref:System.Text.ASCIIEncoding> 不提供错误检测。 任何大于 0x7F 十六进制的字节解码为 Unicode 问号 ("？")。  
  
> [!CAUTION]
>  出于安全原因，应使用<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>类并启用而不是使用错误检测<xref:System.Text.ASCIIEncoding>类。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.ASCIIEncoding.GetString%2A>方法将转换到字节数组<xref:System.String>。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetString1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/CPP/getstring-byte[].cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetString1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/CS/getstring-byte[].cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetString1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/VB/getstring-byte[].vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleByte">
      <MemberSignature Language="C#" Value="public override bool IsSingleByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleByte" />
      <MemberSignature Language="DocId" Value="P:System.Text.ASCIIEncoding.IsSingleByte" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSingleByte As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSingleByte { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个可以指示当前编码是否使用单字节码位的值。</summary>
        <value>此属性恒为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是使用<xref:System.Text.ASCIIEncoding.IsSingleByte%2A>属性来确定用于编码操作和用于解码操作的字符数组的大小的字节数组的大小 (例如，以便字节数组的大小是<xref:System.Text.ASCIIEncoding.IsSingleByte%2A>* 要的字符数编码），应调用<xref:System.Text.ASCIIEncoding.GetByteCount%2A>或<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>编码操作的方法和<xref:System.Text.ASCIIEncoding.GetCharCount%2A>或<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>用于解码操作的方法。 这些方法采用<xref:System.Text.ASCIIEncoding>考虑时计算所需的数组大小的对象的替换回退策略。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>