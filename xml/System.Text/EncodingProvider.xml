<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3dd8164857fc0ee882ea5619b0174b55570de658" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407719" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供编码提供程序的基类，后者提供在特定平台上不可用的编码。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编码提供程序提供否则不可用特定的目标平台上的编码。  
  
 .NET Framework 的 Windows 桌面上支持较大数量的字符编码和代码页。 你可以在 Windows 桌面上获取编码在.NET Framework 中可用的完整列表，通过调用<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>方法。 .NET 核心，另一方面，默认情况下支持仅以下编码：  
  
-   ASCII （代码页为 20127） 返回<xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>属性。  
  
-   ISO 8859-1 （代码页 28591）。  
  
-   Utf-7 （代码页为 65000） 返回<xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>属性。  
  
-   Utf-8 （代码页 65001），它返回<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>属性。  
  
-   Utf-16 和 UTF-16LE （代码页为 1200年） 返回<xref:System.Text.Encoding.Unicode%2A>属性。  
  
-   UTF-16BE （代码页 1201年），它可以通过调用实例化<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>或<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>具有构造函数`bigEndian`值`true`。  
  
-   Utf-32 和 UTF-32LE （代码页 12000），即<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>属性。  
  
-   UTF-32BE （代码页 12001），它可以通过调用实例化<xref:System.Text.UTF32Encoding>构造函数具有`bigEndian`参数并提供的值`true`方法调用中。  
  
 从.NET Framework 4.6，开始<xref:System.Text.EncodingProvider>是使否则不可用的基类可用的.NET framework 的编码方式。 这涉及以下步骤：  
  
1.  定义的一个子类<xref:System.Text.EncodingProvider>可重写两个抽象<xref:System.Text.EncodingProvider.GetEncoding%2A>重载，<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29>和<xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>。 这些重载返回否则不受支持的编码按代码页标识符和名称。 请注意，你还可以选择返回默认编码如果<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29>方法调用参数为 0。  
  
2.  （可选） 你可以重写虚拟<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>和<xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>方法。 在大多数情况下，这不是有必要，因为基类提供了默认实现。  
  
3.  传递<xref:System.Text.EncodingProvider>到实例<xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>方法来执行由提供的编码<xref:System.Text.EncodingProvider>公共语言运行时可用的对象。  
  
4.  调用<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>重载来检索的编码。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法将调用对应<xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>以确定是否可以提供所请求编码。  
  
 .NET Framework 类库提供了一个静态属性， <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>，返回<xref:System.Text.EncodingProvider>可以使编码的整套可用在桌面.NET Framework 类库可用的对象[!INCLUDE[net_core](~/includes/net-core-md.md)]应用程序。 此外，你可以从派生<xref:System.Text.EncodingProvider>类以提供您自己的编码。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.EncodingProvider" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个编码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">所请求编码的代码页标识符。</param>
        <summary>返回与指定代码页标识符关联的编码。</summary>
        <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>对继承者的说明

重写[GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法返回的编码或支持的编码你<xref:System.Text.EncodingProvider>子类。 当用户代码尝试检索通过调用的编码[GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法，该方法将传递`codepage`到每个已注册的编码提供，直到一个返回有效的编码的标识符。 如果无返回的有效编码， [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法尝试检索其代码页标识符是缓存的编码`codepage`。 因此，如果`codepage`不是代码页编码的标识符的支持，该方法应返回`null`; 它应永远不会引发异常。
        
请注意，你还可以选择返回默认代码页，如果值`codepage`自变量为 0。

## <a name="notes-to-callers"></a>对调用方的说明
        
调用此方法[Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)方法。 不应直接从用户代码来调用它。

        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />方法返回的编码或支持的编码你<see cref="T:System.Text.EncodingProvider" />子类。当用户代码尝试检索通过调用的编码<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法，该方法将传递<paramref name="codepage" />到每个已注册的编码提供，直到一个返回有效的编码的标识符。如果无返回的有效编码，<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法尝试检索其代码页标识符是缓存的编码<paramref name="codepage" />。因此，如果<paramref name="codepage" />不是代码页编码的标识符的支持，该方法应返回<see langword="null" />; 它应永远不会引发异常。</para>
        </block>
        <block subset="none" type="usage">
          <para>调用此方法<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法。不应直接从用户代码来调用它。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">所请求编码的名称。</param>
        <summary>返回具有指定名称的编码。</summary>
        <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" /> 。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>对继承者的说明 
                  
重写[GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法返回的编码或支持的编码你<xref:System.Text.EncodingProvider>子类。 当用户代码尝试检索通过调用的编码[GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法，该方法将传递`name`到每个已注册的编码提供，直到一个返回有效的编码的自变量。 如果无返回的有效编码， [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法尝试检索其名称是缓存的编码`name`。 因此，如果`name`不支持，该方法应返回编码的名称`null`。 在其中方法应引发异常的唯一情况是如果`name`是`null`。

## <a name="notes-to-callers"></a>对调用方的说明

调用此方法[Encoding.GetEncoding(String)](<xref:System.Text.Encoding.GetEncoding(System.String)>)方法。 不应直接从用户代码来调用它。
        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写<see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />方法返回的编码或支持的编码你<see cref="T:System.Text.EncodingProvider" />子类。当用户代码尝试检索通过调用的编码<see cref="M:System.Text.Encoding.GetEncoding(System.String)" />方法，该方法将传递<paramref name="name" />到每个已注册的编码提供，直到一个返回有效的编码的自变量。如果无返回的有效编码，<see cref="M:System.Text.Encoding.GetEncoding(System.String)" />方法尝试检索其名称是缓存的编码<paramref name="name" />。因此，如果<paramref name="name" />不支持，该方法应返回编码的名称<see langword="null" />。在其中方法应引发异常的唯一情况是如果<paramref name="name" />是<see langword="null" />。</para>
        </block>
        <block subset="none" type="usage">
          <para>调用此方法<see cref="M:System.Text.Encoding.GetEncoding(System.String)" />方法。不应直接从用户代码来调用它。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">所请求编码的代码页标识符。</param>
        <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
        <param name="decoderFallback">一个对象，在无法用此编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
        <summary>返回与指定代码页标识符关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
        <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback`和`decoderFallback`参数是定义，如果编码器不能将字符转换为一个字节序列或解码器不能将一个字节序列转换为字符所用的回退策略对象。 .NET Framework 提供了以下回退机制：  
  
-   异常回退。 如果`encoderFallback`自变量是的一个实例<xref:System.Text.EncoderExceptionFallback>，或`decoderExceptionFallback`自变量是的一个实例<xref:System.Text.DecoderExceptionFallback>，编码的方法引发异常，如果字符不能进行编码，并且如果一个字节，解码方法将引发异常无法解码序列。  
  
-   替换回退。 如果`encoderFallback`自变量是的一个实例<xref:System.Text.EncoderReplacementFallback>，或`decoderExceptionFallback`自变量是的一个实例<xref:System.Text.DecoderReplacementFallback>、 编码和解码方法代替替换字符串的字符不能进行编码和字节序列不能为解码。 如果被替换回退对象通过调用默认构造函数实例化，则替换字符"？"。 如果调用<xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>或<xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数，你可以指定替换字符串。  
  
-   最佳回退。 你可以从派生<xref:System.Text.EncoderFallback>或<xref:System.Text.DecoderFallback>类，以实现最佳的替换机制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>因为调用此方法使用的实现<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />方法，你无需重写它。当用户代码尝试检索通过调用的编码<see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，该方法将传递<paramref name="codepage" />到每个已注册的编码提供，直到一个返回有效的编码的标识符。如果无返回的有效编码，<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法尝试检索其代码页标识符是缓存的编码<paramref name="codepage" />。因此，如果你选择重写<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，重写应返回<see langword="null" />如果<paramref name="codepage" />不是编码的代码页标识符支持; 它应永远不会引发异常。</para>
        </block>
        <block subset="none" type="usage">
          <para>调用此方法<see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法。不应直接从用户代码来调用它。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">首选编码的名称。</param>
        <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
        <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
        <summary>返回与指定名称关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
        <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" /> 。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback`和`decoderFallback`参数是定义，如果编码器不能将字符转换为一个字节序列或解码器不能将一个字节序列转换为字符所用的回退策略对象。 .NET Framework 提供了以下回退机制：  
  
-   异常回退。 如果`encoderFallback`自变量是的一个实例<xref:System.Text.EncoderExceptionFallback>，或`decoderExceptionFallback`自变量是的一个实例<xref:System.Text.DecoderExceptionFallback>，编码的方法引发异常，如果字符不能进行编码，并且如果一个字节，解码方法将引发异常无法解码序列。  
  
-   替换回退。 如果`encoderFallback`自变量是的一个实例<xref:System.Text.EncoderReplacementFallback>，或`decoderExceptionFallback`自变量是的一个实例<xref:System.Text.DecoderReplacementFallback>、 编码和解码方法代替替换字符串的字符不能进行编码和字节序列不能为解码。 如果被替换回退对象通过调用默认构造函数实例化，则替换字符"？"。 如果调用<xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>或<xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数，你可以指定替换字符串。  
  
-   最佳回退。 你可以从派生<xref:System.Text.EncoderFallback>或<xref:System.Text.DecoderFallback>类，以实现最佳的替换机制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>因为调用此方法使用的实现<see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />方法，你无需重写它。当用户代码尝试检索通过调用的编码<see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，该方法将传递<paramref name="codepage" />到每个已注册的编码提供，直到一个返回有效的编码的标识符。如果无返回的有效编码，<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />方法尝试检索其代码页标识符是缓存的编码<paramref name="codepage" />。因此，如果你选择重写<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法，重写应返回<see langword="null" />如果<paramref name="codepage" />不是编码的代码页标识符支持; 它应永远不会引发异常。</para>
        </block>
        <block subset="none" type="usage">
          <para>调用此方法<see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />方法。不应直接从用户代码来调用它。</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>