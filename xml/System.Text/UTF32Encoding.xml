<Type Name="UTF32Encoding" FullName="System.Text.UTF32Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5c8f619a477fdc9f8a9bc17d4405164f258102c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class UTF32Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UTF32Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF32Encoding" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UTF32Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF32Encoding sealed : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="daf7a-101">表示 Unicode 字符的 UTF-32 编码。</span>
      <span class="sxs-lookup">
        <span data-stu-id="daf7a-101">Represents a UTF-32 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="daf7a-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="daf7a-103">解码是一组 Unicode 字符转换为编码字节的序列的过程。</span><span class="sxs-lookup"><span data-stu-id="daf7a-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="daf7a-104">[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)将码位 （数字） 分配给每个受支持脚本中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="daf7a-104">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="daf7a-105">Unicode 转换格式 (UTF) 是一种方法将码位编码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="daf7a-106">[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)使用以下 Utf:</span><span class="sxs-lookup"><span data-stu-id="daf7a-106">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="daf7a-107">Utf-8，它将每个码位表示为一至四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="daf7a-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="daf7a-108">UTF 16，它将每个码位表示为一到两个 16 位整数的序列。</span><span class="sxs-lookup"><span data-stu-id="daf7a-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="daf7a-109">Utf-32，它将每个码位表示为一个 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="daf7a-110">有关 Utf 和其他编码支持的详细信息<xref:System.Text>，请参阅。</span><span class="sxs-lookup"><span data-stu-id="daf7a-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see .</span></span>  
  
 <span data-ttu-id="daf7a-111"><xref:System.Text.UTF32Encoding>类表示的 utf-32 编码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-111">The <xref:System.Text.UTF32Encoding> class represents a UTF-32 encoding.</span></span> <span data-ttu-id="daf7a-112">编码器可以使用 big endian 字节顺序 (最高有效字节第一个) 或 little-endian 字节顺序 (最低有效字节第一个)。</span><span class="sxs-lookup"><span data-stu-id="daf7a-112">The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="daf7a-113">例如，A （码位 U + 0041） 序列化为拉丁文大写字母 （十六进制） 如下所示：</span><span class="sxs-lookup"><span data-stu-id="daf7a-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="daf7a-114">Big endian 字节顺序： 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="daf7a-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="daf7a-115">Little-endian 字节顺序： 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="daf7a-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="daf7a-116">它是通常将使用本机字节顺序的 Unicode 字符存储更为有效。</span><span class="sxs-lookup"><span data-stu-id="daf7a-116">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="daf7a-117">例如，则最好在小 endian 平台，如 Intel 计算机上使用 little-endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="daf7a-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="daf7a-118"><xref:System.Text.UTF32Encoding> 对应于 12000 （little-endian 字节顺序） 和 12001 （big endian 字节顺序） 的 Windows 代码页。</span><span class="sxs-lookup"><span data-stu-id="daf7a-118"><xref:System.Text.UTF32Encoding> corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order).</span></span> <span data-ttu-id="daf7a-119">你可以通过调用中确定的特定体系结构的"字节排序方式"<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="daf7a-120">（可选）<xref:System.Text.UTF32Encoding>对象提供字节顺序标记 (BOM)，这是可以作为前缀为的编码的过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-120">Optionally, the <xref:System.Text.UTF32Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="daf7a-121">如果该前导码包含字节顺序标记 (BOM)，它可帮助确定的字节顺序的转换格式或字节数组的 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="daf7a-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.</span></span>  
  
 <span data-ttu-id="daf7a-122">如果<xref:System.Text.UTF32Encoding>实例配置为提供 BOM，你可以通过调用来检索它<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法; 否则，该方法返回空数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-122">If the <xref:System.Text.UTF32Encoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="daf7a-123">请注意，即使<xref:System.Text.UTF32Encoding>对象已配置了 BOM 支持，必须包括根据; 编码的字节流的开头 BOM 编码方法的<xref:System.Text.UTF32Encoding>类执行不自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="daf7a-123">Note that, even if a <xref:System.Text.UTF32Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF32Encoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="daf7a-124">若要启用错误检测并使类实例更加安全，你应实例化<xref:System.Text.UTF32Encoding>对象通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="daf7a-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UTF32Encoding> object by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="daf7a-125">使用错误检测，检测到无效的字符或字节序列的方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-125">With error detection, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="daf7a-126">错误检测，不会引发异常，而无需通常忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="daf7a-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="daf7a-127">可以实例化<xref:System.Text.UTF32Encoding>多种方式，具体取决于是否要向其提供字节顺序标记 (BOM)、 是否需要 big endian 或小 endian 编码，以及是否想要启用错误检测的对象。</span><span class="sxs-lookup"><span data-stu-id="daf7a-127">You can instantiate a <xref:System.Text.UTF32Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="daf7a-128">下表列出<xref:System.Text.UTF32Encoding>构造函数和<xref:System.Text.Encoding>返回的属性<xref:System.Text.UnicodeEncoding>对象。</span><span class="sxs-lookup"><span data-stu-id="daf7a-128">The following table lists the <xref:System.Text.UTF32Encoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="daf7a-129">成员</span><span class="sxs-lookup"><span data-stu-id="daf7a-129">Member</span></span>|<span data-ttu-id="daf7a-130">字节排序方式</span><span class="sxs-lookup"><span data-stu-id="daf7a-130">Endianness</span></span>|<span data-ttu-id="daf7a-131">BOM</span><span class="sxs-lookup"><span data-stu-id="daf7a-131">BOM</span></span>|<span data-ttu-id="daf7a-132">错误检测</span><span class="sxs-lookup"><span data-stu-id="daf7a-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>|<span data-ttu-id="daf7a-133">小 endian</span><span class="sxs-lookup"><span data-stu-id="daf7a-133">Little-endian</span></span>|<span data-ttu-id="daf7a-134">是</span><span class="sxs-lookup"><span data-stu-id="daf7a-134">Yes</span></span>|<span data-ttu-id="daf7a-135">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="daf7a-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="daf7a-136">小 endian</span><span class="sxs-lookup"><span data-stu-id="daf7a-136">Little-endian</span></span>|<span data-ttu-id="daf7a-137">是</span><span class="sxs-lookup"><span data-stu-id="daf7a-137">Yes</span></span>|<span data-ttu-id="daf7a-138">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="daf7a-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="daf7a-139">可配置</span><span class="sxs-lookup"><span data-stu-id="daf7a-139">Configurable</span></span>|<span data-ttu-id="daf7a-140">可配置</span><span class="sxs-lookup"><span data-stu-id="daf7a-140">Configurable</span></span>|<span data-ttu-id="daf7a-141">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="daf7a-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="daf7a-142">可配置</span><span class="sxs-lookup"><span data-stu-id="daf7a-142">Configurable</span></span>|<span data-ttu-id="daf7a-143">可配置</span><span class="sxs-lookup"><span data-stu-id="daf7a-143">Configurable</span></span>|<span data-ttu-id="daf7a-144">可配置</span><span class="sxs-lookup"><span data-stu-id="daf7a-144">Configurable</span></span>|  
  
 <span data-ttu-id="daf7a-145"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法确定将多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.UTF32Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-145">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF32Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="daf7a-146">同样，<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法确定有多少个字符的字节序列进行解码所导致和<xref:System.Text.UTF32Encoding.GetChars%2A>和<xref:System.Text.UTF32Encoding.GetString%2A>方法执行实际的解码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-146">Likewise, the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF32Encoding.GetChars%2A> and <xref:System.Text.UTF32Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="daf7a-147">为编码器或解码器能够保存编码或解码跨多个块 （如在 100,000 字符段中编码的字符串的 100 万个字符） 的数据时的状态信息，请使用<xref:System.Text.UTF32Encoding.GetEncoder%2A>和<xref:System.Text.UTF32Encoding.GetDecoder%2A>属性，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-147">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF32Encoding.GetEncoder%2A> and <xref:System.Text.UTF32Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-148">下面的示例演示的行为<xref:System.Text.UTF32Encoding>具有和没有启用的错误检测的对象。</span><span class="sxs-lookup"><span data-stu-id="daf7a-148">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding> objects with and without error detection enabled.</span></span> <span data-ttu-id="daf7a-149">它创建其最后一个四个字节表示一个无效的代理项对; 一个字节数组高代理项 U + D8FF 跟 U + 01FF，即低代理项 (介于 0xDC00 到 0xDFFF) 的范围之外。</span><span class="sxs-lookup"><span data-stu-id="daf7a-149">It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF).</span></span> <span data-ttu-id="daf7a-150">如果不使用错误检测 UTF32 解码器使用替换回退替换替换字符 (U + FFFD) 无效的代理项对。</span><span class="sxs-lookup"><span data-stu-id="daf7a-150">Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD).</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 <span data-ttu-id="daf7a-151">下面的示例通过使用编码的 Unicode 字符的字符串转换为字节数组<xref:System.Text.UTF32Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="daf7a-151">The following example encodes a string of Unicode characters into a byte array by using a <xref:System.Text.UTF32Encoding> object.</span></span> <span data-ttu-id="daf7a-152">为字符串，以演示无数据丢失则解码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-152">The byte array is then decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/snippet.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/snippet.vb#1)]  
  
 <span data-ttu-id="daf7a-153">下面的示例使用相同的字符串与之前，只不过它将已编码的字节写入文件且前缀字节顺序标记 (BOM) 在字节流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="daf7a-154">它然后两个不同的方式读取文件： 作为通过使用文本文件<xref:System.IO.StreamReader>对象; 和为二进制文件。</span><span class="sxs-lookup"><span data-stu-id="daf7a-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="daf7a-155">如你所料，在任何情况下是物料清单中包含新读取的字符串。</span><span class="sxs-lookup"><span data-stu-id="daf7a-155">As you would expect, in neither case is the BOM included in the newly read string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/bom1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Text.UnicodeEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-156">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-156">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-157">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-157">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-158">此构造函数创建的实例使用 little-endian 字节顺序，提供 Unicode 字节顺序标记，并当检测到无效的编码时，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-158">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-159">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidCharacters`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="daf7a-159">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-160">以下示例检索和显示的字节顺序标记的不同<xref:System.Text.UTF32Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="daf7a-160">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="daf7a-161">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-161">
              <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="daf7a-162">如果为 <see langword="true" />，则指定提供 Unicode 字节顺序标记；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-162">
              <see langword="true" /> to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-163">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-163">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span>
          </span>
          <span data-ttu-id="daf7a-164">参数指定是否使用 Big-Endian 字节顺序以及 <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> 方法是否返回 Unicode Unicode 字节顺序标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-164">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> method returns a Unicode Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-165">此构造函数创建时检测到无效的编码，则不引发异常的实例。</span><span class="sxs-lookup"><span data-stu-id="daf7a-165">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-166">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidCharacters`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="daf7a-166">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-167">以下示例检索和显示的字节顺序标记的不同<xref:System.Text.UTF32Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="daf7a-167">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="daf7a-168">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-168">
              <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="daf7a-169">如果为 <see langword="true" />，则指定提供 Unicode 字节顺序标记；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-169">
              <see langword="true" /> to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidCharacters">
          <span data-ttu-id="daf7a-170">如果为 <see langword="true" />，则指定在检测到无效的编码时应当引发异常；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-170">
              <see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-171">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-171">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span>
          </span>
          <span data-ttu-id="daf7a-172">参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-172">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-173">如果`throwOnInvalidCharacters`是`true`，检测到无效的字节序列的方法引发<xref:System.ArgumentException?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-173">If `throwOnInvalidCharacters` is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="daf7a-174">否则为该方法不会引发异常，并忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="daf7a-174">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-175">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidCharacters`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="daf7a-175">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-176">下面的示例演示的行为<xref:System.Text.UTF32Encoding>，同时使用启用的错误检测和不带。</span><span class="sxs-lookup"><span data-stu-id="daf7a-176">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="daf7a-177">要与当前对象进行比较的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-177">The <see cref="T:System.Object" /> to compare with the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-178">确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UTF32Encoding" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-178">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF32Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-179">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF32Encoding" /> 的一个实例并且等于当前对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-179">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF32Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-180">两个<xref:System.Text.UTF32Encoding>对象可视为相等，如果满足所有以下条件：</span><span class="sxs-lookup"><span data-stu-id="daf7a-180">Two <xref:System.Text.UTF32Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="daf7a-181">这两个对象都使用相同的字节顺序。</span><span class="sxs-lookup"><span data-stu-id="daf7a-181">Both objects use the same byte order.</span></span>  
  
-   <span data-ttu-id="daf7a-182">这两个对象提供的字节顺序标记，或都不。</span><span class="sxs-lookup"><span data-stu-id="daf7a-182">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="daf7a-183">这两个对象都使用相同的编码器回退。</span><span class="sxs-lookup"><span data-stu-id="daf7a-183">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="daf7a-184">这两个对象都使用相同的解码器回退。</span><span class="sxs-lookup"><span data-stu-id="daf7a-184">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-185">下面的示例创建<xref:System.Text.UTF32Encoding>对象使用不同的参数值，然后检查它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="daf7a-185">The following example creates <xref:System.Text.UTF32Encoding> objects using different parameter values and then checks them for equality.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-186">计算对一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-186">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="daf7a-187">包含要编码的字符集的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-187">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-188">计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-188">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-189">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-189">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-190">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-190">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-191">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-191">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-192"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-192">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-193">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-193">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-194">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-194">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-195">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-195">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-196">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-196">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-197">下面的示例调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>和<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法来计算最大和实际的字符串进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-197">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="daf7a-198">它还显示的实际存储字节顺序标记的字节流所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-198">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-199">
            <paramref name="s" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-199">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-200">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-200">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-201">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-201">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-202">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-202">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-203">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-203">-and-</span>
          </span>
          <span data-ttu-id="daf7a-204">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-204">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="daf7a-205">指向第一个要编码的字符的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-205">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="daf7a-206">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-206">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-207">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-207">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-208">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-208">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-209">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-209">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-210">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-210">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="daf7a-211"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-211">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-212">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-212">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-213">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-213">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-214">若要确保正确解码编码的字节也在保存的文件或流时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-214">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-215">字节流的开头插入一个前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-215">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-216">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-216">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-217">
            <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-217">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-218">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-218">-or-</span>
          </span>
          <span data-ttu-id="daf7a-219">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-219">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-220">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-220">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-221">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-221">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-222">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-222">-and-</span>
          </span>
          <span data-ttu-id="daf7a-223">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-223">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="daf7a-224">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-224">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="daf7a-225">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-225">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="daf7a-226">包含要编码的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-226">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="daf7a-227">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-227">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="daf7a-228">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-228">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-229">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-229">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-230">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-230">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-231">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-231">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-232">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-232">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-233"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-233">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-234">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-234">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-235">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-235">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-236">若要确保正确解码编码的字节也在保存的文件或流时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-236">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-237">字节流的开头插入一个前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-237">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-238">下面的示例填充数组与一个拉丁语大写和小写字符和调用<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定需要拉丁文小写字符进行编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-238">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="daf7a-239">然后，它显示此信息，以及所需如果添加字节顺序标记的字节总数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-239">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="daf7a-240">它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，表示所需拉丁文小写字符进行编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="daf7a-240">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="daf7a-241">下面的示例使用来填充数组希腊语和西里尔文字符和调用的组合<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定需要西里尔文的字符进行编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-241">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="daf7a-242">然后，它显示此信息，以及所需如果添加字节顺序标记的字节总数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-242">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="daf7a-243">它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，表示所需西里尔文的字符进行编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="daf7a-243">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-244">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-244">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-245">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-245">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-246">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-246">-or-</span>
          </span>
          <span data-ttu-id="daf7a-247">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-247">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="daf7a-248">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-248">-or-</span>
          </span>
          <span data-ttu-id="daf7a-249">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-249">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-250">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-250">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-251">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-251">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-252">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-252">-and-</span>
          </span>
          <span data-ttu-id="daf7a-253">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-253">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-254">将一组字符编码为一个字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-254">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="daf7a-255">指向第一个要编码的字符的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-255">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="daf7a-256">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-256">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="daf7a-257">一个指针，指向开始写入所产生的字节序列的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-257">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="daf7a-258">最多写入的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-258">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-259">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-259">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-260">在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-260">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-261">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-261">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-262">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-262">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-263"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-263">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-264">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-264">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-265">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-265">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-266">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="daf7a-266">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="daf7a-267">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-267">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-268">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-268">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-269">字节流的开头插入一个前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="daf7a-269">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="daf7a-270"><xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-270">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-271">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-271">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="daf7a-272">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-272">-or-</span>
          </span>
          <span data-ttu-id="daf7a-273">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-273">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-274">
            <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-274">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-275">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-275">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="daf7a-276">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-276">-or-</span>
          </span>
          <span data-ttu-id="daf7a-277">
            <paramref name="byteCount" /> 少于所产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-277">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-278">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-278">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-279">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-279">-and-</span>
          </span>
          <span data-ttu-id="daf7a-280">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-280">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="daf7a-281">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-281">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="daf7a-282">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-282">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="daf7a-283">包含要编码的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-283">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="daf7a-284">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-284">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="daf7a-285">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-285">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="daf7a-286">要包含所产生的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-286">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="daf7a-287">要开始写入所产生的字节序列的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-287">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-288">将指定字符数组中的一组字符编码到指定的字节数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-288">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-289">写入 <paramref name="bytes" /> 的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-289">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-290">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-290">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-291">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-291">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-292"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-292">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-293">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-293">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-294">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-294">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-295">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="daf7a-295">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="daf7a-296">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-296">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-297">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-297">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-298">字节流的开头插入一个前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="daf7a-298">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="daf7a-299"><xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-299">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-300">下面的示例确定所需的字符数组，从三个字符进行编码的字节数，然后对字符进行编码并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="daf7a-300">The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/VB/GetBytes_CharArr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-301">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-301">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="daf7a-302">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-302">-or-</span>
          </span>
          <span data-ttu-id="daf7a-303">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-303">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-304">
            <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-304">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-305">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-305">-or-</span>
          </span>
          <span data-ttu-id="daf7a-306">
            <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-306">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="daf7a-307">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-307">-or-</span>
          </span>
          <span data-ttu-id="daf7a-308">
            <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-308">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-309">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-309">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="daf7a-310">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-310">-or-</span>
          </span>
          <span data-ttu-id="daf7a-311">
            <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-311">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-312">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-312">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-313">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-313">-and-</span>
          </span>
          <span data-ttu-id="daf7a-314">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-314">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="daf7a-315">包含要编码的字符集的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-315">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="daf7a-316">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-316">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="daf7a-317">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-317">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="daf7a-318">要包含所产生的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-318">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="daf7a-319">要开始写入所产生的字节序列的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-319">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-320">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-320">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-321">写入 <paramref name="bytes" /> 的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-321">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-322">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-322">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-323">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-323">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-324"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-324">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-325">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-325">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-326">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-326">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-327">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="daf7a-327">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="daf7a-328">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-328">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-329">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="daf7a-329">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-330">字节流的开头插入一个前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="daf7a-330">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="daf7a-331"><xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="daf7a-331">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-332">下面的示例确定一个字符串进行编码所需的字节数，然后对字符串进行编码并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="daf7a-332">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-333">
            <paramref name="s" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-333">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="daf7a-334">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-334">-or-</span>
          </span>
          <span data-ttu-id="daf7a-335">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-335">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-336">
            <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-336">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-337">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-337">-or-</span>
          </span>
          <span data-ttu-id="daf7a-338">
            <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-338">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="daf7a-339">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-339">-or-</span>
          </span>
          <span data-ttu-id="daf7a-340">
            <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-340">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-341">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-341">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="daf7a-342">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-342">-or-</span>
          </span>
          <span data-ttu-id="daf7a-343">
            <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-343">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-344">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-344">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-345">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-345">-and-</span>
          </span>
          <span data-ttu-id="daf7a-346">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-346">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-347">计算对一个字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-347">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="daf7a-348">指向第一个要解码的字节的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-348">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="daf7a-349">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-349">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-350">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-350">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-351">对指定字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-351">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-352"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>方法来存储所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="daf7a-352"><xref:System.Text.UTF32Encoding.GetCharCount%2A> calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="daf7a-353">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-353">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-354"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-354">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-355">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-355">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-356">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-356">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-357">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-357">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-358">
            <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-358">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-359">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-359">-or-</span>
          </span>
          <span data-ttu-id="daf7a-360">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-360">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-361">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-361">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="daf7a-362">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-362">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-363">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-363">-and-</span>
          </span>
          <span data-ttu-id="daf7a-364">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-364">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="daf7a-365">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-365">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="daf7a-366">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-366">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="daf7a-367">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-367">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="daf7a-368">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-368">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="daf7a-369">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-369">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-370">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-370">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-371">对指定字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-371">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-372"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>方法来存储所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="daf7a-372">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="daf7a-373">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-373">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-374"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-374">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-375">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-375">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-376">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-376">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-377">下面的示例将字符串编码为字节数组，并且然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-377">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-378">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-378">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-379">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-379">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-380">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-380">-or-</span>
          </span>
          <span data-ttu-id="daf7a-381">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-381">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="daf7a-382">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-382">-or-</span>
          </span>
          <span data-ttu-id="daf7a-383">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-383">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-384">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-384">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="daf7a-385">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-385">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-386">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-386">-and-</span>
          </span>
          <span data-ttu-id="daf7a-387">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-387">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-388">将一个字节序列解码为一组字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-388">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="daf7a-389">指向第一个要解码的字节的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-389">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="daf7a-390">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-390">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="daf7a-391">一个指针，指向开始写入所产生的字符集的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-391">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="daf7a-392">要写入的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-392">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-393">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-393">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-394">在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-394">The actual number of characters written at the location indicated by <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-395">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>来存储所产生的字符，调用<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-395">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-396">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-396">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-397"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-397">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-398">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-398">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-399">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-399">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-400">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="daf7a-400">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="daf7a-401">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-401">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="daf7a-402">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="daf7a-402">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="daf7a-403">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-403">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-404">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-404">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="daf7a-405">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-405">-or-</span>
          </span>
          <span data-ttu-id="daf7a-406">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-406">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-407">
            <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-407">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-408">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-408">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="daf7a-409">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-409">-or-</span>
          </span>
          <span data-ttu-id="daf7a-410">
            <paramref name="charCount" /> 少于所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-410">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="daf7a-411">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-411">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-412">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-412">-and-</span>
          </span>
          <span data-ttu-id="daf7a-413">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-413">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="daf7a-414">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-414">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="daf7a-415">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-415">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="daf7a-416">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-416">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="daf7a-417">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-417">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="daf7a-418">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-418">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="daf7a-419">要用于包含所产生的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-419">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="daf7a-420">开始写入所产生的字符集的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-420">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-421">将指定字节数组中的一个字节序列解码为指定的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-421">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-422">写入 <paramref name="chars" /> 的实际字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-422">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-423">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>来存储所产生的字符，调用<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-423">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-424">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-424">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-425"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-425">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-426">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-426">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-427">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-427">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-428">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="daf7a-428">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="daf7a-429">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-429">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="daf7a-430">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="daf7a-430">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="daf7a-431">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-431">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-432">下面的示例将字符串编码为字节数组，并且然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-432">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-433">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-433">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="daf7a-434">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-434">-or-</span>
          </span>
          <span data-ttu-id="daf7a-435">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-435">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-436">
            <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-436">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-437">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-437">-or-</span>
          </span>
          <span data-ttu-id="daf7a-438">
            <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-438">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="daf7a-439">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-439">-or-</span>
          </span>
          <span data-ttu-id="daf7a-440">
            <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-440">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-441">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-441">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="daf7a-442">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-442">-or-</span>
          </span>
          <span data-ttu-id="daf7a-443">
            <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-443">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="daf7a-444">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-444">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-445">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-445">-and-</span>
          </span>
          <span data-ttu-id="daf7a-446">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-446">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-447">获取可以将 UTF-32 编码的字节序列转换为 Unicode 字符序列的解码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-447">Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-448">一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-32 编码的字节序列转换为 Unicode 字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-448">A <see cref="T:System.Text.Decoder" /> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-449"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的块中的字符，方式类似于<xref:System.Text.UTF32Encoding.GetChars%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-449">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF32Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="daf7a-450">但是，<xref:System.Text.Decoder>因此它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="daf7a-450">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="daf7a-451"><xref:System.Text.Decoder>还会保留在数据块的末尾的尾随字节，在下一步的解码操作中使用的尾随字节。</span><span class="sxs-lookup"><span data-stu-id="daf7a-451">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="daf7a-452">因此，<xref:System.Text.UTF32Encoding.GetDecoder%2A>和<xref:System.Text.UTF32Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="daf7a-452">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="daf7a-453">如果启用了错误检测，即`throwOnInvalidCharacters`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Decoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="daf7a-453">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="daf7a-454">如果启用了错误检测，遇到一个无效的序列的解码器状态为未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="daf7a-454">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-455">下面的示例使用了编码器和解码器转换为字节数组编码字符串，然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-455">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-456">获取可将 Unicode 字符序列转换为 UTF-32 编码的字节序列的编码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-456">Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-457">一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-32 编码的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-457">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-458"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的块中的字节，方式类似于<xref:System.Text.UTF32Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-458">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF32Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="daf7a-459">但是，<xref:System.Text.Encoder>以便其可以进行正确编码跨块的字符序列的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="daf7a-459">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="daf7a-460"><xref:System.Text.Encoder>还保留了尾随字符数据块的末尾，并在下一步的编码操作中使用的尾随字符。</span><span class="sxs-lookup"><span data-stu-id="daf7a-460">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="daf7a-461">例如，一个数据块可能结尾不匹配的高代理项，并且匹配的低代理项可能在下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="daf7a-461">For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block.</span></span> <span data-ttu-id="daf7a-462">因此，<xref:System.Text.UTF32Encoding.GetDecoder%2A>和<xref:System.Text.UTF32Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="daf7a-462">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="daf7a-463">如果启用了错误检测，即`throwOnInvalidCharacters`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Encoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="daf7a-463">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="daf7a-464">如果启用了错误检测，并且遇到无效的序列，则编码器的状态为未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="daf7a-464">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-465">下面的示例使用了编码器和解码器转换为字节数组编码字符串，然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-465">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-466">返回当前实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-466">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-467">当前 <see cref="T:System.Text.UTF32Encoding" /> 对象的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-467">The hash code for the current <see cref="T:System.Text.UTF32Encoding" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="daf7a-468">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-468">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-469">计算对指定数目的字符进行编码时产生的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-469">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-470">对指定数目的字符进行编码所产生的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-470">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-471">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-471">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-472">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-472">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="daf7a-473"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-473">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-474"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 是一个最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.EncoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-474"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="daf7a-475">如果有可能很大的字符串中，选择了回退<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>可以返回较大的值。</span><span class="sxs-lookup"><span data-stu-id="daf7a-475">If a fallback is chosen with a potentially large string,  <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="daf7a-476">在大多数情况下，此方法返回用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="daf7a-476">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="daf7a-477">对于大字符串，你可能必须使用非常大的缓冲区和超出的更合理的缓冲区的罕见情况捕捉错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="daf7a-477">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="daf7a-478">你可能还要考虑不同的方法，使用<xref:System.Text.UTF32Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-478">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="daf7a-479"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 关系<xref:System.Text.UTF32Encoding.GetChars%2A>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-479"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetChars%2A>.</span></span> <span data-ttu-id="daf7a-480">如果你需要一个用于与的类似函数<xref:System.Text.UTF32Encoding.GetChars%2A>，使用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-480">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetChars%2A>, use <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-481">`GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="daf7a-481">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-482">下面的示例确定一个字符串进行编码所需的字节数，然后对字符串进行编码并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="daf7a-482">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-483">
            <paramref name="charCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-483">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-484">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-484">-or-</span>
          </span>
          <span data-ttu-id="daf7a-485">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-485">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="daf7a-486">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-486">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-487">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-487">-and-</span>
          </span>
          <span data-ttu-id="daf7a-488">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-488">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="daf7a-489">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-489">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-490">计算对指定数目的字节进行解码时产生的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-490">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-491">对指定数目的字节进行解码时所产生的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-491">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-492">若要计算所需的精确数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>若要存储所产生的字符，则调用<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-492">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-493">若要计算的最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-493">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="daf7a-494"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="daf7a-494">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="daf7a-495"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 是一个最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.DecoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-495"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="daf7a-496">如果有可能很大的字符串中，选择了回退<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>可以返回较大的值。</span><span class="sxs-lookup"><span data-stu-id="daf7a-496">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="daf7a-497">在大多数情况下，此方法返回用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="daf7a-497">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="daf7a-498">对于大字符串，你可能必须使用非常大的缓冲区和超出的更合理的缓冲区的罕见情况捕捉错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="daf7a-498">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="daf7a-499">你可能还要考虑不同的方法，使用<xref:System.Text.UTF32Encoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-499">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="daf7a-500"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 关系<xref:System.Text.UTF32Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-500"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="daf7a-501">如果你需要一个用于与的类似函数<xref:System.Text.UTF32Encoding.GetBytes%2A>，使用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-501">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetBytes%2A>, use <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daf7a-502">`GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="daf7a-502">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-503">下面的示例将字符串编码为字节数组，并且然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-503">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-504">
            <paramref name="byteCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-504">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-505">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-505">-or-</span>
          </span>
          <span data-ttu-id="daf7a-506">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-506">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="daf7a-507">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-507">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-508">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-508">-and-</span>
          </span>
          <span data-ttu-id="daf7a-509">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-509">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="daf7a-510">返回采用 UTF-32 格式编码的 Unicode 字节顺序标记（如果 <see cref="T:System.Text.UTF32Encoding" /> 对象配置为提供一个这样的标记）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-510">Returns a Unicode byte order mark encoded in UTF-32 format, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-511">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UTF32Encoding" /> 对象配置为提供一个这样的字节数组）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-511">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span>
          </span>
          <span data-ttu-id="daf7a-512">否则，此方法返回一个零长度的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-512">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-513"><xref:System.Text.UTF32Encoding>对象可以提供一个前导码，即可以前缀的编码的过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-513">The <xref:System.Text.UTF32Encoding> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="daf7a-514">将一个字节顺序标记 （码位 U + 0000 U + FEFF） 使用的编码字节序列的可帮助确定的字节顺序和转换格式或 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="daf7a-514">Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="daf7a-515">Unicode 字节顺序标记 (BOM) （以十六进制格式），如下所示序列：</span><span class="sxs-lookup"><span data-stu-id="daf7a-515">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="daf7a-516">Big endian 字节顺序： 00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="daf7a-516">Big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="daf7a-517">Little-endian 字节顺序： FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="daf7a-517">Little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="daf7a-518">可以实例化<xref:System.Text.UTF32Encoding>对象，其<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法返回有效 BOM 通过以下方式：</span><span class="sxs-lookup"><span data-stu-id="daf7a-518">You can instantiate a <xref:System.Text.UTF32Encoding> object whose <xref:System.Text.UTF32Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="daf7a-519">通过检索<xref:System.Text.UTF32Encoding>返回对象<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="daf7a-519">By retrieving the <xref:System.Text.UTF32Encoding> object returned by the <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="daf7a-520">通过调用的无参数<xref:System.Text.UTF32Encoding.%23ctor>构造函数实例化<xref:System.Text.UTF32Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="daf7a-520">By calling the parameterless <xref:System.Text.UTF32Encoding.%23ctor> constructor to instantiate a <xref:System.Text.UTF32Encoding> object.</span></span>  
  
-   <span data-ttu-id="daf7a-521">通过提供`true`的值作为`byteOrderMark`参数<xref:System.Text.UTF32Encoding.%23ctor%2A>和<xref:System.Text.UTF32Encoding.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="daf7a-521">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UTF32Encoding.%23ctor%2A> and <xref:System.Text.UTF32Encoding.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="daf7a-522">我们建议你使用 BOM，，因为它提供近乎确定的编码的文件，否则为已失去对引用标识<xref:System.Text.UTF32Encoding>对象，例如，无标记或标记错误的 web 数据或随机文本文件存储时业务没有国际问题或其他数据。</span><span class="sxs-lookup"><span data-stu-id="daf7a-522">We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.UTF32Encoding> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="daf7a-523">通常情况下，如果数据一致且正确的标记，则可能会避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="daf7a-523">Often, user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="daf7a-524">提供编码类型的标准，BOM 是某种程度上冗余的。</span><span class="sxs-lookup"><span data-stu-id="daf7a-524">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="daf7a-525">但是，它可以用于帮助发送正确的编码标头的服务器。</span><span class="sxs-lookup"><span data-stu-id="daf7a-525">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="daf7a-526">或者，它可作为回退以防的编码否则将丢失。</span><span class="sxs-lookup"><span data-stu-id="daf7a-526">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="daf7a-527">有使用 BOM 一些缺点。</span><span class="sxs-lookup"><span data-stu-id="daf7a-527">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="daf7a-528">例如，知道如何限制使用 BOM 的数据库字段可以很困难。</span><span class="sxs-lookup"><span data-stu-id="daf7a-528">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="daf7a-529">串联的文件可以也是个问题，例如，这合并文件时不必要的字符可以得到中间数据的方式。</span><span class="sxs-lookup"><span data-stu-id="daf7a-529">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="daf7a-530">但是，而不考虑几个缺点下, 强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="daf7a-530">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="daf7a-531">字节顺序和字节顺序标记的详细信息，请参阅 Unicode Standard [Unicode 主页](http://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="daf7a-531">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="daf7a-532">若要确保正确解码已编码的字节，应前缀带前导码的编码的字节。</span><span class="sxs-lookup"><span data-stu-id="daf7a-532">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="daf7a-533">请注意，<xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置到编码字节的序列 BOM; 提供的相应字节流的开头 BOM 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="daf7a-533">Note that the <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-534">下面的代码示例检索并显示的字节顺序标记的不同<xref:System.Text.UTF32Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="daf7a-534">The following code example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 <span data-ttu-id="daf7a-535">下面的示例实例化两个<xref:System.Text.UTF32Encoding>对象，其中第一个未提供 BOM 和第二个的不会。</span><span class="sxs-lookup"><span data-stu-id="daf7a-535">The following example instantiates two <xref:System.Text.UTF32Encoding> objects, the first of which does not provide a BOM and the second of which does.</span></span> <span data-ttu-id="daf7a-536">然后，它调用<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法以在编写 UTF 32 编码的字符串之前，向文件写入 BOM。</span><span class="sxs-lookup"><span data-stu-id="daf7a-536">It then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UTF-32-encoded string.</span></span> <span data-ttu-id="daf7a-537">如示例输出所示，从第二个编码器将字节的文件具有四个字节的第一个。</span><span class="sxs-lookup"><span data-stu-id="daf7a-537">As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/getpreamble1.vb#2)]  
  
 <span data-ttu-id="daf7a-538">你还可以通过使用比较文件`fc`命令控制台窗口中，或者您可以检查包括十六进制视图模式的文本编辑器中的文件。</span><span class="sxs-lookup"><span data-stu-id="daf7a-538">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="daf7a-539">请注意，如果在支持 utf-32 编辑器中打开该文件，将不显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="daf7a-539">Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="daf7a-540">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-540">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="daf7a-541">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-541">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="daf7a-542">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-542">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="daf7a-543">将字节数组中某个范围的字节解码为一个字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-543">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="daf7a-544">包含指定字节序列解码结果的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-544">A string that contains the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daf7a-545">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="daf7a-545">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="daf7a-546">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="daf7a-546">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="daf7a-547">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="daf7a-547">If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="daf7a-548">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="daf7a-548">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="daf7a-549">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="daf7a-549">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="daf7a-550">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="daf7a-550">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daf7a-551">下面的示例将字符串编码为字节中 little-endian 的顺序，其中 big endian 顺序其他两个数组数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-551">The following example encodes a string into two arrays arrays of bytes, one in little-endian order and the other in big-endian order.</span></span> <span data-ttu-id="daf7a-552">然后将字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="daf7a-552">It then decodes the bytes back into a string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString.vb#1)]  
  
 <span data-ttu-id="daf7a-553">下面的示例通过调用初始化数组<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法来确定完全字节数和所需的已编码的字符串然后添加字节顺序标记 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="daf7a-553">The following example initializes an array by calling the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="daf7a-554">该示例然后调用<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法以存储到之前调用数组 BOM<xref:System.Text.UTF32Encoding.GetBytes%2A>方法来存储编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="daf7a-554">The example then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF32Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="daf7a-555">该示例然后调用<xref:System.Text.UTF32Encoding.GetString%2A>方法进行解码的字符串。</span><span class="sxs-lookup"><span data-stu-id="daf7a-555">The example then calls the <xref:System.Text.UTF32Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/GetString1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString1.vb#2)]  
  
 <span data-ttu-id="daf7a-556">请注意，在这种情况下已解码的字符串不同于原始字符串，因为它开头 32 位字节顺序标记 U + FFFE U + 0000。</span><span class="sxs-lookup"><span data-stu-id="daf7a-556">Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000.</span></span> <span data-ttu-id="daf7a-557">这意味着两个字符串将比较是不相等，并且，如果字符串为输出，BOM 将显示为替换字符"？"。</span><span class="sxs-lookup"><span data-stu-id="daf7a-557">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="daf7a-558">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-558">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="daf7a-559">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-559">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="daf7a-560">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-560">-or-</span>
          </span>
          <span data-ttu-id="daf7a-561">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-561">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="daf7a-562">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-562">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="daf7a-563">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-563">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span>
          </span>
          <span data-ttu-id="daf7a-564">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-564">-and-</span>
          </span>
          <span data-ttu-id="daf7a-565">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="daf7a-565">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>