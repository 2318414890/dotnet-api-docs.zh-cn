<Type Name="UTF32Encoding" FullName="System.Text.UTF32Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0f047d3b7e414417b38badf4c585451ca50e6cc" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58874717" /></Metadata><TypeSignature Language="C#" Value="public sealed class UTF32Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UTF32Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF32Encoding" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UTF32Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF32Encoding sealed : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF32Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ed0ac-101">表示 Unicode 字符的 UTF-32 编码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-101">Represents a UTF-32 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="ed0ac-103">解码是转换为一系列 Unicode 字符编码字节的序列的过程。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="ed0ac-104">[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)将码位 （数字） 分配给每个受支持的脚本中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-104">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="ed0ac-105">Unicode 转换格式 (UTF) 是一种方法来将码位编码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="ed0ac-106">[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)使用以下 Utf:</span><span class="sxs-lookup"><span data-stu-id="ed0ac-106">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="ed0ac-107">Utf-8，它将每个码位表示为一到四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="ed0ac-108">Utf-16，它将每个码位表示为一到两个 16 位整数的序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="ed0ac-109">UTF-32，它将每个码位表示为一个 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="ed0ac-110">有关 Utf 和其他编码支持的详细信息<xref:System.Text>，请参阅[.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>
  
 <span data-ttu-id="ed0ac-111"><xref:System.Text.UTF32Encoding>类表示的 UTF-32 编码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-111">The <xref:System.Text.UTF32Encoding> class represents a UTF-32 encoding.</span></span> <span data-ttu-id="ed0ac-112">编码器可以使用 big endian 字节顺序 (最高有效字节第一个) 或 little-endian 字节顺序 (最低有效字节第一个)。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-112">The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="ed0ac-113">例如，拉丁文大写字母 （码位 u+0041） 序列化为 （十六进制） 如下所示：</span><span class="sxs-lookup"><span data-stu-id="ed0ac-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="ed0ac-114">Big endian 字节顺序：00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="ed0ac-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="ed0ac-115">Little-endian 字节顺序：41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="ed0ac-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="ed0ac-116">它是通常使用本机字节顺序的 Unicode 字符存储更高效。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-116">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="ed0ac-117">例如，最好在小 endian 平台，如 Intel 的计算机上使用 little-endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <xref:System.Text.UTF32Encoding> <span data-ttu-id="ed0ac-118">对应于 12000 （little-endian 字节顺序） 和 12001 （big endian 字节顺序） 的 Windows 代码页。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-118">corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order).</span></span> <span data-ttu-id="ed0ac-119">您可以通过调用来确定特定体系结构"endianness"<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ed0ac-120">（可选）<xref:System.Text.UTF32Encoding>对象提供字节顺序标记 (BOM)，这是一个可以将作为前缀的编码过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-120">Optionally, the <xref:System.Text.UTF32Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="ed0ac-121">如果该前导码包含字节顺序标记 (BOM)，它可帮助确定的字节顺序转换格式或字节数组的 UTF 的解码器。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.</span></span>  
  
 <span data-ttu-id="ed0ac-122">如果<xref:System.Text.UTF32Encoding>实例配置为提供 BOM，可以通过调用检索<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法; 否则，该方法返回空数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-122">If the <xref:System.Text.UTF32Encoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="ed0ac-123">请注意，即使<xref:System.Text.UTF32Encoding>BOM 支持的配置对象时，必须包含 BOM 将编码的字节流作为相应; 开头的编码方法<xref:System.Text.UTF32Encoding>类执行未自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-123">Note that, even if a <xref:System.Text.UTF32Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF32Encoding> class do not do this automatically.</span></span>  

> [!CAUTION]  
> <span data-ttu-id="ed0ac-124">若要启用错误检测并使类实例更加安全，您应实例化<xref:System.Text.UTF32Encoding>对象通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UTF32Encoding> object by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="ed0ac-125">使用错误检测，检测到无效的字符或字节序列的方法将引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-125">With error detection, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="ed0ac-126">如果没有错误检测，不会引发异常，并通常忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="ed0ac-127">可以实例化<xref:System.Text.UTF32Encoding>中通过多种方式，具体取决于是否要向其提供字节顺序标记 (BOM)、 是否需要 big endian 或 little-endian 编码，以及你是否想要启用的错误检测的对象。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-127">You can instantiate a <xref:System.Text.UTF32Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="ed0ac-128">下表列出<xref:System.Text.UTF32Encoding>构造函数和<xref:System.Text.Encoding>返回的属性<xref:System.Text.UnicodeEncoding>对象。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-128">The following table lists the <xref:System.Text.UTF32Encoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="ed0ac-129">成员</span><span class="sxs-lookup"><span data-stu-id="ed0ac-129">Member</span></span>|<span data-ttu-id="ed0ac-130">字节排序方式</span><span class="sxs-lookup"><span data-stu-id="ed0ac-130">Endianness</span></span>|<span data-ttu-id="ed0ac-131">BOM</span><span class="sxs-lookup"><span data-stu-id="ed0ac-131">BOM</span></span>|<span data-ttu-id="ed0ac-132">错误检测</span><span class="sxs-lookup"><span data-stu-id="ed0ac-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>|<span data-ttu-id="ed0ac-133">小字节序</span><span class="sxs-lookup"><span data-stu-id="ed0ac-133">Little-endian</span></span>|<span data-ttu-id="ed0ac-134">是</span><span class="sxs-lookup"><span data-stu-id="ed0ac-134">Yes</span></span>|<span data-ttu-id="ed0ac-135">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="ed0ac-136">小字节序</span><span class="sxs-lookup"><span data-stu-id="ed0ac-136">Little-endian</span></span>|<span data-ttu-id="ed0ac-137">是</span><span class="sxs-lookup"><span data-stu-id="ed0ac-137">Yes</span></span>|<span data-ttu-id="ed0ac-138">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="ed0ac-139">可配置</span><span class="sxs-lookup"><span data-stu-id="ed0ac-139">Configurable</span></span>|<span data-ttu-id="ed0ac-140">可配置</span><span class="sxs-lookup"><span data-stu-id="ed0ac-140">Configurable</span></span>|<span data-ttu-id="ed0ac-141">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="ed0ac-142">可配置</span><span class="sxs-lookup"><span data-stu-id="ed0ac-142">Configurable</span></span>|<span data-ttu-id="ed0ac-143">可配置</span><span class="sxs-lookup"><span data-stu-id="ed0ac-143">Configurable</span></span>|<span data-ttu-id="ed0ac-144">可配置</span><span class="sxs-lookup"><span data-stu-id="ed0ac-144">Configurable</span></span>|  
  
 <span data-ttu-id="ed0ac-145"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.UTF32Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-145">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF32Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="ed0ac-146">同样，<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码并<xref:System.Text.UTF32Encoding.GetChars%2A>和<xref:System.Text.UTF32Encoding.GetString%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-146">Likewise, the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF32Encoding.GetChars%2A> and <xref:System.Text.UTF32Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="ed0ac-147">为编码器或解码器能够保存编码或解码跨多个块 （如在 100,000-字符的段中编码的字符串的 1 百万个字符） 的数据时的状态信息，请使用<xref:System.Text.UTF32Encoding.GetEncoder%2A>和<xref:System.Text.UTF32Encoding.GetDecoder%2A>属性，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-147">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF32Encoding.GetEncoder%2A> and <xref:System.Text.UTF32Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-148">下面的示例演示的行为<xref:System.Text.UTF32Encoding>对象具有和没有启用的错误检测。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-148">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding> objects with and without error detection enabled.</span></span> <span data-ttu-id="ed0ac-149">它将创建一个字节数组，其最后一个四个字节表示无效的代理项对;高代理项 U + D8FF 跟 U + 01FF，这是低代理项 (介于 0xDC00 到 0xDFFF) 的范围之外。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-149">It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF).</span></span> <span data-ttu-id="ed0ac-150">如果没有错误检测，UTF32 解码器使用替换回退替换替换字符 (U + FFFD) 为无效的代理项对。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-150">Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD).</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 <span data-ttu-id="ed0ac-151">下面的示例将 Unicode 字符的字符串编码为字节数组，通过使用<xref:System.Text.UTF32Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-151">The following example encodes a string of Unicode characters into a byte array by using a <xref:System.Text.UTF32Encoding> object.</span></span> <span data-ttu-id="ed0ac-152">为字符串，以证明不会丢失数据然后解码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-152">The byte array is then decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/snippet.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/snippet.vb#1)]  
  
 <span data-ttu-id="ed0ac-153">下面的示例与上一个使用相同的字符串，只不过它将已编码的字节写入到文件并添加前缀具有字节顺序标记 (BOM) 的字节流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="ed0ac-154">它然后两个不同的方式读取文件： 为通过使用文本文件<xref:System.IO.StreamReader>对象; 和二进制文件。 如您所料，在两种情况下是 BOM 包括在新读取字符串。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="ed0ac-155">如您所料，两个新读取字符串包含 BOM。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-155">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/bom1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Text.UnicodeEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="ed0ac-156">了解编码</span><span class="sxs-lookup"><span data-stu-id="ed0ac-156">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ed0ac-157">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-157">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed0ac-158">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-158">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-159">此构造函数创建一个实例，它使用 little-endian 字节顺序、 提供 Unicode 字节顺序标记，并检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-159">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ed0ac-160">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidCharacters`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-160">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-161">以下示例检索和显示的字节顺序标记的不同<xref:System.Text.UTF32Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-161">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF32Encoding : bool * bool -&gt; System.Text.UTF32Encoding" Usage="new System.Text.UTF32Encoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><see langword="true" /> <span data-ttu-id="ed0ac-162">表示使用大端的字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用小端的字节顺序（从最低有效字节开始）。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-162">to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><see langword="true" /> <span data-ttu-id="ed0ac-163">（如果指定提供 Unicode 字节顺序标记）；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-163">to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ed0ac-164">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-164">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span> <span data-ttu-id="ed0ac-165">参数指定是否使用 Big-Endian 字节顺序以及 <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> 方法是否返回 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-165">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> method returns a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-166">此构造函数创建一个实例，它不会引发异常时检测到无效的编码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-166">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ed0ac-167">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidCharacters`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-167">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
## Examples  
 <span data-ttu-id="ed0ac-168">以下示例检索和显示的字节顺序标记的不同<xref:System.Text.UTF32Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-168">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF32Encoding : bool * bool * bool -&gt; System.Text.UTF32Encoding" Usage="new System.Text.UTF32Encoding (bigEndian, byteOrderMark, throwOnInvalidCharacters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><see langword="true" /> <span data-ttu-id="ed0ac-169">表示使用大端的字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用小端的字节顺序（从最低有效字节开始）。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-169">to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><see langword="true" /> <span data-ttu-id="ed0ac-170">（如果指定提供 Unicode 字节顺序标记）；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-170">to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidCharacters"><see langword="true" /> <span data-ttu-id="ed0ac-171">（如果指定在检测到无效的编码时应当引发异常）；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-171">to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ed0ac-172">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-172">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span> <span data-ttu-id="ed0ac-173">参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-173">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-174">如果`throwOnInvalidCharacters`是`true`，检测到无效的字节序列的方法将引发<xref:System.ArgumentException?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-174">If `throwOnInvalidCharacters` is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ed0ac-175">否则为该方法不会引发异常，并忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-175">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ed0ac-176">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidCharacters`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-176">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>
  
## Examples  
 <span data-ttu-id="ed0ac-177">下面的示例演示的行为<xref:System.Text.UTF32Encoding>，同时启用的错误检测和不带。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-177">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF32Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ed0ac-178">要与当前对象进行比较的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-178">The <see cref="T:System.Object" /> to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="ed0ac-179">确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UTF32Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-179">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF32Encoding" /> object.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="ed0ac-180">（如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF32Encoding" /> 的一个实例并且等于当前对象）；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-180">if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF32Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-181">两个<xref:System.Text.UTF32Encoding>对象是否视作相等，如果满足所有以下条件：</span><span class="sxs-lookup"><span data-stu-id="ed0ac-181">Two <xref:System.Text.UTF32Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="ed0ac-182">这两个对象使用相同的字节顺序。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-182">Both objects use the same byte order.</span></span>  
  
-   <span data-ttu-id="ed0ac-183">这两个对象提供的字节顺序标记，或同时不这样做。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-183">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="ed0ac-184">这两个对象使用相同的编码器回退。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-184">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="ed0ac-185">这两个对象使用相同的解码器回退。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-185">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-186">下面的示例创建<xref:System.Text.UTF32Encoding>对象使用不同的参数值，然后检查它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-186">The following example creates <xref:System.Text.UTF32Encoding> objects using different parameter values and then checks them for equality.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ed0ac-187">计算对一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-187">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF32Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="ed0ac-188">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-188">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-189">计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-189">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-190">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-190">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-191">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-191">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-192">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-192">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-193"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-193">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-194">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-194">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-195">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-195">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-196">若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-196">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-197">在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-197">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-198">下面的示例调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>和<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法来计算最大值和实际的字符串进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-198">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="ed0ac-199">它还显示实际的存储具有字节顺序标记的字节流所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-199">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> <span data-ttu-id="ed0ac-200">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-200">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ed0ac-201">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-201">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-202">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-202">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-203">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-203">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-204">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-204">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-205">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-205">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF32Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="ed0ac-206">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-206">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="ed0ac-207">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-207">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-208">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-208">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-209">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-209">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-210">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-210">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-211">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-211">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="ed0ac-212"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-212">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-213">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-213">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-214">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-214">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-215">若要确保正确解码已编码的字节在保存的文件或流时，可以添加前缀带前导码编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-215">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-216">在字节流的开头插入前导头 (如一系列字节写入到文件开头) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-216">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" /> <span data-ttu-id="ed0ac-217">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-217">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> <span data-ttu-id="ed0ac-218">小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-218">is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-219">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-219">-or-</span></span> 
<span data-ttu-id="ed0ac-220">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-220">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-221">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-221">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-222">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-222">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-223">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-223">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-224">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-224">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ed0ac-225">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-225">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="ed0ac-226">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-226">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF32Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="ed0ac-227">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-227">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="ed0ac-228">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-228">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="ed0ac-229">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-229">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-230">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-230">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-231">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-231">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-232">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-232">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-233">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-233">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-234"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-234">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-235">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-235">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-236">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-236">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-237">若要确保正确解码已编码的字节在保存的文件或流时，可以添加前缀带前导码编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-237">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-238">在字节流的开头插入前导头 (如一系列字节写入到文件开头) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-238">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-239">下面的示例填充数组与拉丁文大写字母和小写字符，以及调用<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以确定需要拉丁文小写字符进行编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-239">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="ed0ac-240">然后，它显示此信息，以及如果添加字节顺序标记所需的字节总数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-240">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="ed0ac-241">它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，它指示所需拉丁文小写字符进行编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-241">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="ed0ac-242">下面的示例使用填充希腊语和西里尔语字符和调用组成的数组<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以确定所需的西里尔语字符编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-242">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="ed0ac-243">然后，它显示此信息，以及如果添加字节顺序标记所需的字节总数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-243">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="ed0ac-244">它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，它指示所需的西里尔语字符编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-244">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" /> <span data-ttu-id="ed0ac-245">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-245">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="ed0ac-246">或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-246">or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-247">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-247">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="ed0ac-248">和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-248">and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="ed0ac-249">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-249">-or-</span></span> 
<span data-ttu-id="ed0ac-250">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-250">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-251">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-251">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-252">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-252">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-253">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-253">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-254">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-254">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ed0ac-255">将一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-255">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF32Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="ed0ac-256">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-256">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="ed0ac-257">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-257">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="ed0ac-258">一个指针，指向开始写入所产生的字节序列的位置。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-258">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="ed0ac-259">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-259">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="ed0ac-260">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-260">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-261">在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-261">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-262">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-262">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-263">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-263">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-264"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-264">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-265">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-265">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-266">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-266">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-267">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-267">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="ed0ac-268">在这种情况下，或如果数据量很大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-268">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ed0ac-269">若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-269">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-270">在字节流的开头插入前导头 (如一系列字节写入到文件开头) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-270">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="ed0ac-271"><xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置码编码字节的序列的开头。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-271">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" /> <span data-ttu-id="ed0ac-272">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-272">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ed0ac-273">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-273">-or-</span></span> 
 <paramref name="bytes" /> <span data-ttu-id="ed0ac-274">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-274">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount" /> <span data-ttu-id="ed0ac-275">或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-275">or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-276">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-276">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="ed0ac-277">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-277">-or-</span></span> 
 <paramref name="byteCount" /> <span data-ttu-id="ed0ac-278">少于所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-278">is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-279">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-279">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-280">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-280">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-281">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-281">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ed0ac-282">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-282">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="ed0ac-283">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-283">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF32Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="ed0ac-284">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-284">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="ed0ac-285">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-285">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="ed0ac-286">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-286">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="ed0ac-287">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-287">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="ed0ac-288">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-288">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="ed0ac-289">将指定字符数组中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-289">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-290">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-290">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-291">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-291">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-292">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-292">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-293"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-293">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-294">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-294">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-295">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-295">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-296">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-296">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="ed0ac-297">在这种情况下，或如果数据量很大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-297">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ed0ac-298">若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-298">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-299">在字节流的开头插入前导头 (如一系列字节写入到文件开头) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-299">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="ed0ac-300"><xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置码编码字节的序列的开头。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-300">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>
  
## Examples  
 <span data-ttu-id="ed0ac-301">下面的示例确定所需的字符数组中的三个字符进行编码的字节数，然后对字符进行编码并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-301">The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/VB/GetBytes_CharArr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" /> <span data-ttu-id="ed0ac-302">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-302">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ed0ac-303">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-303">-or-</span></span> 
 <paramref name="bytes" /> <span data-ttu-id="ed0ac-304">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-304">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex" /> <span data-ttu-id="ed0ac-305">或 <paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-305">or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-306">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-306">-or-</span></span> 
 <paramref name="charIndex" /> <span data-ttu-id="ed0ac-307">和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-307">and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="ed0ac-308">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-308">-or-</span></span> 
 <paramref name="byteIndex" /> <span data-ttu-id="ed0ac-309">不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-309">is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-310">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-310">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="ed0ac-311">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-311">-or-</span></span> 
 <paramref name="bytes" /> <span data-ttu-id="ed0ac-312">没有足够的容量从 <paramref name="byteIndex" /> 到数组结尾来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-312">does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-313">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-313">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-314">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-314">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-315">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-315">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF32Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="ed0ac-316">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-316">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="ed0ac-317">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-317">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="ed0ac-318">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-318">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="ed0ac-319">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-319">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="ed0ac-320">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-320">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="ed0ac-321">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-321">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-322">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-322">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-323">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-323">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-324">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-324">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-325"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-325">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-326">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-326">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-327">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-327">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-328">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-328">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="ed0ac-329">在这种情况下，或如果数据量很大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-329">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ed0ac-330">若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-330">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-331">在字节流的开头插入前导头 (如一系列字节写入到文件开头) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-331">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="ed0ac-332"><xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置码编码字节的序列的开头。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-332">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>
  
## Examples  
 <span data-ttu-id="ed0ac-333">下面的示例确定一个字符串进行编码所需的字节数，然后对字符串进行编码并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-333">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> <span data-ttu-id="ed0ac-334">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-334">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ed0ac-335">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-335">-or-</span></span> 
 <paramref name="bytes" /> <span data-ttu-id="ed0ac-336">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-336">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex" /> <span data-ttu-id="ed0ac-337">或 <paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-337">or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-338">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-338">-or-</span></span> 
 <paramref name="charIndex" /> <span data-ttu-id="ed0ac-339">和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-339">and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="ed0ac-340">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-340">-or-</span></span> 
 <paramref name="byteIndex" /> <span data-ttu-id="ed0ac-341">不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-341">is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-342">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-342">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="ed0ac-343">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-343">-or-</span></span> 
 <paramref name="bytes" /> <span data-ttu-id="ed0ac-344">没有足够的容量从 <paramref name="byteIndex" /> 到数组结尾来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-344">does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-345">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-345">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-346">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-346">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-347">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-347">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ed0ac-348">计算对一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-348">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF32Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="ed0ac-349">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-349">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="ed0ac-350">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-350">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-351">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-351">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-352">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-352">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UTF32Encoding.GetCharCount%2A> <span data-ttu-id="ed0ac-353">计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>方法来存储所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-353">calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="ed0ac-354">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-354">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-355"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-355">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-356">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-356">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-357">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-357">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> <span data-ttu-id="ed0ac-358">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-358">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> <span data-ttu-id="ed0ac-359">小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-359">is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-360">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-360">-or-</span></span> 
<span data-ttu-id="ed0ac-361">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-361">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-362">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-362">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="ed0ac-363">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-363">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-364">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-364">-and-</span></span> 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> <span data-ttu-id="ed0ac-365">设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-365">is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ed0ac-366">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-366">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="ed0ac-367">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-367">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF32Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="ed0ac-368">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-368">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="ed0ac-369">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-369">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="ed0ac-370">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-370">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-371">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-371">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-372">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-372">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-373"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>方法来存储所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-373">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="ed0ac-374">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-374">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-375"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-375">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-376">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-376">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-377">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-377">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-378">下面的示例将字符串编码为一个字节，数组，然后字节解码为一个字符的数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-378">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> <span data-ttu-id="ed0ac-379">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-379">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="ed0ac-380">或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-380">or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-381">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-381">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="ed0ac-382">和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-382">and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="ed0ac-383">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-383">-or-</span></span> 
<span data-ttu-id="ed0ac-384">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-384">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-385">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-385">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="ed0ac-386">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-386">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-387">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-387">-and-</span></span> 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> <span data-ttu-id="ed0ac-388">设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-388">is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ed0ac-389">将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-389">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF32Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="ed0ac-390">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-390">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="ed0ac-391">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-391">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="ed0ac-392">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-392">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="ed0ac-393">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-393">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="ed0ac-394">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-394">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-395">在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-395">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-396">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>若要存储所产生的字符，调用<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-396">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-397">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-397">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-398"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-398">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-399">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-399">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-400">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-400">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-401">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 注意类型的方法已返回的字节数组，此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-401">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="ed0ac-402">您可以通过调用删除它<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-402">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ed0ac-403">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-403">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="ed0ac-404">在这种情况下，或如果数据量很大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-404">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> <span data-ttu-id="ed0ac-405">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-405">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ed0ac-406">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-406">-or-</span></span> 
 <paramref name="chars" /> <span data-ttu-id="ed0ac-407">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-407">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount" /> <span data-ttu-id="ed0ac-408">或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-408">or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-409">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-409">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="ed0ac-410">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-410">-or-</span></span> 
 <paramref name="charCount" /> <span data-ttu-id="ed0ac-411">少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-411">is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="ed0ac-412">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-412">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-413">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-413">-and-</span></span> 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> <span data-ttu-id="ed0ac-414">设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-414">is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ed0ac-415">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-415">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="ed0ac-416">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-416">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF32Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="ed0ac-417">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-417">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="ed0ac-418">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-418">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="ed0ac-419">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-419">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="ed0ac-420">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-420">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="ed0ac-421">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-421">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="ed0ac-422">将指定字节数组中的一个字节序列解码为指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-422">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-423">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-423">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-424">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>若要存储所产生的字符，调用<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-424">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-425">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-425">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-426"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-426">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="ed0ac-427">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-427">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-428">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-428">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-429">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 注意类型的方法已返回的字节数组，此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-429">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="ed0ac-430">您可以通过调用删除它<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-430">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ed0ac-431">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-431">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="ed0ac-432">在这种情况下，或如果数据量很大，因此需要划分为较小的块，该应用程序使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-432">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-433">下面的示例将字符串编码为一个字节，数组，然后字节解码为一个字符的数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-433">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> <span data-ttu-id="ed0ac-434">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-434">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ed0ac-435">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-435">-or-</span></span> 
 <paramref name="chars" /> <span data-ttu-id="ed0ac-436">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-436">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteIndex" /> <span data-ttu-id="ed0ac-437">或 <paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-437">or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-438">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-438">-or-</span></span> 
 <paramref name="byteindex" /> <span data-ttu-id="ed0ac-439">和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-439">and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="ed0ac-440">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-440">-or-</span></span> 
 <paramref name="charIndex" /> <span data-ttu-id="ed0ac-441">不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-441">is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-442">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-442">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="ed0ac-443">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-443">-or-</span></span> 
 <paramref name="chars" /> <span data-ttu-id="ed0ac-444">没有足够的容量从 <paramref name="charIndex" /> 到数组结尾来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-444">does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="ed0ac-445">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-445">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-446">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-446">-and-</span></span> 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> <span data-ttu-id="ed0ac-447">设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-447">is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF32Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed0ac-448">获取可以将 UTF-32 编码的字节序列转换为 Unicode 字符序列的解码器。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-448">Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-449">一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-32 编码的字节序列转换为 Unicode 字符序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-449">A <see cref="T:System.Text.Decoder" /> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-450"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的字符，方式类似于块<xref:System.Text.UTF32Encoding.GetChars%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-450">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF32Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="ed0ac-451">但是，<xref:System.Text.Decoder>以便它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-451">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="ed0ac-452"><xref:System.Text.Decoder>还保留数据块的末尾的尾随字节并将在下一步的解码操作中的尾随字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-452">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="ed0ac-453">因此，<xref:System.Text.UTF32Encoding.GetDecoder%2A>和<xref:System.Text.UTF32Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-453">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="ed0ac-454">如果启用了错误检测，即`throwOnInvalidCharacters`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Decoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-454">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="ed0ac-455">如果启用了错误检测，并且在遇到无效的序列，解码器状态未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-455">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-456">以下示例使用编码器和解码器来将字符串编码为字节数组，然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-456">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="ed0ac-457">了解编码</span><span class="sxs-lookup"><span data-stu-id="ed0ac-457">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF32Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed0ac-458">获取可将 Unicode 字符序列转换为 UTF-32 编码的字节序列的编码器。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-458">Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-459">一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-32 编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-459">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-460"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的字节，方式类似于块<xref:System.Text.UTF32Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-460">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF32Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="ed0ac-461">但是，<xref:System.Text.Encoder>以便它可以正确地对跨块的字符序列进行编码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-461">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="ed0ac-462"><xref:System.Text.Encoder>还保留尾随字符数据块的末尾，并在下一步的编码操作中使用尾随字符。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-462">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="ed0ac-463">例如，数据块可能会结束一个不匹配的高代理项，并与其匹配的低代理项可能在下一个数据块。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-463">For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block.</span></span> <span data-ttu-id="ed0ac-464">因此，<xref:System.Text.UTF32Encoding.GetDecoder%2A>和<xref:System.Text.UTF32Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-464">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="ed0ac-465">如果启用了错误检测，即`throwOnInvalidCharacters`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Encoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-465">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="ed0ac-466">如果启用了错误检测，并且在遇到无效的序列，则编码器的状态未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-466">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-467">以下示例使用编码器和解码器来将字符串编码为字节数组，然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-467">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="ed0ac-468">了解编码</span><span class="sxs-lookup"><span data-stu-id="ed0ac-468">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF32Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed0ac-469">返回当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-469">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-470">当前 <see cref="T:System.Text.UTF32Encoding" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-470">The hash code for the current <see cref="T:System.Text.UTF32Encoding" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF32Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="ed0ac-471">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-471">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-472">计算对指定数目的字符进行编码时产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-472">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-473">对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-473">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-474">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-474">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-475">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-475">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="ed0ac-476"><xref:System.Text.UTF32Encoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-476">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> <span data-ttu-id="ed0ac-477">是最坏的情况的数字，包括当前所选最差情形下<xref:System.Text.EncoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-477">is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="ed0ac-478">如果有可能较大字符串中，选择了回退<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>可以返回较大值。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-478">If a fallback is chosen with a potentially large string,  <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="ed0ac-479">在大多数情况下，此方法返回用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-479">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="ed0ac-480">对于大型字符串，可能需要使用非常大的缓冲区，在极少数的情况下，超过了更合理的缓冲区中捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-480">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="ed0ac-481">可能还要考虑不同的方法，使用<xref:System.Text.UTF32Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-481">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> <span data-ttu-id="ed0ac-482">与没有任何关系<xref:System.Text.UTF32Encoding.GetChars%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-482">has no relationship to <xref:System.Text.UTF32Encoding.GetChars%2A>.</span></span> <span data-ttu-id="ed0ac-483">如果您需要使用具有相似的功能<xref:System.Text.UTF32Encoding.GetChars%2A>，使用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-483">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetChars%2A>, use <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  `GetMaxByteCount(N)` <span data-ttu-id="ed0ac-484">不一定是相同的值`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-484">is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
## Examples  
 <span data-ttu-id="ed0ac-485">下面的示例确定一个字符串进行编码所需的字节数，然后对字符串进行编码并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-485">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount" /> <span data-ttu-id="ed0ac-486">小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-486">is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-487">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-487">-or-</span></span> 
<span data-ttu-id="ed0ac-488">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-488">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="ed0ac-489">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-489">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-490">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-490">-and-</span></span> 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> <span data-ttu-id="ed0ac-491">设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-491">is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF32Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="ed0ac-492">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-492">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-493">计算对指定数目的字节进行解码时产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-493">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-494">对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-494">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-495">若要计算所需的确切的数组大小<xref:System.Text.UTF32Encoding.GetChars%2A>若要存储所产生的字符，则调用<xref:System.Text.UTF32Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-495">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-496">若要计算最大数组大小，请调用<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-496">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="ed0ac-497"><xref:System.Text.UTF32Encoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-497">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> <span data-ttu-id="ed0ac-498">是最坏的情况的数字，包括当前所选最差情形下<xref:System.Text.DecoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-498">is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="ed0ac-499">如果有可能较大字符串中，选择了回退<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>可以返回较大值。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-499">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="ed0ac-500">在大多数情况下，此方法返回用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-500">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="ed0ac-501">对于大型字符串，可能需要使用非常大的缓冲区，在极少数的情况下，超过了更合理的缓冲区中捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-501">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="ed0ac-502">可能还要考虑不同的方法，使用<xref:System.Text.UTF32Encoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-502">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> <span data-ttu-id="ed0ac-503">与没有任何关系<xref:System.Text.UTF32Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-503">has no relationship to <xref:System.Text.UTF32Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="ed0ac-504">如果您需要使用具有相似的功能<xref:System.Text.UTF32Encoding.GetBytes%2A>，使用<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-504">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetBytes%2A>, use <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  `GetMaxCharCount(N)` <span data-ttu-id="ed0ac-505">不一定是相同的值`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-505">is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
## Examples  
 <span data-ttu-id="ed0ac-506">下面的示例将字符串编码为一个字节，数组，然后字节解码为一个字符的数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-506">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount" /> <span data-ttu-id="ed0ac-507">小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-507">is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-508">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-508">-or-</span></span> 
<span data-ttu-id="ed0ac-509">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-509">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="ed0ac-510">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-510">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="ed0ac-511">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-511">-and-</span></span> 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> <span data-ttu-id="ed0ac-512">设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-512">is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF32Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed0ac-513">返回采用 UTF-32 格式编码的 Unicode 字节顺序标记（如果 <see cref="T:System.Text.UTF32Encoding" /> 对象配置为提供一个这样的标记）。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-513">Returns a Unicode byte order mark encoded in UTF-32 format, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-514">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UTF32Encoding" /> 对象配置为提供一个这样的字节数组）。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-514">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span></span> <span data-ttu-id="ed0ac-515">否则，此方法返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-515">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-516"><xref:System.Text.UTF32Encoding>对象可以提供一个前导码，这是一个可以将作为前缀的编码过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-516">The <xref:System.Text.UTF32Encoding> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="ed0ac-517">作为开端字节顺序标记 （码位 U + 0000 U + FEFF） 使用的编码字节的序列可帮助确定的字节顺序和转换格式或 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-517">Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="ed0ac-518">（以十六进制格式），Unicode 字节顺序标记 (BOM) 序列化是按如下所示：</span><span class="sxs-lookup"><span data-stu-id="ed0ac-518">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="ed0ac-519">Big endian 字节顺序：00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="ed0ac-519">Big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="ed0ac-520">Little-endian 字节顺序：FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="ed0ac-520">Little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="ed0ac-521">可以实例化<xref:System.Text.UTF32Encoding>对象，其<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法按以下方式返回有效的 BOM：</span><span class="sxs-lookup"><span data-stu-id="ed0ac-521">You can instantiate a <xref:System.Text.UTF32Encoding> object whose <xref:System.Text.UTF32Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="ed0ac-522">通过检索<xref:System.Text.UTF32Encoding>返回对象<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-522">By retrieving the <xref:System.Text.UTF32Encoding> object returned by the <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="ed0ac-523">通过调用无参数<xref:System.Text.UTF32Encoding.%23ctor>构造函数实例化<xref:System.Text.UTF32Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-523">By calling the parameterless <xref:System.Text.UTF32Encoding.%23ctor> constructor to instantiate a <xref:System.Text.UTF32Encoding> object.</span></span>  
  
-   <span data-ttu-id="ed0ac-524">通过提供`true`的值作为`byteOrderMark`自变量<xref:System.Text.UTF32Encoding.%23ctor%2A>和<xref:System.Text.UTF32Encoding.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-524">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UTF32Encoding.%23ctor%2A> and <xref:System.Text.UTF32Encoding.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="ed0ac-525">我们建议使用 BOM，因为它提供了近乎确定的编码的文件，否则为已失去对引用标识<xref:System.Text.UTF32Encoding>对象，例如，无标记或标记错误的 web 数据，或随机文本文件存储时业务不具备国际问题或其他数据。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-525">We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.UTF32Encoding> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="ed0ac-526">通常情况下，如果数据一致和正确的标记，则可能会避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-526">Often, user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="ed0ac-527">提供编码类型的标准，BOM 是有点多余。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-527">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="ed0ac-528">但是，它可以用于帮助发送正确的编码标头的服务器。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-528">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="ed0ac-529">或者，它可以用作回退的编码是否则丢失的情况下。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-529">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="ed0ac-530">有一些缺点使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-530">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="ed0ac-531">例如，了解如何限制使用 BOM 的数据库字段很难。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-531">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="ed0ac-532">文件串联可以也是个问题，例如，在此类合并的文件时不必要的字符可能出现的中间数据的方式。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-532">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="ed0ac-533">但是，尽管有几个缺点下, 强烈建议使用一个 BOM。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-533">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="ed0ac-534">有关字节顺序和字节顺序标记的详细信息，请参阅 Unicode Standard [Unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-534">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ed0ac-535">若要确保正确解码已编码的字节，应前缀编码后带前导码的字节。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-535">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="ed0ac-536">请注意，<xref:System.Text.UTF32Encoding.GetBytes%2A>方法不预置到编码字节的序列 BOM; 提供相应的字节流的开始处 BOM 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-536">Note that the <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
## Examples  
 <span data-ttu-id="ed0ac-537">下面的代码示例检索并显示的字节顺序标记的不同<xref:System.Text.UTF32Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-537">The following code example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 <span data-ttu-id="ed0ac-538">下面的示例实例化两个<xref:System.Text.UTF32Encoding>对象，其中第一个不提供 BOM，且第二个的作用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-538">The following example instantiates two <xref:System.Text.UTF32Encoding> objects, the first of which does not provide a BOM and the second of which does.</span></span> <span data-ttu-id="ed0ac-539">然后，它调用<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法以向文件写入 UTF-32 编码的字符串之前写入 BOM。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-539">It then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UTF-32-encoded string.</span></span> <span data-ttu-id="ed0ac-540">如示例输出所示，保存第二个编码器中的字节的文件具有四个字节的第一个。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-540">As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/getpreamble1.vb#2)]  
  
 <span data-ttu-id="ed0ac-541">此外可以通过使用比较文件`fc`命令控制台窗口中，或者您可以检查包含十六进制视图模式的文本编辑器中的文件。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-541">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="ed0ac-542">请注意，如果在支持 UTF-32 的编辑器中打开该文件，将不显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-542">Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF32Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="ed0ac-543">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-543">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="ed0ac-544">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-544">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="ed0ac-545">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-545">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="ed0ac-546">将字节数组中某个范围的字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-546">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="ed0ac-547">包含指定字节序列解码结果的字符串。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-547">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed0ac-548">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-548">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ed0ac-549">如果没有错误检测，将忽略无效的序列，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-549">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="ed0ac-550">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 注意类型的方法已返回的字节数组，此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-550">If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="ed0ac-551">您可以通过调用删除它<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-551">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ed0ac-552">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-552">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="ed0ac-553">在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UTF32Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF32Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-553">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed0ac-554">下面的示例将字符串编码为两个字节数组，在 little-endian 顺序和 big endian 顺序中另一个。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-554">The following example encodes a string into two arrays of bytes, one in little-endian order and the other in big-endian order.</span></span> <span data-ttu-id="ed0ac-555">然后将字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-555">It then decodes the bytes back into a string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString.vb#1)]  
  
 <span data-ttu-id="ed0ac-556">下面的示例通过调用初始化数组<xref:System.Text.UTF32Encoding.GetByteCount%2A>方法来确定完全多少个字节所需的已编码的字符串，然后添加字节顺序标记 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-556">The following example initializes an array by calling the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="ed0ac-557">该示例然后调用<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法来存储到之前调用数组 BOM<xref:System.Text.UTF32Encoding.GetBytes%2A>方法来存储已编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-557">The example then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF32Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="ed0ac-558">该示例然后调用<xref:System.Text.UTF32Encoding.GetString%2A>方法解码字符串。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-558">The example then calls the <xref:System.Text.UTF32Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/GetString1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString1.vb#2)]  
  
 <span data-ttu-id="ed0ac-559">请注意，在这种情况下已解码的字符串与不同的原始字符串，因为它开始于 32 位字节顺序标记 U + FFFE u+0000。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-559">Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000.</span></span> <span data-ttu-id="ed0ac-560">这意味着两个字符串将比较为不等，并且，如果字符串为输出，BOM 将显示为替换字符"？"。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-560">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> <span data-ttu-id="ed0ac-561">为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-561">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="ed0ac-562">或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-562">or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="ed0ac-563">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ed0ac-563">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="ed0ac-564">和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-564">and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ed0ac-565">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-565">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="ed0ac-566">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="ed0ac-566">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span></span> 
<span data-ttu-id="ed0ac-567">－和－</span><span class="sxs-lookup"><span data-stu-id="ed0ac-567">-and-</span></span> 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> <span data-ttu-id="ed0ac-568">设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="ed0ac-568">is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>