<Type Name="Encoding" FullName="System.Text.Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7073924d86a171ef09dde8b1f05e080aea46121f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755875" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Encoding : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Encoding extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Encoding" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Encoding&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Encoding abstract : ICloneable" />
  <TypeSignature Language="F#" Value="type Encoding = class&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e15dc-101">Represents a character encoding.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e15dc-101">Represents a character encoding.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="e15dc-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="e15dc-103">与此相反，解码是转换为一系列 Unicode 字符编码字节的序列的过程。</span><span class="sxs-lookup"><span data-stu-id="e15dc-103">In contrast, decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span> <span data-ttu-id="e15dc-104">有关 Unicode 转换格式 (Utf) 和支持的其他编码信息<xref:System.Text.Encoding>，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-104">For information about the Unicode Transformation Formats (UTFs) and other encodings supported by <xref:System.Text.Encoding>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="e15dc-105">请注意，<xref:System.Text.Encoding>旨在对 Unicode 字符，而不是任意的二进制数据，如字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-105">Note that <xref:System.Text.Encoding> is intended to operate on Unicode characters instead of arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="e15dc-106">如果必须将任意二进制数据编码为文本，则应使用协议如 uuencode，实现方法如<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-106">If you must encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-107">.NET Framework 提供的以下实现<xref:System.Text.Encoding>类，以支持当前的 Unicode 编码和其他编码：</span><span class="sxs-lookup"><span data-stu-id="e15dc-107">The .NET Framework provides the following implementations of the <xref:System.Text.Encoding> class to support current Unicode encodings and other encodings:</span></span>  
  
-   <span data-ttu-id="e15dc-108"><xref:System.Text.ASCIIEncoding> 将 Unicode 字符编码为单个 7 位 ASCII 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-108"><xref:System.Text.ASCIIEncoding> encodes Unicode characters as single 7-bit ASCII characters.</span></span> <span data-ttu-id="e15dc-109">此编码仅支持之间的字符值 0000 和 U + 007F。</span><span class="sxs-lookup"><span data-stu-id="e15dc-109">This encoding only supports character values between U+0000 and U+007F.</span></span> <span data-ttu-id="e15dc-110">代码页 20127。</span><span class="sxs-lookup"><span data-stu-id="e15dc-110">Code page 20127.</span></span> <span data-ttu-id="e15dc-111">也可通过<xref:System.Text.Encoding.ASCII%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-111">Also available through the <xref:System.Text.Encoding.ASCII%2A> property.</span></span>  
  
-   <span data-ttu-id="e15dc-112"><xref:System.Text.UTF7Encoding> 将使用 utf-7 编码的 Unicode 字符编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-112"><xref:System.Text.UTF7Encoding> encodes Unicode characters using the UTF-7 encoding.</span></span> <span data-ttu-id="e15dc-113">此编码支持所有 Unicode 字符值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-113">This encoding supports all Unicode character values.</span></span> <span data-ttu-id="e15dc-114">代码页 65000。</span><span class="sxs-lookup"><span data-stu-id="e15dc-114">Code page 65000.</span></span> <span data-ttu-id="e15dc-115">也可通过<xref:System.Text.Encoding.UTF7%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-115">Also available through the <xref:System.Text.Encoding.UTF7%2A> property.</span></span>  
  
-   <span data-ttu-id="e15dc-116"><xref:System.Text.UTF8Encoding> 将使用 utf-8 编码的 Unicode 字符编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-116"><xref:System.Text.UTF8Encoding> encodes Unicode characters using the UTF-8 encoding.</span></span> <span data-ttu-id="e15dc-117">此编码支持所有 Unicode 字符值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-117">This encoding supports all Unicode character values.</span></span> <span data-ttu-id="e15dc-118">代码页 65001。</span><span class="sxs-lookup"><span data-stu-id="e15dc-118">Code page 65001.</span></span> <span data-ttu-id="e15dc-119">也可通过<xref:System.Text.Encoding.UTF8%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-119">Also available through the <xref:System.Text.Encoding.UTF8%2A> property.</span></span>  
  
-   <span data-ttu-id="e15dc-120"><xref:System.Text.UnicodeEncoding> 将使用 utf-16 编码的 Unicode 字符编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-120"><xref:System.Text.UnicodeEncoding> encodes Unicode characters using the UTF-16 encoding.</span></span> <span data-ttu-id="e15dc-121">支持这两个 little endian 和大 endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-121">Both little endian and big endian byte orders are supported.</span></span> <span data-ttu-id="e15dc-122">也可通过<xref:System.Text.Encoding.Unicode%2A>属性和<xref:System.Text.Encoding.BigEndianUnicode%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-122">Also available through the <xref:System.Text.Encoding.Unicode%2A> property and the <xref:System.Text.Encoding.BigEndianUnicode%2A> property.</span></span>  
  
-   <span data-ttu-id="e15dc-123"><xref:System.Text.UTF32Encoding> 将使用 UTF-32 编码的 Unicode 字符编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-123"><xref:System.Text.UTF32Encoding> encodes Unicode characters using the UTF-32 encoding.</span></span> <span data-ttu-id="e15dc-124">同时小 endian （代码页 12000） 和大端 （代码页 12001） 字节支持顺序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-124">Both little endian (code page 12000) and big endian (code page 12001) byte orders are supported.</span></span> <span data-ttu-id="e15dc-125">也可通过<xref:System.Text.Encoding.UTF32%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-125">Also available through the <xref:System.Text.Encoding.UTF32%2A> property.</span></span>  
  
 <span data-ttu-id="e15dc-126"><xref:System.Text.Encoding>类主要用于不同的编码与 Unicode 之间转换。</span><span class="sxs-lookup"><span data-stu-id="e15dc-126">The <xref:System.Text.Encoding> class is primarily intended to convert between different encodings and Unicode.</span></span> <span data-ttu-id="e15dc-127">通常派生的 Unicode 类之一是您的应用程序的正确选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-127">Often one of the derived Unicode classes is the correct choice for your app.</span></span>  
  
 <span data-ttu-id="e15dc-128">使用<xref:System.Text.Encoding.GetEncoding%2A>方法来获取其他编码，并调用<xref:System.Text.Encoding.GetEncodings%2A>方法以获取所有编码的列表。</span><span class="sxs-lookup"><span data-stu-id="e15dc-128">Use the <xref:System.Text.Encoding.GetEncoding%2A> method to obtain other encodings, and call the <xref:System.Text.Encoding.GetEncodings%2A> method to get a list of all encodings.</span></span>  
  
 <span data-ttu-id="e15dc-129">下表列出了由.NET Framework 支持的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-129">The following table lists the encodings supported by the .NET Framework.</span></span> <span data-ttu-id="e15dc-130">它列出了每个编码的代码页编号和编码的值<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>和<xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-130">It lists each encoding's code page number and the values of the encoding's <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> and <xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="e15dc-131">最后一列中的星号表示.NET Framework 中，而不考虑基础平台本身就支持代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-131">An asterisk in the last column indicates that the code page is natively supported by the .NET Framework, regardless of the underlying platform.</span></span> <span data-ttu-id="e15dc-132">请注意代码页的<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>属性对应于一种国际标准不一定符合该标准填满中。</span><span class="sxs-lookup"><span data-stu-id="e15dc-132">Note that code pages whose <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> property corresponds to an international standard do not necessarily comply in full with that standard.</span></span>  
  
|<span data-ttu-id="e15dc-133">代码页</span><span class="sxs-lookup"><span data-stu-id="e15dc-133">Code page</span></span>|<span data-ttu-id="e15dc-134">name</span><span class="sxs-lookup"><span data-stu-id="e15dc-134">Name</span></span>|<span data-ttu-id="e15dc-135">显示名称</span><span class="sxs-lookup"><span data-stu-id="e15dc-135">Display name</span></span>|<span data-ttu-id="e15dc-136">.NET framework 的支持</span><span class="sxs-lookup"><span data-stu-id="e15dc-136">.NET Framework support</span></span>|  
|---------------|----------|------------------|----------------------------|  
|<span data-ttu-id="e15dc-137">37</span><span class="sxs-lookup"><span data-stu-id="e15dc-137">37</span></span>|<span data-ttu-id="e15dc-138">IBM037</span><span class="sxs-lookup"><span data-stu-id="e15dc-138">IBM037</span></span>|<span data-ttu-id="e15dc-139">IBM EBCDIC （美国-加拿大）</span><span class="sxs-lookup"><span data-stu-id="e15dc-139">IBM EBCDIC (US-Canada)</span></span>||  
|<span data-ttu-id="e15dc-140">437</span><span class="sxs-lookup"><span data-stu-id="e15dc-140">437</span></span>|<span data-ttu-id="e15dc-141">IBM437</span><span class="sxs-lookup"><span data-stu-id="e15dc-141">IBM437</span></span>|<span data-ttu-id="e15dc-142">OEM 美国</span><span class="sxs-lookup"><span data-stu-id="e15dc-142">OEM United States</span></span>||  
|<span data-ttu-id="e15dc-143">500</span><span class="sxs-lookup"><span data-stu-id="e15dc-143">500</span></span>|<span data-ttu-id="e15dc-144">IBM500</span><span class="sxs-lookup"><span data-stu-id="e15dc-144">IBM500</span></span>|<span data-ttu-id="e15dc-145">IBM EBCDIC （国际）</span><span class="sxs-lookup"><span data-stu-id="e15dc-145">IBM EBCDIC (International)</span></span>||  
|<span data-ttu-id="e15dc-146">708</span><span class="sxs-lookup"><span data-stu-id="e15dc-146">708</span></span>|<span data-ttu-id="e15dc-147">ASMO-708</span><span class="sxs-lookup"><span data-stu-id="e15dc-147">ASMO-708</span></span>|<span data-ttu-id="e15dc-148">阿拉伯语 (ASMO 708)</span><span class="sxs-lookup"><span data-stu-id="e15dc-148">Arabic (ASMO 708)</span></span>||  
|<span data-ttu-id="e15dc-149">720</span><span class="sxs-lookup"><span data-stu-id="e15dc-149">720</span></span>|<span data-ttu-id="e15dc-150">DOS-720</span><span class="sxs-lookup"><span data-stu-id="e15dc-150">DOS-720</span></span>|<span data-ttu-id="e15dc-151">阿拉伯语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-151">Arabic (DOS)</span></span>||  
|<span data-ttu-id="e15dc-152">737</span><span class="sxs-lookup"><span data-stu-id="e15dc-152">737</span></span>|<span data-ttu-id="e15dc-153">ibm737</span><span class="sxs-lookup"><span data-stu-id="e15dc-153">ibm737</span></span>|<span data-ttu-id="e15dc-154">希腊语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-154">Greek (DOS)</span></span>||  
|<span data-ttu-id="e15dc-155">775</span><span class="sxs-lookup"><span data-stu-id="e15dc-155">775</span></span>|<span data-ttu-id="e15dc-156">ibm775</span><span class="sxs-lookup"><span data-stu-id="e15dc-156">ibm775</span></span>|<span data-ttu-id="e15dc-157">波罗的语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-157">Baltic (DOS)</span></span>||  
|<span data-ttu-id="e15dc-158">850</span><span class="sxs-lookup"><span data-stu-id="e15dc-158">850</span></span>|<span data-ttu-id="e15dc-159">ibm850</span><span class="sxs-lookup"><span data-stu-id="e15dc-159">ibm850</span></span>|<span data-ttu-id="e15dc-160">西欧语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-160">Western European (DOS)</span></span>||  
|<span data-ttu-id="e15dc-161">852</span><span class="sxs-lookup"><span data-stu-id="e15dc-161">852</span></span>|<span data-ttu-id="e15dc-162">ibm852</span><span class="sxs-lookup"><span data-stu-id="e15dc-162">ibm852</span></span>|<span data-ttu-id="e15dc-163">中欧 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-163">Central European (DOS)</span></span>||  
|<span data-ttu-id="e15dc-164">855</span><span class="sxs-lookup"><span data-stu-id="e15dc-164">855</span></span>|<span data-ttu-id="e15dc-165">IBM855</span><span class="sxs-lookup"><span data-stu-id="e15dc-165">IBM855</span></span>|<span data-ttu-id="e15dc-166">OEM 西里尔文</span><span class="sxs-lookup"><span data-stu-id="e15dc-166">OEM Cyrillic</span></span>||  
|<span data-ttu-id="e15dc-167">857</span><span class="sxs-lookup"><span data-stu-id="e15dc-167">857</span></span>|<span data-ttu-id="e15dc-168">ibm857</span><span class="sxs-lookup"><span data-stu-id="e15dc-168">ibm857</span></span>|<span data-ttu-id="e15dc-169">土耳其语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-169">Turkish (DOS)</span></span>||  
|<span data-ttu-id="e15dc-170">858</span><span class="sxs-lookup"><span data-stu-id="e15dc-170">858</span></span>|<span data-ttu-id="e15dc-171">IBM00858</span><span class="sxs-lookup"><span data-stu-id="e15dc-171">IBM00858</span></span>|<span data-ttu-id="e15dc-172">OEM 多语言拉丁语 I</span><span class="sxs-lookup"><span data-stu-id="e15dc-172">OEM Multilingual Latin I</span></span>||  
|<span data-ttu-id="e15dc-173">860</span><span class="sxs-lookup"><span data-stu-id="e15dc-173">860</span></span>|<span data-ttu-id="e15dc-174">IBM860</span><span class="sxs-lookup"><span data-stu-id="e15dc-174">IBM860</span></span>|<span data-ttu-id="e15dc-175">葡萄牙语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-175">Portuguese (DOS)</span></span>||  
|<span data-ttu-id="e15dc-176">861</span><span class="sxs-lookup"><span data-stu-id="e15dc-176">861</span></span>|<span data-ttu-id="e15dc-177">ibm861</span><span class="sxs-lookup"><span data-stu-id="e15dc-177">ibm861</span></span>|<span data-ttu-id="e15dc-178">冰岛语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-178">Icelandic (DOS)</span></span>||  
|<span data-ttu-id="e15dc-179">862</span><span class="sxs-lookup"><span data-stu-id="e15dc-179">862</span></span>|<span data-ttu-id="e15dc-180">DOS-862</span><span class="sxs-lookup"><span data-stu-id="e15dc-180">DOS-862</span></span>|<span data-ttu-id="e15dc-181">希伯来语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-181">Hebrew (DOS)</span></span>||  
|<span data-ttu-id="e15dc-182">863</span><span class="sxs-lookup"><span data-stu-id="e15dc-182">863</span></span>|<span data-ttu-id="e15dc-183">IBM863</span><span class="sxs-lookup"><span data-stu-id="e15dc-183">IBM863</span></span>|<span data-ttu-id="e15dc-184">加拿大法语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-184">French Canadian (DOS)</span></span>||  
|<span data-ttu-id="e15dc-185">864</span><span class="sxs-lookup"><span data-stu-id="e15dc-185">864</span></span>|<span data-ttu-id="e15dc-186">IBM864</span><span class="sxs-lookup"><span data-stu-id="e15dc-186">IBM864</span></span>|<span data-ttu-id="e15dc-187">阿拉伯语 (864)</span><span class="sxs-lookup"><span data-stu-id="e15dc-187">Arabic (864)</span></span>||  
|<span data-ttu-id="e15dc-188">865</span><span class="sxs-lookup"><span data-stu-id="e15dc-188">865</span></span>|<span data-ttu-id="e15dc-189">IBM865</span><span class="sxs-lookup"><span data-stu-id="e15dc-189">IBM865</span></span>|<span data-ttu-id="e15dc-190">日耳曼语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-190">Nordic (DOS)</span></span>||  
|<span data-ttu-id="e15dc-191">866</span><span class="sxs-lookup"><span data-stu-id="e15dc-191">866</span></span>|<span data-ttu-id="e15dc-192">cp866</span><span class="sxs-lookup"><span data-stu-id="e15dc-192">cp866</span></span>|<span data-ttu-id="e15dc-193">西里尔语 (DOS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-193">Cyrillic (DOS)</span></span>||  
|<span data-ttu-id="e15dc-194">869</span><span class="sxs-lookup"><span data-stu-id="e15dc-194">869</span></span>|<span data-ttu-id="e15dc-195">ibm869</span><span class="sxs-lookup"><span data-stu-id="e15dc-195">ibm869</span></span>|<span data-ttu-id="e15dc-196">(DOS) 现代希腊语</span><span class="sxs-lookup"><span data-stu-id="e15dc-196">Greek, Modern (DOS)</span></span>||  
|<span data-ttu-id="e15dc-197">870</span><span class="sxs-lookup"><span data-stu-id="e15dc-197">870</span></span>|<span data-ttu-id="e15dc-198">IBM870</span><span class="sxs-lookup"><span data-stu-id="e15dc-198">IBM870</span></span>|<span data-ttu-id="e15dc-199">IBM EBCDIC (多语言拉丁语-2)</span><span class="sxs-lookup"><span data-stu-id="e15dc-199">IBM EBCDIC (Multilingual Latin-2)</span></span>||  
|<span data-ttu-id="e15dc-200">874</span><span class="sxs-lookup"><span data-stu-id="e15dc-200">874</span></span>|<span data-ttu-id="e15dc-201">windows-874</span><span class="sxs-lookup"><span data-stu-id="e15dc-201">windows-874</span></span>|<span data-ttu-id="e15dc-202">泰语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-202">Thai (Windows)</span></span>||  
|<span data-ttu-id="e15dc-203">875</span><span class="sxs-lookup"><span data-stu-id="e15dc-203">875</span></span>|<span data-ttu-id="e15dc-204">cp875</span><span class="sxs-lookup"><span data-stu-id="e15dc-204">cp875</span></span>|<span data-ttu-id="e15dc-205">IBM EBCDIC （现代希腊语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-205">IBM EBCDIC (Greek Modern)</span></span>||  
|<span data-ttu-id="e15dc-206">932</span><span class="sxs-lookup"><span data-stu-id="e15dc-206">932</span></span>|<span data-ttu-id="e15dc-207">shift_jis</span><span class="sxs-lookup"><span data-stu-id="e15dc-207">shift_jis</span></span>|<span data-ttu-id="e15dc-208">日语 (JIS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-208">Japanese (Shift-JIS)</span></span>||  
|<span data-ttu-id="e15dc-209">936</span><span class="sxs-lookup"><span data-stu-id="e15dc-209">936</span></span>|<span data-ttu-id="e15dc-210">gb2312</span><span class="sxs-lookup"><span data-stu-id="e15dc-210">gb2312</span></span>|<span data-ttu-id="e15dc-211">简体中文 (GB2312)</span><span class="sxs-lookup"><span data-stu-id="e15dc-211">Chinese Simplified (GB2312)</span></span>|<span data-ttu-id="e15dc-212">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-212">✓</span></span>|  
|<span data-ttu-id="e15dc-213">949</span><span class="sxs-lookup"><span data-stu-id="e15dc-213">949</span></span>|<span data-ttu-id="e15dc-214">ks_c_5601-1987</span><span class="sxs-lookup"><span data-stu-id="e15dc-214">ks_c_5601-1987</span></span>|<span data-ttu-id="e15dc-215">朝鲜语</span><span class="sxs-lookup"><span data-stu-id="e15dc-215">Korean</span></span>||  
|<span data-ttu-id="e15dc-216">950</span><span class="sxs-lookup"><span data-stu-id="e15dc-216">950</span></span>|<span data-ttu-id="e15dc-217">big5</span><span class="sxs-lookup"><span data-stu-id="e15dc-217">big5</span></span>|<span data-ttu-id="e15dc-218">繁体中文 (Big5)</span><span class="sxs-lookup"><span data-stu-id="e15dc-218">Chinese Traditional (Big5)</span></span>||  
|<span data-ttu-id="e15dc-219">1026</span><span class="sxs-lookup"><span data-stu-id="e15dc-219">1026</span></span>|<span data-ttu-id="e15dc-220">IBM1026</span><span class="sxs-lookup"><span data-stu-id="e15dc-220">IBM1026</span></span>|<span data-ttu-id="e15dc-221">IBM EBCDIC (土耳其语拉丁语-5)</span><span class="sxs-lookup"><span data-stu-id="e15dc-221">IBM EBCDIC (Turkish Latin-5)</span></span>||  
|<span data-ttu-id="e15dc-222">1047</span><span class="sxs-lookup"><span data-stu-id="e15dc-222">1047</span></span>|<span data-ttu-id="e15dc-223">IBM01047</span><span class="sxs-lookup"><span data-stu-id="e15dc-223">IBM01047</span></span>|<span data-ttu-id="e15dc-224">IBM Latin 1</span><span class="sxs-lookup"><span data-stu-id="e15dc-224">IBM Latin-1</span></span>||  
|<span data-ttu-id="e15dc-225">1140</span><span class="sxs-lookup"><span data-stu-id="e15dc-225">1140</span></span>|<span data-ttu-id="e15dc-226">IBM01140</span><span class="sxs-lookup"><span data-stu-id="e15dc-226">IBM01140</span></span>|<span data-ttu-id="e15dc-227">IBM EBCDIC （美国-加拿大-欧洲）</span><span class="sxs-lookup"><span data-stu-id="e15dc-227">IBM EBCDIC (US-Canada-Euro)</span></span>||  
|<span data-ttu-id="e15dc-228">1141</span><span class="sxs-lookup"><span data-stu-id="e15dc-228">1141</span></span>|<span data-ttu-id="e15dc-229">IBM01141</span><span class="sxs-lookup"><span data-stu-id="e15dc-229">IBM01141</span></span>|<span data-ttu-id="e15dc-230">IBM EBCDIC (德国-Euro)</span><span class="sxs-lookup"><span data-stu-id="e15dc-230">IBM EBCDIC (Germany-Euro)</span></span>||  
|<span data-ttu-id="e15dc-231">1142</span><span class="sxs-lookup"><span data-stu-id="e15dc-231">1142</span></span>|<span data-ttu-id="e15dc-232">IBM01142</span><span class="sxs-lookup"><span data-stu-id="e15dc-232">IBM01142</span></span>|<span data-ttu-id="e15dc-233">IBM EBCDIC （丹麦-挪威-欧洲）</span><span class="sxs-lookup"><span data-stu-id="e15dc-233">IBM EBCDIC (Denmark-Norway-Euro)</span></span>||  
|<span data-ttu-id="e15dc-234">1143</span><span class="sxs-lookup"><span data-stu-id="e15dc-234">1143</span></span>|<span data-ttu-id="e15dc-235">IBM01143</span><span class="sxs-lookup"><span data-stu-id="e15dc-235">IBM01143</span></span>|<span data-ttu-id="e15dc-236">IBM EBCDIC （芬兰-瑞典-欧洲）</span><span class="sxs-lookup"><span data-stu-id="e15dc-236">IBM EBCDIC (Finland-Sweden-Euro)</span></span>||  
|<span data-ttu-id="e15dc-237">1144</span><span class="sxs-lookup"><span data-stu-id="e15dc-237">1144</span></span>|<span data-ttu-id="e15dc-238">IBM01144</span><span class="sxs-lookup"><span data-stu-id="e15dc-238">IBM01144</span></span>|<span data-ttu-id="e15dc-239">IBM EBCDIC （意大利-欧洲）</span><span class="sxs-lookup"><span data-stu-id="e15dc-239">IBM EBCDIC (Italy-Euro)</span></span>||  
|<span data-ttu-id="e15dc-240">1145</span><span class="sxs-lookup"><span data-stu-id="e15dc-240">1145</span></span>|<span data-ttu-id="e15dc-241">IBM01145</span><span class="sxs-lookup"><span data-stu-id="e15dc-241">IBM01145</span></span>|<span data-ttu-id="e15dc-242">IBM EBCDIC (西班牙-Euro)</span><span class="sxs-lookup"><span data-stu-id="e15dc-242">IBM EBCDIC (Spain-Euro)</span></span>||  
|<span data-ttu-id="e15dc-243">1146</span><span class="sxs-lookup"><span data-stu-id="e15dc-243">1146</span></span>|<span data-ttu-id="e15dc-244">IBM01146</span><span class="sxs-lookup"><span data-stu-id="e15dc-244">IBM01146</span></span>|<span data-ttu-id="e15dc-245">IBM EBCDIC （英国-欧洲）</span><span class="sxs-lookup"><span data-stu-id="e15dc-245">IBM EBCDIC (UK-Euro)</span></span>||  
|<span data-ttu-id="e15dc-246">1147</span><span class="sxs-lookup"><span data-stu-id="e15dc-246">1147</span></span>|<span data-ttu-id="e15dc-247">IBM01147</span><span class="sxs-lookup"><span data-stu-id="e15dc-247">IBM01147</span></span>|<span data-ttu-id="e15dc-248">IBM EBCDIC (法国-Euro)</span><span class="sxs-lookup"><span data-stu-id="e15dc-248">IBM EBCDIC (France-Euro)</span></span>||  
|<span data-ttu-id="e15dc-249">1148</span><span class="sxs-lookup"><span data-stu-id="e15dc-249">1148</span></span>|<span data-ttu-id="e15dc-250">IBM01148</span><span class="sxs-lookup"><span data-stu-id="e15dc-250">IBM01148</span></span>|<span data-ttu-id="e15dc-251">IBM EBCDIC （国际-欧洲）</span><span class="sxs-lookup"><span data-stu-id="e15dc-251">IBM EBCDIC (International-Euro)</span></span>||  
|<span data-ttu-id="e15dc-252">1149</span><span class="sxs-lookup"><span data-stu-id="e15dc-252">1149</span></span>|<span data-ttu-id="e15dc-253">IBM01149</span><span class="sxs-lookup"><span data-stu-id="e15dc-253">IBM01149</span></span>|<span data-ttu-id="e15dc-254">IBM EBCDIC (冰岛语-Euro)</span><span class="sxs-lookup"><span data-stu-id="e15dc-254">IBM EBCDIC (Icelandic-Euro)</span></span>||  
|<span data-ttu-id="e15dc-255">1200</span><span class="sxs-lookup"><span data-stu-id="e15dc-255">1200</span></span>|<span data-ttu-id="e15dc-256">utf-16</span><span class="sxs-lookup"><span data-stu-id="e15dc-256">utf-16</span></span>|<span data-ttu-id="e15dc-257">Unicode</span><span class="sxs-lookup"><span data-stu-id="e15dc-257">Unicode</span></span>|<span data-ttu-id="e15dc-258">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-258">✓</span></span>|  
|<span data-ttu-id="e15dc-259">1201</span><span class="sxs-lookup"><span data-stu-id="e15dc-259">1201</span></span>|<span data-ttu-id="e15dc-260">unicodeFFFE</span><span class="sxs-lookup"><span data-stu-id="e15dc-260">unicodeFFFE</span></span>|<span data-ttu-id="e15dc-261">Unicode (Big endian)</span><span class="sxs-lookup"><span data-stu-id="e15dc-261">Unicode (Big endian)</span></span>|<span data-ttu-id="e15dc-262">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-262">✓</span></span>|  
|<span data-ttu-id="e15dc-263">1250</span><span class="sxs-lookup"><span data-stu-id="e15dc-263">1250</span></span>|<span data-ttu-id="e15dc-264">windows-1250</span><span class="sxs-lookup"><span data-stu-id="e15dc-264">windows-1250</span></span>|<span data-ttu-id="e15dc-265">中欧语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-265">Central European (Windows)</span></span>||  
|<span data-ttu-id="e15dc-266">1251</span><span class="sxs-lookup"><span data-stu-id="e15dc-266">1251</span></span>|<span data-ttu-id="e15dc-267">windows-1251</span><span class="sxs-lookup"><span data-stu-id="e15dc-267">windows-1251</span></span>|<span data-ttu-id="e15dc-268">西里尔语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-268">Cyrillic (Windows)</span></span>||  
|<span data-ttu-id="e15dc-269">1252</span><span class="sxs-lookup"><span data-stu-id="e15dc-269">1252</span></span>|<span data-ttu-id="e15dc-270">Windows-1252</span><span class="sxs-lookup"><span data-stu-id="e15dc-270">Windows-1252</span></span>|<span data-ttu-id="e15dc-271">西欧语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-271">Western European (Windows)</span></span>|<span data-ttu-id="e15dc-272">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-272">✓</span></span>|  
|<span data-ttu-id="e15dc-273">1253</span><span class="sxs-lookup"><span data-stu-id="e15dc-273">1253</span></span>|<span data-ttu-id="e15dc-274">windows-1253</span><span class="sxs-lookup"><span data-stu-id="e15dc-274">windows-1253</span></span>|<span data-ttu-id="e15dc-275">希腊语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-275">Greek (Windows)</span></span>||  
|<span data-ttu-id="e15dc-276">1254</span><span class="sxs-lookup"><span data-stu-id="e15dc-276">1254</span></span>|<span data-ttu-id="e15dc-277">windows-1254</span><span class="sxs-lookup"><span data-stu-id="e15dc-277">windows-1254</span></span>|<span data-ttu-id="e15dc-278">土耳其语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-278">Turkish (Windows)</span></span>||  
|<span data-ttu-id="e15dc-279">1255</span><span class="sxs-lookup"><span data-stu-id="e15dc-279">1255</span></span>|<span data-ttu-id="e15dc-280">windows-1255</span><span class="sxs-lookup"><span data-stu-id="e15dc-280">windows-1255</span></span>|<span data-ttu-id="e15dc-281">希伯来语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-281">Hebrew (Windows)</span></span>||  
|<span data-ttu-id="e15dc-282">1256</span><span class="sxs-lookup"><span data-stu-id="e15dc-282">1256</span></span>|<span data-ttu-id="e15dc-283">windows-1256</span><span class="sxs-lookup"><span data-stu-id="e15dc-283">windows-1256</span></span>|<span data-ttu-id="e15dc-284">阿拉伯语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-284">Arabic (Windows)</span></span>||  
|<span data-ttu-id="e15dc-285">1257</span><span class="sxs-lookup"><span data-stu-id="e15dc-285">1257</span></span>|<span data-ttu-id="e15dc-286">windows-1257</span><span class="sxs-lookup"><span data-stu-id="e15dc-286">windows-1257</span></span>|<span data-ttu-id="e15dc-287">波罗的语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-287">Baltic (Windows)</span></span>||  
|<span data-ttu-id="e15dc-288">1258</span><span class="sxs-lookup"><span data-stu-id="e15dc-288">1258</span></span>|<span data-ttu-id="e15dc-289">windows-1258</span><span class="sxs-lookup"><span data-stu-id="e15dc-289">windows-1258</span></span>|<span data-ttu-id="e15dc-290">越南语 (Windows)</span><span class="sxs-lookup"><span data-stu-id="e15dc-290">Vietnamese (Windows)</span></span>||  
|<span data-ttu-id="e15dc-291">1361</span><span class="sxs-lookup"><span data-stu-id="e15dc-291">1361</span></span>|<span data-ttu-id="e15dc-292">Johab</span><span class="sxs-lookup"><span data-stu-id="e15dc-292">Johab</span></span>|<span data-ttu-id="e15dc-293">朝鲜语 (Johab)</span><span class="sxs-lookup"><span data-stu-id="e15dc-293">Korean (Johab)</span></span>||  
|<span data-ttu-id="e15dc-294">10000</span><span class="sxs-lookup"><span data-stu-id="e15dc-294">10000</span></span>|<span data-ttu-id="e15dc-295">macintosh</span><span class="sxs-lookup"><span data-stu-id="e15dc-295">macintosh</span></span>|<span data-ttu-id="e15dc-296">西欧语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-296">Western European (Mac)</span></span>||  
|<span data-ttu-id="e15dc-297">10001</span><span class="sxs-lookup"><span data-stu-id="e15dc-297">10001</span></span>|<span data-ttu-id="e15dc-298">x-mac-日语</span><span class="sxs-lookup"><span data-stu-id="e15dc-298">x-mac-japanese</span></span>|<span data-ttu-id="e15dc-299">日语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-299">Japanese (Mac)</span></span>||  
|<span data-ttu-id="e15dc-300">10002</span><span class="sxs-lookup"><span data-stu-id="e15dc-300">10002</span></span>|<span data-ttu-id="e15dc-301">x-mac-chinesetrad</span><span class="sxs-lookup"><span data-stu-id="e15dc-301">x-mac-chinesetrad</span></span>|<span data-ttu-id="e15dc-302">繁体中文 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-302">Chinese Traditional (Mac)</span></span>||  
|<span data-ttu-id="e15dc-303">10003</span><span class="sxs-lookup"><span data-stu-id="e15dc-303">10003</span></span>|<span data-ttu-id="e15dc-304">x-mac-韩语</span><span class="sxs-lookup"><span data-stu-id="e15dc-304">x-mac-korean</span></span>|<span data-ttu-id="e15dc-305">朝鲜语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-305">Korean (Mac)</span></span>|<span data-ttu-id="e15dc-306">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-306">✓</span></span>|  
|<span data-ttu-id="e15dc-307">10004</span><span class="sxs-lookup"><span data-stu-id="e15dc-307">10004</span></span>|<span data-ttu-id="e15dc-308">x-mac-阿拉伯语</span><span class="sxs-lookup"><span data-stu-id="e15dc-308">x-mac-arabic</span></span>|<span data-ttu-id="e15dc-309">阿拉伯语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-309">Arabic (Mac)</span></span>||  
|<span data-ttu-id="e15dc-310">10005</span><span class="sxs-lookup"><span data-stu-id="e15dc-310">10005</span></span>|<span data-ttu-id="e15dc-311">x-mac-希伯来语</span><span class="sxs-lookup"><span data-stu-id="e15dc-311">x-mac-hebrew</span></span>|<span data-ttu-id="e15dc-312">希伯来语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-312">Hebrew (Mac)</span></span>||  
|<span data-ttu-id="e15dc-313">10006</span><span class="sxs-lookup"><span data-stu-id="e15dc-313">10006</span></span>|<span data-ttu-id="e15dc-314">x-mac-希腊语</span><span class="sxs-lookup"><span data-stu-id="e15dc-314">x-mac-greek</span></span>|<span data-ttu-id="e15dc-315">希腊语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-315">Greek (Mac)</span></span>||  
|<span data-ttu-id="e15dc-316">10007</span><span class="sxs-lookup"><span data-stu-id="e15dc-316">10007</span></span>|<span data-ttu-id="e15dc-317">x-mac-西里尔语</span><span class="sxs-lookup"><span data-stu-id="e15dc-317">x-mac-cyrillic</span></span>|<span data-ttu-id="e15dc-318">西里尔语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-318">Cyrillic (Mac)</span></span>||  
|<span data-ttu-id="e15dc-319">10008</span><span class="sxs-lookup"><span data-stu-id="e15dc-319">10008</span></span>|<span data-ttu-id="e15dc-320">x mac chinesesimp</span><span class="sxs-lookup"><span data-stu-id="e15dc-320">x-mac-chinesesimp</span></span>|<span data-ttu-id="e15dc-321">简体中文 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-321">Chinese Simplified (Mac)</span></span>|<span data-ttu-id="e15dc-322">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-322">✓</span></span>|  
|<span data-ttu-id="e15dc-323">10010</span><span class="sxs-lookup"><span data-stu-id="e15dc-323">10010</span></span>|<span data-ttu-id="e15dc-324">罗马尼亚语 mac x</span><span class="sxs-lookup"><span data-stu-id="e15dc-324">x-mac-romanian</span></span>|<span data-ttu-id="e15dc-325">罗马尼亚语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-325">Romanian (Mac)</span></span>||  
|<span data-ttu-id="e15dc-326">10017</span><span class="sxs-lookup"><span data-stu-id="e15dc-326">10017</span></span>|<span data-ttu-id="e15dc-327">x-mac-乌克兰语</span><span class="sxs-lookup"><span data-stu-id="e15dc-327">x-mac-ukrainian</span></span>|<span data-ttu-id="e15dc-328">乌克兰语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-328">Ukrainian (Mac)</span></span>||  
|<span data-ttu-id="e15dc-329">10021</span><span class="sxs-lookup"><span data-stu-id="e15dc-329">10021</span></span>|<span data-ttu-id="e15dc-330">x-mac-泰语</span><span class="sxs-lookup"><span data-stu-id="e15dc-330">x-mac-thai</span></span>|<span data-ttu-id="e15dc-331">泰语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-331">Thai (Mac)</span></span>||  
|<span data-ttu-id="e15dc-332">10029</span><span class="sxs-lookup"><span data-stu-id="e15dc-332">10029</span></span>|<span data-ttu-id="e15dc-333">x mac ce</span><span class="sxs-lookup"><span data-stu-id="e15dc-333">x-mac-ce</span></span>|<span data-ttu-id="e15dc-334">中欧 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-334">Central European (Mac)</span></span>||  
|<span data-ttu-id="e15dc-335">10079</span><span class="sxs-lookup"><span data-stu-id="e15dc-335">10079</span></span>|<span data-ttu-id="e15dc-336">x-mac-冰岛语</span><span class="sxs-lookup"><span data-stu-id="e15dc-336">x-mac-icelandic</span></span>|<span data-ttu-id="e15dc-337">冰岛语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-337">Icelandic (Mac)</span></span>||  
|<span data-ttu-id="e15dc-338">10081</span><span class="sxs-lookup"><span data-stu-id="e15dc-338">10081</span></span>|<span data-ttu-id="e15dc-339">x-mac-土耳其语</span><span class="sxs-lookup"><span data-stu-id="e15dc-339">x-mac-turkish</span></span>|<span data-ttu-id="e15dc-340">土耳其语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-340">Turkish (Mac)</span></span>||  
|<span data-ttu-id="e15dc-341">10082</span><span class="sxs-lookup"><span data-stu-id="e15dc-341">10082</span></span>|<span data-ttu-id="e15dc-342">x-mac-克罗地亚语</span><span class="sxs-lookup"><span data-stu-id="e15dc-342">x-mac-croatian</span></span>|<span data-ttu-id="e15dc-343">克罗地亚语 (Mac)</span><span class="sxs-lookup"><span data-stu-id="e15dc-343">Croatian (Mac)</span></span>||  
|<span data-ttu-id="e15dc-344">12000</span><span class="sxs-lookup"><span data-stu-id="e15dc-344">12000</span></span>|<span data-ttu-id="e15dc-345">utf-32</span><span class="sxs-lookup"><span data-stu-id="e15dc-345">utf-32</span></span>|<span data-ttu-id="e15dc-346">Unicode (UTF-32)</span><span class="sxs-lookup"><span data-stu-id="e15dc-346">Unicode (UTF-32)</span></span>|<span data-ttu-id="e15dc-347">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-347">✓</span></span>|  
|<span data-ttu-id="e15dc-348">12001</span><span class="sxs-lookup"><span data-stu-id="e15dc-348">12001</span></span>|<span data-ttu-id="e15dc-349">utf-32BE</span><span class="sxs-lookup"><span data-stu-id="e15dc-349">utf-32BE</span></span>|<span data-ttu-id="e15dc-350">Unicode (UTF-32 Big endian)</span><span class="sxs-lookup"><span data-stu-id="e15dc-350">Unicode (UTF-32 Big endian)</span></span>|<span data-ttu-id="e15dc-351">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-351">✓</span></span>|  
|<span data-ttu-id="e15dc-352">20000</span><span class="sxs-lookup"><span data-stu-id="e15dc-352">20000</span></span>|<span data-ttu-id="e15dc-353">x 中文 CN</span><span class="sxs-lookup"><span data-stu-id="e15dc-353">x-Chinese-CNS</span></span>|<span data-ttu-id="e15dc-354">繁体中文 (CNS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-354">Chinese Traditional (CNS)</span></span>||  
|<span data-ttu-id="e15dc-355">20001</span><span class="sxs-lookup"><span data-stu-id="e15dc-355">20001</span></span>|<span data-ttu-id="e15dc-356">x-cp20001</span><span class="sxs-lookup"><span data-stu-id="e15dc-356">x-cp20001</span></span>|<span data-ttu-id="e15dc-357">Tca</span><span class="sxs-lookup"><span data-stu-id="e15dc-357">TCA Taiwan</span></span>||  
|<span data-ttu-id="e15dc-358">20002</span><span class="sxs-lookup"><span data-stu-id="e15dc-358">20002</span></span>|<span data-ttu-id="e15dc-359">x 中文 Eten</span><span class="sxs-lookup"><span data-stu-id="e15dc-359">x-Chinese-Eten</span></span>|<span data-ttu-id="e15dc-360">繁体中文 (Eten)</span><span class="sxs-lookup"><span data-stu-id="e15dc-360">Chinese Traditional (Eten)</span></span>||  
|<span data-ttu-id="e15dc-361">20003</span><span class="sxs-lookup"><span data-stu-id="e15dc-361">20003</span></span>|<span data-ttu-id="e15dc-362">x-cp20003</span><span class="sxs-lookup"><span data-stu-id="e15dc-362">x-cp20003</span></span>|<span data-ttu-id="e15dc-363">Ibm5550</span><span class="sxs-lookup"><span data-stu-id="e15dc-363">IBM5550 Taiwan</span></span>||  
|<span data-ttu-id="e15dc-364">20004</span><span class="sxs-lookup"><span data-stu-id="e15dc-364">20004</span></span>|<span data-ttu-id="e15dc-365">x-cp20004</span><span class="sxs-lookup"><span data-stu-id="e15dc-365">x-cp20004</span></span>|<span data-ttu-id="e15dc-366">TeleText 中国台湾</span><span class="sxs-lookup"><span data-stu-id="e15dc-366">TeleText Taiwan</span></span>||  
|<span data-ttu-id="e15dc-367">20005</span><span class="sxs-lookup"><span data-stu-id="e15dc-367">20005</span></span>|<span data-ttu-id="e15dc-368">x-cp20005</span><span class="sxs-lookup"><span data-stu-id="e15dc-368">x-cp20005</span></span>|<span data-ttu-id="e15dc-369">Wang 中国台湾</span><span class="sxs-lookup"><span data-stu-id="e15dc-369">Wang Taiwan</span></span>||  
|<span data-ttu-id="e15dc-370">20105</span><span class="sxs-lookup"><span data-stu-id="e15dc-370">20105</span></span>|<span data-ttu-id="e15dc-371">x-IA5</span><span class="sxs-lookup"><span data-stu-id="e15dc-371">x-IA5</span></span>|<span data-ttu-id="e15dc-372">西欧语 (IA5)</span><span class="sxs-lookup"><span data-stu-id="e15dc-372">Western European (IA5)</span></span>||  
|<span data-ttu-id="e15dc-373">20106</span><span class="sxs-lookup"><span data-stu-id="e15dc-373">20106</span></span>|<span data-ttu-id="e15dc-374">x-IA5-德语</span><span class="sxs-lookup"><span data-stu-id="e15dc-374">x-IA5-German</span></span>|<span data-ttu-id="e15dc-375">德语 (IA5)</span><span class="sxs-lookup"><span data-stu-id="e15dc-375">German (IA5)</span></span>||  
|<span data-ttu-id="e15dc-376">20107</span><span class="sxs-lookup"><span data-stu-id="e15dc-376">20107</span></span>|<span data-ttu-id="e15dc-377">x-IA5-瑞典语</span><span class="sxs-lookup"><span data-stu-id="e15dc-377">x-IA5-Swedish</span></span>|<span data-ttu-id="e15dc-378">瑞典语 (IA5)</span><span class="sxs-lookup"><span data-stu-id="e15dc-378">Swedish (IA5)</span></span>||  
|<span data-ttu-id="e15dc-379">20108</span><span class="sxs-lookup"><span data-stu-id="e15dc-379">20108</span></span>|<span data-ttu-id="e15dc-380">x-IA5-Norwegian</span><span class="sxs-lookup"><span data-stu-id="e15dc-380">x-IA5-Norwegian</span></span>|<span data-ttu-id="e15dc-381">挪威语 (IA5)</span><span class="sxs-lookup"><span data-stu-id="e15dc-381">Norwegian (IA5)</span></span>||  
|<span data-ttu-id="e15dc-382">20127</span><span class="sxs-lookup"><span data-stu-id="e15dc-382">20127</span></span>|<span data-ttu-id="e15dc-383">我们 ascii</span><span class="sxs-lookup"><span data-stu-id="e15dc-383">us-ascii</span></span>|<span data-ttu-id="e15dc-384">US-ASCII</span><span class="sxs-lookup"><span data-stu-id="e15dc-384">US-ASCII</span></span>|<span data-ttu-id="e15dc-385">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-385">✓</span></span>|  
|<span data-ttu-id="e15dc-386">20261</span><span class="sxs-lookup"><span data-stu-id="e15dc-386">20261</span></span>|<span data-ttu-id="e15dc-387">x-cp20261</span><span class="sxs-lookup"><span data-stu-id="e15dc-387">x-cp20261</span></span>|<span data-ttu-id="e15dc-388">T.61</span><span class="sxs-lookup"><span data-stu-id="e15dc-388">T.61</span></span>||  
|<span data-ttu-id="e15dc-389">20269</span><span class="sxs-lookup"><span data-stu-id="e15dc-389">20269</span></span>|<span data-ttu-id="e15dc-390">x-cp20269</span><span class="sxs-lookup"><span data-stu-id="e15dc-390">x-cp20269</span></span>|<span data-ttu-id="e15dc-391">ISO-6937</span><span class="sxs-lookup"><span data-stu-id="e15dc-391">ISO-6937</span></span>||  
|<span data-ttu-id="e15dc-392">20273</span><span class="sxs-lookup"><span data-stu-id="e15dc-392">20273</span></span>|<span data-ttu-id="e15dc-393">IBM273</span><span class="sxs-lookup"><span data-stu-id="e15dc-393">IBM273</span></span>|<span data-ttu-id="e15dc-394">IBM EBCDIC （德国）</span><span class="sxs-lookup"><span data-stu-id="e15dc-394">IBM EBCDIC (Germany)</span></span>||  
|<span data-ttu-id="e15dc-395">20277</span><span class="sxs-lookup"><span data-stu-id="e15dc-395">20277</span></span>|<span data-ttu-id="e15dc-396">IBM277</span><span class="sxs-lookup"><span data-stu-id="e15dc-396">IBM277</span></span>|<span data-ttu-id="e15dc-397">IBM EBCDIC （丹麦-挪威）</span><span class="sxs-lookup"><span data-stu-id="e15dc-397">IBM EBCDIC (Denmark-Norway)</span></span>||  
|<span data-ttu-id="e15dc-398">20278</span><span class="sxs-lookup"><span data-stu-id="e15dc-398">20278</span></span>|<span data-ttu-id="e15dc-399">IBM278</span><span class="sxs-lookup"><span data-stu-id="e15dc-399">IBM278</span></span>|<span data-ttu-id="e15dc-400">IBM EBCDIC （芬兰-瑞典）</span><span class="sxs-lookup"><span data-stu-id="e15dc-400">IBM EBCDIC (Finland-Sweden)</span></span>||  
|<span data-ttu-id="e15dc-401">20280</span><span class="sxs-lookup"><span data-stu-id="e15dc-401">20280</span></span>|<span data-ttu-id="e15dc-402">IBM280</span><span class="sxs-lookup"><span data-stu-id="e15dc-402">IBM280</span></span>|<span data-ttu-id="e15dc-403">IBM EBCDIC （意大利）</span><span class="sxs-lookup"><span data-stu-id="e15dc-403">IBM EBCDIC (Italy)</span></span>||  
|<span data-ttu-id="e15dc-404">20284</span><span class="sxs-lookup"><span data-stu-id="e15dc-404">20284</span></span>|<span data-ttu-id="e15dc-405">IBM284</span><span class="sxs-lookup"><span data-stu-id="e15dc-405">IBM284</span></span>|<span data-ttu-id="e15dc-406">IBM EBCDIC （西班牙）</span><span class="sxs-lookup"><span data-stu-id="e15dc-406">IBM EBCDIC (Spain)</span></span>||  
|<span data-ttu-id="e15dc-407">20285</span><span class="sxs-lookup"><span data-stu-id="e15dc-407">20285</span></span>|<span data-ttu-id="e15dc-408">IBM285</span><span class="sxs-lookup"><span data-stu-id="e15dc-408">IBM285</span></span>|<span data-ttu-id="e15dc-409">IBM EBCDIC （英国）</span><span class="sxs-lookup"><span data-stu-id="e15dc-409">IBM EBCDIC (UK)</span></span>||  
|<span data-ttu-id="e15dc-410">20290</span><span class="sxs-lookup"><span data-stu-id="e15dc-410">20290</span></span>|<span data-ttu-id="e15dc-411">IBM290</span><span class="sxs-lookup"><span data-stu-id="e15dc-411">IBM290</span></span>|<span data-ttu-id="e15dc-412">IBM EBCDIC （日语的片假名）</span><span class="sxs-lookup"><span data-stu-id="e15dc-412">IBM EBCDIC (Japanese katakana)</span></span>||  
|<span data-ttu-id="e15dc-413">20297</span><span class="sxs-lookup"><span data-stu-id="e15dc-413">20297</span></span>|<span data-ttu-id="e15dc-414">IBM297</span><span class="sxs-lookup"><span data-stu-id="e15dc-414">IBM297</span></span>|<span data-ttu-id="e15dc-415">IBM EBCDIC （法国）</span><span class="sxs-lookup"><span data-stu-id="e15dc-415">IBM EBCDIC (France)</span></span>||  
|<span data-ttu-id="e15dc-416">20420</span><span class="sxs-lookup"><span data-stu-id="e15dc-416">20420</span></span>|<span data-ttu-id="e15dc-417">IBM420</span><span class="sxs-lookup"><span data-stu-id="e15dc-417">IBM420</span></span>|<span data-ttu-id="e15dc-418">IBM EBCDIC （阿拉伯语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-418">IBM EBCDIC (Arabic)</span></span>||  
|<span data-ttu-id="e15dc-419">20423</span><span class="sxs-lookup"><span data-stu-id="e15dc-419">20423</span></span>|<span data-ttu-id="e15dc-420">IBM423</span><span class="sxs-lookup"><span data-stu-id="e15dc-420">IBM423</span></span>|<span data-ttu-id="e15dc-421">IBM EBCDIC （希腊语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-421">IBM EBCDIC (Greek)</span></span>||  
|<span data-ttu-id="e15dc-422">20424</span><span class="sxs-lookup"><span data-stu-id="e15dc-422">20424</span></span>|<span data-ttu-id="e15dc-423">IBM424</span><span class="sxs-lookup"><span data-stu-id="e15dc-423">IBM424</span></span>|<span data-ttu-id="e15dc-424">IBM EBCDIC （希伯来语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-424">IBM EBCDIC (Hebrew)</span></span>||  
|<span data-ttu-id="e15dc-425">20833</span><span class="sxs-lookup"><span data-stu-id="e15dc-425">20833</span></span>|<span data-ttu-id="e15dc-426">x-EBCDIC-KoreanExtended</span><span class="sxs-lookup"><span data-stu-id="e15dc-426">x-EBCDIC-KoreanExtended</span></span>|<span data-ttu-id="e15dc-427">IBM EBCDIC （朝鲜语扩展）</span><span class="sxs-lookup"><span data-stu-id="e15dc-427">IBM EBCDIC (Korean Extended)</span></span>||  
|<span data-ttu-id="e15dc-428">20838</span><span class="sxs-lookup"><span data-stu-id="e15dc-428">20838</span></span>|<span data-ttu-id="e15dc-429">IBM 泰语</span><span class="sxs-lookup"><span data-stu-id="e15dc-429">IBM-Thai</span></span>|<span data-ttu-id="e15dc-430">IBM EBCDIC （泰语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-430">IBM EBCDIC (Thai)</span></span>||  
|<span data-ttu-id="e15dc-431">20866</span><span class="sxs-lookup"><span data-stu-id="e15dc-431">20866</span></span>|<span data-ttu-id="e15dc-432">koi8-r</span><span class="sxs-lookup"><span data-stu-id="e15dc-432">koi8-r</span></span>|<span data-ttu-id="e15dc-433">西里尔语 (KOI8-R)</span><span class="sxs-lookup"><span data-stu-id="e15dc-433">Cyrillic (KOI8-R)</span></span>||  
|<span data-ttu-id="e15dc-434">20871</span><span class="sxs-lookup"><span data-stu-id="e15dc-434">20871</span></span>|<span data-ttu-id="e15dc-435">IBM871</span><span class="sxs-lookup"><span data-stu-id="e15dc-435">IBM871</span></span>|<span data-ttu-id="e15dc-436">IBM EBCDIC （冰岛语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-436">IBM EBCDIC (Icelandic)</span></span>||  
|<span data-ttu-id="e15dc-437">20880</span><span class="sxs-lookup"><span data-stu-id="e15dc-437">20880</span></span>|<span data-ttu-id="e15dc-438">IBM880</span><span class="sxs-lookup"><span data-stu-id="e15dc-438">IBM880</span></span>|<span data-ttu-id="e15dc-439">IBM EBCDIC （西里尔俄语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-439">IBM EBCDIC (Cyrillic Russian)</span></span>||  
|<span data-ttu-id="e15dc-440">20905</span><span class="sxs-lookup"><span data-stu-id="e15dc-440">20905</span></span>|<span data-ttu-id="e15dc-441">IBM905</span><span class="sxs-lookup"><span data-stu-id="e15dc-441">IBM905</span></span>|<span data-ttu-id="e15dc-442">IBM EBCDIC （土耳其语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-442">IBM EBCDIC (Turkish)</span></span>||  
|<span data-ttu-id="e15dc-443">20924</span><span class="sxs-lookup"><span data-stu-id="e15dc-443">20924</span></span>|<span data-ttu-id="e15dc-444">IBM00924</span><span class="sxs-lookup"><span data-stu-id="e15dc-444">IBM00924</span></span>|<span data-ttu-id="e15dc-445">IBM Latin 1</span><span class="sxs-lookup"><span data-stu-id="e15dc-445">IBM Latin-1</span></span>||  
|<span data-ttu-id="e15dc-446">20932</span><span class="sxs-lookup"><span data-stu-id="e15dc-446">20932</span></span>|<span data-ttu-id="e15dc-447">EUC-JP</span><span class="sxs-lookup"><span data-stu-id="e15dc-447">EUC-JP</span></span>|<span data-ttu-id="e15dc-448">日语 (JIS 0208 1990年和 0212年 1990年)</span><span class="sxs-lookup"><span data-stu-id="e15dc-448">Japanese (JIS 0208-1990 and 0212-1990)</span></span>||  
|<span data-ttu-id="e15dc-449">20936</span><span class="sxs-lookup"><span data-stu-id="e15dc-449">20936</span></span>|<span data-ttu-id="e15dc-450">x-cp20936</span><span class="sxs-lookup"><span data-stu-id="e15dc-450">x-cp20936</span></span>|<span data-ttu-id="e15dc-451">简体中文 (GB2312-80)</span><span class="sxs-lookup"><span data-stu-id="e15dc-451">Chinese Simplified (GB2312-80)</span></span>|<span data-ttu-id="e15dc-452">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-452">✓</span></span>|  
|<span data-ttu-id="e15dc-453">20949</span><span class="sxs-lookup"><span data-stu-id="e15dc-453">20949</span></span>|<span data-ttu-id="e15dc-454">x-cp20949</span><span class="sxs-lookup"><span data-stu-id="e15dc-454">x-cp20949</span></span>|<span data-ttu-id="e15dc-455">朝鲜语 Wansung</span><span class="sxs-lookup"><span data-stu-id="e15dc-455">Korean Wansung</span></span>|<span data-ttu-id="e15dc-456">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-456">✓</span></span>|  
|<span data-ttu-id="e15dc-457">21025</span><span class="sxs-lookup"><span data-stu-id="e15dc-457">21025</span></span>|<span data-ttu-id="e15dc-458">cp1025</span><span class="sxs-lookup"><span data-stu-id="e15dc-458">cp1025</span></span>|<span data-ttu-id="e15dc-459">IBM EBCDIC （西里尔塞尔维亚语-保加利亚语）</span><span class="sxs-lookup"><span data-stu-id="e15dc-459">IBM EBCDIC (Cyrillic Serbian-Bulgarian)</span></span>||  
|<span data-ttu-id="e15dc-460">21866</span><span class="sxs-lookup"><span data-stu-id="e15dc-460">21866</span></span>|<span data-ttu-id="e15dc-461">koi8-u</span><span class="sxs-lookup"><span data-stu-id="e15dc-461">koi8-u</span></span>|<span data-ttu-id="e15dc-462">西里尔语 (KOI8-U)</span><span class="sxs-lookup"><span data-stu-id="e15dc-462">Cyrillic (KOI8-U)</span></span>||  
|<span data-ttu-id="e15dc-463">28591</span><span class="sxs-lookup"><span data-stu-id="e15dc-463">28591</span></span>|<span data-ttu-id="e15dc-464">iso-8859-1</span><span class="sxs-lookup"><span data-stu-id="e15dc-464">iso-8859-1</span></span>|<span data-ttu-id="e15dc-465">西欧语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-465">Western European (ISO)</span></span>|<span data-ttu-id="e15dc-466">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-466">✓</span></span>|  
|<span data-ttu-id="e15dc-467">28592</span><span class="sxs-lookup"><span data-stu-id="e15dc-467">28592</span></span>|<span data-ttu-id="e15dc-468">iso-8859-2</span><span class="sxs-lookup"><span data-stu-id="e15dc-468">iso-8859-2</span></span>|<span data-ttu-id="e15dc-469">中欧语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-469">Central European (ISO)</span></span>||  
|<span data-ttu-id="e15dc-470">28593</span><span class="sxs-lookup"><span data-stu-id="e15dc-470">28593</span></span>|<span data-ttu-id="e15dc-471">iso-8859-3</span><span class="sxs-lookup"><span data-stu-id="e15dc-471">iso-8859-3</span></span>|<span data-ttu-id="e15dc-472">拉丁文 3 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-472">Latin 3 (ISO)</span></span>||  
|<span data-ttu-id="e15dc-473">28594</span><span class="sxs-lookup"><span data-stu-id="e15dc-473">28594</span></span>|<span data-ttu-id="e15dc-474">iso-8859-4</span><span class="sxs-lookup"><span data-stu-id="e15dc-474">iso-8859-4</span></span>|<span data-ttu-id="e15dc-475">波罗的语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-475">Baltic (ISO)</span></span>||  
|<span data-ttu-id="e15dc-476">28595</span><span class="sxs-lookup"><span data-stu-id="e15dc-476">28595</span></span>|<span data-ttu-id="e15dc-477">iso-8859-5</span><span class="sxs-lookup"><span data-stu-id="e15dc-477">iso-8859-5</span></span>|<span data-ttu-id="e15dc-478">西里尔语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-478">Cyrillic (ISO)</span></span>||  
|<span data-ttu-id="e15dc-479">28596</span><span class="sxs-lookup"><span data-stu-id="e15dc-479">28596</span></span>|<span data-ttu-id="e15dc-480">iso-8859-6</span><span class="sxs-lookup"><span data-stu-id="e15dc-480">iso-8859-6</span></span>|<span data-ttu-id="e15dc-481">阿拉伯语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-481">Arabic (ISO)</span></span>||  
|<span data-ttu-id="e15dc-482">28597</span><span class="sxs-lookup"><span data-stu-id="e15dc-482">28597</span></span>|<span data-ttu-id="e15dc-483">iso-8859-7</span><span class="sxs-lookup"><span data-stu-id="e15dc-483">iso-8859-7</span></span>|<span data-ttu-id="e15dc-484">希腊语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-484">Greek (ISO)</span></span>||  
|<span data-ttu-id="e15dc-485">28598</span><span class="sxs-lookup"><span data-stu-id="e15dc-485">28598</span></span>|<span data-ttu-id="e15dc-486">iso-8859-8</span><span class="sxs-lookup"><span data-stu-id="e15dc-486">iso-8859-8</span></span>|<span data-ttu-id="e15dc-487">希伯来语 (Iso-visual)</span><span class="sxs-lookup"><span data-stu-id="e15dc-487">Hebrew (ISO-Visual)</span></span>|<span data-ttu-id="e15dc-488">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-488">✓</span></span>|  
|<span data-ttu-id="e15dc-489">28599</span><span class="sxs-lookup"><span data-stu-id="e15dc-489">28599</span></span>|<span data-ttu-id="e15dc-490">iso-8859-9</span><span class="sxs-lookup"><span data-stu-id="e15dc-490">iso-8859-9</span></span>|<span data-ttu-id="e15dc-491">土耳其语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-491">Turkish (ISO)</span></span>||  
|<span data-ttu-id="e15dc-492">28603</span><span class="sxs-lookup"><span data-stu-id="e15dc-492">28603</span></span>|<span data-ttu-id="e15dc-493">iso-8859-13</span><span class="sxs-lookup"><span data-stu-id="e15dc-493">iso-8859-13</span></span>|<span data-ttu-id="e15dc-494">爱沙尼亚语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-494">Estonian (ISO)</span></span>||  
|<span data-ttu-id="e15dc-495">28605</span><span class="sxs-lookup"><span data-stu-id="e15dc-495">28605</span></span>|<span data-ttu-id="e15dc-496">iso-8859-15</span><span class="sxs-lookup"><span data-stu-id="e15dc-496">iso-8859-15</span></span>|<span data-ttu-id="e15dc-497">拉丁语 9 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-497">Latin 9 (ISO)</span></span>||  
|<span data-ttu-id="e15dc-498">29001</span><span class="sxs-lookup"><span data-stu-id="e15dc-498">29001</span></span>|<span data-ttu-id="e15dc-499">x-Europa</span><span class="sxs-lookup"><span data-stu-id="e15dc-499">x-Europa</span></span>|<span data-ttu-id="e15dc-500">Europa</span><span class="sxs-lookup"><span data-stu-id="e15dc-500">Europa</span></span>||  
|<span data-ttu-id="e15dc-501">38598</span><span class="sxs-lookup"><span data-stu-id="e15dc-501">38598</span></span>|<span data-ttu-id="e15dc-502">iso-8859-8-i</span><span class="sxs-lookup"><span data-stu-id="e15dc-502">iso-8859-8-i</span></span>|<span data-ttu-id="e15dc-503">希伯来语 （ISO 逻辑）</span><span class="sxs-lookup"><span data-stu-id="e15dc-503">Hebrew (ISO-Logical)</span></span>|<span data-ttu-id="e15dc-504">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-504">✓</span></span>|  
|<span data-ttu-id="e15dc-505">50220</span><span class="sxs-lookup"><span data-stu-id="e15dc-505">50220</span></span>|<span data-ttu-id="e15dc-506">iso-2022年-jp</span><span class="sxs-lookup"><span data-stu-id="e15dc-506">iso-2022-jp</span></span>|<span data-ttu-id="e15dc-507">日语 (JIS)</span><span class="sxs-lookup"><span data-stu-id="e15dc-507">Japanese (JIS)</span></span>|<span data-ttu-id="e15dc-508">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-508">✓</span></span>|  
|<span data-ttu-id="e15dc-509">50221</span><span class="sxs-lookup"><span data-stu-id="e15dc-509">50221</span></span>|<span data-ttu-id="e15dc-510">csISO2022JP</span><span class="sxs-lookup"><span data-stu-id="e15dc-510">csISO2022JP</span></span>|<span data-ttu-id="e15dc-511">日语 （JIS-允许 1 字节假名）</span><span class="sxs-lookup"><span data-stu-id="e15dc-511">Japanese (JIS-Allow 1 byte Kana)</span></span>|<span data-ttu-id="e15dc-512">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-512">✓</span></span>|  
|<span data-ttu-id="e15dc-513">50222</span><span class="sxs-lookup"><span data-stu-id="e15dc-513">50222</span></span>|<span data-ttu-id="e15dc-514">iso-2022年-jp</span><span class="sxs-lookup"><span data-stu-id="e15dc-514">iso-2022-jp</span></span>|<span data-ttu-id="e15dc-515">日语 (JIS-允许 1 字节 Kana-因此 / SI)</span><span class="sxs-lookup"><span data-stu-id="e15dc-515">Japanese (JIS-Allow 1 byte Kana - SO/SI)</span></span>|<span data-ttu-id="e15dc-516">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-516">✓</span></span>|  
|<span data-ttu-id="e15dc-517">50225</span><span class="sxs-lookup"><span data-stu-id="e15dc-517">50225</span></span>|<span data-ttu-id="e15dc-518">iso-2022年-韩国</span><span class="sxs-lookup"><span data-stu-id="e15dc-518">iso-2022-kr</span></span>|<span data-ttu-id="e15dc-519">朝鲜语 (ISO)</span><span class="sxs-lookup"><span data-stu-id="e15dc-519">Korean (ISO)</span></span>|<span data-ttu-id="e15dc-520">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-520">✓</span></span>|  
|<span data-ttu-id="e15dc-521">50227</span><span class="sxs-lookup"><span data-stu-id="e15dc-521">50227</span></span>|<span data-ttu-id="e15dc-522">x-cp50227</span><span class="sxs-lookup"><span data-stu-id="e15dc-522">x-cp50227</span></span>|<span data-ttu-id="e15dc-523">简体中文 (ISO-2022)</span><span class="sxs-lookup"><span data-stu-id="e15dc-523">Chinese Simplified (ISO-2022)</span></span>|<span data-ttu-id="e15dc-524">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-524">✓</span></span>|  
|<span data-ttu-id="e15dc-525">51932</span><span class="sxs-lookup"><span data-stu-id="e15dc-525">51932</span></span>|<span data-ttu-id="e15dc-526">euc jp</span><span class="sxs-lookup"><span data-stu-id="e15dc-526">euc-jp</span></span>|<span data-ttu-id="e15dc-527">日语 (EUC)</span><span class="sxs-lookup"><span data-stu-id="e15dc-527">Japanese (EUC)</span></span>|<span data-ttu-id="e15dc-528">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-528">✓</span></span>|  
|<span data-ttu-id="e15dc-529">51936</span><span class="sxs-lookup"><span data-stu-id="e15dc-529">51936</span></span>|<span data-ttu-id="e15dc-530">EUC CN</span><span class="sxs-lookup"><span data-stu-id="e15dc-530">EUC-CN</span></span>|<span data-ttu-id="e15dc-531">简体中文 (EUC)</span><span class="sxs-lookup"><span data-stu-id="e15dc-531">Chinese Simplified (EUC)</span></span>|<span data-ttu-id="e15dc-532">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-532">✓</span></span>|  
|<span data-ttu-id="e15dc-533">51949</span><span class="sxs-lookup"><span data-stu-id="e15dc-533">51949</span></span>|<span data-ttu-id="e15dc-534">euc 韩国</span><span class="sxs-lookup"><span data-stu-id="e15dc-534">euc-kr</span></span>|<span data-ttu-id="e15dc-535">朝鲜语 (EUC)</span><span class="sxs-lookup"><span data-stu-id="e15dc-535">Korean (EUC)</span></span>|<span data-ttu-id="e15dc-536">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-536">✓</span></span>|  
|<span data-ttu-id="e15dc-537">52936</span><span class="sxs-lookup"><span data-stu-id="e15dc-537">52936</span></span>|<span data-ttu-id="e15dc-538">hz-gb-2312</span><span class="sxs-lookup"><span data-stu-id="e15dc-538">hz-gb-2312</span></span>|<span data-ttu-id="e15dc-539">简体中文 (HZ)</span><span class="sxs-lookup"><span data-stu-id="e15dc-539">Chinese Simplified (HZ)</span></span>|<span data-ttu-id="e15dc-540">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-540">✓</span></span>|  
|<span data-ttu-id="e15dc-541">54936</span><span class="sxs-lookup"><span data-stu-id="e15dc-541">54936</span></span>|<span data-ttu-id="e15dc-542">GB18030</span><span class="sxs-lookup"><span data-stu-id="e15dc-542">GB18030</span></span>|<span data-ttu-id="e15dc-543">简体中文 (GB18030)</span><span class="sxs-lookup"><span data-stu-id="e15dc-543">Chinese Simplified (GB18030)</span></span>|<span data-ttu-id="e15dc-544">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-544">✓</span></span>|  
|<span data-ttu-id="e15dc-545">57002</span><span class="sxs-lookup"><span data-stu-id="e15dc-545">57002</span></span>|<span data-ttu-id="e15dc-546">x iscii-de</span><span class="sxs-lookup"><span data-stu-id="e15dc-546">x-iscii-de</span></span>|<span data-ttu-id="e15dc-547">ISCII 梵文字母</span><span class="sxs-lookup"><span data-stu-id="e15dc-547">ISCII Devanagari</span></span>|<span data-ttu-id="e15dc-548">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-548">✓</span></span>|  
|<span data-ttu-id="e15dc-549">57003</span><span class="sxs-lookup"><span data-stu-id="e15dc-549">57003</span></span>|<span data-ttu-id="e15dc-550">x-iscii-be</span><span class="sxs-lookup"><span data-stu-id="e15dc-550">x-iscii-be</span></span>|<span data-ttu-id="e15dc-551">ISCII 孟加拉语</span><span class="sxs-lookup"><span data-stu-id="e15dc-551">ISCII Bengali</span></span>|<span data-ttu-id="e15dc-552">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-552">✓</span></span>|  
|<span data-ttu-id="e15dc-553">57004</span><span class="sxs-lookup"><span data-stu-id="e15dc-553">57004</span></span>|<span data-ttu-id="e15dc-554">x-iscii-ta</span><span class="sxs-lookup"><span data-stu-id="e15dc-554">x-iscii-ta</span></span>|<span data-ttu-id="e15dc-555">Iscii-泰米尔语</span><span class="sxs-lookup"><span data-stu-id="e15dc-555">ISCII Tamil</span></span>|<span data-ttu-id="e15dc-556">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-556">✓</span></span>|  
|<span data-ttu-id="e15dc-557">57005</span><span class="sxs-lookup"><span data-stu-id="e15dc-557">57005</span></span>|<span data-ttu-id="e15dc-558">x iscii te</span><span class="sxs-lookup"><span data-stu-id="e15dc-558">x-iscii-te</span></span>|<span data-ttu-id="e15dc-559">Iscii-泰卢固语</span><span class="sxs-lookup"><span data-stu-id="e15dc-559">ISCII Telugu</span></span>|<span data-ttu-id="e15dc-560">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-560">✓</span></span>|  
|<span data-ttu-id="e15dc-561">57006</span><span class="sxs-lookup"><span data-stu-id="e15dc-561">57006</span></span>|<span data-ttu-id="e15dc-562">x-作为 iscii</span><span class="sxs-lookup"><span data-stu-id="e15dc-562">x-iscii-as</span></span>|<span data-ttu-id="e15dc-563">ISCII 阿萨姆语</span><span class="sxs-lookup"><span data-stu-id="e15dc-563">ISCII Assamese</span></span>|<span data-ttu-id="e15dc-564">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-564">✓</span></span>|  
|<span data-ttu-id="e15dc-565">57007</span><span class="sxs-lookup"><span data-stu-id="e15dc-565">57007</span></span>|<span data-ttu-id="e15dc-566">x iscii 或</span><span class="sxs-lookup"><span data-stu-id="e15dc-566">x-iscii-or</span></span>|<span data-ttu-id="e15dc-567">ISCII 奥里雅语</span><span class="sxs-lookup"><span data-stu-id="e15dc-567">ISCII Oriya</span></span>|<span data-ttu-id="e15dc-568">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-568">✓</span></span>|  
|<span data-ttu-id="e15dc-569">57008</span><span class="sxs-lookup"><span data-stu-id="e15dc-569">57008</span></span>|<span data-ttu-id="e15dc-570">x iscii ka</span><span class="sxs-lookup"><span data-stu-id="e15dc-570">x-iscii-ka</span></span>|<span data-ttu-id="e15dc-571">Iscii-埃纳德语</span><span class="sxs-lookup"><span data-stu-id="e15dc-571">ISCII Kannada</span></span>|<span data-ttu-id="e15dc-572">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-572">✓</span></span>|  
|<span data-ttu-id="e15dc-573">57009</span><span class="sxs-lookup"><span data-stu-id="e15dc-573">57009</span></span>|<span data-ttu-id="e15dc-574">x iscii ma</span><span class="sxs-lookup"><span data-stu-id="e15dc-574">x-iscii-ma</span></span>|<span data-ttu-id="e15dc-575">Iscii 马来亚拉姆语</span><span class="sxs-lookup"><span data-stu-id="e15dc-575">ISCII Malayalam</span></span>|<span data-ttu-id="e15dc-576">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-576">✓</span></span>|  
|<span data-ttu-id="e15dc-577">57010</span><span class="sxs-lookup"><span data-stu-id="e15dc-577">57010</span></span>|<span data-ttu-id="e15dc-578">x iscii gu</span><span class="sxs-lookup"><span data-stu-id="e15dc-578">x-iscii-gu</span></span>|<span data-ttu-id="e15dc-579">Iscii-古吉拉特语</span><span class="sxs-lookup"><span data-stu-id="e15dc-579">ISCII Gujarati</span></span>|<span data-ttu-id="e15dc-580">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-580">✓</span></span>|  
|<span data-ttu-id="e15dc-581">57011</span><span class="sxs-lookup"><span data-stu-id="e15dc-581">57011</span></span>|<span data-ttu-id="e15dc-582">x-iscii-pa</span><span class="sxs-lookup"><span data-stu-id="e15dc-582">x-iscii-pa</span></span>|<span data-ttu-id="e15dc-583">ISCII 旁遮普语</span><span class="sxs-lookup"><span data-stu-id="e15dc-583">ISCII Punjabi</span></span>|<span data-ttu-id="e15dc-584">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-584">✓</span></span>|  
|<span data-ttu-id="e15dc-585">65000</span><span class="sxs-lookup"><span data-stu-id="e15dc-585">65000</span></span>|<span data-ttu-id="e15dc-586">utf-7</span><span class="sxs-lookup"><span data-stu-id="e15dc-586">utf-7</span></span>|<span data-ttu-id="e15dc-587">Unicode (utf-7)</span><span class="sxs-lookup"><span data-stu-id="e15dc-587">Unicode (UTF-7)</span></span>|<span data-ttu-id="e15dc-588">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-588">✓</span></span>|  
|<span data-ttu-id="e15dc-589">65001</span><span class="sxs-lookup"><span data-stu-id="e15dc-589">65001</span></span>|<span data-ttu-id="e15dc-590">utf-8</span><span class="sxs-lookup"><span data-stu-id="e15dc-590">utf-8</span></span>|<span data-ttu-id="e15dc-591">Unicode (UTF-8)</span><span class="sxs-lookup"><span data-stu-id="e15dc-591">Unicode (UTF-8)</span></span>|<span data-ttu-id="e15dc-592">✓</span><span class="sxs-lookup"><span data-stu-id="e15dc-592">✓</span></span>|  
  
 <span data-ttu-id="e15dc-593">下面的示例调用<xref:System.Text.Encoding.GetEncoding%28System.Int32%29>和<xref:System.Text.Encoding.GetEncoding%28System.String%29>方法来获取希腊语 (Windows) 的代码页编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-593">The following example calls the <xref:System.Text.Encoding.GetEncoding%28System.Int32%29> and <xref:System.Text.Encoding.GetEncoding%28System.String%29> methods to get the Greek (Windows) code page encoding.</span></span> <span data-ttu-id="e15dc-594">它将进行比较<xref:System.Text.Encoding>方法调用，以显示它们是否相等，并映射然后希腊字母表中显示了 Unicode 码位和每个字符的相应代码页值所返回的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-594">It compares the <xref:System.Text.Encoding> objects returned by the method calls to show that they are equal, and then maps displays the Unicode code point and the corresponding code page value for each character in the Greek alphabet.</span></span>  
  
 [!code-csharp[System.Text.Encoding#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding/cs/getencoding1.cs#1)]
 [!code-vb[System.Text.Encoding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding/vb/getencoding1.vb#1)]  
  
 <span data-ttu-id="e15dc-595">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-595">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-596">UTF 16 和 UTF-32 编码器可以使用 big endian 字节顺序 (最高有效字节第一个) 或 little-endian 字节顺序 (最低有效字节第一个)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-596">The UTF-16 and the UTF-32 encoders can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="e15dc-597">例如，拉丁文大写字母 (u+0041) 序列化为 （十六进制） 如下所示：</span><span class="sxs-lookup"><span data-stu-id="e15dc-597">For example, the Latin Capital Letter A (U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="e15dc-598">Utf-16 big endian 字节顺序： 00 41</span><span class="sxs-lookup"><span data-stu-id="e15dc-598">UTF-16 big endian byte order: 00 41</span></span>  
  
-   <span data-ttu-id="e15dc-599">Utf-16 little-endian 字节顺序： 41 00</span><span class="sxs-lookup"><span data-stu-id="e15dc-599">UTF-16 little endian byte order: 41 00</span></span>  
  
-   <span data-ttu-id="e15dc-600">UTF-32 big endian 字节顺序： 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="e15dc-600">UTF-32 big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="e15dc-601">UTF-32 little-endian 字节顺序： 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="e15dc-601">UTF-32 little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="e15dc-602">它是通常使用本机字节顺序的 Unicode 字符存储更高效。</span><span class="sxs-lookup"><span data-stu-id="e15dc-602">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="e15dc-603">例如，最好在小 endian 平台，如 Intel 的计算机上使用 little-endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-603">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span>  
  
 <span data-ttu-id="e15dc-604"><xref:System.Text.Encoding.GetPreamble%2A>方法检索包含字节顺序标记 (BOM) 的字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-604">The <xref:System.Text.Encoding.GetPreamble%2A> method retrieves an array of bytes that includes the byte order mark (BOM).</span></span> <span data-ttu-id="e15dc-605">如果此字节数组编码流的前缀，它可帮助确定使用的编码格式的解码器。</span><span class="sxs-lookup"><span data-stu-id="e15dc-605">If this byte array is prefixed to an encoded stream, it helps the decoder to identify the encoding format used.</span></span>  
  
 <span data-ttu-id="e15dc-606">有关字节顺序和字节顺序标记的详细信息，请参阅 Unicode Standard [Unicode 主页](http://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-606">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="e15dc-607">请注意，编码的类允许将错误记录到：</span><span class="sxs-lookup"><span data-stu-id="e15dc-607">Note that the encoding classes allow errors to:</span></span>  
  
-   <span data-ttu-id="e15dc-608">以无提示方式将更改为"？"字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-608">Silently change to a "?" character.</span></span>  
  
-   <span data-ttu-id="e15dc-609">使用"best fit"字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-609">Use a "best fit" character.</span></span>  
  
-   <span data-ttu-id="e15dc-610">通过使用特定于应用程序的行为更改<xref:System.Text.EncoderFallback>和<xref:System.Text.DecoderFallback>具有 U + FFFD Unicode 替换字符的类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-610">Change to an application-specific behavior through use of the <xref:System.Text.EncoderFallback> and <xref:System.Text.DecoderFallback> classes with the U+FFFD Unicode replacement character.</span></span>  
  
 <span data-ttu-id="e15dc-611">在任何数据流的错误，应引发异常。</span><span class="sxs-lookup"><span data-stu-id="e15dc-611">You should throw an exception on any data stream error.</span></span> <span data-ttu-id="e15dc-612">应用使用"throwonerror"标志时适用或使用<xref:System.Text.EncoderExceptionFallback>和<xref:System.Text.DecoderExceptionFallback>类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-612">An app either uses a "throwonerror" flag when applicable or uses the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> classes.</span></span> <span data-ttu-id="e15dc-613">通常不建议最佳匹配的回退，因为它可能会导致数据丢失或混淆，而且比简单的字符替换。</span><span class="sxs-lookup"><span data-stu-id="e15dc-613">Best fit fallback is often not recommended because it can cause data loss or confusion and is slower than simple character replacements.</span></span> <span data-ttu-id="e15dc-614">对于 ANSI 编码最佳行为是默认行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-614">For ANSI encodings, the best fit behavior is the default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-615">下面的示例将字符串转换到另一个编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-615">The following example converts a string from one encoding to another.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e15dc-616">Byte [] 数组是在此示例中包含已编码的数据的唯一类型。</span><span class="sxs-lookup"><span data-stu-id="e15dc-616">The byte[] array is the only type in this example that contains the encoded data.</span></span> <span data-ttu-id="e15dc-617">.NET 的 Char 和字符串类型是本身 Unicode，因此<xref:System.Text.Encoding.GetChars%2A>调用返回到 Unicode 数据进行解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-617">The .NET Char and String types are themselves Unicode, so the <xref:System.Text.Encoding.GetChars%2A> call decodes the data back to Unicode.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-618">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-618">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-619">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-619">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-620">派生的类重写此构造函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-620">Derived classes override this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (codePage As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage);" />
      <MemberSignature Language="F#" Value="new System.Text.Encoding : int -&gt; System.Text.Encoding" Usage="new System.Text.Encoding codePage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePage">
          <span data-ttu-id="e15dc-621">The code page identifier of the preferred encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-621">The code page identifier of the preferred encoding.</span>
          </span>
          <span data-ttu-id="e15dc-622">-or-  0, to use the default encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-622">-or-  0, to use the default encoding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-623">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-623">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-624">派生的类重写此构造函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-624">Derived classes override this constructor.</span></span>  
  
 <span data-ttu-id="e15dc-625">从派生类调用此构造函数创建<xref:System.Text.Encoding>编码和解码操作中使用最佳回退的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-625">Calls to this constructor from a derived class create an <xref:System.Text.Encoding> object that uses best-fit fallback for both encoding and decoding operations.</span></span> <span data-ttu-id="e15dc-626">同时<xref:System.Text.Encoding.DecoderFallback%2A>和<xref:System.Text.Encoding.EncoderFallback%2A>属性是只读的不能修改。</span><span class="sxs-lookup"><span data-stu-id="e15dc-626">Both the <xref:System.Text.Encoding.DecoderFallback%2A> and <xref:System.Text.Encoding.EncoderFallback%2A> properties are read-only and cannot be modified.</span></span> <span data-ttu-id="e15dc-627">若要控制回退策略，一个类派生自<xref:System.Text.Encoding>，调用<xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-627">To control the fallback strategy for a class derived from <xref:System.Text.Encoding>, call the <xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-628">
            <paramref name="codePage" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-628">
              <paramref name="codePage" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="new System.Text.Encoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="new System.Text.Encoding (codePage, encoderFallback, decoderFallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codePage">
          <span data-ttu-id="e15dc-629">The encoding code page identifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-629">The encoding code page identifier.</span>
          </span>
        </param>
        <param name="encoderFallback">
          <span data-ttu-id="e15dc-630">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-630">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span>
          </span>
        </param>
        <param name="decoderFallback">
          <span data-ttu-id="e15dc-631">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-631">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-632">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-632">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-633">此构造函数是`protected`; 派生类重写它。</span><span class="sxs-lookup"><span data-stu-id="e15dc-633">This constructor is `protected`; derived classes override it.</span></span>  
  
 <span data-ttu-id="e15dc-634">从派生类来控制回退编码和解码策略调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-634">You call this constructor from a derived class to control the fallback encoding and decoding strategies.</span></span> <span data-ttu-id="e15dc-635"><xref:System.Text.Encoding>类构造函数创建不允许编码器或解码器回退对象创建之后设置的只读的编码对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-635">The <xref:System.Text.Encoding> class constructors create read-only encoding objects that don't allow encoder or decoder fallback to be set after the object is created.</span></span>  
  
 <span data-ttu-id="e15dc-636">如果任一`encoderFallback`或`decoderFallback`为 null，最佳回退用作相应回退策略。</span><span class="sxs-lookup"><span data-stu-id="e15dc-636">If either `encoderFallback` or `decoderFallback` is null, best-fit fallback is used as the corresponding fallback strategy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-637">
            <paramref name="codePage" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-637">
              <paramref name="codePage" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ASCII">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding ASCII { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding ASCII" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.ASCII" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ASCII As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ ASCII { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ASCII : System.Text.Encoding" Usage="System.Text.Encoding.ASCII" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-638">Gets an encoding for the ASCII (7-bit) character set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-638">Gets an encoding for the ASCII (7-bit) character set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-639">ASCII（7 位）字符集的编码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-639">An  encoding for the ASCII (7-bit) character set.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-640">ASCII 字符仅限于从 u+0000 到 U + 007F 的最小 128 个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-640">ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.</span></span>  
  
 <span data-ttu-id="e15dc-641">选择您的应用程序的 ASCII 编码时, 考虑以下方面：</span><span class="sxs-lookup"><span data-stu-id="e15dc-641">When selecting the ASCII encoding for your app, consider the following:</span></span>  
  
-   <span data-ttu-id="e15dc-642">ASCII 编码是通常适用于需要 ASCII 的协议。</span><span class="sxs-lookup"><span data-stu-id="e15dc-642">The ASCII encoding is usually appropriate for protocols that require ASCII.</span></span>  
  
-   <span data-ttu-id="e15dc-643">如果您需要 8 位编码 （这有时会错误地称为"ASCII"），utf-8 编码建议而不是将 ASCII 编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-643">If you requires 8-bit encoding (which is sometimes incorrectly referred to as "ASCII"), the UTF-8 encoding is recommended over the ASCII encoding.</span></span> <span data-ttu-id="e15dc-644">对于字符 0 7F，结果是相同的但使用 utf-8，从而可表示的所有 Unicode 字符的表示形式可避免数据丢失。</span><span class="sxs-lookup"><span data-stu-id="e15dc-644">For the characters 0-7F, the results are identical, but use of UTF-8 avoids data loss by allowing representation of all Unicode characters that are representable.</span></span> <span data-ttu-id="e15dc-645">请注意，ASCII 编码有 8 位二义性，可允许恶意使用，但 utf-8 编码中移除第八位的不明确性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-645">Note that the ASCII encoding has an 8th bit ambiguity that can allow malicious use, but the UTF-8 encoding removes ambiguity about the 8th bit.</span></span>  
  
-   <span data-ttu-id="e15dc-646">在低于.NET Framework 2.0 版中，.NET Framework 允许通过忽略第八位欺骗。</span><span class="sxs-lookup"><span data-stu-id="e15dc-646">Prior to the .NET Framework version 2.0, the .NET Framework allowed spoofing by ignoring the 8th bit.</span></span> <span data-ttu-id="e15dc-647">从.NET Framework 2.0 开始，非 ASCII 码位，故障回复期间进行解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-647">Beginning with the .NET Framework 2.0, non-ASCII code points fall back during decoding.</span></span>  
  
 <span data-ttu-id="e15dc-648"><xref:System.Text.ASCIIEncoding>此属性返回的对象可能不具有您的应用程序的适当行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-648">The <xref:System.Text.ASCIIEncoding> object that is returned by this property might not have the appropriate behavior for your app.</span></span> <span data-ttu-id="e15dc-649">它使用替换回退将每个字符串，它不能进行编码和每个不能进行解码的字节替换为问号 ("？") 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-649">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="e15dc-650">相反，您可以调用<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>方法来实例化<xref:System.Text.ASCIIEncoding>对象，它的回退是个<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="e15dc-650">Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> method to instantiate an <xref:System.Text.ASCIIEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.ASCII#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.ascii/cs/encoding.ascii2.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.ascii/vb/encoding.ascii2.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-651">下面的示例演示了将 ASCII 编码字符超出 ASCII 范围的上的效果。</span><span class="sxs-lookup"><span data-stu-id="e15dc-651">The following example demonstrates the effect of the ASCII encoding on characters that are outside the ASCII range.</span></span>  
  
 [!code-cpp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CPP/ascii.cpp#1)]
 [!code-csharp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CS/ascii.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/VB/ascii.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.ASCIIEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
      </Docs>
    </Member>
    <Member MemberName="BigEndianUnicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding BigEndianUnicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding BigEndianUnicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BigEndianUnicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BigEndianUnicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ BigEndianUnicode { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BigEndianUnicode : System.Text.Encoding" Usage="System.Text.Encoding.BigEndianUnicode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-652">Gets an encoding for the UTF-16 format that uses the big endian byte order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-652">Gets an encoding for the UTF-16 format that uses the big endian byte order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-653">使用 Big Endian 字节顺序的 UTF-16 格式的编码对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-653">An encoding object for the UTF-16 format that uses the big endian byte order.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-654"><xref:System.Text.UnicodeEncoding>此属性返回的对象可能没有为你的应用的适当行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-654">The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="e15dc-655">它使用替换回退将每个字符串，它不能进行编码和每个不能进行解码的字节替换为问号 ("？") 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-655">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="e15dc-656">相反，您可以调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>构造函数实例化大 endian<xref:System.Text.UnicodeEncoding>对象，它的回退是个<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="e15dc-656">Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a big endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode1.cs#2)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode1.vb#2)]  
  
 <span data-ttu-id="e15dc-657">返回<xref:System.Text.UnicodeEncoding>对象具有<xref:System.Text.Encoding.BodyName%2A>， <xref:System.Text.Encoding.HeaderName%2A>，和<xref:System.Text.Encoding.WebName%2A>属性，这些值生成的名称"unicodeFFFE"。</span><span class="sxs-lookup"><span data-stu-id="e15dc-657">The returned <xref:System.Text.UnicodeEncoding> object has <xref:System.Text.Encoding.BodyName%2A>, <xref:System.Text.Encoding.HeaderName%2A>, and <xref:System.Text.Encoding.WebName%2A> properties, which yield the name "unicodeFFFE".</span></span> <span data-ttu-id="e15dc-658">尽管 utf-16 big endian 字节顺序标记是十六进制 FEFF，但已选择名称"unicodeFFFE"，原因是字节顺序标记显示为十六进制 FFFE 小字节序的 Windows 计算机上。</span><span class="sxs-lookup"><span data-stu-id="e15dc-658">Although the UTF-16 big endian byte order mark is hexadecimal FEFF, the name "unicodeFFFE" was chosen because the byte order mark appears as hexadecimal FFFE on little endian Windows computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-659">下面的示例读取一个文本文件与使用 big endian 字节顺序的 utf-16 编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-659">The following example reads a text file with a UTF-16 encoding using the big endian byte order.</span></span>  
  
 [!code-cpp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CPP/bigendianunicode.cpp#1)]
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode.cs#1)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode.vb#1)]  
  
 <span data-ttu-id="e15dc-660">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-660">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
      </Docs>
    </Member>
    <Member MemberName="BodyName">
      <MemberSignature Language="C#" Value="public virtual string BodyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BodyName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BodyName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BodyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BodyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BodyName : string" Usage="System.Text.Encoding.BodyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-661">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-661">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-662">可与邮件代理正文标记一起使用的当前 <see cref="T:System.Text.Encoding" /> 的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-662">A name for the current <see cref="T:System.Text.Encoding" /> that can be used with mail agent body tags.</span>
          </span>
          <span data-ttu-id="e15dc-663">-空字符串 ("")，如果当前<see cref="T:System.Text.Encoding" />不能使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-663">-or-  An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-664">如果您需要正文名称的编码，则应调用<xref:System.Text.Encoding.GetEncoding%2A>与<xref:System.Text.Encoding.BodyName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-664">If you need an encoding for a body name, you should call <xref:System.Text.Encoding.GetEncoding%2A> with the <xref:System.Text.Encoding.BodyName%2A> property.</span></span> <span data-ttu-id="e15dc-665">通常方法检索不同的编码从调用中提供的测试编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-665">Often the method retrieves a different encoding from the test encoding furnished in the call.</span></span> <span data-ttu-id="e15dc-666">通常只有电子邮件应用程序需要检索此类编码;其他需要描述的编码的大多数应用程序应使用其<xref:System.Text.Encoding.WebName%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-666">Generally only email applications need to retrieve such an encoding; most other applications that need to describe an encoding should use its <xref:System.Text.Encoding.WebName%2A>.</span></span>  
  
 <span data-ttu-id="e15dc-667">在某些情况下，值<xref:System.Text.Encoding.BodyName%2A>属性对应于定义编码的国际标准。</span><span class="sxs-lookup"><span data-stu-id="e15dc-667">In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding.</span></span> <span data-ttu-id="e15dc-668">这并不意味着实现符合该标准填满中。</span><span class="sxs-lookup"><span data-stu-id="e15dc-668">This doesn't mean that the implementation complies in full with that standard.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-669">下面的示例检索每个编码不同的名称，并显示具有一个或多个名称不同的编码<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-669">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e15dc-670">它将显示<xref:System.Text.Encoding.EncodingName%2A>但不会对其比较。</span><span class="sxs-lookup"><span data-stu-id="e15dc-670">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="encoding.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-671">When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-671">When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-672">A copy of the current <see cref="T:System.Text.Encoding" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-672">A copy of the current <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-673">克隆是可写即使原始<xref:System.Text.Encoding>对象是只读的。</span><span class="sxs-lookup"><span data-stu-id="e15dc-673">The clone is writable even if the original <xref:System.Text.Encoding> object is read-only.</span></span> <span data-ttu-id="e15dc-674">因此，可以修改克隆的属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-674">Therefore, the properties of the clone can be modified.</span></span>  
  
 <span data-ttu-id="e15dc-675">一个对象的浅表副本是仅对象的副本。</span><span class="sxs-lookup"><span data-stu-id="e15dc-675">A shallow copy of an object is a copy of the object only.</span></span> <span data-ttu-id="e15dc-676">如果对象包含对其他对象的引用，浅表副本不创建所引用对象的副本。</span><span class="sxs-lookup"><span data-stu-id="e15dc-676">If the object contains references to other objects, the shallow copy does not create copies of the referred objects.</span></span> <span data-ttu-id="e15dc-677">它而是指原始对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-677">It refers to the original objects instead.</span></span> <span data-ttu-id="e15dc-678">与此相反，对象的深层副本创建的对象的副本和所有内容直接或间接引用该对象的副本。</span><span class="sxs-lookup"><span data-stu-id="e15dc-678">In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public virtual int CodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CodePage { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CodePage : int" Usage="System.Text.Encoding.CodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-679">When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-679">When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-680">当前 <see cref="T:System.Text.Encoding" /> 的代码页标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-680">The code page identifier of the current <see cref="T:System.Text.Encoding" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e15dc-681">下面的示例检索每个编码不同的名称，并显示具有一个或多个名称不同的编码<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-681">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e15dc-682">它将显示<xref:System.Text.Encoding.EncodingName%2A>但不会对其比较。</span><span class="sxs-lookup"><span data-stu-id="e15dc-682">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
        <altmember cref="P:System.Text.Encoding.WindowsCodePage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-683">Converts a byte array from one encoding to another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-683">Converts a byte array from one encoding to another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoding * System.Text.Encoding * byte[] -&gt; byte[]" Usage="System.Text.Encoding.Convert (srcEncoding, dstEncoding, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="srcEncoding">
          <span data-ttu-id="e15dc-684">The encoding format of <c>bytes</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-684">The encoding format of <c>bytes</c>.</span>
          </span>
        </param>
        <param name="dstEncoding">
          <span data-ttu-id="e15dc-685">The target encoding format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-685">The target encoding format.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="e15dc-686">The bytes to convert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-686">The bytes to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-687">Converts an entire byte array from one encoding to another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-687">Converts an entire byte array from one encoding to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-688">An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-688">An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e15dc-689">下面的示例将使用 Unicode 编码的字符串转换为 ASCII 编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="e15dc-689">The following example converts a Unicode-encoded string to an ASCII-encoded string.</span></span> <span data-ttu-id="e15dc-690">由于 ASCII 编码对象返回的<xref:System.Text.Encoding.ASCII%2A>属性使用替换回退，并且 Pi 字符不是 ASCII 字符集的一部分，Pi 字符将替换为问号，如中的示例所示的输出。</span><span class="sxs-lookup"><span data-stu-id="e15dc-690">Because the ASCII encoding object returned by the <xref:System.Text.Encoding.ASCII%2A> property uses replacement fallback and the Pi character is not part of the ASCII character set, the Pi character is replaced with a question mark, as the output from the example shows.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-691">
            <paramref name="srcEncoding" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-691">
              <paramref name="srcEncoding" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-692">-or-  <paramref name="dstEncoding" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-692">-or-  <paramref name="dstEncoding" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-693">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-693">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-694">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **srcEncoding.** <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-694">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **srcEncoding.** <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-695">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **dstEncoding.** <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-695">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **dstEncoding.** <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoding * System.Text.Encoding * byte[] * int * int -&gt; byte[]" Usage="System.Text.Encoding.Convert (srcEncoding, dstEncoding, bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcEncoding">
          <span data-ttu-id="e15dc-696">The encoding of the source array, <c>bytes</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-696">The encoding of the source array, <c>bytes</c>.</span>
          </span>
        </param>
        <param name="dstEncoding">
          <span data-ttu-id="e15dc-697">The encoding of the output array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-697">The encoding of the output array.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="e15dc-698">The array of bytes to convert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-698">The array of bytes to convert.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e15dc-699">The index of the first element of <c>bytes</c> to convert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-699">The index of the first element of <c>bytes</c> to convert.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-700">The number of bytes to convert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-700">The number of bytes to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-701">Converts a range of bytes in a byte array from one encoding to another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-701">Converts a range of bytes in a byte array from one encoding to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-702">An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-702">An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-703">
            <paramref name="srcEncoding" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-703">
              <paramref name="srcEncoding" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-704">-or-  <paramref name="dstEncoding" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-704">-or-  <paramref name="dstEncoding" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-705">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-705">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-706">
            <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-706">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-707">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **srcEncoding.** <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-707">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **srcEncoding.** <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-708">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **dstEncoding.** <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-708">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  **dstEncoding.** <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DecoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback DecoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallback DecoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.DecoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property DecoderFallback As DecoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::DecoderFallback ^ DecoderFallback { System::Text::DecoderFallback ^ get(); void set(System::Text::DecoderFallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DecoderFallback : System.Text.DecoderFallback with get, set" Usage="System.Text.Encoding.DecoderFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-709">Gets or sets the <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-709">Gets or sets the <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-710">当前 <see cref="T:System.Text.Encoding" /> 对象的解码器回退对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-710">The decoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-711"><xref:System.Text.DecoderFallback>对象表示的错误处理程序不能进行编码的字节序列解码为字符时调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-711">The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be decoded into a character.</span></span> <span data-ttu-id="e15dc-712">支持以下处理程序类型之一：</span><span class="sxs-lookup"><span data-stu-id="e15dc-712">Any one of the following handler types is supported:</span></span>  
  
-   <span data-ttu-id="e15dc-713">最佳回退处理程序，它用合适的替换字符替换无法解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-713">A best-fit fallback handler, which replaces bytes that cannot be decoded with some suitable replacement character.</span></span>  
  
-   <span data-ttu-id="e15dc-714">替换回退处理程序，它使用任意替换字符替换无法解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-714">A replacement fallback handler, which replaces bytes that cannot be decoded with some arbitrary replacement character.</span></span> <span data-ttu-id="e15dc-715">.NET Framework 包括一个替换回退处理程序， <xref:System.Text.DecoderFallback>，默认情况下将不能进行解码的字节替换为问号 ("？") 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-715">The .NET Framework includes one replacement fallback handler, <xref:System.Text.DecoderFallback>, which by default replaces bytes that cannot be decoded with a question mark ("?") character.</span></span>  
  
-   <span data-ttu-id="e15dc-716">异常回退处理程序，将不能对字节进行解码时引发异常。</span><span class="sxs-lookup"><span data-stu-id="e15dc-716">An exception fallback handler, which throws an exception when bytes cannot be decoded.</span></span> <span data-ttu-id="e15dc-717">.NET Framework 包括一个异常回退处理程序， <xref:System.Text.DecoderExceptionFallback>，该类会引发<xref:System.Text.DecoderFallbackException>当无法解码字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-717">The .NET Framework includes one exception fallback handler, <xref:System.Text.DecoderExceptionFallback>, which throws a <xref:System.Text.DecoderFallbackException> when bytes cannot be decoded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-718">The value in a set operation is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-718">The value in a set operation is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e15dc-719">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-719">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.DecoderFallback" />
        <altmember cref="T:System.Text.DecoderFallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Default" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Default { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Text.Encoding" Usage="System.Text.Encoding.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-720">Gets the default encoding for this .NET implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-720">Gets the default encoding for this .NET implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-721">默认的编码此.NET 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-721">The default encoding for this .NET implementation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="e15dc-722">不同的计算机可以使用不同的编码为默认值，并且默认编码可以更改在单台计算机上。</span><span class="sxs-lookup"><span data-stu-id="e15dc-722">Different computers can use different encodings as the default, and the default encoding can change on a single computer.</span></span> <span data-ttu-id="e15dc-723">如果使用<xref:System.Text.Encoding.Default%2A>编码进行编码和解码流式传输的计算机之间或在同一台计算机上的不同时间检索数据，也可以将该数据不正确。</span><span class="sxs-lookup"><span data-stu-id="e15dc-723">If you use the <xref:System.Text.Encoding.Default%2A> encoding to encode and decode data streamed between computers or retrieved at different times on the same computer, it may translate that data incorrectly.</span></span> <span data-ttu-id="e15dc-724">此外，返回的编码<xref:System.Text.Encoding.Default%2A>属性使用最佳回退将不支持的字符映射到代码页支持的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-724">In addition, the encoding returned by the <xref:System.Text.Encoding.Default%2A> property uses best-fit fallback to map unsupported characters to characters supported by the code page.</span></span> <span data-ttu-id="e15dc-725">出于这些原因，不建议使用默认编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-725">For these reasons, using the default encoding is not recommended.</span></span> <span data-ttu-id="e15dc-726">若要确保能够正确解码已编码的字节，应使用 Unicode 编码，如<xref:System.Text.UTF8Encoding>或<xref:System.Text.UnicodeEncoding>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-726">To ensure that encoded bytes are decoded properly, you should use a Unicode encoding, such as <xref:System.Text.UTF8Encoding> or <xref:System.Text.UnicodeEncoding>.</span></span> <span data-ttu-id="e15dc-727">此外可以使用更高级别的协议以确保相同的格式用于编码和解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-727">You could also use a higher-level protocol to ensure that the same format is used for encoding and decoding.</span></span>  

### <a name="the-default-property-in-the-net-framework"></a><span data-ttu-id="e15dc-728">.NET Framework 中的默认属性</span><span class="sxs-lookup"><span data-stu-id="e15dc-728">The Default property in the .NET Framework</span></span>

<span data-ttu-id="e15dc-729">在 Windows 桌面上，.NET Framework 中<xref:System.Text.Encoding.Default%2A>属性始终获取系统的活动的代码页，并创建<xref:System.Text.Encoding>与之相对应的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-729">In the .NET Framework on the Windows desktop, the <xref:System.Text.Encoding.Default%2A> property always gets the system's active code page and creates a <xref:System.Text.Encoding> object that corresponds to it.</span></span> <span data-ttu-id="e15dc-730">活动的代码页可能的 ANSI 代码页，其中包括按代码页集和不同的其他字符的 ASCII 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-730">The active code page may be an ANSI code page, which includes the ASCII character set along with additional characters that vary by code page.</span></span> <span data-ttu-id="e15dc-731">因为所有<xref:System.Text.Encoding.Default%2A>基于 ANSI 代码页编码会丢失数据，请考虑使用<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>改为编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-731">Because all <xref:System.Text.Encoding.Default%2A> encodings based on ANSI code pages lose data, consider using the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> encoding instead.</span></span> <span data-ttu-id="e15dc-732">Utf-8 通常是在 U + 00 到 U + 7F 范围相同，但可以对而不会丢失 ASCII 范围以外的字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-732">UTF-8 is often identical in the U+00 to U+7F range, but can encode characters outside the ASCII range without loss.</span></span>

## <a name="the-default-property-on-net-core"></a><span data-ttu-id="e15dc-733">.NET Core 中的默认属性</span><span class="sxs-lookup"><span data-stu-id="e15dc-733">The Default property on .NET Core</span></span>

<span data-ttu-id="e15dc-734">在.NET Core<xref:System.Text.Encoding.Default%2A>属性始终返回<xref:System.Text.UTF8Encoding>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-734">On .NET Core, the <xref:System.Text.Encoding.Default%2A> property always returns the <xref:System.Text.UTF8Encoding>.</span></span> <span data-ttu-id="e15dc-735">所有操作系统 （Windows、 Linux 和最大 OS X） 上运行的.NET Core 应用程序都支持 utf-8。</span><span class="sxs-lookup"><span data-stu-id="e15dc-735">UTF-8 is supported on all the operating systems (Windows, Linux, and Max OS X) on which .NET Core applications run.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.EncoderFallback EncoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.EncoderFallback EncoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EncoderFallback As EncoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::EncoderFallback ^ EncoderFallback { System::Text::EncoderFallback ^ get(); void set(System::Text::EncoderFallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EncoderFallback : System.Text.EncoderFallback with get, set" Usage="System.Text.Encoding.EncoderFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.EncoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-736">Gets or sets the <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-736">Gets or sets the <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-737">当前 <see cref="T:System.Text.Encoding" /> 对象的编码器回退对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-737">The encoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-738"><xref:System.Text.EncoderFallback>对象都表示一个字符不能转换为编码的字节序列时，将调用错误处理程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-738">The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</span></span> <span data-ttu-id="e15dc-739">支持以下处理程序类型之一：</span><span class="sxs-lookup"><span data-stu-id="e15dc-739">Any one of the following handler types is supported:</span></span>  
  
-   <span data-ttu-id="e15dc-740">最佳回退处理程序，它用合适的替换字符替换无法编码的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-740">A best-fit fallback handler, which replaces characters that cannot be encoded with some suitable replacement character.</span></span>  
  
-   <span data-ttu-id="e15dc-741">替换回退处理程序，它用任意替换字符替换无法编码的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-741">A replacement fallback handler, which replaces characters that cannot be encoded with some arbitrary replacement character.</span></span> <span data-ttu-id="e15dc-742">.NET Framework 包括一个替换回退处理程序， <xref:System.Text.EncoderFallback>，默认情况下不能进行编码的字符替换为问号 ("？") 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-742">The .NET Framework includes one replacement fallback handler, <xref:System.Text.EncoderFallback>, which by default replaces characters that cannot be encoded with a question mark ("?") character.</span></span>  
  
-   <span data-ttu-id="e15dc-743">异常回退处理程序，该字符不能进行编码时将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e15dc-743">An exception fallback handler, which throws an exception when characters cannot be encoded.</span></span> <span data-ttu-id="e15dc-744">.NET Framework 包括一个异常回退处理程序， <xref:System.Text.EncoderExceptionFallback>，该类会引发<xref:System.Text.EncoderFallbackException>字符无法解码时。</span><span class="sxs-lookup"><span data-stu-id="e15dc-744">The .NET Framework includes one exception fallback handler, <xref:System.Text.EncoderExceptionFallback>, which throws an <xref:System.Text.EncoderFallbackException> when characters cannot be decoded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-745">The value in a set operation is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-745">The value in a set operation is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e15dc-746">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-746">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="EncodingName">
      <MemberSignature Language="C#" Value="public virtual string EncodingName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodingName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncodingName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EncodingName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EncodingName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EncodingName : string" Usage="System.Text.Encoding.EncodingName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-747">When overridden in a derived class, gets the human-readable description of the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-747">When overridden in a derived class, gets the human-readable description of the current encoding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-748">当前 <see cref="T:System.Text.Encoding" /> 的用户可读说明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-748">The human-readable description of the current <see cref="T:System.Text.Encoding" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-749"><xref:System.Text.Encoding.EncodingName%2A>属性供显示。</span><span class="sxs-lookup"><span data-stu-id="e15dc-749">The <xref:System.Text.Encoding.EncodingName%2A> property is intended for display.</span></span> <span data-ttu-id="e15dc-750">若要查找的名称，可传递给<xref:System.Text.Encoding.GetEncoding%2A>方法，请使用<xref:System.Text.Encoding.WebName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-750">To find a name that can be passed to the <xref:System.Text.Encoding.GetEncoding%2A> method, use the <xref:System.Text.Encoding.WebName%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-751">下面的示例检索每个编码不同的名称，并显示具有一个或多个名称不同的编码<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-751">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e15dc-752">它将显示<xref:System.Text.Encoding.EncodingName%2A>但不会对其比较。</span><span class="sxs-lookup"><span data-stu-id="e15dc-752">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.DisplayName" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e15dc-753">The <see cref="T:System.Object" /> to compare with the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-753">The <see cref="T:System.Object" /> to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-754">Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-754">Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-755">
            <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-755">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-756">两个实例<xref:System.Text.Encoding>被视为相等，如果它们对应于相同的代码页和他们`EncoderFallback`和`DecoderFallback`对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="e15dc-756">Two instances of <xref:System.Text.Encoding> are considered equal if they correspond to the same code page and their `EncoderFallback` and `DecoderFallback` objects are equal.</span></span> <span data-ttu-id="e15dc-757">特别是，导出的代码页都有 0 的代码页和其回退一般都`null`(`Nothing`在 Visual Basic.NET)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-757">In particular, derived code pages all have a code page of 0 and their fallbacks are normally `null` (`Nothing` in Visual Basic .NET).</span></span> <span data-ttu-id="e15dc-758">因此它们均被视为等于另一个。</span><span class="sxs-lookup"><span data-stu-id="e15dc-758">Thus they are all considered equal to one another.</span></span> <span data-ttu-id="e15dc-759">一个后果是，当<xref:System.Text.Encoding.Equals%2A>用于填充哈希表中，所有派生编码比较相等并属于相同的哈希表槽。</span><span class="sxs-lookup"><span data-stu-id="e15dc-759">One consequence is that when <xref:System.Text.Encoding.Equals%2A> is used to populate a hash table, all derived encodings compare equal and fall into the same hash table slot.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-760">下面的示例获取的相同的编码 （代码页的一个），按名称的另一个、 两个实例，并检查其相等。</span><span class="sxs-lookup"><span data-stu-id="e15dc-760">The following example gets two instances of the same encoding (one by codepage and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Text.Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-761">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-761">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(cli::array &lt;char&gt; ^ chars);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : char[] -&gt; int&#xA;override this.GetByteCount : char[] -&gt; int" Usage="encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-762">The character array containing the characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-762">The character array containing the characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-763">When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-763">When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-764">The number of bytes produced by encoding all the characters in the specified character array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-764">The number of bytes produced by encoding all the characters in the specified character array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-765">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetBytes%2A>若要存储所产生的字节，调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-765">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-766">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-766">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-767"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-767">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-768"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-768">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-769"><xref:System.Text.Encoding.GetBytes%2A>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-769">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-770">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-770">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-771">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-771">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-772">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-772">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-773">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-773">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="e15dc-774">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-774">If your app handles string inputs, you should use the string versions of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="e15dc-775">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-775">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-776">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-776">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-777">如果您的应用程序必须将大量的数据转换，您应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-777">If your app must convert a large amount of data, you should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-778">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-778">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-779">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-779">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-780">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-780">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-781">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-781">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-782">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-782">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-783">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-783">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-784">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-784">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : ReadOnlySpan&lt;char&gt; -&gt; int&#xA;override this.GetByteCount : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : string -&gt; int&#xA;override this.GetByteCount : string -&gt; int" Usage="encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e15dc-785">The string containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-785">The string containing the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-786">When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-786">When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-787">The number of bytes produced by encoding the specified characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-787">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-788">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetBytes%2A>若要存储所产生的字节，调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-788">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-789">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-789">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-790"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-790">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-791"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-791">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-792"><xref:System.Text.Encoding.GetBytes%2A>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-792">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-793">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-793">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-794">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-794">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-795">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-795">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-796">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-796">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="e15dc-797">如果应用程序处理字符串输入的字符串版本<xref:System.Text.Encoding.GetBytes%2A>建议。</span><span class="sxs-lookup"><span data-stu-id="e15dc-797">If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.</span></span>  
  
-   <span data-ttu-id="e15dc-798">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-798">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-799">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-799">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-800">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-800">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-801">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-801">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-802">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-802">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-803">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-803">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-804">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-804">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-805">下面的示例确定进行编码的字符串或字符串中的范围所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-805">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-806">
            <paramref name="s" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-806">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-807">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-807">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : nativeptr&lt;char&gt; * int -&gt; int&#xA;override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-808">A pointer to the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-808">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-809">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-809">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-810">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-810">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-811">The number of bytes produced by encoding the specified characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-811">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-812">若要计算确切的数组大小，<xref:System.Text.Encoding.GetBytes%2A>需要用于存储所产生的字节，应调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-812">To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-813">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-813">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-814"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-814">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-815"><xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-815">The <xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-816"><xref:System.Text.Encoding.GetBytes%2A>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-816">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-817">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-817">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-818">以下是使用这些方法的一些注意事项：</span><span class="sxs-lookup"><span data-stu-id="e15dc-818">The following are some considerations for using these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-819">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-819">Your app may need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-820">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-820">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="e15dc-821">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-821">If your app handles string inputs, you should use the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="e15dc-822">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%2A>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-822">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%2A> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-823">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-823">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-824">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-824">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-825">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-825">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-826">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-826">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-827">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-827">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-828">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-828">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-829">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-829">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-830">
            <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-830">
              <paramref name="count" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-831">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-831">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="e15dc-832">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-832">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="e15dc-833">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-833">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : char[] * int * int -&gt; int" Usage="encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-834">The character array containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-834">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e15dc-835">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-835">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-836">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-836">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-837">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-837">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-838">The number of bytes produced by encoding the specified characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-838">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-839">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetBytes%2A>若要存储所产生的字节，调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-839">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-840">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-840">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-841"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-841">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-842"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-842">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-843"><xref:System.Text.Encoding.GetBytes%2A>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-843">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-844">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-844">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-845">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-845">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-846">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-846">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-847">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-847">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="e15dc-848">如果应用程序处理字符串输入的字符串版本<xref:System.Text.Encoding.GetBytes%2A>建议。</span><span class="sxs-lookup"><span data-stu-id="e15dc-848">If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.</span></span>  
  
-   <span data-ttu-id="e15dc-849">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-849">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-850">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-850">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-851">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-851">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-852">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-852">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-853">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-853">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-854">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-854">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-855">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-855">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-856">下面的示例确定所需字符数组中的三个字符进行编码的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-856">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-857">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-857">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-858">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-858">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-859">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-859">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-860">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-860">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (s As String, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetByteCount(System::String ^ s, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : string * int * int -&gt; int" Usage="encoding.GetByteCount (s, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-861">When overridden in a derived class, encodes a set of characters into a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-861">When overridden in a derived class, encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : char[] -&gt; byte[]&#xA;override this.GetBytes : char[] -&gt; byte[]" Usage="encoding.GetBytes chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-862">The character array containing the characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-862">The character array containing the characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-863">When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-863">When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-864">A byte array containing the results of encoding the specified set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-864">A byte array containing the results of encoding the specified set of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-865">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-865">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-866"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-866">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-867"><xref:System.Text.Encoding.GetBytes%2A>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-867">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-868">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-868">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-869">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-869">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-870">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-870">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-871">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-871">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="e15dc-872">（例如，包含代理项对的字符序列可能以结束一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-872">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="e15dc-873"><xref:System.Text.Encoder>将记住该高代理项，以便它可以结合以下调用开始处的低代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-873">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="e15dc-874"><xref:System.Text.Encoding> 不能维护状态，以使该字符将被发送到<xref:System.Text.EncoderFallback>。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-874"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="e15dc-875">如果您的应用程序处理字符串输入，则应调用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-875">If your app handles string inputs, you should call the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="e15dc-876">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-876">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-877">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-877">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-878">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-878">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-879">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-879">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-880">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-880">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-881">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-881">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-882">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-882">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-883">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-883">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-884">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-884">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-885">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-885">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : string -&gt; byte[]&#xA;override this.GetBytes : string -&gt; byte[]" Usage="encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e15dc-886">The string containing the characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-886">The string containing the characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-887">When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-887">When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-888">A byte array containing the results of encoding the specified set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-888">A byte array containing the results of encoding the specified set of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-889">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-889">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-890"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-890">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-891"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-891">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-892">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-892">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-893">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-893">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-894">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-894">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-895">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-895">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="e15dc-896">（例如，包含代理项对的字符序列可能以结束一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-896">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="e15dc-897"><xref:System.Text.Encoder>将记住该高代理项，以便它可以结合以下调用开始处的低代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-897">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="e15dc-898"><xref:System.Text.Encoding> 不能维护状态，以使该字符将被发送到<xref:System.Text.EncoderFallback>。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-898"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="e15dc-899">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-899">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="e15dc-900">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-900">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-901">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-901">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-902">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-902">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-903">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-903">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-904">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-904">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-905">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-905">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-906">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-906">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-907">下面的示例确定进行编码的字符串或字符串中的范围所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-907">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-908">
            <paramref name="s" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-908">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-909">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-909">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int&#xA;override this.GetBytes : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int" Usage="encoding.GetBytes (chars, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : char[] * int * int -&gt; byte[]&#xA;override this.GetBytes : char[] * int * int -&gt; byte[]" Usage="encoding.GetBytes (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-910">The character array containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-910">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e15dc-911">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-911">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-912">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-912">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-913">When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-913">When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-914">A byte array containing the results of encoding the specified set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-914">A byte array containing the results of encoding the specified set of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-915">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-915">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-916"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-916">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-917"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-917">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-918">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-918">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-919">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-919">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-920">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-920">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-921">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-921">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="e15dc-922">（例如，包含代理项对的字符序列可能以结束一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-922">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="e15dc-923"><xref:System.Text.Encoder>将记住该高代理项，以便它可以结合以下调用开始处的低代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-923">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="e15dc-924"><xref:System.Text.Encoding> 不能维护状态，以使该字符将被发送到<xref:System.Text.EncoderFallback>。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-924"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="e15dc-925">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-925">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="e15dc-926">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-926">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-927">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-927">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-928">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-928">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-929">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-929">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-930">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-930">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-931">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-931">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-932">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-932">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-933">下面的示例确定所需字符数组中的三个字符进行编码的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-933">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-934">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-934">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-935">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-935">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-936">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-936">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-937">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-937">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public byte[] GetBytes (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytes(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytes (s As String, index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetBytes : string * int * int -&gt; byte[]" Usage="encoding.GetBytes (s, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int&#xA;override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-938">A pointer to the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-938">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="e15dc-939">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-939">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="e15dc-940">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-940">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="e15dc-941">The maximum number of bytes to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-941">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-942">When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-942">When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-943">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-943">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-944">若要计算确切的数组大小，<xref:System.Text.Encoding.GetBytes%2A>需要用于存储所产生的字节，调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-944">To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-945">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-945">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-946"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-946">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-947">如果要转换的数据仅在 （如从流中读取的数据） 的顺序块中可用，或者如果数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.Encoding.GetDecoder%2A>或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-947">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-948"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-948">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-949"><xref:System.Text.Encoding.GetBytes%2A>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-949">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-950">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-950">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-951">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-951">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-952">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-952">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-953">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-953">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="e15dc-954">（例如，包含代理项对的字符序列可能以结束一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-954">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="e15dc-955"><xref:System.Text.Encoder>将记住该高代理项，以便它可以结合以下调用开始处的低代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-955">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="e15dc-956"><xref:System.Text.Encoding> 不能维护状态，以使该字符将被发送到<xref:System.Text.EncoderFallback>。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-956"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="e15dc-957">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-957">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="e15dc-958">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-958">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-959">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-959">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-960">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-960">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-961">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-961">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-962">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-962">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-963">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-963">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-964">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-964">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-965">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-965">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-966">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-966">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-967">
            <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-967">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-968">
            <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-968">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-969">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-969">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="e15dc-970">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-970">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="e15dc-971">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-971">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="e15dc-972">The character array containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-972">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="e15dc-973">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-973">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="e15dc-974">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-974">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="e15dc-975">The byte array to contain the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-975">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="e15dc-976">The index at which to start writing the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-976">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-977">When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-977">When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-978">The actual number of bytes written into <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-978">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-979">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-979">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-980">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-980">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-981"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-981">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-982">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-982">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-983"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-983">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-984"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-984">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-985">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-985">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-986">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-986">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-987">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-987">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-988">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-988">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="e15dc-989">（例如，包含代理项对的字符序列可能以结束一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-989">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="e15dc-990"><xref:System.Text.Encoder>将记住该高代理项，以便它可以结合以下调用开始处的低代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-990">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="e15dc-991"><xref:System.Text.Encoding> 不能维护状态，以使该字符将被发送到<xref:System.Text.EncoderFallback>。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-991"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="e15dc-992">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-992">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="e15dc-993">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-993">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-994">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-994">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-995">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-995">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-996">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-996">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-997">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-997">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-998">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-998">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-999">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-999">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1000">下面的示例确定所需字符数组中的三个字符进行编码的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1000">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1001">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1001">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-1002">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1002">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1003">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1003">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-1004">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1004">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="e15dc-1005">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1005">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1006">
            <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1006">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-1007">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1007">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : string * int * int * byte[] * int -&gt; int&#xA;override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e15dc-1008">The string containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1008">The string containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="e15dc-1009">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1009">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="e15dc-1010">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1010">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="e15dc-1011">The byte array to contain the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1011">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="e15dc-1012">The index at which to start writing the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1012">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1013">When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1013">When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1014">The actual number of bytes written into <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1014">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1015">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1015">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-1016">若要计算最大数组大小，请调用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1016">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-1017"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1017">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1018">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1018">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1019"><xref:System.Text.Encoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1019">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="e15dc-1020"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法，该处理单个输入流上的多个转换方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1020">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1021">多个版本<xref:System.Text.Encoding.GetByteCount%2A>和<xref:System.Text.Encoding.GetBytes%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1021">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="e15dc-1022">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1022">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1023">您的应用程序可能需要为代码页的多个输入的字符进行编码和处理使用多个调用的字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1023">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="e15dc-1024">在这种情况下，可能需要考虑到是否持久状态的调用之间维护状态<xref:System.Text.Encoder>对象正在使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1024">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="e15dc-1025">（例如，包含代理项对的字符序列可能以结束一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1025">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="e15dc-1026"><xref:System.Text.Encoder>将记住该高代理项，以便它可以结合以下调用开始处的低代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1026">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="e15dc-1027"><xref:System.Text.Encoding> 不能维护状态，以使该字符将被发送到<xref:System.Text.EncoderFallback>。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1027"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="e15dc-1028">如果您的应用程序处理字符串输入，则应使用的字符串版本<xref:System.Text.Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1028">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="e15dc-1029">Unicode 字符缓冲区版本<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于使用多个调用<xref:System.Text.Encoder>对象或将其插入到现有的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1029">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="e15dc-1030">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1030">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1031">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1031">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1032">在这种情况下，<xref:System.Text.Encoding.GetBytes%2A>支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1032">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1033">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1033">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="e15dc-1034">转换方法将为尽可能多的数据，并会引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1034">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1035">对于连续编码流，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1035">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1036">下面的示例确定进行编码的字符串或字符串中的范围所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1036">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1037">
            <paramref name="s" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1037">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-1038">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1038">-or-  <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1039">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1039">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-1040">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1040">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="e15dc-1041">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1041">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1042">
            <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1042">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-1043">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1043">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1044">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1044">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : byte[] -&gt; int&#xA;override this.GetCharCount : byte[] -&gt; int" Usage="encoding.GetCharCount bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1045">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1045">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1046">When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1046">When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1047">The number of characters produced by decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1047">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1048">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>要存储所产生的字符，应使用<xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1048">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method.</span></span> <span data-ttu-id="e15dc-1049">若要计算的最大数组大小，应使用<xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1049">To calculate the maximum array size, you should use the <xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29> method.</span></span> <span data-ttu-id="e15dc-1050"><xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1050">The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1051"><xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1051">The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method determines how many characters result in decoding a sequence of bytes, and the  <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1052"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1052">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1053">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1053">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1054">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1054">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1055">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1055">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1056">在这种情况下，可能需要调用之间维护状态。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1056">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="e15dc-1057">如果您的应用程序处理字符串输出，则应使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1057">If your app handles string outputs, you should use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="e15dc-1058">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1058">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1059">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1059">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1060">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1060">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1061">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1061">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1062">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1062">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1063">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1063">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1064">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1064">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1065">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1065">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1066">下面的示例将字符串编码为一个字节，数组，然后字节解码为一个字符的数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1066">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1067">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1067">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1068">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1068">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : ReadOnlySpan&lt;byte&gt; -&gt; int&#xA;override this.GetCharCount : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="encoding.GetCharCount bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int&#xA;override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1069">A pointer to the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1069">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-1070">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1070">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1071">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1071">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1072">The number of characters produced by decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1072">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1073">若要计算确切的数组大小，<xref:System.Text.Encoding.GetChars%2A>要求要存储所产生的字符，应使用<xref:System.Text.Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1073">To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1074">若要计算最大数组大小，请使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1074">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1075"><xref:System.Text.Encoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1075">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1076"><xref:System.Text.Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1076">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1077"><xref:System.Text.Encoding.GetChars%2A>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1077">The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1078">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1078">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1079">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1079">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1080">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1080">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1081">在这种情况下，可能需要调用之间维护状态。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1081">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="e15dc-1082">如果您的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1082">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="e15dc-1083">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1083">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1084">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1084">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1085">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1085">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1086">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1086">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1087">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1087">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1088">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1088">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1089">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1089">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1090">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1090">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1091">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1091">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1092">
            <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1092">
              <paramref name="count" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1093">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1093">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="e15dc-1094">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1094">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="e15dc-1095">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1095">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : byte[] * int * int -&gt; int" Usage="encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1096">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1096">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e15dc-1097">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1097">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-1098">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1098">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1099">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1099">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1100">The number of characters produced by decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1100">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1101">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetChars%2A>要存储所产生的字符，应使用<xref:System.Text.Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1101">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1102">若要计算最大数组大小，请使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1102">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1103"><xref:System.Text.Encoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1103">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1104"><xref:System.Text.Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1104">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1105"><xref:System.Text.Encoding.GetChars%2A>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1105">The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1106">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1106">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1107">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1107">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1108">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1108">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1109">在这种情况下，可能需要调用之间维护状态。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1109">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="e15dc-1110">如果您的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1110">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="e15dc-1111">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1111">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1112">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1112">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1113">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1113">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1114">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1114">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1115">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1115">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1116">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1116">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1117">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1117">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1118">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1118">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1119">下面的示例将字符串转换到另一个编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1119">The following example converts a string from one encoding to another.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 <span data-ttu-id="e15dc-1120">下面的示例将字符串编码为一个字节，数组，然后将某个范围的字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1120">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1121">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1121">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1122">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1122">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-1123">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1123">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1124">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1124">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1125">When overridden in a derived class, decodes a sequence of bytes into a set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1125">When overridden in a derived class, decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte()) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] -&gt; char[]&#xA;override this.GetChars : byte[] -&gt; char[]" Usage="encoding.GetChars bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1126">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1126">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1127">When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1127">When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1128">A character array containing the results of decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1128">A character array containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1129"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 获取字符从输入的字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1129"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="e15dc-1130"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因为<xref:System.Text.Encoding>需要离散的转换，而<xref:System.Text.Decoder>专为多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1130"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1131">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1131">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1132">**请注意**此方法旨在对 Unicode 字符，不是在任意二进制数据，如字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1132">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="e15dc-1133">如果需要任意二进制数据编码为文本，则应使用协议如 uuencode，实现方法如<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1133">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-1134"><xref:System.Text.Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1134">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1135"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1135">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1136">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1136">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1137">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1137">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1138">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1138">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1139">在这种情况下，您可能需要维护状态之间的调用，由于批中处理时，可以中断字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1139">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="e15dc-1140">(例如，ISO-2022 shift 序列的一部分可能结束一次<xref:System.Text.Encoding.GetChars%2A>调用，并继续下一步开始处<xref:System.Text.Encoding.GetChars%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1140">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="e15dc-1141"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 对于那些不完整的序列，调用回退但<xref:System.Text.Decoder>会记住这些序列的下一个调用。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1141"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="e15dc-1142">如果您的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1142">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="e15dc-1143">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1143">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1144">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1144">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1145">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1145">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1146">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1146">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1147">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1147">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1148">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1148">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1149">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1149">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1150">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1150">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1151">下面的示例将字符串编码为一个字节，数组，然后字节解码为一个字符的数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1151">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1152">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1152">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1153">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1153">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int&#xA;override this.GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int" Usage="encoding.GetChars (bytes, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte(), index As Integer, count As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] * int * int -&gt; char[]&#xA;override this.GetChars : byte[] * int * int -&gt; char[]" Usage="encoding.GetChars (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1154">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1154">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e15dc-1155">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1155">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-1156">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1156">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1157">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1157">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1158">A character array containing the results of decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1158">A character array containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1159"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 获取字符从输入的字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1159"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="e15dc-1160"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因为<xref:System.Text.Encoding>需要离散的转换，而<xref:System.Text.Decoder>专为多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1160"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1161">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1161">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1162">**请注意**此方法旨在对 Unicode 字符，不是在任意二进制数据，如字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1162">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="e15dc-1163">如果需要任意二进制数据编码为文本，则应使用协议如 uuencode，实现方法如<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1163">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-1164"><xref:System.Text.Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1164">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1165"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1165">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1166">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1166">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1167">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1167">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1168">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1168">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1169">在这种情况下，您可能需要维护状态之间的调用，由于批中处理时，可以中断字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1169">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="e15dc-1170">(例如，ISO-2022 shift 序列的一部分可能结束一次<xref:System.Text.Encoding.GetChars%2A>调用，并继续下一步开始处<xref:System.Text.Encoding.GetChars%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1170">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="e15dc-1171"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 对于那些不完整的序列，调用回退但<xref:System.Text.Decoder>会记住这些序列的下一个调用。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1171"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="e15dc-1172">如果您的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1172">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="e15dc-1173">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1173">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1174">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1174">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1175">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1175">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1176">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1176">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1177">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1177">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1178">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1178">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1179">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1179">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1180">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1180">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1181">下面的示例将字符串编码为一个字节，数组，然后将某个范围的字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1181">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1182">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1182">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1183">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1183">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-1184">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1184">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1185">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1185">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int&#xA;override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1186">A pointer to the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1186">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="e15dc-1187">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1187">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="e15dc-1188">A pointer to the location at which to start writing the resulting set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1188">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="e15dc-1189">The maximum number of characters to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1189">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1190">When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1190">When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1191">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1191">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1192">若要计算确切的数组大小，<xref:System.Text.Encoding.GetChars%2A>要求要存储所产生的字符，应使用<xref:System.Text.Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1192">To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1193">若要计算最大数组大小，请使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1193">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1194"><xref:System.Text.Encoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1194">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1195"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 获取字符从输入的字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1195"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="e15dc-1196"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因为<xref:System.Text.Encoding>需要离散的转换，而<xref:System.Text.Decoder>专为多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1196"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1197">如果要转换的数据仅在 （如从流中读取的数据） 的顺序块中可用，或者如果数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.Encoding.GetDecoder%2A>或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1197">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1198">**请注意**此方法旨在对 Unicode 字符，不是在任意二进制数据，如字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1198">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="e15dc-1199">如果需要任意二进制数据编码为文本，则应使用协议如 uuencode，实现方法如<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1199">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-1200"><xref:System.Text.Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1200">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1201"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1201">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1202">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1202">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1203">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1203">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1204">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1204">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1205">在这种情况下，您可能需要维护状态之间的调用，由于批中处理时，可以中断字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1205">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="e15dc-1206">(例如，ISO-2022 shift 序列的一部分可能结束一次<xref:System.Text.Encoding.GetChars%2A>调用，并继续下一步开始处<xref:System.Text.Encoding.GetChars%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1206">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="e15dc-1207"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 对于那些不完整的序列，调用回退但<xref:System.Text.Decoder>会记住这些序列的下一个调用。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1207"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="e15dc-1208">如果您的应用程序处理字符串输出<xref:System.Text.Encoding.GetString%2A>建议方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1208">If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended.</span></span> <span data-ttu-id="e15dc-1209">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1209">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1210">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1210">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1211">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1211">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1212">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1212">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1213">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1213">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1214">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1214">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1215">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1215">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1216">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1216">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1217">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1217">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-1218">-or-  <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1218">-or-  <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1219">
            <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1219">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1220">
            <paramref name="charCount" /> is less than the resulting number of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1220">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1221">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1221">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="e15dc-1222">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1222">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="e15dc-1223">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1223">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1224">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1224">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="e15dc-1225">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1225">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="e15dc-1226">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1226">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="e15dc-1227">The character array to contain the resulting set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1227">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="e15dc-1228">The index at which to start writing the resulting set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1228">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1229">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1229">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1230">The actual number of characters written into <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1230">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1231">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetChars%2A>要存储所产生的字符，应使用<xref:System.Text.Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1231">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1232">若要计算最大数组大小，请使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1232">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1233"><xref:System.Text.Encoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1233">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1234">[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 获取字符从输入的字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1234">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="e15dc-1235">[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>因为<xref:System.Text.Encoding>需要离散的转换，而<xref:System.Text.Decoder>专为单个输入流的多个传递。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1235">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1236">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1236">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1237">**请注意**此方法旨在对 Unicode 字符，不是在任意二进制数据，如字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1237">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="e15dc-1238">如果需要任意二进制数据编码为文本，则应使用协议如 uuencode，实现方法如<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1238">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-1239"><xref:System.Text.Encoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码和<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1239">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="e15dc-1240"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>方法需要与离散的转换，<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法，用于处理多个传递的单个输入流。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1240">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="e15dc-1241">多个版本<xref:System.Text.Encoding.GetCharCount%2A>和<xref:System.Text.Encoding.GetChars%2A>支持。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1241">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="e15dc-1242">使用这些方法的一些编程注意事项如下：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1242">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="e15dc-1243">您的应用程序可能需要对代码页从多个输入的字符进行解码和处理使用多个调用的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1243">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="e15dc-1244">在这种情况下，您可能需要维护状态之间的调用，由于批中处理时，可以中断字节序列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1244">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="e15dc-1245">(例如，ISO-2022 shift 序列的一部分可能结束一次 [\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%2A > 调用并继续下一步开头 [\]，Int32，Int32，Char\<xref: System.Text.Encoding.GetChars%2A > 调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1245">(For example, part of an ISO-2022 shift sequence may end one [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="e15dc-1246">[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 将对于这些不完整的序列，调用回退但<xref:System.Text.Decoder>会记住这些序列的下一个调用。)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1246">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="e15dc-1247">如果您的应用程序处理字符串输出<xref:System.Text.Encoding.GetString%2A>建议方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1247">If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended.</span></span> <span data-ttu-id="e15dc-1248">由于此方法必须检查字符串长度，并分配缓冲区，则速度稍慢，但生成<xref:System.String>类型是首选方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1248">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="e15dc-1249">字节新版<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>允许一些快速技巧，尤其是对于大型缓冲区多次调用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1249">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="e15dc-1250">请记住，但是，此方法版本是有时不安全，因为需要的指针。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1250">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="e15dc-1251">如果您的应用程序必须将大量的数据转换，它应重复使用的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1251">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="e15dc-1252">在这种情况下，[\]，Int32，Int32，Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > 支持输出字符的版本缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1252">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="e15dc-1253">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法而不是<xref:System.Text.Encoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1253">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="e15dc-1254">转换方法将尽可能多的数据，并将引发异常，如果输出缓冲区太小。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1254">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="e15dc-1255">对于连续解码，此方法通常是流的最佳选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1255">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1256">下面的示例将字符串转换到另一个编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1256">The following example converts a string from one encoding to another.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 <span data-ttu-id="e15dc-1257">下面的示例将字符串编码为一个字节，数组，然后将某个范围的字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1257">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1258">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1258">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e15dc-1259">-or-  <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1259">-or-  <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1260">
            <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1260">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-1261">-or-  <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1261">-or-  <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="e15dc-1262">-or-  <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1262">-or-  <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1263">
            <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1263">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1264">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1264">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="abstract member GetDecoder : unit -&gt; System.Text.Decoder&#xA;override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1265">When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1265">When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1266">A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1266">A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1267"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的字符，方式类似于块<xref:System.Text.Encoding.GetChars%2A>此类的方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1267">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="e15dc-1268">但是，<xref:System.Text.Decoder>以便它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1268">However, a <xref:System.Text.Decoder> maintains state information between calls so it correctly decodes byte sequences that span blocks.</span></span> <span data-ttu-id="e15dc-1269"><xref:System.Text.Decoder>还保留数据块的末尾的尾随字节并将在下一步的解码操作中的尾随字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1269">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="e15dc-1270">因此，<xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1270">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e15dc-1271">
            <para>默认实现返回<see cref="T:System.Text.Decoder" />的调用<see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />并<see cref="M:System.Text.Encoding.GetChars(System.Byte[])" />的当前方法<see cref="T:System.Text.Encoding" />。必须重写此方法以返回<see cref="T:System.Text.Decoder" />，其调用之间维护状态。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1271">
              <para>The default implementation returns a <see cref="T:System.Text.Decoder" /> that calls the <see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" /> and <see cref="M:System.Text.Encoding.GetChars(System.Byte[])" /> methods of the current <see cref="T:System.Text.Encoding" />. You must override this method to return a <see cref="T:System.Text.Decoder" /> that maintains its state between calls.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="abstract member GetEncoder : unit -&gt; System.Text.Encoder&#xA;override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1272">When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1272">When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1273">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1273">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1274"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的字节，方式类似于块<xref:System.Text.Encoding.GetBytes%2A>此类的方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1274">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.Encoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="e15dc-1275">但是，<xref:System.Text.Encoder>以便它可以正确地对跨块的字符序列进行编码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1275">However, a <xref:System.Text.Encoder> maintains state information between calls so it correctly encodes character sequences that span blocks.</span></span> <span data-ttu-id="e15dc-1276"><xref:System.Text.Encoder>还保留尾随字符数据块的末尾，并在下一步的编码操作中使用尾随字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1276">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="e15dc-1277">例如，数据块可能结尾不匹配的高代理项，且匹配的低代理项可能在下一个数据块。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1277">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="e15dc-1278">因此，<xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1278">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e15dc-1279">
            <para>默认实现返回<see cref="T:System.Text.Encoder" />的调用<see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />并<see cref="M:System.Text.Encoding.GetBytes(System.Char[])" />的当前方法<see cref="T:System.Text.Encoding" />。必须重写此方法以返回<see cref="T:System.Text.Encoder" />，其调用之间维护状态。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1279">
              <para>The default implementation returns a <see cref="T:System.Text.Encoder" /> that calls the <see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" /> and <see cref="M:System.Text.Encoding.GetBytes(System.Char[])" /> methods of the current <see cref="T:System.Text.Encoding" />. You must override this method to return a <see cref="T:System.Text.Encoder" /> that maintains its state between calls.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1280">Returns an encoding for the specified code page.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1280">Returns an encoding for the specified code page.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : int -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">
          <span data-ttu-id="e15dc-1281">The code page identifier of the preferred encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1281">The code page identifier of the preferred encoding.</span>
          </span>
          <span data-ttu-id="e15dc-1282">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1282">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          </span>
          <span data-ttu-id="e15dc-1283">-or-  0 (zero), to use the default encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1283">-or-  0 (zero), to use the default encoding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1284">Returns the encoding associated with the specified code page identifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1284">Returns the encoding associated with the specified code page identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1285">The encoding that is associated with the specified code page.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1285">The encoding that is associated with the specified code page.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1286">回退处理程序依赖的编码类型`codepage`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1286">The fallback handler depends on the encoding type of `codepage`.</span></span> <span data-ttu-id="e15dc-1287">如果`codepage`是代码页或双字节字符集 (DBCS) 编码、 使用最佳回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1287">If `codepage` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</span></span> <span data-ttu-id="e15dc-1288">否则，使用替换回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1288">Otherwise, a replacement fallback handler is used.</span></span> <span data-ttu-id="e15dc-1289">这些回退处理程序可能不一定适合您的应用程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1289">These fallback handlers may not be appropriate for your app.</span></span> <span data-ttu-id="e15dc-1290">若要指定使用指定的编码的回退处理程序`codepage`，可以调用<xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>重载。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1290">To specify the fallback handler used by the encoding specified by `codepage`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.</span></span>  
  
 <span data-ttu-id="e15dc-1291"><xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1291">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="e15dc-1292">但是，.NET Framework 本机支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1292">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="e15dc-1293">有关代码页的列表，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1293">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="e15dc-1294">或者，可以调用<xref:System.Text.Encoding.GetEncodings%2A>方法以获取数组的<xref:System.Text.EncodingInfo>包含有关所有编码的信息的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1294">Alternatively, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all encodings.</span></span>  
  
 <span data-ttu-id="e15dc-1295">除了在特定平台版本的.NET Framework 中，本质上受支持的编码<xref:System.Text.Encoding.GetEncoding%2A>方法返回可由注册任何其他编码<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1295">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="e15dc-1296">如果通过多个已注册相同的编码<xref:System.Text.EncodingProvider>对象，此方法将返回最后一个注册。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1296">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  

<span data-ttu-id="e15dc-1297">你也可以提供值为 0，`codepage`参数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1297">You can also supply a value of 0 for the `codepage` argument.</span></span> <span data-ttu-id="e15dc-1298">其确切行为取决于是否任何编码可由已注册<xref:System.Text.EncodingProvider>对象：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1298">Its precise behavior depends on whether any encodings have been made available by registering an <xref:System.Text.EncodingProvider> object:</span></span>

- <span data-ttu-id="e15dc-1299">如果已注册一个或多个编码提供程序，它将返回已选返回编码时的最后一个已注册提供程序的编码<xref:System.Text.Encoding.GetEncoding%2A>方法传递`codepage`自变量为 0。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1299">If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <xref:System.Text.Encoding.GetEncoding%2A> method is passed a `codepage` argument of 0.</span></span>     

- <span data-ttu-id="e15dc-1300">在.NET Framework 中，如果没有编码提供程序已注册，如果<xref:System.Text.CodePagesEncodingProvider>是已注册的编码提供程序，或如果没有已注册的编码提供程序处理`codepage`值为 0，它返回操作系统的活动的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1300">On the .NET Framework, if no encoding provider has been registered, if the <xref:System.Text.CodePagesEncodingProvider> is the registered encoding provider, or if no registered encoding provider handles a `codepage` value of 0, it returns the operating system's active code page.</span></span> <span data-ttu-id="e15dc-1301">若要确定 Windows 系统上的活动的代码页，请调用 Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)从.NET Framework 在 Windows 桌面上的函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1301">To determine the active code page on Windows systems, call the Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the .NET Framework on the Windows desktop.</span></span>

- <span data-ttu-id="e15dc-1302">在.NET Core，如果没有已注册编码提供程序，或如果没有已注册的编码提供程序处理`codepage`值为 0，它将返回<xref:System.Text.UTF8Encoding>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1302">On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a `codepage` value of 0, it returns the <xref:System.Text.UTF8Encoding>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1303">某些不受支持的代码页的原因<xref:System.ArgumentException>引发，而其他人会导致<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1303">Some unsupported code pages cause an <xref:System.ArgumentException> to be thrown, whereas others cause a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="e15dc-1304">因此，你的代码必须捕获所有异常节中所述的异常。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1304">Therefore, your code must catch all exceptions indicated in the Exceptions section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1305">ANSI 代码页不同的计算机上可以不同，并且可以更改在一台计算机，从而导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1305">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="e15dc-1306">出于此原因，如果活动的代码页是 ANSI 代码页，编码和解码数据使用的默认代码页返回`Encoding.GetEncoding(0)`不建议。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1306">For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended.</span></span> <span data-ttu-id="e15dc-1307">对于最一致的结果，应使用 Unicode 编码，例如 utf-8 （代码页 65001） 或 utf-16，而不特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1307">For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
  
 <span data-ttu-id="e15dc-1308"><xref:System.Text.Encoding.GetEncoding%2A> 返回具有默认设置的缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1308"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="e15dc-1309">应使用派生类的构造函数来获取实例使用不同的设置。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1309">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="e15dc-1310">例如，<xref:System.Text.UTF32Encoding>类提供构造函数，用于启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1310">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  

   
  
## Examples  
 <span data-ttu-id="e15dc-1311">下面的示例获取的相同的编码 （代码页的一个），按名称的另一个、 两个实例，并检查其相等。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1311">The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1312">
            <paramref name="codepage" /> is less than zero or greater than 65535.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1312">
              <paramref name="codepage" /> is less than zero or greater than 65535.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1313">
            <paramref name="codepage" /> is not supported by the underlying platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1313">
              <paramref name="codepage" /> is not supported by the underlying platform.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e15dc-1314">
            <paramref name="codepage" /> is not supported by the underlying platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1314">
              <paramref name="codepage" /> is not supported by the underlying platform.</span>
          </span>
        </exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : string -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e15dc-1315">The code page name of the preferred encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1315">The code page name of the preferred encoding.</span>
          </span>
          <span data-ttu-id="e15dc-1316">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1316">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span>
          </span>
          <span data-ttu-id="e15dc-1317">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1317">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1318">Returns the encoding associated with the specified code page name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1318">Returns the encoding associated with the specified code page name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1319">The encoding  associated with the specified code page.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1319">The encoding  associated with the specified code page.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1320">回退处理程序依赖的编码类型`name`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1320">The fallback handler depends on the encoding type of `name`.</span></span> <span data-ttu-id="e15dc-1321">如果`name`是代码页或双字节字符集 (DBCS) 编码、 使用最佳回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1321">If `name` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</span></span> <span data-ttu-id="e15dc-1322">否则，使用替换回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1322">Otherwise, a replacement fallback handler is used.</span></span> <span data-ttu-id="e15dc-1323">这些回退处理程序可能不一定适合您的应用程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1323">These fallback handlers may not be appropriate for your app.</span></span> <span data-ttu-id="e15dc-1324">若要指定使用指定的编码的回退处理程序`name`，可以调用<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>重载。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1324">To specify the fallback handler used by the encoding specified by `name`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.</span></span>  
  
 <span data-ttu-id="e15dc-1325"><xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1325">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="e15dc-1326">但是，.NET Framework 本机支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1326">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="e15dc-1327">有关代码页的列表，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1327">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="e15dc-1328">或者，可以调用<xref:System.Text.Encoding.GetEncodings%2A>方法以获取数组的<xref:System.Text.EncodingInfo>包含有关所有编码的信息的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1328">Alternatively, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all encodings.</span></span> 
  
 <span data-ttu-id="e15dc-1329">除了在特定平台版本的.NET Framework 中，本质上受支持的编码<xref:System.Text.Encoding.GetEncoding%2A>方法返回可由注册任何其他编码<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1329">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="e15dc-1330">如果通过多个已注册相同的编码<xref:System.Text.EncodingProvider>对象，此方法将返回最后一个注册。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1330">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  
   
> [!NOTE]
>  <span data-ttu-id="e15dc-1331">ANSI 代码页不同的计算机上可以不同，或者可以更改为一台计算机，从而导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1331">The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption.</span></span> <span data-ttu-id="e15dc-1332">为最一致的结果，应使用 Unicode，如 utf-8 （代码页 65001） 或 utf-16，而不是特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1332">For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
 
  
 <span data-ttu-id="e15dc-1333"><xref:System.Text.Encoding.GetEncoding%2A> 返回具有默认设置的缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1333"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="e15dc-1334">应使用派生类的构造函数来获取实例使用不同的设置。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1334">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="e15dc-1335">例如，<xref:System.Text.UTF32Encoding>类提供构造函数，用于启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1335">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
## Examples  
 <span data-ttu-id="e15dc-1336">下面的示例获取的相同的编码 （代码页的一个），按名称的另一个、 两个实例，并检查其相等。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1336">The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1337">
            <paramref name="name" /> is not a valid code page name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1337">
              <paramref name="name" /> is not a valid code page name.</span>
          </span>
          <span data-ttu-id="e15dc-1338">-or-  The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1338">-or-  The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span>
          </span>
        </exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">
          <span data-ttu-id="e15dc-1339">The code page identifier of the preferred encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1339">The code page identifier of the preferred encoding.</span>
          </span>
          <span data-ttu-id="e15dc-1340">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1340">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          </span>
          <span data-ttu-id="e15dc-1341">-or-  0 (zero), to use the default encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1341">-or-  0 (zero), to use the default encoding.</span>
          </span>
        </param>
        <param name="encoderFallback">
          <span data-ttu-id="e15dc-1342">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1342">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span>
          </span>
        </param>
        <param name="decoderFallback">
          <span data-ttu-id="e15dc-1343">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1343">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1344">Returns the encoding associated with the specified code page identifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1344">Returns the encoding associated with the specified code page identifier.</span>
          </span>
          <span data-ttu-id="e15dc-1345">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1345">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1346">The encoding that is associated with the specified code page.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1346">The encoding that is associated with the specified code page.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1347">某些不受支持的代码页会导致异常<xref:System.ArgumentException>引发，而其他人会导致<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1347">Some unsupported code pages cause the exception <xref:System.ArgumentException> to be thrown, whereas others cause <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="e15dc-1348">因此，你的代码必须捕获所有异常节中所述的异常。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1348">Therefore, your code must catch all exceptions indicated in the Exceptions section.</span></span>  
  
 <span data-ttu-id="e15dc-1349"><xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1349">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="e15dc-1350">但是，.NET Framework 本机支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1350">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="e15dc-1351">有关代码页的列表，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1351">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="e15dc-1352">您可以调用<xref:System.Text.Encoding.GetEncodings%2A>完整的.NET Framework 在 Windows 桌面上若要获取所有编码的列表中的方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1352">You can call the <xref:System.Text.Encoding.GetEncodings%2A> method in the full .NET Framework on the Windows desktop to get a list of all encodings.</span></span>   
  
 <span data-ttu-id="e15dc-1353">除了在特定平台版本的.NET Framework 中，本质上受支持的编码<xref:System.Text.Encoding.GetEncoding%2A>方法返回可由注册任何其他编码<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1353">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span>  <span data-ttu-id="e15dc-1354">如果通过多个已注册相同的编码<xref:System.Text.EncodingProvider>对象，此方法将返回最后一个注册。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1354">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  

<span data-ttu-id="e15dc-1355">你也可以提供值为 0，`codepage`参数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1355">You can also supply a value of 0 for the `codepage` argument.</span></span> <span data-ttu-id="e15dc-1356">其确切行为取决于是否任何编码可由已注册<xref:System.Text.EncodingProvider>对象：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1356">Its precise behavior depends on whether any encodings have been made available by registering an <xref:System.Text.EncodingProvider> object:</span></span>

- <span data-ttu-id="e15dc-1357">如果已注册一个或多个编码提供程序，它将返回已选返回编码时的最后一个已注册提供程序的编码<xref:System.Text.Encoding.GetEncoding%2A>方法传递`codepage`自变量为 0。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1357">If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <xref:System.Text.Encoding.GetEncoding%2A> method is passed a `codepage` argument of 0.</span></span>     

- <span data-ttu-id="e15dc-1358">在.NET Framework 中，如果没有编码提供程序已注册，如果<xref:System.Text.CodePagesEncodingProvider>是已注册的编码提供程序，或如果没有已注册的编码提供程序处理`codepage`值为 0，它返回活动的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1358">On the .NET Framework, if no encoding provider has been registered, if the <xref:System.Text.CodePagesEncodingProvider> is the registered encoding provider, or if no registered encoding provider handles a `codepage` value of 0, it returns the active code page.</span></span>

- <span data-ttu-id="e15dc-1359">在.NET Core，如果没有已注册编码提供程序，或如果没有已注册的编码提供程序处理`codepage`值为 0，它将返回<xref:System.Text.UTF8Encoding>编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1359">On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a `codepage` value of 0, it returns the <xref:System.Text.UTF8Encoding> encoding.</span></span>

> [!NOTE]
>  <span data-ttu-id="e15dc-1360">ANSI 代码页不同的计算机上可以不同，并且可以更改在一台计算机，从而导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1360">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="e15dc-1361">出于此原因，如果活动的代码页是 ANSI 代码页，编码和解码数据使用的默认代码页返回`Encoding.GetEncoding(0)`不建议。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1361">For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended.</span></span> <span data-ttu-id="e15dc-1362">为最一致的结果，应使用 Unicode，如 utf-8 （代码页 65001） 或 utf-16，而不是特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1362">For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span> 
  
 <span data-ttu-id="e15dc-1363">若要获取与活动的代码页关联的编码，可以提供值为 0，`codepage`自变量或在 Windows 桌面上完整的.NET Framework 上运行你的代码，如果检索的值<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1363">To get the encoding associated with the active code page, you can either supply a value of 0 for the `codepage` argument or, if your code is running on the full .NET Framework on the Windows desktop, retrieve the value of the <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e15dc-1364">若要确定当前活动的代码页，请调用 Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)从.NET Framework 在 Windows 桌面上的函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1364">To determine the current active code page, call the Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the .NET Framework on the Windows desktop.</span></span>  
  
 <span data-ttu-id="e15dc-1365"><xref:System.Text.Encoding.GetEncoding%2A> 返回具有默认设置的缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1365"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="e15dc-1366">应使用派生类的构造函数来获取实例使用不同的设置。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1366">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="e15dc-1367">例如，<xref:System.Text.UTF32Encoding>类提供构造函数，用于启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1367">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1368">下面的示例演示<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1368">The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1369">
            <paramref name="codepage" /> is less than zero or greater than 65535.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1369">
              <paramref name="codepage" /> is less than zero or greater than 65535.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1370">
            <paramref name="codepage" /> is not supported by the underlying platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1370">
              <paramref name="codepage" /> is not supported by the underlying platform.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e15dc-1371">
            <paramref name="codepage" /> is not supported by the underlying platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1371">
              <paramref name="codepage" /> is not supported by the underlying platform.</span>
          </span>
        </exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e15dc-1372">The code page name of the preferred encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1372">The code page name of the preferred encoding.</span>
          </span>
          <span data-ttu-id="e15dc-1373">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1373">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span>
          </span>
          <span data-ttu-id="e15dc-1374">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1374">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span>
          </span>
        </param>
        <param name="encoderFallback">
          <span data-ttu-id="e15dc-1375">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1375">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span>
          </span>
        </param>
        <param name="decoderFallback">
          <span data-ttu-id="e15dc-1376">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1376">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1377">Returns the encoding associated with the specified code page name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1377">Returns the encoding associated with the specified code page name.</span>
          </span>
          <span data-ttu-id="e15dc-1378">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1378">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1379">The encoding that is associated with the specified code page.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1379">The encoding that is associated with the specified code page.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1380"><xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1380">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="e15dc-1381">但是，.NET Framework 本机支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1381">However, the .NET Framework natively supports some encodings.</span></span>  
  
 <span data-ttu-id="e15dc-1382">除了在特定平台版本的.NET Framework 中，本质上受支持的编码<xref:System.Text.Encoding.GetEncoding%2A>方法返回可由注册任何其他编码<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1382">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="e15dc-1383">如果通过多个已注册相同的编码<xref:System.Text.EncodingProvider>对象，此方法将返回最后一个注册。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1383">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span> 
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1384">ANSI 代码页不同的计算机上可以不同，并且可以更改在一台计算机，从而导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1384">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="e15dc-1385">对于最一致的结果，应使用 Unicode 编码，例如 utf-8 （代码页 65001） 或 utf-16，而不特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1385">For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
  
 <span data-ttu-id="e15dc-1386">有关代码页的列表，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1386">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="e15dc-1387">您可以调用<xref:System.Text.Encoding.GetEncodings%2A>完整的.NET Framework 在 Windows 桌面上若要获取的所有编码列表上的方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1387">You can call the <xref:System.Text.Encoding.GetEncodings%2A> method on the full .NET Framework on the Windows desktop to get a list of all encodings.</span></span>  
  
 <span data-ttu-id="e15dc-1388"><xref:System.Text.Encoding.GetEncoding%2A> 返回具有默认设置的缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1388"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="e15dc-1389">应使用派生类的构造函数来获取实例使用不同的设置。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1389">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="e15dc-1390">例如，<xref:System.Text.UTF32Encoding>类提供构造函数，用于启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1390">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1391">下面的示例演示<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1391">The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1392">
            <paramref name="name" /> is not a valid code page name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1392">
              <paramref name="name" /> is not a valid code page name.</span>
          </span>
          <span data-ttu-id="e15dc-1393">-or-  The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1393">-or-  The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span>
          </span>
        </exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncodings">
      <MemberSignature Language="C#" Value="public static System.Text.EncodingInfo[] GetEncodings ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.EncodingInfo[] GetEncodings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncodings" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodings () As EncodingInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Text::EncodingInfo ^&gt; ^ GetEncodings();" />
      <MemberSignature Language="F#" Value="static member GetEncodings : unit -&gt; System.Text.EncodingInfo[]" Usage="System.Text.Encoding.GetEncodings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.EncodingInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1394">Returns an array that contains all encodings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1394">Returns an array that contains all encodings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1395">An array that contains all encodings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1395">An array that contains all encodings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1396">此方法返回受支持的编码，唯一不同的代码页的列表。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1396">This method returns a list of supported encodings, uniquely distinguished by code page.</span></span> <span data-ttu-id="e15dc-1397">列出了受支持的编码的表，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1397">For a table that lists the supported encodings, see the <xref:System.Text.Encoding> class topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1398">返回的受支持的编码的列表<xref:System.Text.Encoding.GetEncodings%2A>方法不包含任何可由任何其他的编码<xref:System.Text.EncodingProvider>注册的对的调用实现<xref:System.Text.Encoding.RegisterProvider%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1398">The list of supported encodings returned by the <xref:System.Text.Encoding.GetEncodings%2A> method does not include any additional encodings made available by any <xref:System.Text.EncodingProvider> implementations that were registered by calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method.</span></span>  
  
 <span data-ttu-id="e15dc-1399">编码 50220 和 50222 都具有名称"iso-2022年-jp"关联但不完全相同。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1399">Encodings 50220 and 50222 are both associated with the name "iso-2022-jp", but they are not identical.</span></span> <span data-ttu-id="e15dc-1400">编码 50220 半角片假名字符转换为全角片假名字符，而编码 50222 使用 shift/移出序列半角片假名字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1400">Encoding 50220 converts half-width Katakana characters to full-width Katakana characters, whereas encoding 50222 uses a shift-in/shift-out sequence to encode half-width Katakana characters.</span></span> <span data-ttu-id="e15dc-1401">编码 50222 的显示名称为"日语 (JIS-允许 1 个字节 Kana-因此 / SI)"来区分从编码 50220，具有显示命名为"日语 (JIS)"。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1401">The display name for encoding 50222 is "Japanese (JIS-Allow 1 byte Kana - SO/SI)" to distinguish it from encoding 50220, which has the display name "Japanese (JIS)".</span></span>  
  
 <span data-ttu-id="e15dc-1402">如果您请求编码名称"iso-2022年-jp"，编码 50220 返回的.NET Framework。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1402">If you request the encoding name "iso-2022-jp", the .NET Framework returns encoding 50220.</span></span> <span data-ttu-id="e15dc-1403">但是，适合于您的应用程序的编码取决于首选的半角片假名字符处理。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1403">However, the encoding that is appropriate for your app depends on the preferred treatment of the half-width Katakana characters.</span></span>  
  
 <span data-ttu-id="e15dc-1404">若要获取特定的编码，应使用<xref:System.Text.Encoding.GetEncoding%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1404">To get a specific encoding, you should use the <xref:System.Text.Encoding.GetEncoding%2A> method.</span></span>  
  
 <span data-ttu-id="e15dc-1405"><xref:System.Text.Encoding.GetEncodings%2A> 有时用来为用户提供一组文件中的编码**另存为**对话框。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1405"><xref:System.Text.Encoding.GetEncodings%2A> is sometimes used to present the user with a list of encodings in a File **Save as** dialog box.</span></span> <span data-ttu-id="e15dc-1406">但是，许多非 Unicode 编码是不完整，并且转换到的许多字符"？"，或在不同平台上有略有不同的行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1406">However, many non-Unicode encodings are either incomplete and translate many characters to "?", or have subtly different behavior on different platforms.</span></span> <span data-ttu-id="e15dc-1407">请考虑使用 utf-8 或 utf-16 作为默认值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1407">Consider using UTF-8 or UTF-16 as the default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1408">以下示例检查的每个编码的布尔属性的值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1408">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1409">Returns the hash code for the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1409">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1410">The hash code for the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1410">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="abstract member GetMaxByteCount : int -&gt; int" Usage="encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="e15dc-1411">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1411">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1412">When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1412">When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1413">The maximum number of bytes produced by encoding the specified number of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1413">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1414">`charCount`参数实际上指定了数<xref:System.Char>表示 Unicode 字符进行编码，因为.NET Framework 在内部使用 utf-16 来表示 Unicode 字符的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1414">The `charCount` parameter actually specifies the number of <xref:System.Char> objects that represent the Unicode characters to encode, because the .NET Framework internally uses UTF-16 to represent Unicode characters.</span></span> <span data-ttu-id="e15dc-1415">因此，大多数的 Unicode 字符可表示由一个<xref:System.Char>对象，但由代理项对，例如，表示一个 Unicode 字符需要两个<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1415">Consequently, most Unicode characters can be represented by one <xref:System.Char> object, but a Unicode character represented by a surrogate pair, for example, requires two <xref:System.Char> objects.</span></span>  
  
 <span data-ttu-id="e15dc-1416">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetBytes%2A>要存储所产生的字节，应使用<xref:System.Text.Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1416">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should use the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-1417">若要计算最大数组大小，请使用<xref:System.Text.Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1417">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="e15dc-1418"><xref:System.Text.Encoding.GetByteCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxByteCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1418">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1419"><xref:System.Text.Encoding.GetMaxByteCount%2A> 检索最坏的情况的数目，包括当前所选最差情形下<xref:System.Text.EncoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1419"><xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="e15dc-1420">如果有可能较大字符串中，选择了回退<xref:System.Text.Encoding.GetMaxByteCount%2A>检索大值，尤其是在最坏的情况下的编码涉及切换每个字符的模式的情况下。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1420">If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves large values, particularly in cases where the worst case for the encoding involves switching modes for every character.</span></span> <span data-ttu-id="e15dc-1421">例如，发生这种情况 ISO-2022年-JP。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1421">For example, this can happen for ISO-2022-JP.</span></span> <span data-ttu-id="e15dc-1422">有关详细信息，请参阅博客文章"[Encoding.GetMaxByteCount() 和 Encoding.GetMaxCharCount() 是什么？](http://go.microsoft.com/fwlink/?LinkId=153702)"</span><span class="sxs-lookup"><span data-stu-id="e15dc-1422">For more information, see the blog entry "[What's with Encoding.GetMaxByteCount() and Encoding.GetMaxCharCount()?](http://go.microsoft.com/fwlink/?LinkId=153702)"</span></span> <span data-ttu-id="e15dc-1423">(http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).</span><span class="sxs-lookup"><span data-stu-id="e15dc-1423">(http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).</span></span>  
  
 <span data-ttu-id="e15dc-1424">在大多数情况下，此方法检索用于小字符串的合理值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1424">In most cases, this method retrieves reasonable values for small strings.</span></span> <span data-ttu-id="e15dc-1425">对于大型字符串，可能需要使用非常大的缓冲区和时更合理缓冲区因过小，在极少数情况下捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1425">For large strings, you might have to choose between using very large buffers and catching errors in the rare case when a more reasonable buffer is too small.</span></span> <span data-ttu-id="e15dc-1426">您可能还需要考虑不同的方法使用<xref:System.Text.Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1426">You might also want to consider a different approach using <xref:System.Text.Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-1427">当使用<xref:System.Text.Encoding.GetMaxByteCount%2A>，应分配基于输入缓冲区的最大大小的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1427">When using <xref:System.Text.Encoding.GetMaxByteCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer.</span></span> <span data-ttu-id="e15dc-1428">如果输出缓冲区的大小受到约束，则可能会使用<xref:System.Text.Encoding.Convert%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1428">If the output buffer is constrained in size, you might use the <xref:System.Text.Encoding.Convert%2A> method.</span></span>  
  
 <span data-ttu-id="e15dc-1429">请注意，<xref:System.Text.Encoding.GetMaxByteCount%2A>考虑从以前的解码器操作潜在剩余的代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1429">Note that <xref:System.Text.Encoding.GetMaxByteCount%2A> considers potential leftover surrogates from a previous decoder operation.</span></span> <span data-ttu-id="e15dc-1430">解码器，由于传递给方法的值为 1 检索 2 表示单字节编码，如 ASCII。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1430">Because of the decoder, passing a value of 1 to the method retrieves 2 for a single-byte encoding, such as ASCII.</span></span> <span data-ttu-id="e15dc-1431">应使用<xref:System.Text.ASCIIEncoding.IsSingleByte%2A>如果此信息是必需的属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1431">You should use the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property if this information is necessary.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1432">`GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1432">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1433">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1433">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1434">
            <paramref name="charCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1434">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="e15dc-1435">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1435">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="e15dc-1436">
            <para>所有<see cref="T:System.Text.Encoding" />实现必须保证，缓冲区溢出会发生任何异常根据该方法的计算结果的大小将调整缓冲区。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1436">
              <para>All <see cref="T:System.Text.Encoding" /> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="abstract member GetMaxCharCount : int -&gt; int" Usage="encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="e15dc-1437">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1437">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1438">When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1438">When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1439">The maximum number of characters produced by decoding the specified number of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1439">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1440">若要计算所需的确切的数组大小<xref:System.Text.Encoding.GetChars%2A>要存储所产生的字符，应使用<xref:System.Text.Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1440">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1441">若要计算最大数组大小，请使用<xref:System.Text.Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1441">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="e15dc-1442"><xref:System.Text.Encoding.GetCharCount%2A>方法通常允许您分配的内存越少，而<xref:System.Text.Encoding.GetMaxCharCount%2A>方法通常更快地执行。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1442">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="e15dc-1443"><xref:System.Text.Encoding.GetMaxCharCount%2A> 检索最坏的情况的数目，包括当前所选最差情形下<xref:System.Text.DecoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1443"><xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="e15dc-1444">如果有可能较大字符串中，选择了回退<xref:System.Text.Encoding.GetMaxCharCount%2A>检索大值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1444">If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="e15dc-1445">在大多数情况下，此方法检索用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1445">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="e15dc-1446">对于大型字符串，可能需要使用非常大的缓冲区和更合理的缓冲区因过小的情况很少捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1446">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is too small.</span></span> <span data-ttu-id="e15dc-1447">您可能还需要考虑不同的方法使用<xref:System.Text.Encoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1447">You might also want to consider a different approach using <xref:System.Text.Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e15dc-1448"><xref:System.Text.Encoding.GetMaxCharCount%2A> 与无关<xref:System.Text.Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1448"><xref:System.Text.Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="e15dc-1449">如果需要使用具有相似的功能<xref:System.Text.Encoding.GetBytes%2A>，则应使用<xref:System.Text.Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1449">If you needs a similar function to use with <xref:System.Text.Encoding.GetBytes%2A>, you should use <xref:System.Text.Encoding.GetMaxByteCount%2A>.</span></span>  
  
 <span data-ttu-id="e15dc-1450">当使用<xref:System.Text.Encoding.GetMaxCharCount%2A>，应分配基于输入缓冲区的最大大小的输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1450">When using <xref:System.Text.Encoding.GetMaxCharCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer.</span></span> <span data-ttu-id="e15dc-1451">如果输出缓冲区的大小受到约束，则可能会使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1451">If the output buffer is constrained in size, you might use the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e15dc-1452">请注意，<xref:System.Text.Encoding.GetMaxCharCount%2A>考虑最坏的情况下，从以前的编码器操作的剩余字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1452">Note that <xref:System.Text.Encoding.GetMaxCharCount%2A> considers the worst case for leftover bytes from a previous encoder operation.</span></span> <span data-ttu-id="e15dc-1453">对于大多数代码页，将 0 的值传递给此方法检索的值大于或等于 1。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1453">For most code pages, passing a value of 0 to this method retrieves values greater than or equal to 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e15dc-1454">`GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1454">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1455">下面的示例将字符串编码为一个字节，数组，然后字节解码为一个字符的数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1455">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1456">
            <paramref name="byteCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1456">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1457">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1457">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="e15dc-1458">
            <para>所有<see cref="T:System.Text.Encoding" />实现必须保证，缓冲区溢出会发生任何异常根据该方法的计算结果的大小将调整缓冲区。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1458">
              <para>All <see cref="T:System.Text.Encoding" /> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public virtual byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="abstract member GetPreamble : unit -&gt; byte[]&#xA;override this.GetPreamble : unit -&gt; byte[]" Usage="encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1459">When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1459">When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1460">A byte array containing a sequence of bytes that specifies the encoding used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1460">A byte array containing a sequence of bytes that specifies the encoding used.</span>
          </span>
          <span data-ttu-id="e15dc-1461">-or-  A byte array of length zero, if a preamble is not required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1461">-or-  A byte array of length zero, if a preamble is not required.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1462">（可选）<xref:System.Text.Encoding>对象提供一个前导码，可以将作为前缀的编码过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1462">Optionally, the <xref:System.Text.Encoding> object provides a preamble that is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="e15dc-1463">如果该前导码包含字节顺序标记 （在 Unicode 码位 U + FEFF)，它可帮助确定的字节顺序转换格式或 UTF 的解码器。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1463">If the preamble contains a byte order mark (in Unicode, code point U+FEFF), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="e15dc-1464">（以十六进制格式），Unicode 字节顺序标记 (BOM) 序列化是按如下所示：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1464">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="e15dc-1465">UTF-8: EF BB BF</span><span class="sxs-lookup"><span data-stu-id="e15dc-1465">UTF-8: EF BB BF</span></span>  
  
-   <span data-ttu-id="e15dc-1466">Utf-16 big endian 字节顺序： FE FF</span><span class="sxs-lookup"><span data-stu-id="e15dc-1466">UTF-16 big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="e15dc-1467">Utf-16 little-endian 字节顺序： FF FE</span><span class="sxs-lookup"><span data-stu-id="e15dc-1467">UTF-16 little endian byte order: FF FE</span></span>  
  
-   <span data-ttu-id="e15dc-1468">UTF-32 big endian 字节顺序： 00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="e15dc-1468">UTF-32 big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="e15dc-1469">UTF-32 little-endian 字节顺序： FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="e15dc-1469">UTF-32 little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="e15dc-1470">应使用 BOM，因为它提供了近乎确定的编码的文件，否则为已失去对引用标识<xref:System.Text.Encoding>对象，例如，无标记或标记错误的 web 数据或存储时业务的随机文本文件没有具有国际问题或其他数据。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1470">You should use the BOM, because it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.Encoding> object, for example, untagged or improperly tagged web data or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="e15dc-1471">如果数据一致和正确的标记，最好是 utf-8 或 utf-16 中，可能避免通常用户问题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1471">Often user problems might be avoided if data is consistently and properly tagged, preferably in UTF-8 or UTF-16.</span></span>  
  
 <span data-ttu-id="e15dc-1472">提供编码类型的标准，BOM 是有点多余。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1472">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="e15dc-1473">但是，它可以用于帮助发送正确的编码标头的服务器。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1473">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="e15dc-1474">或者，它可以用作回退的编码是否则丢失的情况下。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1474">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="e15dc-1475">有一些缺点使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1475">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="e15dc-1476">例如，了解如何限制使用 BOM 的数据库字段很难。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1476">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="e15dc-1477">文件串联可以也是个问题，例如，在此类合并的文件时不必要的字符可能出现的中间数据的方式。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1477">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="e15dc-1478">但是，尽管有几个缺点下, 强烈建议使用一个 BOM。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1478">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="e15dc-1479">有关字节顺序和字节顺序标记的详细信息，请参阅 Unicode Standard [Unicode 主页](http://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1479">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e15dc-1480">若要确保正确解码已编码的字节，应前缀编码后带前导码的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1480">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="e15dc-1481">但是，大多数编码不提供一个前导码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1481">However, most encodings do not provide a preamble.</span></span> <span data-ttu-id="e15dc-1482">若要确保能够正确解码已编码的字节，应使用 Unicode 编码，即<xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>，或<xref:System.Text.UTF32Encoding>，带前导码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1482">To ensure that the encoded bytes are decoded properly, you should use a Unicode encoding, that is, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding>, with a preamble.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1483">下面的示例确定编码基于该前导码的字节的顺序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1483">The following example determines the byte order of the encoding based on the preamble.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CPP/preamble.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CS/preamble.cs#1)]
 [!code-vb[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/VB/preamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1484">When overridden in a derived class, decodes a sequence of bytes into a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1484">When overridden in a derived class, decodes a sequence of bytes into a string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetString : byte[] -&gt; string&#xA;override this.GetString : byte[] -&gt; string" Usage="encoding.GetString bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1485">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1485">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1486">When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1486">When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1487">A string that contains the results of decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1487">A string that contains the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1488">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>返回对象<xref:System.Text.Encoding.GetDecoder%2A>派生方法ved 类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1488">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1489">请参阅备注部分的<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>解码技术和注意事项的讨论的参考主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1489">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
 <span data-ttu-id="e15dc-1490">请注意的确切行为<xref:System.Text.Encoding.GetString%2A>方法为特定<xref:System.Text.Encoding>实现取决于为该定义的回退策略<xref:System.Text.Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1490">Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object.</span></span> <span data-ttu-id="e15dc-1491">有关详细信息，请参阅的"选择回退策略"部分[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1491">For more information, see the "Choosing a Fallback Strategy" section of the [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1492">下面的示例从所表示的二进制文件中读取的 utf-8 编码字符串<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1492">The following example reads a UTF-8 encoded string from a binary file represented by a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="e15dc-1493">对于小于 2,048 个字节的文件，它将整个文件的内容读入一个字节数组和调用<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29>方法进行解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1493">For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29> method to perform the decoding.</span></span> <span data-ttu-id="e15dc-1494">对于较大的文件，它 2,048 个字节一次读取到字节数组，调用<xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法来确定多少个字符包含在数组中，并调用<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>方法进行解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1494">For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> method to perform the decoding.</span></span>  
  
 [!code-csharp[System.Text.Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring1.cs#2)]
 [!code-vb[System.Text.Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring1.vb#2)]  
  
 <span data-ttu-id="e15dc-1495">该示例使用以下文本，应保存到名为 Utf8Example.txt 的 utf-8 编码文件。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1495">The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</span></span>  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1496">The byte array contains invalid Unicode code points.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1496">The byte array contains invalid Unicode code points.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1497">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1497">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1498">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1498">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString (bytes As ReadOnlySpan(Of Byte)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.GetString : ReadOnlySpan&lt;byte&gt; -&gt; string" Usage="encoding.GetString bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="member this.GetString : nativeptr&lt;byte&gt; * int -&gt; string" Usage="encoding.GetString (bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1499">A pointer to a byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1499">A pointer to a byte array.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="e15dc-1500">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1500">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1501">When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1501">When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1502">A string that contains the results of decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1502">A string that contains the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1503"><xref:System.Text.Encoding.GetString%2A>方法，可以在具有指向一个字节数组的本机指针时优化性能。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1503">The <xref:System.Text.Encoding.GetString%2A> method is designed to optimize performance when you have a native pointer to a byte array.</span></span> <span data-ttu-id="e15dc-1504">而不是创建的托管的字节数组，然后对其进行解码，可以改为调用此方法，而无需创建任何中间对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1504">Instead of creating a managed byte array and then decoding it, you can instead call this method without having to create any intermediate objects.</span></span>  
  
 <span data-ttu-id="e15dc-1505">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>返回对象<xref:System.Text.Encoding.GetDecoder%2A>派生方法ved 类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1505">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1506">请参阅备注部分的<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>解码技术和注意事项的讨论的参考主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1506">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
 <span data-ttu-id="e15dc-1507">请注意的确切行为<xref:System.Text.Encoding.GetString%2A>方法为特定<xref:System.Text.Encoding>实现取决于为该定义的回退策略<xref:System.Text.Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1507">Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object.</span></span> <span data-ttu-id="e15dc-1508">有关详细信息，请参阅的"选择回退策略"部分[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1508">For more information, see the "Choosing a Fallback Strategy" section of the [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1509">
            <paramref name="bytes" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1509">
              <paramref name="bytes" /> is a null pointer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1510">
            <paramref name="byteCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1510">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1511">A   fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1511">A   fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetString : byte[] * int * int -&gt; string&#xA;override this.GetString : byte[] * int * int -&gt; string" Usage="encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="e15dc-1512">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1512">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e15dc-1513">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1513">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e15dc-1514">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1514">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1515">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1515">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1516">A string that contains the results of decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1516">A string that contains the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1517">如果要转换的数据仅在顺序块 （如从流中读取的数据） 中不可用或数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供的<xref:System.Text.Encoding.GetDecoder%2A>方法或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1517">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="e15dc-1518">请参阅备注部分的<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>解码技术和注意事项的讨论的参考主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1518">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1519">下面的示例从二进制文件由表示读取 utf-8 编码字符串<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1519">The following example reads a UTF-8 encoded string from a binary file that is represented by a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="e15dc-1520">对于小于 2,048 个字节的文件，它将整个文件的内容读入一个字节数组和调用<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法进行解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1520">For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to perform the decoding.</span></span> <span data-ttu-id="e15dc-1521">对于较大的文件，它 2,048 个字节一次读取到字节数组，调用<xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法来确定多少个字符包含在数组中，并调用<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>方法进行解码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1521">For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> method to perform the decoding.</span></span>  
  
 [!code-csharp[System.Text.Encoding.GetString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring2.cs#3)]
 [!code-vb[System.Text.Encoding.GetString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring2.vb#3)]  
  
 <span data-ttu-id="e15dc-1522">该示例使用以下文本，应保存到名为 Utf8Example.txt 的 utf-8 编码文件。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1522">The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</span></span>  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e15dc-1523">The byte array contains invalid Unicode code points.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1523">The byte array contains invalid Unicode code points.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1524">
            <paramref name="bytes" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1524">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e15dc-1525">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1525">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e15dc-1526">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1526">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="e15dc-1527">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1527">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HeaderName">
      <MemberSignature Language="C#" Value="public virtual string HeaderName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.HeaderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HeaderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HeaderName : string" Usage="System.Text.Encoding.HeaderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1528">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1528">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1529">与邮件代理头标记一起使用的当前 <see cref="T:System.Text.Encoding" /> 的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1529">A name for the current <see cref="T:System.Text.Encoding" /> to use with mail agent header tags.</span>
          </span>
          <span data-ttu-id="e15dc-1530">-空字符串 ("")，如果当前<see cref="T:System.Text.Encoding" />不能使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1530">-or-  An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1531">如果您需要的标头名称的编码，则应调用<xref:System.Text.Encoding.GetEncoding%2A>方法替换<xref:System.Text.Encoding.HeaderName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1531">If you need an encoding for a header name, you should call the <xref:System.Text.Encoding.GetEncoding%2A> method with the <xref:System.Text.Encoding.HeaderName%2A> property.</span></span> <span data-ttu-id="e15dc-1532">通常方法检索不同的编码从调用中提供的测试编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1532">Often the method retrieves a different encoding from the test encoding furnished in the call.</span></span> <span data-ttu-id="e15dc-1533">通常只有电子邮件应用程序需要检索此类编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1533">Generally only email applications need to retrieve such an encoding.</span></span>  
  
 <span data-ttu-id="e15dc-1534">在某些情况下，值<xref:System.Text.Encoding.BodyName%2A>属性对应于定义编码的国际标准。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1534">In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding.</span></span> <span data-ttu-id="e15dc-1535">这并不意味着实现符合该标准填满中。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1535">This doesn't mean that the implementation complies in full with that standard.</span></span>  
  
 <span data-ttu-id="e15dc-1536">请注意，<xref:System.Text.Encoding.WebName%2A>返回要用来描述的编码的名称。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1536">Note that <xref:System.Text.Encoding.WebName%2A> returns the name to use to describe an encoding.</span></span> <span data-ttu-id="e15dc-1537"><xref:System.Text.Encoding.HeaderName%2A>属性定义一个不同的编码可能更适用于电子邮件应用程序，例如。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1537">The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for an email application, for example.</span></span> <span data-ttu-id="e15dc-1538">但是，不建议使用要定义的编码的属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1538">However, use of the property to define the encoding is not recommended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1539">下面的示例检索每个编码不同的名称，并显示具有一个或多个名称不同的编码<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1539">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e15dc-1540">它将显示<xref:System.Text.Encoding.EncodingName%2A>但不会对其比较。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1540">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAlwaysNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1541">Gets a value indicating whether the current encoding is always normalized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1541">Gets a value indicating whether the current encoding is always normalized.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public bool IsAlwaysNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAlwaysNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAlwaysNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAlwaysNormalized();" />
      <MemberSignature Language="F#" Value="member this.IsAlwaysNormalized : unit -&gt; bool" Usage="encoding.IsAlwaysNormalized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1542">Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1542">Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1543">
            <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is always normalized; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1543">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is always normalized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e15dc-1544">The default is <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1544">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1545">默认规范化窗体是<xref:System.Text.NormalizationForm.FormC>，它使用完全标准分解，如有可能后跟其主复合序列替换。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1545">The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAlwaysNormalized(valuetype System.Text.NormalizationForm form) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAlwaysNormalized (form As NormalizationForm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAlwaysNormalized(System::Text::NormalizationForm form);" />
      <MemberSignature Language="F#" Value="abstract member IsAlwaysNormalized : System.Text.NormalizationForm -&gt; bool&#xA;override this.IsAlwaysNormalized : System.Text.NormalizationForm -&gt; bool" Usage="encoding.IsAlwaysNormalized form" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="form">
          <span data-ttu-id="e15dc-1546">One of the <see cref="T:System.Text.NormalizationForm" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1546">One of the <see cref="T:System.Text.NormalizationForm" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1547">When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1547">When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e15dc-1548">
            <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> object is always normalized using the specified <see cref="T:System.Text.NormalizationForm" /> value; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1548">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> object is always normalized using the specified <see cref="T:System.Text.NormalizationForm" /> value; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e15dc-1549">The default is <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1549">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1550">默认规范化窗体是<xref:System.Text.NormalizationForm.FormC>，它使用完全标准分解，如有可能后跟其主复合序列替换。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1550">The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserDisplay { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBrowserDisplay : bool" Usage="System.Text.Encoding.IsBrowserDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1551">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1551">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1552">如果浏览器客户端可以使用当前 <see langword="true" /> 显示内容，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1552">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for displaying content; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e15dc-1553">以下示例检查的每个编码的布尔属性的值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1553">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserSave" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserSave">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserSave { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBrowserSave : bool" Usage="System.Text.Encoding.IsBrowserSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1554">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1554">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1555">如果浏览器客户端可以使用当前 <see langword="true" /> 保存内容，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1555">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for saving content; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e15dc-1556">以下示例检查的每个编码的布尔属性的值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1556">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsDisplay { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMailNewsDisplay : bool" Usage="System.Text.Encoding.IsMailNewsDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1557">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1557">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1558">如果邮件和新闻客户端可以使用当前 <see langword="true" /> 显示内容，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1558">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for displaying content; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e15dc-1559">以下示例检查的每个编码的布尔属性的值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1559">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsSave">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsSave { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMailNewsSave : bool" Usage="System.Text.Encoding.IsMailNewsSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1560">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1560">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1561">如果邮件和新闻客户端可以使用当前 <see langword="true" /> 保存内容，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1561">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for saving content; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e15dc-1562">以下示例检查的每个编码的布尔属性的值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1562">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsSave" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Text.Encoding.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1563">When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1563">When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1564">如果当前 <see langword="true" /> 为只读，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1564">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e15dc-1565">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1565">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleByte">
      <MemberSignature Language="C#" Value="public virtual bool IsSingleByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleByte" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsSingleByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSingleByte As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSingleByte { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleByte : bool" Usage="System.Text.Encoding.IsSingleByte" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1566">When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1566">When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1567">如果当前 <see langword="true" /> 使用单字节码位，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1567">
              <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> uses single-byte code points; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1568">单字节编码，例如， <xref:System.Text.ASCIIEncoding>，此属性检索`true`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1568">For a single-byte encoding, for example, <xref:System.Text.ASCIIEncoding>, this property retrieves `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e15dc-1569">应当小心在您的应用程序的值与<xref:System.Text.Encoding.IsSingleByte%2A>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1569">You should be careful in what your application does with the value for <xref:System.Text.Encoding.IsSingleByte%2A>.</span></span> <span data-ttu-id="e15dc-1570">编码将如何进行假设仍可能有误。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1570">An assumption of how an Encoding will proceed may still be wrong.</span></span> <span data-ttu-id="e15dc-1571">例如，Windows 1252 具有值`true`为<xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>，但 Encoding.GetMaxByteCount(1) 返回 2。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1571">For example, Windows-1252 has a value of `true` for <xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>, but Encoding.GetMaxByteCount(1) returns 2.</span></span> <span data-ttu-id="e15dc-1572">这是因为该方法将从以前的解码器操作潜在剩余的代理项。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1572">This is because the method considers potential leftover surrogates from a previous decoder operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1573">以下示例检查的每个编码的布尔属性的值。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1573">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public virtual ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Preamble : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Encoding.Preamble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterProvider">
      <MemberSignature Language="C#" Value="public static void RegisterProvider (System.Text.EncodingProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterProvider(class System.Text.EncodingProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterProvider (provider As EncodingProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterProvider(System::Text::EncodingProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member RegisterProvider : System.Text.EncodingProvider -&gt; unit" Usage="System.Text.Encoding.RegisterProvider provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Text.EncodingProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e15dc-1574">A subclass of <see cref="T:System.Text.EncodingProvider" /> that provides access to additional character encodings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1574">A subclass of <see cref="T:System.Text.EncodingProvider" /> that provides access to additional character encodings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e15dc-1575">Registers an encoding provider.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1575">Registers an encoding provider.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1576"><xref:System.Text.Encoding.RegisterProvider%2A>方法，可注册派生自的类<xref:System.Text.EncodingProvider>进行字符编码不支持它们的平台上可用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1576">The <xref:System.Text.Encoding.RegisterProvider%2A> method allows you to register a class derived from <xref:System.Text.EncodingProvider> that makes character encodings available on a platform that does not otherwise support them.</span></span> <span data-ttu-id="e15dc-1577">它支持的编码的编码提供程序注册后，可以检索通过调用任何<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>重载。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1577">Once the encoding provider is registered, the encodings that it supports can be retrieved by calling any <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> overload.</span></span> <span data-ttu-id="e15dc-1578">如果有多个编码提供程序，<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法尝试检索指定的编码从开始使用最新注册每个提供程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1578">If there are multiple encoding providers, the <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> method attempts to retrieve a specified encoding from each provider starting with the one most recently registered.</span></span>

<span data-ttu-id="e15dc-1579">使用注册编码提供程序<xref:System.Text.Encoding.RegisterProvider%2A>方法还会修改的行为[Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)和[EncodingProvider.GetEncoding (Int32，EncoderFallback，DecoderFallback)](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback))方法时传递的参数`0`:</span><span class="sxs-lookup"><span data-stu-id="e15dc-1579">Registering an encoding provider by using the <xref:System.Text.Encoding.RegisterProvider%2A> method also modifies the behavior of the [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) and [EncodingProvider.GetEncoding(Int32, EncoderFallback, DecoderFallback)](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)) methods when passed an argument of `0`:</span></span>

- <span data-ttu-id="e15dc-1580">如果已注册的提供程序是<xref:System.Text.CodePagesEncodingProvider>，该方法将返回 Windows 操作系统上运行时与系统活动的代码页相匹配的编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1580">If the registered provider is the <xref:System.Text.CodePagesEncodingProvider>, the method returns the encoding that matches the system active code page when running on the Windows operating system.</span></span>

- <span data-ttu-id="e15dc-1581">自定义编码提供程序可以选择编码时要返回其中一种<xref:System.Text.Encoding.GetEncoding%2A>方法重载传递的参数`0`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1581">A custom encoding provider can choose which encoding to return when either of these <xref:System.Text.Encoding.GetEncoding%2A> method overloads is passed an argument of `0`.</span></span> <span data-ttu-id="e15dc-1582">此外可以选择提供程序不会返回通过让编码<xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1582">The provider can also choose to not return an encoding by having the <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> method return `null`.</span></span> 
  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]<span data-ttu-id="e15dc-1583"> 包含一个编码提供程序， <xref:System.Text.CodePagesEncodingProvider>，这样可以提供完整的.NET Framework 中存在但在中不可用的编码[!INCLUDE[net_v46](~/includes/net-v46-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1583"> includes one encoding provider, <xref:System.Text.CodePagesEncodingProvider>, that makes the encodings available that are present in the full .NET Framework but are not available in [!INCLUDE[net_v46](~/includes/net-v46-md.md)].</span></span> <span data-ttu-id="e15dc-1584">默认情况下，[!INCLUDE[net_v46](~/includes/net-v46-md.md)]仅支持 Unicode 编码、 ASCII 和代码页 28591。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1584">By default, [!INCLUDE[net_v46](~/includes/net-v46-md.md)] only supports the Unicode encodings, ASCII, and code page 28591.</span></span>  
  
 <span data-ttu-id="e15dc-1585">如果多个调用使用相同的编码提供程序<xref:System.Text.Encoding.RegisterProvider%2A>方法，仅第一个方法调用注册提供程序。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1585">If the same encoding provider is used in multiple calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method, only the first method call registers the provider.</span></span> <span data-ttu-id="e15dc-1586">后续调用将被忽略。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1586">Subsequent calls are ignored.</span></span>  
  
 <span data-ttu-id="e15dc-1587">如果<xref:System.Text.Encoding.RegisterProvider%2A>调用方法来注册处理相同的编码的多个提供程序，最后一个已注册提供程序是使用的所有编码和解码操作。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1587">If the <xref:System.Text.Encoding.RegisterProvider%2A> method is called to register multiple providers that handle the same encoding, the last registered provider is the used for all encoding and decoding operations.</span></span> <span data-ttu-id="e15dc-1588">任何以前注册的提供程序将被忽略。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1588">Any previously registered providers are ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e15dc-1589">
            <paramref name="provider" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1589">
              <paramref name="provider" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.CodePagesEncodingProvider" />
        <altmember cref="T:System.Text.EncodingProvider" />
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Unicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Unicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Unicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Unicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Unicode { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Unicode : System.Text.Encoding" Usage="System.Text.Encoding.Unicode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1590">Gets an encoding for the UTF-16 format using the little endian byte order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1590">Gets an encoding for the UTF-16 format using the little endian byte order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1591">使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1591">An encoding for the UTF-16 format using the little endian byte order.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1592">有关支持的.NET Framework 并讨论了使用编码的 Unicode 编码的信息，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1592">For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="e15dc-1593"><xref:System.Text.UnicodeEncoding>此属性返回的对象可能没有为你的应用的适当行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1593">The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="e15dc-1594">它使用替换回退将每个字符串，它不能进行编码和每个不能进行解码的字节替换为问号 ("？") 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1594">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="e15dc-1595">相反，您可以调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>构造函数实例化一个小 endian<xref:System.Text.UnicodeEncoding>对象，它的回退是个<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1595">Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a little endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.Unicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.unicode/cs/unicode1.cs#2)]
 [!code-vb[System.Text.Encoding.Unicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.unicode/vb/unicode1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1596">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1596">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
      </Docs>
    </Member>
    <Member MemberName="UTF32">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF32 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF32" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF32" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF32 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF32 { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UTF32 : System.Text.Encoding" Usage="System.Text.Encoding.UTF32" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1597">Gets an encoding for the UTF-32 format using the little endian byte order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1597">Gets an encoding for the UTF-32 format using the little endian byte order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1598">使用 Little-Endian 字节顺序的 UTF-32 格式的编码对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1598">An  encoding object for the UTF-32 format using the little endian byte order.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1599"><xref:System.Text.UTF32Encoding>此属性返回的对象可能没有为你的应用的适当行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1599">The <xref:System.Text.UTF32Encoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="e15dc-1600">它使用替换回退替换 Unicode 替换字符 (U + FFFE) 为每个不能进行编码的字符串和不能进行解码的每个字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1600">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with the Unicode REPLACEMENT CHARACTER (U+FFFE).</span></span> <span data-ttu-id="e15dc-1601">相反，您可以调用<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>构造函数实例化<xref:System.Text.UTF32Encoding>对象，它的回退是个<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1601">Instead, you can call the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a <xref:System.Text.UTF32Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.UTF32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf32/cs/encoding.utf32.1.cs#1)]
 [!code-vb[System.Text.Encoding.UTF32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf32/vb/encoding.utf32.1.vb#1)]  
  
 <span data-ttu-id="e15dc-1602">Little-endian 字节顺序的讨论，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1602">For a discussion of little endian byte order, see the <xref:System.Text.Encoding> class topic.</span></span>  
  
 <span data-ttu-id="e15dc-1603">有关支持的.NET Framework 并讨论了使用编码的 Unicode 编码的信息，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1603">For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1604">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1604">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF32Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
      </Docs>
    </Member>
    <Member MemberName="UTF7">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF7" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF7 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF7 { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UTF7 : System.Text.Encoding" Usage="System.Text.Encoding.UTF7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1605">Gets an encoding for the UTF-7 format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1605">Gets an encoding for the UTF-7 format.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1606">UTF-7 格式的编码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1606">An encoding for the UTF-7 format.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1607">主要在以前已被限制到 7 位，如 NNTP 和一些电子邮件应用程序的环境中使用 utf-7 编码。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1607">UTF-7 encoding is used primarily in environments that historically have been restricted to 7 bits, such as NNTP and some email applications.</span></span> <span data-ttu-id="e15dc-1608">由于具有可靠性和安全性问题，您不应使用 UTF7 编码在 8 位环境中的 utf-8 编码可改为使用。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1608">Because of issues with robustness and security, you should not use UTF7 encoding in 8-bit environments where UTF-8 encoding can be used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1609">下面的示例确定进行编码的字符数组所需的字节数、 编码字符，并显示所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1609">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF7Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
      </Docs>
    </Member>
    <Member MemberName="UTF8">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF8" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF8 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF8 { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UTF8 : System.Text.Encoding" Usage="System.Text.Encoding.UTF8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1610">Gets an encoding for the UTF-8 format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1610">Gets an encoding for the UTF-8 format.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1611">UTF-8 格式的编码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1611">An encoding for the UTF-8 format.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1612">此属性返回<xref:System.Text.UTF8Encoding>对象，它为每个字符，一到四个字节序列进行编码 （UTF 16 编码） 的 Unicode 字符和解码为 Unicode （UTF 16 编码） 个字符的 UTF-8 编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1612">This property returns a <xref:System.Text.UTF8Encoding> object that encodes Unicode (UTF-16-encoded) characters into a sequence of one to four bytes per character, and that decodes a UTF-8-encoded byte array to Unicode (UTF-16-encoded) characters.</span></span> <span data-ttu-id="e15dc-1613">有关支持的.NET Framework 并讨论了使用编码的 Unicode 字符编码的信息，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1613">For information about the character encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="e15dc-1614"><xref:System.Text.UTF8Encoding>此属性返回的对象可能不具有您的应用程序的适当行为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1614">The <xref:System.Text.UTF8Encoding> object that is returned by this property might not have the appropriate behavior for your app.</span></span>  
  
-   <span data-ttu-id="e15dc-1615">它将返回<xref:System.Text.UTF8Encoding>提供 Unicode 字节顺序标记 (BOM) 的对象。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1615">It returns a <xref:System.Text.UTF8Encoding> object that provides a Unicode byte order mark (BOM).</span></span> <span data-ttu-id="e15dc-1616">若要实例化并不提供 BOM 的 UTF8 编码，请调用的任何重载<xref:System.Text.UTF8Encoding.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1616">To instantiate a UTF8 encoding that doesn't provide a BOM, call any overload of the <xref:System.Text.UTF8Encoding.%23ctor%2A> constructor.</span></span>  
  
-   <span data-ttu-id="e15dc-1617">它将返回<xref:System.Text.UTF8Encoding>都使用替换回退用问号来替换每个不能进行编码的字符串和不能进行解码的每个字节的对象 ("？") 字符。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1617">It returns a <xref:System.Text.UTF8Encoding> object that uses replacement fallback to replace each string that it can't encode and each byte that it can't decode with a question mark ("?") character.</span></span> <span data-ttu-id="e15dc-1618">相反，您可以调用<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>构造函数实例化<xref:System.Text.UTF8Encoding>对象，它的回退是个<xref:System.Text.EncoderFallbackException>或<xref:System.Text.DecoderFallbackException>，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1618">Instead, you can call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a <xref:System.Text.UTF8Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
     [!code-csharp[System.Text.Encoding.UTF8#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/encoding.utf8.1.cs#1)]
     [!code-vb[System.Text.Encoding.UTF8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/encoding.utf8.1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1619">下面的示例定义一个数组，其中包含以下字符：</span><span class="sxs-lookup"><span data-stu-id="e15dc-1619">The following example defines an array that consists of the following characters:</span></span>  
  
-   <span data-ttu-id="e15dc-1620">拉丁文小写字母 Z (U + 007A)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1620">LATIN SMALL LETTER Z (U+007A)</span></span>  
  
-   <span data-ttu-id="e15dc-1621">拉丁文小写字母 (U + 0061)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1621">LATIN SMALL LETTER A (U+0061)</span></span>  
  
-   <span data-ttu-id="e15dc-1622">组合铁 (U + 0306)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1622">COMBINING BREVE (U+0306)</span></span>  
  
-   <span data-ttu-id="e15dc-1623">拉丁文小写字母 AE 与新兴 (U + 01FD)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1623">LATIN SMALL LETTER AE WITH ACUTE (U+01FD)</span></span>  
  
-   <span data-ttu-id="e15dc-1624">希腊文小写字母 BETA (U + 03B2)</span><span class="sxs-lookup"><span data-stu-id="e15dc-1624">GREEK SMALL LETTER BETA (U+03B2)</span></span>  
  
-   <span data-ttu-id="e15dc-1625">窗体 GREEK ACROPHONIC ATTIC 一个千位 STATERS (U + 10154) 一个代理项对 (U + D800 U + DD54)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1625">A surrogate pair (U+D800 U+DD54) that forms GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS (U+10154).</span></span>  
  
 <span data-ttu-id="e15dc-1626">它显示每个字符的 utf-16 代码单位并确定 utf-8 编码器进行编码的字符数组所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1626">It displays the UTF-16 code units of each character and determines the number of bytes required by a UTF-8 encoder to encode the character array.</span></span> <span data-ttu-id="e15dc-1627">然后对字符进行编码，并显示结果的 UTF-8 编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1627">It then encodes the characters and displays the resulting UTF-8-encoded bytes.</span></span>  
  
 [!code-csharp[System.Text.Encoding.UTF8#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/example1.cs#2)]
 [!code-vb[System.Text.Encoding.UTF8#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF8Encoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WebName">
      <MemberSignature Language="C#" Value="public virtual string WebName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WebName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WebName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WebName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WebName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WebName : string" Usage="System.Text.Encoding.WebName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1628">When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1628">When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1629">当前 <see cref="T:System.Text.Encoding" /> 的 IANA 名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1629">The IANA name for the current <see cref="T:System.Text.Encoding" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1630"><xref:System.Text.Encoding.WebName%2A>属性等同于<xref:System.Text.EncodingInfo.Name%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1630">The <xref:System.Text.Encoding.WebName%2A> property is the same as the <xref:System.Text.EncodingInfo.Name%2A> property.</span></span>  
  
 <span data-ttu-id="e15dc-1631">请注意，<xref:System.Text.Encoding.WebName%2A>返回的编码的 IANA 注册名称。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1631">Note that <xref:System.Text.Encoding.WebName%2A> returns an IANA-registered name for the encoding.</span></span> <span data-ttu-id="e15dc-1632">其值为一种标准的名称，编码的实现可能不符合完全对该标准。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1632">When its value is the name of a standard, the implementation of the encoding might not conform in full to that standard.</span></span> <span data-ttu-id="e15dc-1633"><xref:System.Text.Encoding.HeaderName%2A>属性定义一个不同的编码可能更好地适用于电子邮件标头。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1633">The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for email headers.</span></span> <span data-ttu-id="e15dc-1634">但是，大多数应用程序应使用<xref:System.Text.Encoding.WebName%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1634">However, most apps should use <xref:System.Text.Encoding.WebName%2A> instead.</span></span>  
  
 <span data-ttu-id="e15dc-1635">有关 IANA 的更多信息，请转到[www.iana.org](https://www.iana.org/)。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1635">For more information on the IANA, go to [www.iana.org](https://www.iana.org/).</span></span>  
  
 <span data-ttu-id="e15dc-1636"><xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType>等同于<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>返回的<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1636">The <xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType> is the same as the <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> returned by <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e15dc-1637">某些 web 名称是重复项;请参阅备注<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>有关详细信息。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1637">Some of the web names are duplicates; see the remarks for <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1638">下面的示例包括<xref:System.Text.Encoding.WebName%2A>HTML 标头中。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1638">The following example includes the <xref:System.Text.Encoding.WebName%2A> in an HTML header.</span></span>  
  
 [!code-cpp[System.Text.Encoding.WebName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CPP/webname.cpp#1)]
 [!code-csharp[System.Text.Encoding.WebName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CS/webname.cs#1)]
 [!code-vb[System.Text.Encoding.WebName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.WebName/VB/webname.vb#1)]  
  
 <span data-ttu-id="e15dc-1639">下面的示例检索每个编码不同的名称，并显示具有一个或多个名称不同的编码<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1639">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e15dc-1640">它将显示<xref:System.Text.Encoding.EncodingName%2A>但不会对其比较。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1640">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
      </Docs>
    </Member>
    <Member MemberName="WindowsCodePage">
      <MemberSignature Language="C#" Value="public virtual int WindowsCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowsCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WindowsCodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WindowsCodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WindowsCodePage { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsCodePage : int" Usage="System.Text.Encoding.WindowsCodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e15dc-1641">When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1641">When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e15dc-1642">与当前 <see cref="T:System.Text.Encoding" /> 最紧密对应的 Windows 操作系统代码页。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e15dc-1642">The Windows operating system code page that most closely corresponds to the current <see cref="T:System.Text.Encoding" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e15dc-1643">此属性被用于与兼容 Windows 多语言 (MLang) Api，例如，在确定字体系列。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1643">This property is provided for compatibility with the Windows MultiLanguage (MLang) APIs, for example, in determining font families.</span></span> <span data-ttu-id="e15dc-1644">全球化，使用 Unicode 编码之一被建议改为。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1644">For globalization, using one of the Unicode encodings is recommended instead.</span></span> <span data-ttu-id="e15dc-1645">它还建议使用<xref:System.Text.Encoding.WebName%2A>而不是<xref:System.Text.Encoding.WindowsCodePage%2A>来标识的代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1645">It is also recommended to use <xref:System.Text.Encoding.WebName%2A> instead of <xref:System.Text.Encoding.WindowsCodePage%2A> to identify the code page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e15dc-1646">下面的示例确定为每个编码最紧密对应的 Windows 代码页。</span><span class="sxs-lookup"><span data-stu-id="e15dc-1646">The following example determines the Windows code page that most closely corresponds to each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.CodePage#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CPP/codepage.cpp#1)]
 [!code-csharp[System.Text.Encoding.CodePage#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CS/codepage.cs#1)]
 [!code-vb[System.Text.Encoding.CodePage#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/VB/codepage.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
      </Docs>
    </Member>
  </Members>
</Type>