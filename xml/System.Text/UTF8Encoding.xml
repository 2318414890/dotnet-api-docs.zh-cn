<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c200a67bc75e1bfe3c6bbe71ec68fec34b1455fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531441" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="61772-101">表示 Unicode 字符的 UTF-8 编码。</span>
      <span class="sxs-lookup">
        <span data-stu-id="61772-101">Represents a UTF-8 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="61772-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="61772-103">解码是一组 Unicode 字符转换为编码字节的序列的过程。</span><span class="sxs-lookup"><span data-stu-id="61772-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="61772-104">Utf-8 是 Unicode 编码，每个码位表示为一至四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="61772-104">UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</span></span> <span data-ttu-id="61772-105">与不同的 utf-16 和 utf-32 编码，utf-8 编码不需要"字节排序方式";无论处理器是否 big endian 或小 endian 相同的编码方案。</span><span class="sxs-lookup"><span data-stu-id="61772-105">Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</span></span> <span data-ttu-id="61772-106"><xref:System.Text.UTF8Encoding> 对应于 Windows 代码页 65001。</span><span class="sxs-lookup"><span data-stu-id="61772-106"><xref:System.Text.UTF8Encoding> corresponds to the Windows code page 65001.</span></span> <span data-ttu-id="61772-107">有关 Utf 和其他编码支持的详细信息<xref:System.Text>，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="61772-107">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="61772-108">可以实例化<xref:System.Text.UTF8Encoding>多种方式，具体取决于是否要向其提供字节顺序标记 (BOM) 和是否想要启用错误检测的对象。</span><span class="sxs-lookup"><span data-stu-id="61772-108">You can instantiate a <xref:System.Text.UTF8Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</span></span> <span data-ttu-id="61772-109">下表列出了构造函数和<xref:System.Text.Encoding>返回的属性<xref:System.Text.UTF8Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="61772-109">The following table lists the constructors and the <xref:System.Text.Encoding> property that return a <xref:System.Text.UTF8Encoding> object.</span></span>  
  
|<span data-ttu-id="61772-110">成员</span><span class="sxs-lookup"><span data-stu-id="61772-110">Member</span></span>|<span data-ttu-id="61772-111">BOM</span><span class="sxs-lookup"><span data-stu-id="61772-111">BOM</span></span>|<span data-ttu-id="61772-112">错误检测</span><span class="sxs-lookup"><span data-stu-id="61772-112">Error detection</span></span>|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|<span data-ttu-id="61772-113">是</span><span class="sxs-lookup"><span data-stu-id="61772-113">Yes</span></span>|<span data-ttu-id="61772-114">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="61772-114">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="61772-115">否</span><span class="sxs-lookup"><span data-stu-id="61772-115">No</span></span>|<span data-ttu-id="61772-116">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="61772-116">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="61772-117">可配置</span><span class="sxs-lookup"><span data-stu-id="61772-117">Configurable</span></span>|<span data-ttu-id="61772-118">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="61772-118">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="61772-119">可配置</span><span class="sxs-lookup"><span data-stu-id="61772-119">Configurable</span></span>|<span data-ttu-id="61772-120">可配置</span><span class="sxs-lookup"><span data-stu-id="61772-120">Configurable</span></span>|  
  
 <span data-ttu-id="61772-121"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法确定将多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.UTF8Encoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="61772-121">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF8Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="61772-122">同样，<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法确定有多少个字符的字节序列进行解码所导致和<xref:System.Text.UTF8Encoding.GetChars%2A>和<xref:System.Text.UTF8Encoding.GetString%2A>方法执行实际的解码。</span><span class="sxs-lookup"><span data-stu-id="61772-122">Likewise, the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF8Encoding.GetChars%2A> and <xref:System.Text.UTF8Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="61772-123">为编码器或解码器能够保存编码或解码跨多个块 （如在 100,000 字符段中编码的字符串的 100 万个字符） 的数据时的状态信息，请使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>和<xref:System.Text.UTF8Encoding.GetDecoder%2A>属性，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-123">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF8Encoding.GetEncoder%2A> and <xref:System.Text.UTF8Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
 <span data-ttu-id="61772-124">（可选）<xref:System.Text.UTF8Encoding>对象提供字节顺序标记 (BOM)，即可以前缀结果编码过程中字节流的开始位置的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-124">Optionally, the <xref:System.Text.UTF8Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</span></span> <span data-ttu-id="61772-125">如果 utf-8 编码的字节流开头字节顺序标记 (BOM)，它可帮助确定的字节顺序和转换格式或 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="61772-125">If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="61772-126">但是，请注意，Unicode 标准既不需要也不建议采用 utf-8 BOM 编码流。</span><span class="sxs-lookup"><span data-stu-id="61772-126">Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</span></span> <span data-ttu-id="61772-127">字节顺序和字节顺序标记的详细信息，请参阅 Unicode Standard [Unicode 主页](http://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="61772-127">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="61772-128">如果编码器配置为提供 BOM，则可以通过调用检索它<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法; 否则，该方法返回空数组。</span><span class="sxs-lookup"><span data-stu-id="61772-128">If the encoder is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="61772-129">请注意，即使<xref:System.Text.UTF8Encoding>对象已配置了 BOM 支持，必须包括根据; 编码的字节流的开头 BOM 编码方法的<xref:System.Text.UTF8Encoding>类执行不自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="61772-129">Note that, even if a <xref:System.Text.UTF8Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF8Encoding> class do not do this automatically.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-130">若要启用错误检测并使类实例更加安全，应调用<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>构造函数和组`throwOnInvalidBytes`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="61772-130">To enable error detection and to make the class instance more secure, you should call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> constructor and set the `throwOnInvalidBytes` parameter to `true`.</span></span> <span data-ttu-id="61772-131">使用启用了错误检测，检测到无效的字符或字节序列的方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-131">With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-132">错误检测，不会引发异常，而无需通常忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="61772-132">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-133">如果该对象序列化和反序列化使用不同的.NET Framework 版本，不会保留 utf-8 编码对象的状态。</span><span class="sxs-lookup"><span data-stu-id="61772-133">The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-134">下面的示例使用<xref:System.Text.UTF8Encoding>对象进行编码的 Unicode 字符的字符串，并将其存储在字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-134">The following example uses a <xref:System.Text.UTF8Encoding> object to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="61772-135">Unicode 字符串包含两个字符，Pi (U + 03A0) 和 Sigma (U + 03A3)，可能会超出 ASCII 字符范围。</span><span class="sxs-lookup"><span data-stu-id="61772-135">The Unicode string includes two characters, Pi (U+03A0) and Sigma (U+03A3), that are outside the ASCII character range.</span></span> <span data-ttu-id="61772-136">当编码的字节数组解码为一个字符串时，Pi 和 Sigma 字符都是仍然存在。</span><span class="sxs-lookup"><span data-stu-id="61772-136">When the encoded byte array is decoded back to a string, the Pi and Sigma characters are still present.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="61772-137">下面的示例与前面的示例中，使用相同的字符串，只不过它将已编码的字节写入文件且前缀字节顺序标记 (BOM) 在字节流。</span><span class="sxs-lookup"><span data-stu-id="61772-137">The following example uses the same string as the previous example, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="61772-138">它然后两个不同的方式读取文件： 作为通过使用文本文件<xref:System.IO.StreamReader>对象; 和为二进制文件。</span><span class="sxs-lookup"><span data-stu-id="61772-138">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="61772-139">如你所料，在任何情况下是物料清单中包含新读取的字符串。</span><span class="sxs-lookup"><span data-stu-id="61772-139">As you would expect, in neither case is the BOM included in the newly read string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61772-140">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-140">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="61772-141">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-141">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-142">此构造函数创建一个实例，不提供 Unicode 字节顺序标记，并当检测到无效的编码时，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-142">This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-143">出于安全原因，我们建议你通过调用的构造函数启用错误检测`throwOnInvalidBytes`参数并将其值设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="61772-143">For security reasons, we recommend that you enable error detection by calling a constructor with a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-144">下面的示例创建一个新<xref:System.Text.UTF8Encoding>实例，并显示其名称。</span><span class="sxs-lookup"><span data-stu-id="61772-144">The following example creates a new <xref:System.Text.UTF8Encoding> instance and displays its name.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <span data-ttu-id="61772-145">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-145">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-146">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-146">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
          <span data-ttu-id="61772-147">参数指定是否提供一个 Unicode 字节顺序标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-147">A parameter specifies whether to provide a Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-148">此构造函数创建时检测到无效的编码，则不引发异常的实例。</span><span class="sxs-lookup"><span data-stu-id="61772-148">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-149">出于安全原因，你应通过调用包括构造函数中启用错误检测`throwOnInvalidBytes`参数并将其值设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="61772-149">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
 <span data-ttu-id="61772-150">`encoderShouldEmitUTF8Identifier`参数控制的操作<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-150">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="61772-151">如果`true`，该方法返回包含 Unicode 字节顺序标记 (BOM) 采用 utf-8 格式的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-151">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="61772-152">如果`false`，它将返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-152">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="61772-153">但是，将设置`encoderShouldEmitUTF8Identifier`到`true`不会导致<xref:System.Text.UTF8Encoding.GetBytes%2A>方法的前缀开头的字节数组，BOM 也不会<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法中的物料清单中的字节计数中包括的字节数。</span><span class="sxs-lookup"><span data-stu-id="61772-153">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-154">下面的示例创建一个新<xref:System.Text.UTF8Encoding>实例，并指定应由发出 Unicode 字节顺序标记前缀<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-154">The following example creates a new <xref:System.Text.UTF8Encoding> instance and specifies that a Unicode byte order mark prefix should be emitted by the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="61772-155"><xref:System.Text.UTF8Encoding.GetPreamble%2A>方法然后返回 Unicode 字节顺序标记前缀。</span><span class="sxs-lookup"><span data-stu-id="61772-155">The <xref:System.Text.UTF8Encoding.GetPreamble%2A> method then returns the Unicode byte order mark prefix.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <span data-ttu-id="61772-156">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法应返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-156">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidBytes">
          <span data-ttu-id="61772-157">如果为 <see langword="true" />，则在检测到无效的编码时引发异常；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-157">
              <see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-158">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-158">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
          <span data-ttu-id="61772-159">参数指定是否提供 Unicode 字节顺序标记，以及是否在检测到无效的编码时引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-159">Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-160">`encoderShouldEmitUTF8Identifier`参数控制的操作<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-160">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="61772-161">如果`true`，该方法返回包含 Unicode 字节顺序标记 (BOM) 采用 utf-8 格式的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-161">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="61772-162">如果`false`，它将返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-162">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="61772-163">但是，将设置`encoderShouldEmitUTF8Identifier`到`true`不会导致<xref:System.Text.UTF8Encoding.GetBytes%2A>方法的前缀开头的字节数组，BOM 也不会<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法中的物料清单中的字节计数中包括的字节数。</span><span class="sxs-lookup"><span data-stu-id="61772-163">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="61772-164">如果`throwOnInvalidBytes`是`true`，检测到无效的字节序列的方法引发<xref:System.ArgumentException?displayProperty=nameWithType>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-164">If `throwOnInvalidBytes` is `true`, a method that detects an invalid byte sequence throws an <xref:System.ArgumentException?displayProperty=nameWithType> exception.</span></span> <span data-ttu-id="61772-165">否则为该方法不会引发异常，并忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="61772-165">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-166">出于安全原因，你应通过调用包括构造函数中启用错误检测`throwOnInvalidBytes`参数并将该参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="61772-166">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting that parameter to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-167">下面的示例创建一个新<xref:System.Text.UTF8Encoding>实例，它指定的<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法不会发出 Unicode 字节顺序标记前缀，并且当检测到无效的编码时，应引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-167">The following example creates a new <xref:System.Text.UTF8Encoding> instance, specifying that the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method should not emit a Unicode byte order mark prefix, and an exception should be thrown when an invalid encoding is detected.</span></span> <span data-ttu-id="61772-168">此构造函数的行为将与默认值进行比较<xref:System.Text.UTF8Encoding.%23ctor>构造函数，当检测到无效的编码时，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-168">The behavior of this constructor is compared to the default <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not throw an exception when an invalid encoding is detected.</span></span> <span data-ttu-id="61772-169">这两个<xref:System.Text.UTF8Encoding>实例在行中，这是无效的字符序列编码字符数组，其中包含两个的高代理项 （U + D801 和 U + D802）; 一个高代理项应始终后跟一个低代理项。</span><span class="sxs-lookup"><span data-stu-id="61772-169">The two <xref:System.Text.UTF8Encoding> instances encode a character array that contains two high surrogates (U+D801 and U+D802) in a row, which is an invalid character sequence; a high surrogate should always be followed by a low surrogate.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="61772-170">要与当前实例进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-170">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-171">确定指定的对象是否等于当前 <see cref="T:System.Text.UTF8Encoding" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-171">Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-172">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF8Encoding" /> 的一个实例并且等于当前对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-172">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-173">两个<xref:System.Text.UTF8Encoding>对象可视为相等，如果满足所有以下条件：</span><span class="sxs-lookup"><span data-stu-id="61772-173">Two <xref:System.Text.UTF8Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="61772-174">这两个对象提供的字节顺序标记，或都不。</span><span class="sxs-lookup"><span data-stu-id="61772-174">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="61772-175">这两个对象都使用相同的编码器回退。</span><span class="sxs-lookup"><span data-stu-id="61772-175">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="61772-176">这两个对象都使用相同的解码器回退。</span><span class="sxs-lookup"><span data-stu-id="61772-176">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-177">下面的示例使用<xref:System.Text.UTF8Encoding.Equals%2A>方法来测试是否当前<xref:System.Text.UTF8Encoding>对象是否等于不同<xref:System.Text.UTF8Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="61772-177">The following example uses the <xref:System.Text.UTF8Encoding.Equals%2A> method to test whether the current <xref:System.Text.UTF8Encoding> object is equal to a different <xref:System.Text.UTF8Encoding> object.</span></span> <span data-ttu-id="61772-178">四个<xref:System.Text.UTF8Encoding>以及创建和比较对象显示的比较结果。</span><span class="sxs-lookup"><span data-stu-id="61772-178">Four <xref:System.Text.UTF8Encoding> objects are created and compared and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61772-179">计算对一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-179">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="61772-180">包含要编码的字符集的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-180">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-181">计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-181">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-182">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-182">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-183">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-183">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-184">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-184">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-185"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-185">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-186">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-186">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-187">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-187">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-188">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="61772-188">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-189">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-189">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-190">下面的示例调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>和<xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29>方法来计算最大和实际的字符串进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="61772-190">The following example calls the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> and <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="61772-191">它还显示的实际存储字节顺序标记的字节流所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="61772-191">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-192">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-192">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-193">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-193">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-194">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-194">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-195">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-195">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-196">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-196">-and-</span>
          </span>
          <span data-ttu-id="61772-197">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-197">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="61772-198">指向第一个要编码的字符的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-198">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="61772-199">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-199">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-200">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-200">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-201">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-201">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-202">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>方法来存储所产生的字节，则调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-202">To calculate the exact array size required by the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-203">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-203">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-204"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-204">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-205">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-205">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-206">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-206">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-207">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="61772-207">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-208">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-208">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-209">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-209">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-210">
            <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-210">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-211">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-211">-or-</span>
          </span>
          <span data-ttu-id="61772-212">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-212">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-213">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-213">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-214">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-214">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span>
          </span>
          <span data-ttu-id="61772-215">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-215">-and-</span>
          </span>
          <span data-ttu-id="61772-216">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-216">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="61772-217">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-217">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="61772-218">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-218">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="61772-219">包含要编码的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-219">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="61772-220">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-220">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="61772-221">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-221">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-222">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-222">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-223">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-223">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-224">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>来存储所产生的字节，应调用使用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-224">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the uses <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-225">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-225">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-226"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-226">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-227">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-227">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-228">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-228">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-229">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="61772-229">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-230">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-230">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-231">下面的示例填充数组与一个拉丁语大写和小写字符和调用<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定需要拉丁文小写字符进行编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="61772-231">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="61772-232">然后，它显示此信息，以及所需如果添加字节顺序标记的字节总数。</span><span class="sxs-lookup"><span data-stu-id="61772-232">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="61772-233">它将此数字与返回的值进行比较<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法，表示所需拉丁文小写字符进行编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="61772-233">It compares this number with the value returned by the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-234">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-234">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-235">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-235">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-236">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-236">-or-</span>
          </span>
          <span data-ttu-id="61772-237">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-237">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="61772-238">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-238">-or-</span>
          </span>
          <span data-ttu-id="61772-239">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-239">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-240">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-240">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-241">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-241">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-242">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-242">-and-</span>
          </span>
          <span data-ttu-id="61772-243">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> 属性设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-243">The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61772-244">将一组字符编码为一个字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-244">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="61772-245">指向第一个要编码的字符的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-245">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="61772-246">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-246">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="61772-247">一个指针，指向开始写入所产生的字节序列的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-247">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="61772-248">最多写入的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-248">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-249">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-249">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-250">在由 <paramref name="bytes" /> 指示的位置处写入的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-250">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-251">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-251">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-252">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-252">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-253"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-253">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-254">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-254">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-255">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-255">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-256">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="61772-256">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="61772-257">在这种情况下，或如果的数据量很大，它需要划分为较小的块，请使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>返回<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-257">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="61772-258">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="61772-258">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-259">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="61772-259">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="61772-260"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="61772-260">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-261">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-261">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61772-262">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-262">-or-</span>
          </span>
          <span data-ttu-id="61772-263">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-263">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-264">
            <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-264">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-265">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-265">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="61772-266">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-266">-or-</span>
          </span>
          <span data-ttu-id="61772-267">
            <paramref name="byteCount" /> 少于所产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-267">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-268">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-268">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-269">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-269">-and-</span>
          </span>
          <span data-ttu-id="61772-270">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-270">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="61772-271">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-271">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="61772-272">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-272">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="61772-273">包含要编码的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-273">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="61772-274">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-274">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="61772-275">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-275">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="61772-276">要包含所产生的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-276">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="61772-277">要开始写入所产生的字节序列的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-277">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-278">将指定字符数组中的一组字符编码到指定的字节数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-278">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-279">写入 <paramref name="bytes" /> 的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-279">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-280">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-280">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-281">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-281">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-282"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-282">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-283">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-283">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-284">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-284">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-285">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="61772-285">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="61772-286">在这种情况下，或如果的数据量很大，它需要划分为较小的块，请使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-286">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="61772-287">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="61772-287">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-288">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="61772-288">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="61772-289"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="61772-289">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-290">下面的示例使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法从字符串和存储的字节数组中元素范围中的编码字节的字符范围进行编码。</span><span class="sxs-lookup"><span data-stu-id="61772-290">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of characters from a string and stores the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-291">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-291">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61772-292">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-292">-or-</span>
          </span>
          <span data-ttu-id="61772-293">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-293">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-294">
            <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-294">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-295">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-295">-or-</span>
          </span>
          <span data-ttu-id="61772-296">
            <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-296">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="61772-297">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-297">-or-</span>
          </span>
          <span data-ttu-id="61772-298">
            <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-298">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-299">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-299">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="61772-300">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-300">-or-</span>
          </span>
          <span data-ttu-id="61772-301">
            <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-301">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-302">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-302">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-303">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-303">-and-</span>
          </span>
          <span data-ttu-id="61772-304">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-304">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="61772-305">包含要编码的字符集的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-305">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="61772-306">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-306">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="61772-307">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-307">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="61772-308">要包含所产生的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-308">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="61772-309">要开始写入所产生的字节序列的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-309">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-310">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-310">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-311">写入 <paramref name="bytes" /> 的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-311">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-312">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-312">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-313">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-313">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-314"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-314">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-315">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-315">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-316">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-316">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-317">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="61772-317">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="61772-318">在这种情况下，或如果的数据量很大，它需要划分为较小的块，请使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-318">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="61772-319">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="61772-319">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-320">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="61772-320">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="61772-321"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="61772-321">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-322">下面的示例使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法进行编码的一系列 Unicode 字符数组中的元素并将已编码的字节存储在某个范围的字节数组中的元素。</span><span class="sxs-lookup"><span data-stu-id="61772-322">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-323">
            <paramref name="s" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-323">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61772-324">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-324">-or-</span>
          </span>
          <span data-ttu-id="61772-325">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-325">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-326">
            <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-326">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-327">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-327">-or-</span>
          </span>
          <span data-ttu-id="61772-328">
            <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-328">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="61772-329">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-329">-or-</span>
          </span>
          <span data-ttu-id="61772-330">
            <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-330">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-331">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-331">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="61772-332">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-332">-or-</span>
          </span>
          <span data-ttu-id="61772-333">
            <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-333">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-334">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-334">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-335">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-335">-and-</span>
          </span>
          <span data-ttu-id="61772-336">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-336">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61772-337">计算对一个字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-337">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="61772-338">指向第一个要解码的字节的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-338">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="61772-339">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-339">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-340">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-340">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-341">对指定字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-341">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-342">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetChars%2A>来存储所产生的字符，调用<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-342">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="61772-343">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-343">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="61772-344"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-344">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-345">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-345">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-346">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-346">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-347">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-347">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-348">
            <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-348">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-349">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-349">-or-</span>
          </span>
          <span data-ttu-id="61772-350">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-350">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-351">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-351">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="61772-352">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-352">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-353">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-353">-and-</span>
          </span>
          <span data-ttu-id="61772-354">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-354">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="61772-355">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-355">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="61772-356">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-356">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="61772-357">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-357">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="61772-358">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-358">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="61772-359">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-359">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-360">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-360">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-361">对指定字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-361">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-362">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetChars%2A>来存储所产生的字符，调用<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-362">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="61772-363">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-363">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="61772-364"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-364">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-365">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-365">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-366">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-366">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-367">下面的示例使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>解码的字节数组中的元素范围由方法返回的字符数。</span><span class="sxs-lookup"><span data-stu-id="61772-367">The following example uses the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-368">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-368">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-369">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-369">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-370">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-370">-or-</span>
          </span>
          <span data-ttu-id="61772-371">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-371">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="61772-372">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-372">-or-</span>
          </span>
          <span data-ttu-id="61772-373">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-373">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-374">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-374">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="61772-375">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-375">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-376">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-376">-and-</span>
          </span>
          <span data-ttu-id="61772-377">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-377">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61772-378">将一个字节序列解码为一组字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-378">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="61772-379">指向第一个要解码的字节的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-379">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="61772-380">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-380">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="61772-381">一个指针，指向开始写入所产生的字符集的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-381">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="61772-382">要写入的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-382">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-383">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-383">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-384">在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-384">The actual number of characters written at the location indicated by <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-385">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetChars%2A>来存储所产生的字符，调用<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-385">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="61772-386">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-386">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="61772-387"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-387">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-388">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-388">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-389">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-389">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-390">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="61772-390">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="61772-391">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-391">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="61772-392">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="61772-392">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="61772-393">在这种情况下，或如果的数据量很大，它需要划分为较小的块，请使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-393">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-394">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-394">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61772-395">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-395">-or-</span>
          </span>
          <span data-ttu-id="61772-396">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-396">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-397">
            <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-397">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-398">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-398">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="61772-399">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-399">-or-</span>
          </span>
          <span data-ttu-id="61772-400">
            <paramref name="charCount" /> 少于所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-400">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="61772-401">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-401">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-402">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-402">-and-</span>
          </span>
          <span data-ttu-id="61772-403">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-403">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="61772-404">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-404">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="61772-405">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-405">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="61772-406">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-406">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="61772-407">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-407">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="61772-408">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-408">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="61772-409">要用于包含所产生的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-409">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="61772-410">开始写入所产生的字符集的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-410">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-411">将指定字节数组中的一个字节序列解码为指定的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-411">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-412">写入 <paramref name="chars" /> 的实际字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-412">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-413">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetChars%2A>来存储所产生的字符，调用<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-413">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="61772-414">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-414">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="61772-415"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-415">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-416">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-416">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-417">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-417">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-418">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="61772-418">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="61772-419">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-419">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="61772-420">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="61772-420">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="61772-421">在这种情况下，或如果的数据量很大，它需要划分为较小的块，请使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-421">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-422">下面的示例使用<xref:System.Text.UTF8Encoding.GetChars%2A>方法进行解码的字节数组中的元素范围，并将结果存储在字符数组。</span><span class="sxs-lookup"><span data-stu-id="61772-422">The following example uses the <xref:System.Text.UTF8Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-423">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-423">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61772-424">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-424">-or-</span>
          </span>
          <span data-ttu-id="61772-425">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-425">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-426">
            <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-426">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-427">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-427">-or-</span>
          </span>
          <span data-ttu-id="61772-428">
            <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-428">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="61772-429">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-429">-or-</span>
          </span>
          <span data-ttu-id="61772-430">
            <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-430">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-431">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-431">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="61772-432">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-432">-or-</span>
          </span>
          <span data-ttu-id="61772-433">
            <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-433">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="61772-434">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-434">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-435">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-435">-and-</span>
          </span>
          <span data-ttu-id="61772-436">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-436">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="61772-437">获取可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-437">Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-438">可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-438">A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-439"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的块中的字符，方式类似于<xref:System.Text.UTF8Encoding.GetChars%2A>此类的方法。</span><span class="sxs-lookup"><span data-stu-id="61772-439">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF8Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="61772-440">但是，<xref:System.Text.Decoder>因此它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="61772-440">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="61772-441"><xref:System.Text.Decoder>还会保留在数据块的末尾的尾随字节，在下一步的解码操作中使用的尾随字节。</span><span class="sxs-lookup"><span data-stu-id="61772-441">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="61772-442">因此，<xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="61772-442">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="61772-443">如果启用了错误检测，即`throwOnInvalidCharacters`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Decoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="61772-443">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="61772-444">如果启用了错误检测，遇到一个无效的序列的解码器状态为未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="61772-444">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-445">下面的示例使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法来获取 utf-8 解码器。</span><span class="sxs-lookup"><span data-stu-id="61772-445">The following example uses the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method to obtain a UTF-8 decoder.</span></span> <span data-ttu-id="61772-446">解码器将字符序列转换为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="61772-446">The decoder converts a sequence of bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="61772-447">获取可将 Unicode 字符序列转换为 UTF-8 编码的字节序列的编码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-447">Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-448">一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-8 编码的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-448">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-449"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的块中的字节，方式类似于<xref:System.Text.UTF8Encoding.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-449">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF8Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="61772-450">但是，<xref:System.Text.Encoder>以便其可以进行正确编码跨块的字符序列的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="61772-450">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="61772-451"><xref:System.Text.Encoder>还保留了尾随字符数据块的末尾，并在下一步的编码操作中使用的尾随字符。</span><span class="sxs-lookup"><span data-stu-id="61772-451">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="61772-452">例如，一个数据块可能结尾不匹配的高代理项，并且匹配的低代理项可能在下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="61772-452">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="61772-453">因此，<xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="61772-453">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="61772-454">如果启用了错误检测，即`throwOnInvalidCharacters`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Encoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="61772-454">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="61772-455">如果启用了错误检测，并且遇到无效的序列，则编码器的状态为未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="61772-455">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-456">下面的示例使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法来获取用于将字符序列转换为 utf-8 的编码器编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="61772-456">The following example uses the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-8 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="61772-457">返回当前实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-457">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-458">当前实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-458">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="61772-459">下面的示例使用<xref:System.Text.UTF8Encoding.GetHashCode%2A>方法返回的哈希代码<xref:System.Text.UTF8Encoding>实例。</span><span class="sxs-lookup"><span data-stu-id="61772-459">The following example uses the <xref:System.Text.UTF8Encoding.GetHashCode%2A> method to return a hash code for <xref:System.Text.UTF8Encoding> instances.</span></span> <span data-ttu-id="61772-460">请注意，此方法返回的哈希代码取决于构造函数用于创建<xref:System.Text.UTF8Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="61772-460">Notice that the hash code returned by this method depends on the constructor used to create the <xref:System.Text.UTF8Encoding> object.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="61772-461">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-461">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-462">计算对指定数目的字符进行编码时产生的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-462">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-463">对指定数目的字符进行编码所产生的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-463">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-464">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-464">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="61772-465">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-465">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="61772-466"><xref:System.Text.UTF8Encoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-466">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-467"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 是一个最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.EncoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="61772-467"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="61772-468">如果有可能很大的字符串中，选择了回退<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>可以返回较大的值。</span><span class="sxs-lookup"><span data-stu-id="61772-468">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="61772-469">在大多数情况下，此方法返回用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="61772-469">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="61772-470">对于大字符串，你可能必须使用非常大的缓冲区和超出的更合理的缓冲区的罕见情况捕捉错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="61772-470">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="61772-471">你可能还需要考虑不同的方法使用<xref:System.Text.UTF8Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="61772-471">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="61772-472">例如，英语和许多其他语言中的文本通常需要只有一个 utf-8 字节来表示字符，但所返回的数<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>必须允许，要转换的字符串将完全字符组成，每个都需要四个字节。</span><span class="sxs-lookup"><span data-stu-id="61772-472">For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</span></span>  
  
 <span data-ttu-id="61772-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 与无关<xref:System.Text.UTF8Encoding.GetChars%2A>。</span><span class="sxs-lookup"><span data-stu-id="61772-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetChars%2A>.</span></span> <span data-ttu-id="61772-474">如果你的应用程序需要一个用于与的类似函数<xref:System.Text.UTF8Encoding.GetChars%2A>，应使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="61772-474">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetChars%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-475">`GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="61772-475">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-476">下面的示例使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法返回的最大指定的数目的字符进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="61772-476">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-477">
            <paramref name="charCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-477">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-478">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-478">-or-</span>
          </span>
          <span data-ttu-id="61772-479">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-479">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="61772-480">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-480">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-481">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-481">-and-</span>
          </span>
          <span data-ttu-id="61772-482">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-482">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="61772-483">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-483">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-484">计算对指定数目的字节进行解码时产生的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-484">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-485">对指定数目的字节进行解码时所产生的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-485">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-486">若要计算所需的精确数组大小<xref:System.Text.UTF8Encoding.GetChars%2A>若要存储所产生的字符，则调用<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-486">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="61772-487">若要计算的最大数组大小，请调用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-487">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="61772-488"><xref:System.Text.UTF8Encoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="61772-488">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="61772-489"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 是一个最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.DecoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="61772-489"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="61772-490">如果有可能很大的字符串中，选择了回退<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>可以返回较大的值。</span><span class="sxs-lookup"><span data-stu-id="61772-490">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="61772-491">在大多数情况下，此方法返回用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="61772-491">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="61772-492">对于大字符串，你可能必须使用非常大的缓冲区和超出的更合理的缓冲区的罕见情况捕捉错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="61772-492">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span>  <span data-ttu-id="61772-493">你可能还需要考虑不同的方法使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="61772-493">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetCharCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="61772-494"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 与无关<xref:System.Text.UTF8Encoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="61772-494"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="61772-495">如果你的应用程序需要一个用于与的类似函数<xref:System.Text.UTF8Encoding.GetBytes%2A>，应使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="61772-495">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61772-496">`GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="61772-496">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-497">下面的示例使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法返回的最大字符数生成对指定的数目的字节进行解码。</span><span class="sxs-lookup"><span data-stu-id="61772-497">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-498">
            <paramref name="byteCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-498">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-499">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-499">-or-</span>
          </span>
          <span data-ttu-id="61772-500">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-500">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="61772-501">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-501">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-502">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-502">-and-</span>
          </span>
          <span data-ttu-id="61772-503">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-503">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="61772-504">返回一个采用 UTF-8 格式编码的 Unicode 字节顺序标记（如果 <see cref="T:System.Text.UTF8Encoding" /> 编码对象配置为提供一个这样的标记）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-504">Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-505">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UTF8Encoding" /> 编码对象配置为提供一个这样的字节数组）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-505">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span>
          </span>
          <span data-ttu-id="61772-506">否则，此方法返回一个零长度的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-506">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-507"><xref:System.Text.UTF8Encoding>对象可以提供一个前导码，即可以前缀的编码过程中产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-507">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="61772-508">将一个字节顺序标记 (码位为 U + feff) 使用的编码字节序列的可帮助确定的字节顺序和转换格式或 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="61772-508">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="61772-509">Unicode 字节顺序标记 (BOM) 序列化为 0xEF 0xBB 0xBF。</span><span class="sxs-lookup"><span data-stu-id="61772-509">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="61772-510">请注意 Unicode 标准既不需要也不建议将 BOM 用于 utf-8 编码流。</span><span class="sxs-lookup"><span data-stu-id="61772-510">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="61772-511">可以实例化<xref:System.Text.UTF8Encoding>对象，其<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法返回有效 BOM 通过以下方式：</span><span class="sxs-lookup"><span data-stu-id="61772-511">You can instantiate a <xref:System.Text.UTF8Encoding> object whose <xref:System.Text.UTF8Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="61772-512">通过检索<xref:System.Text.UTF8Encoding>返回对象<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="61772-512">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="61772-513">通过调用<xref:System.Text.UTF8Encoding>具有构造函数`encoderShouldEmitUTF8Identifier`参数并设置其值设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="61772-513">By calling a <xref:System.Text.UTF8Encoding> constructor with a `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="61772-514">所有其他<xref:System.Text.UTF8Encoding>对象配置为返回空数组，而不是有效的物料清单。</span><span class="sxs-lookup"><span data-stu-id="61772-514">All other <xref:System.Text.UTF8Encoding> objects are configured to return an empty array rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="61772-515">BOM 提供近乎确定否则将失去对其编码引用的文件的编码的标识，如无标记或标记错误 web 数据或存储时的业务的随机文本文件没有国际问题。</span><span class="sxs-lookup"><span data-stu-id="61772-515">The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="61772-516">如果数据一致且正确的标记，则可能会避免通常用户问题。</span><span class="sxs-lookup"><span data-stu-id="61772-516">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="61772-517">提供编码类型的标准，BOM 是某种程度上冗余的。</span><span class="sxs-lookup"><span data-stu-id="61772-517">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="61772-518">但是，它可以用于帮助发送正确的编码标头的服务器。</span><span class="sxs-lookup"><span data-stu-id="61772-518">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="61772-519">或者，它可作为回退以防的编码否则将丢失。</span><span class="sxs-lookup"><span data-stu-id="61772-519">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="61772-520">有使用 BOM 一些缺点。</span><span class="sxs-lookup"><span data-stu-id="61772-520">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="61772-521">例如，知道如何限制使用 BOM 的数据库字段可以很困难。</span><span class="sxs-lookup"><span data-stu-id="61772-521">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="61772-522">串联的文件可以也是个问题，例如，这合并文件时不必要的字符可以得到中间数据的方式。</span><span class="sxs-lookup"><span data-stu-id="61772-522">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="61772-523">但是，而不考虑几个缺点下, 强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="61772-523">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="61772-524">字节顺序和字节顺序标记的详细信息，请参阅 Unicode Standard [Unicode 主页](http://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="61772-524">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="61772-525">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流的开始位置。</span><span class="sxs-lookup"><span data-stu-id="61772-525">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="61772-526">请注意，<xref:System.Text.UTF8Encoding.GetBytes%2A>方法不预置到编码字节的序列 BOM; 提供的相应字节流的开头 BOM 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="61772-526">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-527">下面的示例使用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法返回 Unicode 字节顺序标记采用 utf-8 格式编码。</span><span class="sxs-lookup"><span data-stu-id="61772-527">The following example uses the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to return the Unicode byte order mark encoded in UTF-8 format.</span></span> <span data-ttu-id="61772-528">请注意，默认构造函数<xref:System.Text.UTF8Encoding>不提供一个前导码。</span><span class="sxs-lookup"><span data-stu-id="61772-528">Notice that the default constructor for <xref:System.Text.UTF8Encoding> does not provide a preamble.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="61772-529">下面的示例实例化两个<xref:System.Text.UTF8Encoding>对象，通过调用的无参数的第一个<xref:System.Text.UTF8Encoding.%23ctor>构造函数，不通过调用提供 BOM，并且第二个<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>构造函数使用其`encoderShouldEmitUTF8Identifier`参数设置为`true`.</span><span class="sxs-lookup"><span data-stu-id="61772-529">The following example instantiates two <xref:System.Text.UTF8Encoding> objects, the first by calling the parameterless <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not provide a BOM, and the second by calling the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> constructor with its `encoderShouldEmitUTF8Identifier` argument set to `true`.</span></span> <span data-ttu-id="61772-530">然后，它调用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法以在编写使用 UF8 编码的字符串之前，向文件写入 BOM。</span><span class="sxs-lookup"><span data-stu-id="61772-530">It then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UF8-encoded string.</span></span> <span data-ttu-id="61772-531">如控制台输出示例中所示，从第二个编码器将字节的文件将具有三个更多字节比第一个。</span><span class="sxs-lookup"><span data-stu-id="61772-531">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 <span data-ttu-id="61772-532">你还可以通过使用比较文件`fc`命令控制台窗口中，或者您可以检查包括十六进制视图模式的文本编辑器中的文件。</span><span class="sxs-lookup"><span data-stu-id="61772-532">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="61772-533">请注意，如果在支持 utf-8 编辑器中打开该文件，将不显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="61772-533">Note that when the file is opened in an editor that supports UTF-8, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="61772-534">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-534">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="61772-535">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-535">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="61772-536">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-536">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61772-537">将字节数组中某个范围的字节解码为一个字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-537">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61772-538">包含指定字节序列解码结果的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-538">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61772-539">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="61772-539">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="61772-540">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="61772-540">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="61772-541">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="61772-541">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="61772-542">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-542">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="61772-543">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="61772-543">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="61772-544">在这种情况下，或如果的数据量很大，它需要划分为较小的块，请使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="61772-544">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61772-545">下面的示例通过调用初始化数组<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法来确定完全字节数和所需的已编码的字符串然后添加字节顺序标记 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="61772-545">The following example initializes an array by calling the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="61772-546">该示例然后调用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法以存储到之前调用数组 BOM<xref:System.Text.UTF8Encoding.GetBytes%2A>方法来存储编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61772-546">The example then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="61772-547">该示例然后调用<xref:System.Text.UTF8Encoding.GetString%2A>方法进行解码的字符串。</span><span class="sxs-lookup"><span data-stu-id="61772-547">The example then calls the <xref:System.Text.UTF8Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="61772-548">请注意，在这种情况下已解码的字符串不同于原始字符串，因为它与 16 位字节顺序标记 U + FFFD 开始。</span><span class="sxs-lookup"><span data-stu-id="61772-548">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="61772-549">这意味着两个字符串将比较是不相等，并且，如果字符串为输出，BOM 将显示为替换字符"？"。</span><span class="sxs-lookup"><span data-stu-id="61772-549">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="61772-550">若要删除字符串的开头 BOM，可以调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="61772-550">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61772-551">
            <paramref name="bytes" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-551">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="61772-552">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-552">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="61772-553">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-553">-or-</span>
          </span>
          <span data-ttu-id="61772-554">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-554">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61772-555">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-555">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="61772-556">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-556">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="61772-557">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-557">-and-</span>
          </span>
          <span data-ttu-id="61772-558">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="61772-558">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>