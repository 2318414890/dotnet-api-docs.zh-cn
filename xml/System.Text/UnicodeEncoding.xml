<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37bb8ffd133cbb1ddd3c3fdd2f593086d39584aa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0165f-101">表示 Unicode 字符的 UTF-16 编码。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0165f-101">Represents a UTF-16 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="0165f-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="0165f-103">解码是一组 Unicode 字符转换为编码字节的序列的过程。</span><span class="sxs-lookup"><span data-stu-id="0165f-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="0165f-104">[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)将码位 （数字） 分配给每个受支持脚本中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="0165f-104">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="0165f-105">Unicode 转换格式 (UTF) 是一种方法将码位编码。</span><span class="sxs-lookup"><span data-stu-id="0165f-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="0165f-106">[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)使用以下 Utf:</span><span class="sxs-lookup"><span data-stu-id="0165f-106">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="0165f-107">Utf-8，它将每个码位表示为一至四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="0165f-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="0165f-108">UTF 16，它将每个码位表示为一到两个 16 位整数的序列。</span><span class="sxs-lookup"><span data-stu-id="0165f-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="0165f-109">Utf-32，它将每个码位表示为一个 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="0165f-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="0165f-110">有关 Utf 和其他编码支持的详细信息<xref:System.Text>，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="0165f-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="0165f-111"><xref:System.Text.UnicodeEncoding>类表示的 utf-16 编码。</span><span class="sxs-lookup"><span data-stu-id="0165f-111">The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding.</span></span> <span data-ttu-id="0165f-112">编码器可以使用任意 big endian 字节顺序 (最高有效字节第一个) 或 little-endian 字节顺序 (最低有效字节第一个)。</span><span class="sxs-lookup"><span data-stu-id="0165f-112">The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</span></span> <span data-ttu-id="0165f-113">例如，A （码位 U + 0041） 序列化为拉丁文大写字母 （十六进制） 如下所示：</span><span class="sxs-lookup"><span data-stu-id="0165f-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="0165f-114">Big endian 字节顺序： 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="0165f-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="0165f-115">Little-endian 字节顺序： 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="0165f-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="0165f-116">它是通常将使用的特定平台的本机字节顺序的 Unicode 字符存储更为有效。</span><span class="sxs-lookup"><span data-stu-id="0165f-116">It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</span></span> <span data-ttu-id="0165f-117">例如，则最好在小 endian 平台，如 Intel 计算机上使用 little-endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="0165f-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="0165f-118"><xref:System.Text.UnicodeEncoding>类对应于 1200 （little-endian 字节顺序） 和 1201 （big endian 字节顺序） 的 Windows 代码页。</span><span class="sxs-lookup"><span data-stu-id="0165f-118">The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</span></span> <span data-ttu-id="0165f-119">你可以通过调用中确定的特定体系结构的"字节排序方式"<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0165f-120">（可选）<xref:System.Text.UnicodeEncoding>对象提供字节顺序标记 (BOM)，这是可以作为前缀为的编码的过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-120">Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="0165f-121">如果该前导码包含字节顺序标记 (BOM)，它可帮助确定的字节顺序和转换格式或 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="0165f-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="0165f-122">如果<xref:System.Text.UnicodeEncoding>实例配置为提供 BOM，你可以通过调用来检索它<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法; 否则，该方法返回空数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-122">If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="0165f-123">请注意，即使<xref:System.Text.UnicodeEncoding>对象已配置了 BOM 支持，必须包括根据; 编码的字节流的开头 BOM 编码方法的<xref:System.Text.UnicodeEncoding>类执行不自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="0165f-123">Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="0165f-124">若要启用错误检测并使类实例更加安全，你应实例化<xref:System.Text.UnicodeEncoding>对象通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="0165f-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="0165f-125">使用错误检测，检测到无效的字符或字节序列的方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-125">With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-126">错误检测，不会引发异常，而无需通常忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="0165f-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="0165f-127">可以实例化<xref:System.Text.UnicodeEncoding>多种方式，具体取决于是否要向其提供字节顺序标记 (BOM)、 是否需要 big endian 或小 endian 编码，以及是否想要启用错误检测的对象。</span><span class="sxs-lookup"><span data-stu-id="0165f-127">You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="0165f-128">下表列出<xref:System.Text.UnicodeEncoding>构造函数和<xref:System.Text.Encoding>返回的属性<xref:System.Text.UnicodeEncoding>对象。</span><span class="sxs-lookup"><span data-stu-id="0165f-128">The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="0165f-129">成员</span><span class="sxs-lookup"><span data-stu-id="0165f-129">Member</span></span>|<span data-ttu-id="0165f-130">字节排序方式</span><span class="sxs-lookup"><span data-stu-id="0165f-130">Endianness</span></span>|<span data-ttu-id="0165f-131">BOM</span><span class="sxs-lookup"><span data-stu-id="0165f-131">BOM</span></span>|<span data-ttu-id="0165f-132">错误检测</span><span class="sxs-lookup"><span data-stu-id="0165f-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|<span data-ttu-id="0165f-133">Big endian</span><span class="sxs-lookup"><span data-stu-id="0165f-133">Big-endian</span></span>|<span data-ttu-id="0165f-134">是</span><span class="sxs-lookup"><span data-stu-id="0165f-134">Yes</span></span>|<span data-ttu-id="0165f-135">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="0165f-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|<span data-ttu-id="0165f-136">小 endian</span><span class="sxs-lookup"><span data-stu-id="0165f-136">Little-endian</span></span>|<span data-ttu-id="0165f-137">是</span><span class="sxs-lookup"><span data-stu-id="0165f-137">Yes</span></span>|<span data-ttu-id="0165f-138">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="0165f-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="0165f-139">小 endian</span><span class="sxs-lookup"><span data-stu-id="0165f-139">Little-endian</span></span>|<span data-ttu-id="0165f-140">是</span><span class="sxs-lookup"><span data-stu-id="0165f-140">Yes</span></span>|<span data-ttu-id="0165f-141">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="0165f-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|<span data-ttu-id="0165f-142">可配置</span><span class="sxs-lookup"><span data-stu-id="0165f-142">Configurable</span></span>|<span data-ttu-id="0165f-143">可配置</span><span class="sxs-lookup"><span data-stu-id="0165f-143">Configurable</span></span>|<span data-ttu-id="0165f-144">无 （替换回退）</span><span class="sxs-lookup"><span data-stu-id="0165f-144">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="0165f-145">可配置</span><span class="sxs-lookup"><span data-stu-id="0165f-145">Configurable</span></span>|<span data-ttu-id="0165f-146">可配置</span><span class="sxs-lookup"><span data-stu-id="0165f-146">Configurable</span></span>|<span data-ttu-id="0165f-147">可配置</span><span class="sxs-lookup"><span data-stu-id="0165f-147">Configurable</span></span>|  
  
 <span data-ttu-id="0165f-148"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法确定将多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法执行实际的编码。</span><span class="sxs-lookup"><span data-stu-id="0165f-148">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="0165f-149">同样，<xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法确定有多少个字符的字节序列进行解码所导致和<xref:System.Text.UnicodeEncoding.GetChars%2A>和<xref:System.Text.UnicodeEncoding.GetString%2A>方法执行实际的解码。</span><span class="sxs-lookup"><span data-stu-id="0165f-149">Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="0165f-150">为编码器或解码器能够保存编码或解码跨多个块 （如在 100,000 字符段中编码的字符串的 100 万个字符） 的数据时的状态信息，请使用<xref:System.Text.UnicodeEncoding.GetEncoder%2A>和<xref:System.Text.UnicodeEncoding.GetDecoder%2A>属性，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-150">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-151">下面的示例演示如何通过使用 Unicode 字符将字符串编码为字节数组<xref:System.Text.UnicodeEncoding>对象。</span><span class="sxs-lookup"><span data-stu-id="0165f-151">The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="0165f-152">字节数组解码为字符串，以表明有不会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="0165f-152">The byte array is decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="0165f-153">下面的示例使用相同的字符串与之前，只不过它将已编码的字节写入文件且前缀字节顺序标记 (BOM) 在字节流。</span><span class="sxs-lookup"><span data-stu-id="0165f-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="0165f-154">它然后两个不同的方式读取文件： 作为通过使用文本文件<xref:System.IO.StreamReader>对象; 和为二进制文件。</span><span class="sxs-lookup"><span data-stu-id="0165f-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="0165f-155">如你所料，在任何情况下是物料清单中包含新读取的字符串。</span><span class="sxs-lookup"><span data-stu-id="0165f-155">As you would expect, in neither case is the BOM included in the newly read string.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0165f-156">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-156">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0165f-157">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-158">此构造函数创建的实例使用 little-endian 字节顺序，提供 Unicode 字节顺序标记，并当检测到无效的编码时，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-158">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-159">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="0165f-159">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-160">下面的示例演示如何创建一个新<xref:System.Text.UnicodeEncoding>实例，并显示编码的名称。</span><span class="sxs-lookup"><span data-stu-id="0165f-160">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="0165f-161">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-161">
              <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="0165f-162">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-162">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-163">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-163">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
          <span data-ttu-id="0165f-164">参数指定是否使用 Big-Endian 字节顺序以及 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法是否返回 Unicode 字节顺序标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-164">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-165">此构造函数创建时检测到无效的编码，则不引发异常的实例。</span><span class="sxs-lookup"><span data-stu-id="0165f-165">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-166">出于安全原因，应启用错误检测，通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。</span><span class="sxs-lookup"><span data-stu-id="0165f-166">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
 <span data-ttu-id="0165f-167">`byteOrderMark`参数控制的操作<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-167">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="0165f-168">如果`true`，该方法返回一个字节数组，包含格式 utf-16 Unicode 字节顺序标记 (BOM)。</span><span class="sxs-lookup"><span data-stu-id="0165f-168">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="0165f-169">如果`false`，它将返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-169">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="0165f-170">但是，将设置`byteOrderMark`到`true`不会导致<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法的前缀开头的字节数组，BOM 也不会<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法中的物料清单中的字节计数中包括的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-170">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-171">下面的示例演示如何创建一个新<xref:System.Text.UnicodeEncoding>指定是否支持 little endian 或 big endian 字节顺序的实例和 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="0165f-171">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="0165f-172">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-172">
              <see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="0165f-173">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-173">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidBytes">
          <span data-ttu-id="0165f-174">如果为 <see langword="true" />，则指定在检测到无效的编码时应当引发异常；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-174">
              <see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-175">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-175">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
          <span data-ttu-id="0165f-176">参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-176">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-177">`byteOrderMark`参数控制的操作<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-177">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="0165f-178">如果`true`，该方法返回一个字节数组，包含格式 utf-16 Unicode 字节顺序标记 (BOM)。</span><span class="sxs-lookup"><span data-stu-id="0165f-178">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="0165f-179">如果`false`，它将返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-179">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="0165f-180">但是，将设置`byteOrderMark`到`true`不会导致<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法的前缀开头的字节数组，BOM 也不会<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法中的物料清单中的字节计数中包括的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-180">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="0165f-181">如果`throwOnInvalidBytes`参数是`true`，检测到无效的字节序列的方法引发<xref:System.ArgumentException?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0165f-181">If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0165f-182">否则为该方法不会引发异常，并忽略无效的序列。</span><span class="sxs-lookup"><span data-stu-id="0165f-182">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-183">出于安全原因，你的应用程序建议使用此构造函数创建的实例<xref:System.Text.UnicodeEncoding>类，并通过设置打开错误检测`throwOnInvalidBytes`到`true`。</span><span class="sxs-lookup"><span data-stu-id="0165f-183">For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-184">下面的示例演示的行为<xref:System.Text.UnicodeEncoding>，同时使用启用的错误检测和不带。</span><span class="sxs-lookup"><span data-stu-id="0165f-184">The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="0165f-185">表示 Unicode 字符大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-185">Represents the Unicode character size in bytes.</span>
          </span>
          <span data-ttu-id="0165f-186">此字段为常数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-186">This field is a constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-187">此字段的值为 32 位有符号的常量值为 2。</span><span class="sxs-lookup"><span data-stu-id="0165f-187">The value of this field is a 32-bit signed constant with a value of 2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-188">下面的示例演示如何返回的值<xref:System.Text.UnicodeEncoding.CharSize>并将其显示。</span><span class="sxs-lookup"><span data-stu-id="0165f-188">The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0165f-189">要与当前对象进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-189">The object to compare with the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-190">确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UnicodeEncoding" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-190">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-191">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UnicodeEncoding" /> 的一个实例并且等于当前对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-191">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-192">两个<xref:System.Text.UnicodeEncoding>对象可视为相等，如果满足所有以下条件：</span><span class="sxs-lookup"><span data-stu-id="0165f-192">Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="0165f-193">这两个对象都使用相同的字节顺序 （little-endian 或 big-endian）。</span><span class="sxs-lookup"><span data-stu-id="0165f-193">Both objects use the same byte order (little-endian or big-endian).</span></span>  
  
-   <span data-ttu-id="0165f-194">这两个对象提供的字节顺序标记，或都不。</span><span class="sxs-lookup"><span data-stu-id="0165f-194">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="0165f-195">这两个对象都使用相同的编码器回退。</span><span class="sxs-lookup"><span data-stu-id="0165f-195">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="0165f-196">这两个对象都使用相同的解码器回退。</span><span class="sxs-lookup"><span data-stu-id="0165f-196">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-197">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.Equals%2A>方法来测试是否当前<xref:System.Text.UnicodeEncoding>对象是否等于不同<xref:System.Text.UnicodeEncoding>对象。</span><span class="sxs-lookup"><span data-stu-id="0165f-197">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="0165f-198">五个<xref:System.Text.UnicodeEncoding>以及创建和相比，对象显示的比较结果。</span><span class="sxs-lookup"><span data-stu-id="0165f-198">Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0165f-199">计算对一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-199">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="0165f-200">包含要编码的字符集的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-200">The string that contains the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-201">计算对指定字符串中的字符进行编码时所产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-201">Calculates the number of bytes produced by encoding the characters in the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-202">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-202">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-203">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-203">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="0165f-204">若要计算的最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-204">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="0165f-205"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-205">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-206">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-206">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-207">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-207">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-208">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="0165f-208">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-209">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-209">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-210">下面的示例调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>和<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法来计算最大和实际的字符串进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-210">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="0165f-211">它还显示的实际存储字节顺序标记的字节流所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-211">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-212">
            <paramref name="s" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-212">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-213">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-214">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-214">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-215">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-216">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-216">-and-</span>
          </span>
          <span data-ttu-id="0165f-217">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-217">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="0165f-218">指向第一个要编码的字符的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-218">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="0165f-219">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-219">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-220">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-220">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-221">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-221">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-222">若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetBytes%2A>需要用于存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-222">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="0165f-223">若要计算的最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-223">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="0165f-224"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-224">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-225">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-225">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-226">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-226">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-227">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="0165f-227">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-228">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-228">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-229">
            <paramref name="chars" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-229">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-230">
            <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-230">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-231">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-231">-or-</span>
          </span>
          <span data-ttu-id="0165f-232">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-232">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-233">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-233">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-234">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-234">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-235">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-235">-and-</span>
          </span>
          <span data-ttu-id="0165f-236">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-236">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="0165f-237">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-237">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="0165f-238">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-238">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="0165f-239">包含要编码的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-239">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="0165f-240">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-240">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="0165f-241">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-241">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-242">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-242">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-243">对指定字符进行编码后生成的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-243">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-244">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-244">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="0165f-245">若要计算的最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-245">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="0165f-246"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-246">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-247">使用启用了错误检测，无效的序列可导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-247">With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-248">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-248">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-249">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="0165f-249">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-250">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-250">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-251">下面的示例填充数组与一个拉丁语大写和小写字符和调用<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定需要拉丁文小写字符进行编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-251">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="0165f-252">然后，它显示此信息，以及所需如果添加字节顺序标记的字节总数。</span><span class="sxs-lookup"><span data-stu-id="0165f-252">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="0165f-253">它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，表示所需拉丁文小写字符进行编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="0165f-253">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="0165f-254">下面的示例使用来填充数组希腊语和西里尔文字符和调用的组合<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定需要西里尔文的字符进行编码的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-254">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="0165f-255">然后，它显示此信息，以及所需如果添加字节顺序标记的字节总数。</span><span class="sxs-lookup"><span data-stu-id="0165f-255">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="0165f-256">它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，表示所需西里尔文的字符进行编码的字节的最大数目。</span><span class="sxs-lookup"><span data-stu-id="0165f-256">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-257">
            <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-257">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-258">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-258">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-259">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-259">-or-</span>
          </span>
          <span data-ttu-id="0165f-260">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-260">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="0165f-261">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-261">-or-</span>
          </span>
          <span data-ttu-id="0165f-262">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-262">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-263">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-263">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-264">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-264">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-265">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-265">-and-</span>
          </span>
          <span data-ttu-id="0165f-266">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-266">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0165f-267">将一组字符编码为一个字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-267">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="0165f-268">指向第一个要编码的字符的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-268">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="0165f-269">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-269">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="0165f-270">一个指针，指向开始写入所产生的字节序列的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-270">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="0165f-271">最多写入的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-271">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-272">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-272">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-273">在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-273">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-274">若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetBytes%2A>需要用于存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-274">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="0165f-275">若要计算的最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-275">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="0165f-276"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-276">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-277">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-277">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-278">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-278">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-279">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="0165f-279">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="0165f-280">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-280">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-281">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="0165f-281">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-282">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="0165f-282">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="0165f-283"><xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="0165f-283">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-284">
            <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-284">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="0165f-285">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-285">-or-</span>
          </span>
          <span data-ttu-id="0165f-286">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-286">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-287">
            <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-287">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-288">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-288">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="0165f-289">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-289">-or-</span>
          </span>
          <span data-ttu-id="0165f-290">
            <paramref name="byteCount" /> 少于所产生的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-290">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-291">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-291">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-292">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-292">-and-</span>
          </span>
          <span data-ttu-id="0165f-293">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-293">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="0165f-294">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-294">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="0165f-295">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-295">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="0165f-296">包含要编码的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-296">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="0165f-297">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-297">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="0165f-298">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-298">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="0165f-299">要包含所产生的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-299">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="0165f-300">要开始写入所产生的字节序列的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-300">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-301">将指定字符数组中的一组字符编码到指定的字节数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-301">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-302">写入 <paramref name="bytes" /> 的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-302">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-303">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-303">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="0165f-304">若要计算的最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-304">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="0165f-305"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-305">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-306">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-306">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-307">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-307">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-308">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="0165f-308">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="0165f-309">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-309">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-310">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="0165f-310">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-311">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="0165f-311">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="0165f-312"><xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="0165f-312">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-313">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法进行编码的字符范围<xref:System.String>并将已编码的字节存储在某个范围的字节数组中的元素。</span><span class="sxs-lookup"><span data-stu-id="0165f-313">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-314">
            <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-314">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="0165f-315">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-315">-or-</span>
          </span>
          <span data-ttu-id="0165f-316">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-316">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-317">
            <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-317">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-318">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-318">-or-</span>
          </span>
          <span data-ttu-id="0165f-319">
            <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-319">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="0165f-320">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-320">-or-</span>
          </span>
          <span data-ttu-id="0165f-321">
            <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-321">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-322">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-322">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="0165f-323">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-323">-or-</span>
          </span>
          <span data-ttu-id="0165f-324">
            <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-324">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-325">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-325">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-326">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-326">-and-</span>
          </span>
          <span data-ttu-id="0165f-327">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-327">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="0165f-328">包含要编码的字符集的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-328">The string containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="0165f-329">第一个要编码的字符的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-329">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="0165f-330">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-330">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="0165f-331">要包含所产生的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-331">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="0165f-332">要开始写入所产生的字节序列的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-332">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-333">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-333">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-334">写入 <paramref name="bytes" /> 的实际字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-334">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-335">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>来存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-335">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="0165f-336">若要计算的最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-336">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="0165f-337"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-337">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-338">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-338">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-339">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-339">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-340">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="0165f-340">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="0165f-341">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-341">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-342">若要确保正确解码编码的字节它们保存为一个文件或流的形式时，可以前缀带前导码的已编码字节的流。</span><span class="sxs-lookup"><span data-stu-id="0165f-342">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-343">字节流的开头插入该前导码 (如开头的一系列字节写入到文件) 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="0165f-343">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="0165f-344"><xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置编码字节的序列的开头到前导码。</span><span class="sxs-lookup"><span data-stu-id="0165f-344">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-345">下面的示例演示如何进行编码的一系列 Unicode 字符数组中的元素并将已编码的字节存储在某个范围的字节数组中的元素。</span><span class="sxs-lookup"><span data-stu-id="0165f-345">The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-346">
            <paramref name="s" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-346">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0165f-347">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-347">-or-</span>
          </span>
          <span data-ttu-id="0165f-348">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-348">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-349">
            <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-349">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-350">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-350">-or-</span>
          </span>
          <span data-ttu-id="0165f-351">
            <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-351">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="0165f-352">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-352">-or-</span>
          </span>
          <span data-ttu-id="0165f-353">
            <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-353">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-354">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-354">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="0165f-355">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-355">-or-</span>
          </span>
          <span data-ttu-id="0165f-356">
            <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-356">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-357">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-357">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-358">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-358">-and-</span>
          </span>
          <span data-ttu-id="0165f-359">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-359">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0165f-360">计算对一个字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-360">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="0165f-361">指向第一个要解码的字节的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-361">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="0165f-362">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-362">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-363">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-363">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-364">对指定字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-364">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-365">若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetChars%2A>需要用于存储所产生的字符，应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-365">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="0165f-366">若要计算的最大数组大小，应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-366">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="0165f-367"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-367">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-368">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-368">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-369">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-369">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-370">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-370">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-371">
            <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-371">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-372">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-372">-or-</span>
          </span>
          <span data-ttu-id="0165f-373">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-373">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-374">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-374">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="0165f-375">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-375">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-376">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-376">-and-</span>
          </span>
          <span data-ttu-id="0165f-377">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-377">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="0165f-378">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-378">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="0165f-379">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-379">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="0165f-380">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-380">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="0165f-381">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-381">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="0165f-382">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-382">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-383">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-383">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-384">对指定字节序列进行解码所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-384">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-385">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-385">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="0165f-386">若要计算的最大数组大小，应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-386">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="0165f-387"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-387">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-388">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-388">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-389">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-389">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-390">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法返回的字符数进行解码的字节数组中的元素范围所产生<xref:System.Text.UnicodeEncoding>。</span><span class="sxs-lookup"><span data-stu-id="0165f-390">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-391">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-391">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-392">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-392">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-393">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-393">-or-</span>
          </span>
          <span data-ttu-id="0165f-394">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-394">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="0165f-395">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-395">-or-</span>
          </span>
          <span data-ttu-id="0165f-396">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-396">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-397">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-397">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="0165f-398">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-398">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-399">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-399">-and-</span>
          </span>
          <span data-ttu-id="0165f-400">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-400">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0165f-401">将一个字节序列解码为一组字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-401">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="0165f-402">指向第一个要解码的字节的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-402">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="0165f-403">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-403">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="0165f-404">一个指针，指向开始写入所产生的字符集的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-404">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="0165f-405">要写入的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-405">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-406">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-406">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-407">在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-407">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-408">若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetChars%2A>需要用于存储所产生的字符，应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-408">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="0165f-409">若要计算的最大数组大小，应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-409">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="0165f-410"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-410">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-411">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-411">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-412">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-412">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-413">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="0165f-413">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="0165f-414">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-414">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0165f-415">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="0165f-415">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="0165f-416">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-416">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-417">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-417">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="0165f-418">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-418">-or-</span>
          </span>
          <span data-ttu-id="0165f-419">
            <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-419">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-420">
            <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-420">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-421">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-421">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="0165f-422">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-422">-or-</span>
          </span>
          <span data-ttu-id="0165f-423">
            <paramref name="charCount" /> 少于所产生的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-423">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="0165f-424">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-424">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-425">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-425">-and-</span>
          </span>
          <span data-ttu-id="0165f-426">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-426">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="0165f-427">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-427">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="0165f-428">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-428">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="0165f-429">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-429">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="0165f-430">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-430">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="0165f-431">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-431">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="0165f-432">要用于包含所产生的字符集的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-432">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="0165f-433">开始写入所产生的字符集的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-433">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-434">将指定字节数组中的一个字节序列解码为指定的字符数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-434">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-435">写入 <paramref name="chars" /> 的实际字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-435">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-436">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-436">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="0165f-437">若要计算的最大数组大小，应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-437">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="0165f-438"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-438">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-439">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-439">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-440">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-440">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-441">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="0165f-441">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="0165f-442">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-442">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0165f-443">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="0165f-443">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="0165f-444">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>由<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-444">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-445">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetChars%2A>方法进行解码的字节数组中的元素范围，并将结果存储在字符数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-445">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-446">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-446">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="0165f-447">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-447">-or-</span>
          </span>
          <span data-ttu-id="0165f-448">
            <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-448">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-449">
            <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-449">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-450">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-450">-or-</span>
          </span>
          <span data-ttu-id="0165f-451">
            <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-451">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="0165f-452">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-452">-or-</span>
          </span>
          <span data-ttu-id="0165f-453">
            <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-453">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-454">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-454">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="0165f-455">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-455">-or-</span>
          </span>
          <span data-ttu-id="0165f-456">
            <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-456">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="0165f-457">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-457">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-458">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-458">-and-</span>
          </span>
          <span data-ttu-id="0165f-459">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-459">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0165f-460">获取可以将 UTF-16 编码的字节序列转换为 Unicode 字符序列的解码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-460">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-461">一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-16 编码的字节序列转换为 Unicode 字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-461">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-462"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的块中的字符，方式类似于<xref:System.Text.UnicodeEncoding.GetChars%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-462">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="0165f-463">但是，<xref:System.Text.Decoder>因此它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。</span><span class="sxs-lookup"><span data-stu-id="0165f-463">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="0165f-464"><xref:System.Text.Decoder>还会保留在数据块的末尾的尾随字节，在下一步的解码操作中使用的尾随字节。</span><span class="sxs-lookup"><span data-stu-id="0165f-464">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="0165f-465">因此，<xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="0165f-465">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="0165f-466">如果启用了错误检测，即`throwOnInvalidBytes`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Decoder>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="0165f-466">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="0165f-467">如果启用了错误检测，遇到一个无效的序列的解码器状态为未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="0165f-467">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-468">下面的示例使用了编码器和解码器转换为字节数组编码字符串，然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-468">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0165f-469">获取可将 Unicode 字符序列转换为 UTF-16 编码的字节序列的编码器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-469">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-470">将 Unicode 字符序列转换为 UTF-16 编码字节序列的 <see cref="T:System.Text.Encoder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-470">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-471"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的方式类似于字节块<xref:System.Text.UnicodeEncoding.GetBytes%2A>此类的方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-471">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="0165f-472">但是，<xref:System.Text.Encoder>对象会维护调用之间的状态信息，以便其可以进行正确编码跨块的字符序列。</span><span class="sxs-lookup"><span data-stu-id="0165f-472">However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="0165f-473"><xref:System.Text.Encoder>对象也会保留在数据块的末尾的尾随字符，在下一步的编码操作中使用的尾随字符。</span><span class="sxs-lookup"><span data-stu-id="0165f-473">The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="0165f-474">例如，一个数据块可能结尾不匹配的高代理项，并且匹配的低代理项可能在下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="0165f-474">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="0165f-475">因此，<xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。</span><span class="sxs-lookup"><span data-stu-id="0165f-475">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="0165f-476">如果启用了错误检测，即`throwOnInvalidBytes`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Encoder>此方法返回的对象。</span><span class="sxs-lookup"><span data-stu-id="0165f-476">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method.</span></span> <span data-ttu-id="0165f-477">如果启用了错误检测，并且遇到无效的序列，则编码器的状态为未定义，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="0165f-477">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-478">下面的示例使用了编码器和解码器转换为字节数组编码字符串，然后将字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-478">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0165f-479">返回当前实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-479">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-480">当前 <see cref="T:System.Text.UnicodeEncoding" /> 对象的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-480">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="0165f-481">要编码的字符的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-481">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-482">计算对指定数目的字符进行编码时产生的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-482">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-483">对指定数目的字符进行编码所产生的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-483">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-484">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>为了存储所产生的字节，应用程序使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-484">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="0165f-485">若要计算的最大数组大小，应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-485">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="0165f-486"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-486">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-487"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 检索最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.EncoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="0165f-487"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="0165f-488">如果有可能很大的字符串中，选择了回退<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>可以返回较大的值。</span><span class="sxs-lookup"><span data-stu-id="0165f-488">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="0165f-489">在大多数情况下，此方法检索用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="0165f-489">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="0165f-490">对于大字符串，你可能必须使用非常大的缓冲区和超出的更合理的缓冲区的罕见情况捕捉错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="0165f-490">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="0165f-491">你可能还需要考虑不同的方法使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0165f-491">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0165f-492"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 与无关<xref:System.Text.UnicodeEncoding.GetChars%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-492"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="0165f-493">如果你的应用程序需要一个用于与的类似函数<xref:System.Text.UnicodeEncoding.GetChars%2A>，应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-493">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-494">`GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="0165f-494">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-495">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法返回的最大指定的数目的字符进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="0165f-495">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-496">
            <paramref name="charCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-496">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-497">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-497">-or-</span>
          </span>
          <span data-ttu-id="0165f-498">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-498">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="0165f-499">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-499">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-500">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-500">-and-</span>
          </span>
          <span data-ttu-id="0165f-501">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-501">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="0165f-502">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-502">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-503">计算对指定数目的字节进行解码时产生的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-503">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-504">对指定数目的字节进行解码时所产生的最大字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-504">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-505">若要计算所需的精确数组大小<xref:System.Text.UnicodeEncoding.GetChars%2A>来存储所产生的字符，该应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-505">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="0165f-506">若要计算的最大数组大小，应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-506">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="0165f-507"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常会分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常执行得更快。</span><span class="sxs-lookup"><span data-stu-id="0165f-507">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="0165f-508"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 检索最坏情况的数字，包括当前所选最坏情况下<xref:System.Text.DecoderFallback>。</span><span class="sxs-lookup"><span data-stu-id="0165f-508"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="0165f-509">如果有可能很大的字符串中，选择了回退<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>检索较大的值。</span><span class="sxs-lookup"><span data-stu-id="0165f-509">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="0165f-510">在大多数情况下，此方法检索用于小字符串合理的数字。</span><span class="sxs-lookup"><span data-stu-id="0165f-510">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="0165f-511">对于大字符串，你可能必须使用非常大的缓冲区和超出的更合理的缓冲区的罕见情况捕捉错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="0165f-511">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="0165f-512">你可能还需要考虑不同的方法使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-512">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="0165f-513"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 与无关<xref:System.Text.UnicodeEncoding.GetBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-513"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>.</span></span> <span data-ttu-id="0165f-514">如果你的应用程序需要一个用于与的类似函数<xref:System.Text.UnicodeEncoding.GetBytes%2A>，应使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="0165f-514">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0165f-515">`GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="0165f-515">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-516">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法返回的最大字符数生成对指定的数目的字节进行解码。</span><span class="sxs-lookup"><span data-stu-id="0165f-516">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-517">
            <paramref name="byteCount" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-517">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-518">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-518">-or-</span>
          </span>
          <span data-ttu-id="0165f-519">得到的字节数大于可作为整数返回的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-519">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="0165f-520">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-520">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-521">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-521">-and-</span>
          </span>
          <span data-ttu-id="0165f-522">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-522">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0165f-523">如果此实例的构造函数请求一个字节顺序标记，则将返回用 UTF-16 格式编码的 Unicode 字节顺序标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-523">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-524">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UnicodeEncoding" /> 对象配置为提供一个这样的字节数组）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-524">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span>
          </span>
          <span data-ttu-id="0165f-525">否则，此方法返回一个零长度的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-525">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-526"><xref:System.Text.UnicodeEncoding>对象可以提供一个前导码，即可以前缀的编码的过程中所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-526">The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="0165f-527">将一个字节顺序标记 (码位为 U + feff) 使用的编码字节序列的可帮助确定的字节顺序和转换格式或 UTF 解码器。</span><span class="sxs-lookup"><span data-stu-id="0165f-527">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="0165f-528">Unicode 字节顺序标记 (BOM) （以十六进制格式），如下所示序列：</span><span class="sxs-lookup"><span data-stu-id="0165f-528">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="0165f-529">Big endian 字节顺序： FE FF</span><span class="sxs-lookup"><span data-stu-id="0165f-529">Big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="0165f-530">Little-endian 字节顺序： FF FE</span><span class="sxs-lookup"><span data-stu-id="0165f-530">Little endian byte order: FF FE</span></span>  
  
 <span data-ttu-id="0165f-531">可以实例化<xref:System.Text.UnicodeEncoding>对象，其<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法返回有效 BOM 通过以下方式：</span><span class="sxs-lookup"><span data-stu-id="0165f-531">You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="0165f-532">通过检索<xref:System.Text.UnicodeEncoding>返回对象<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>或<xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="0165f-532">By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="0165f-533">通过调用的无参数<xref:System.Text.UnicodeEncoding.%23ctor>构造函数实例化<xref:System.Text.UnicodeEncoding>对象。</span><span class="sxs-lookup"><span data-stu-id="0165f-533">By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
-   <span data-ttu-id="0165f-534">通过提供`true`的值作为`byteOrderMark`参数<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>或<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="0165f-534">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.</span></span>  
  
 <span data-ttu-id="0165f-535">我们建议你使用 BOM，因为它提供近乎确定标识到其编码，如无标记或标记错误，否则就已失去引用的文件的编码的 web 数据或存储时的业务的随机文本文件没有国际问题。</span><span class="sxs-lookup"><span data-stu-id="0165f-535">We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="0165f-536">如果数据一致且正确的标记，则可能会避免通常用户问题。</span><span class="sxs-lookup"><span data-stu-id="0165f-536">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="0165f-537">提供编码类型的标准，BOM 是某种程度上冗余的。</span><span class="sxs-lookup"><span data-stu-id="0165f-537">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="0165f-538">但是，它可以用于帮助发送正确的编码标头的服务器。</span><span class="sxs-lookup"><span data-stu-id="0165f-538">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="0165f-539">或者，它可作为回退以防的编码否则将丢失。</span><span class="sxs-lookup"><span data-stu-id="0165f-539">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="0165f-540">有使用 BOM 一些缺点。</span><span class="sxs-lookup"><span data-stu-id="0165f-540">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="0165f-541">例如，知道如何限制使用 BOM 的数据库字段可以很困难。</span><span class="sxs-lookup"><span data-stu-id="0165f-541">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="0165f-542">串联的文件可以也是个问题，例如，这合并文件时不必要的字符可以得到中间数据的方式。</span><span class="sxs-lookup"><span data-stu-id="0165f-542">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="0165f-543">但是，而不考虑几个缺点下, 强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="0165f-543">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0165f-544">若要确保正确解码已编码的字节，应前缀带前导码的已编码字节的流的开始位置。</span><span class="sxs-lookup"><span data-stu-id="0165f-544">To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="0165f-545">请注意，<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置到编码字节的序列 BOM; 提供的相应字节流的开头 BOM 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="0165f-545">Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-546">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法来检索 big-endian 或 little-endian 字节顺序的实例中的 Unicode 字节顺序标记<xref:System.Text.UnicodeEncoding>。</span><span class="sxs-lookup"><span data-stu-id="0165f-546">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="0165f-547">下面的示例实例化两个<xref:System.Text.UnicodeEncoding>对象，其中第一个不提供 BOM，并且第二个的不会。</span><span class="sxs-lookup"><span data-stu-id="0165f-547">The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does.</span></span> <span data-ttu-id="0165f-548">然后，它调用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法以在编写使用 Unicode 编码的字符串之前，向文件写入 BOM。</span><span class="sxs-lookup"><span data-stu-id="0165f-548">It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string.</span></span> <span data-ttu-id="0165f-549">如控制台输出示例中所示，从第二个编码器将字节的文件将具有三个更多字节比第一个。</span><span class="sxs-lookup"><span data-stu-id="0165f-549">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 <span data-ttu-id="0165f-550">你还可以通过使用比较文件`fc`命令控制台窗口中，或者您可以检查包括十六进制视图模式的文本编辑器中的文件。</span><span class="sxs-lookup"><span data-stu-id="0165f-550">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="0165f-551">请注意，如果在支持 utf-16 编码的编辑器中打开该文件，将不显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="0165f-551">Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="0165f-552">包含要解码的字节序列的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-552">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="0165f-553">第一个要解码的字节的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-553">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="0165f-554">要解码的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-554">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0165f-555">将字节数组中某个范围的字节解码为一个字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-555">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0165f-556">包含指定字节序列解码结果的 <see cref="T:System.String" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-556">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0165f-557">使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0165f-557">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0165f-558">错误检测，将忽略无效的序列，而无需不引发异常。</span><span class="sxs-lookup"><span data-stu-id="0165f-558">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="0165f-559">如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 感知类型的方法返回的字节数组，通过此方法返回的字符数组中包含的字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="0165f-559">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="0165f-560">您可以通过调用对其进行删除<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-560">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0165f-561">数据转换，如从流中读取的数据可能仅在连续的块中可用。</span><span class="sxs-lookup"><span data-stu-id="0165f-561">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="0165f-562">在这种情况下，或如果的数据量太大，因此需要划分为较小的块，应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="0165f-562">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0165f-563">下面的示例通过调用初始化数组<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法来确定完全字节数和所需的已编码的字符串然后添加字节顺序标记 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="0165f-563">The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="0165f-564">该示例然后调用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法以存储到之前调用数组 BOM<xref:System.Text.Encoding.GetBytes%2A>方法来存储编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="0165f-564">The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="0165f-565">该示例然后调用<xref:System.Text.UnicodeEncoding.GetString%2A>方法进行解码的字符串。</span><span class="sxs-lookup"><span data-stu-id="0165f-565">The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="0165f-566">请注意，在这种情况下已解码的字符串不同于原始字符串，因为它与 16 位字节顺序标记 U + FFFD 开始。</span><span class="sxs-lookup"><span data-stu-id="0165f-566">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="0165f-567">这意味着两个字符串将比较是不相等，并且，如果字符串为输出，BOM 将显示为替换字符"？"。</span><span class="sxs-lookup"><span data-stu-id="0165f-567">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="0165f-568">若要删除字符串的开头 BOM，可以调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0165f-568">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0165f-569">
            <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-569">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0165f-570">
            <paramref name="index" /> 或 <paramref name="count" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-570">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="0165f-571">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-571">-or-</span>
          </span>
          <span data-ttu-id="0165f-572">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-572">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0165f-573">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-573">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="0165f-574">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-574">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="0165f-575">－和－</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-575">-and-</span>
          </span>
          <span data-ttu-id="0165f-576">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0165f-576">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>