<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8b94b508f18a9b1c51efe985905d8b291ee94b9c" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48658388" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UnicodeEncoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 Unicode 字符的 UTF-16 编码。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编码是将一组 Unicode 字符转换为一个字节序列的过程。 解码是转换为一系列 Unicode 字符编码字节的序列的过程。  
  
 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)将码位 （数字） 分配给每个受支持的脚本中的每个字符。 Unicode 转换格式 (UTF) 是一种方法来将码位编码。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)使用以下 Utf:  
  
-   Utf-8，它将每个码位表示为一到四个字节的序列。  
  
-   Utf-16，它将每个码位表示为一到两个 16 位整数的序列。  
  
-   UTF-32，它将每个码位表示为一个 32 位整数。  
  
 有关 Utf 和其他编码支持的详细信息<xref:System.Text>，请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。  
  
 <xref:System.Text.UnicodeEncoding>类表示的 utf-16 编码。 编码器可以使用两种 big endian 字节顺序 (最高有效字节第一个) 或 little-endian 字节顺序 (最低有效字节第一个)。 例如，拉丁文大写字母 （码位 u+0041） 序列化为 （十六进制） 如下所示：  
  
-   Big endian 字节顺序： 00 00 00 41  
  
-   Little-endian 字节顺序： 41 00 00 00  
  
 它是通常使用的特定平台的本机字节顺序的 Unicode 字符存储更高效。 例如，最好在小 endian 平台，如 Intel 的计算机上使用 little-endian 字节顺序。 <xref:System.Text.UnicodeEncoding>类对应于 Windows 代码页 1200 （little-endian 字节顺序） 和 1201 （big endian 字节顺序）。 您可以通过调用来确定特定体系结构"endianness"<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>方法。  
  
 （可选）<xref:System.Text.UnicodeEncoding>对象提供字节顺序标记 (BOM)，这是一个可以将作为前缀的编码过程中所产生的字节序列的字节数组。 如果该前导码包含字节顺序标记 (BOM)，它可帮助确定的字节顺序转换格式或 UTF 的解码器。  
  
 如果<xref:System.Text.UnicodeEncoding>实例配置为提供 BOM，可以通过调用检索<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法; 否则，该方法返回空数组。 请注意，即使<xref:System.Text.UnicodeEncoding>物料清单支持的配置对象时，必须包含 BOM 将编码的字节流作为相应; 开头的编码方法<xref:System.Text.UnicodeEncoding>类执行未自动执行此操作。  
  
 若要启用错误检测并使类实例更加安全，您应实例化<xref:System.Text.UnicodeEncoding>对象通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。 使用错误检测，检测到无效的字符或字节序列的方法将引发<xref:System.ArgumentException>。 如果没有错误检测，不会引发异常，并通常忽略无效的序列。  
  
 可以实例化<xref:System.Text.UnicodeEncoding>中通过多种方式，具体取决于是否要向其提供字节顺序标记 (BOM)、 是否需要 big endian 或 little-endian 编码，以及你是否想要启用的错误检测的对象。 下表列出<xref:System.Text.UnicodeEncoding>构造函数和<xref:System.Text.Encoding>返回的属性<xref:System.Text.UnicodeEncoding>对象。  
  
|成员|字节排序方式|物料清单|错误检测|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|Big endian|是|无 （替换回退）|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|小字节序|是|无 （替换回退）|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|小字节序|是|无 （替换回退）|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|可配置|可配置|无 （替换回退）|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|可配置|可配置|可配置|  
  
 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法确定多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法执行实际的编码。  
  
 同样，<xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法确定多少个字符产生的字节序列进行解码并<xref:System.Text.UnicodeEncoding.GetChars%2A>和<xref:System.Text.UnicodeEncoding.GetString%2A>方法执行实际解码。  
  
 为编码器或解码器能够保存编码或解码跨多个块 （如在 100,000-字符的段中编码的字符串的 1 百万个字符） 的数据时的状态信息，请使用<xref:System.Text.UnicodeEncoding.GetEncoder%2A>和<xref:System.Text.UnicodeEncoding.GetDecoder%2A>属性，分别。  
  
   
  
## Examples  
 下面的示例演示如何通过使用 Unicode 字符将字符串编码为字节数组<xref:System.Text.UnicodeEncoding>对象。 字节数组解码为字符串，以证明不会丢失数据。  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 下面的示例与上一个使用相同的字符串，只不过它将已编码的字节写入到文件并添加前缀具有字节顺序标记 (BOM) 的字节流。 它然后两个不同的方式读取文件： 为通过使用文本文件<xref:System.IO.StreamReader>对象; 和二进制文件。 如您所料，在两种情况下是物料清单包括在新读取字符串。  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">了解编码</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数创建一个实例，它使用 little-endian 字节顺序、 提供 Unicode 字节顺序标记，并检测到无效的编码时不引发异常。  
  
> [!NOTE]
>  出于安全原因，应启用错误检测，通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.Text.UnicodeEncoding>实例，并显示编码的名称。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</param>
        <param name="byteOrderMark">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。 参数指定是否使用 Big-Endian 字节顺序以及 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法是否返回 Unicode 字节顺序标记。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数创建一个实例，它不会引发异常时检测到无效的编码。  
  
> [!NOTE]
>  出于安全原因，应启用错误检测，通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数，并设置其`throwOnInvalidBytes`参数`true`。  
  
 `byteOrderMark`参数控制的操作<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法。 如果`true`，该方法返回包含 utf-16 格式的 Unicode 字节顺序标记 (BOM) 的字节数组。  如果`false`，它将返回一个零长度的字节数组。 但是，将设置`byteOrderMark`到`true`不会导致<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法以前缀开头的字节数组，BOM 也不会导致不<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法以包括中的物料清单中的字节数的字节数。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.Text.UnicodeEncoding>实例指定是否支持小 endian 或大端字节顺序和 Unicode 字节顺序标记。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</param>
        <param name="byteOrderMark">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</param>
        <param name="throwOnInvalidBytes">如果为 <see langword="true" />，则指定在检测到无效的编码时应当引发异常；否则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。 参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `byteOrderMark`参数控制的操作<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法。 如果`true`，该方法返回包含 utf-16 格式的 Unicode 字节顺序标记 (BOM) 的字节数组。  如果`false`，它将返回一个零长度的字节数组。 但是，将设置`byteOrderMark`到`true`不会导致<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法以前缀开头的字节数组，BOM 也不会导致不<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法以包括中的物料清单中的字节数的字节数。  
  
 如果`throwOnInvalidBytes`参数是`true`，检测到无效的字节序列的方法将引发<xref:System.ArgumentException?displayProperty=nameWithType>。 否则为该方法不会引发异常，并忽略无效的序列。  
  
> [!NOTE]
>  出于安全原因，建议您的应用程序使用此构造函数创建的实例<xref:System.Text.UnicodeEncoding>类，并通过设置启用错误检测`throwOnInvalidBytes`到`true`。  
  
   
  
## Examples  
 下面的示例演示的行为<xref:System.Text.UnicodeEncoding>，同时启用的错误检测和不带。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberSignature Language="F#" Value="val mutable CharSize : int" Usage="System.Text.UnicodeEncoding.CharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>表示 Unicode 字符大小（以字节为单位）。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此字段的值是 2 的值的 32 位有符号的常量。  
  
   
  
## Examples  
 下面的示例演示如何返回的值<xref:System.Text.UnicodeEncoding.CharSize>并将其显示。  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="unicodeEncoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要与当前对象进行比较的对象。</param>
        <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UnicodeEncoding" /> 对象。</summary>
        <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.UnicodeEncoding" /> 的一个实例并且等于当前对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 两个<xref:System.Text.UnicodeEncoding>对象是否视作相等，如果满足所有以下条件：  
  
-   这两个对象使用相同的字节顺序 （小 endian 或 big-endian）。  
  
-   这两个对象提供的字节顺序标记，或同时不这样做。  
  
-   这两个对象使用相同的编码器回退。  
  
-   这两个对象使用相同的解码器回退。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.Equals%2A>方法来测试是否当前<xref:System.Text.UnicodeEncoding>对象是否等于不同<xref:System.Text.UnicodeEncoding>对象。 五个<xref:System.Text.UnicodeEncoding>创建对象，并进行比较，并显示比较的结果。  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计算对一组字符进行编码时产生的字节数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="unicodeEncoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">包含要编码的字符集的字符串。</param>
        <summary>计算对指定字符串中的字符进行编码时所产生的字节数。</summary>
        <returns>对指定字符进行编码后生成的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要计算最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
> [!NOTE]
>  若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。 在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法。  
  
   
  
## Examples  
 下面的示例调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>和<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法来计算最大值和实际的字符串进行编码所需的字节数。 它还显示实际的存储具有字节顺序标记的字节流所需的字节数。  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">指向第一个要编码的字符的指针。</param>
        <param name="count">要编码的字符的数目。</param>
        <summary>计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</summary>
        <returns>对指定字符进行编码后生成的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetBytes%2A>需要用于存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要计算最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
> [!NOTE]
>  若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。 在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小于零。  
  
或 
得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的字符数组。</param>
        <param name="index">第一个要编码的字符的索引。</param>
        <param name="count">要编码的字符的数目。</param>
        <summary>计算对指定字符数组中的一组字符进行编码时产生的字节数。</summary>
        <returns>对指定字符进行编码后生成的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要存储所产生的字节，该应用程序使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>。 若要计算最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 启用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。 在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任，并在该前导码的字节数不会反映在返回的值<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法。  
  
   
  
## Examples  
 下面的示例填充数组与拉丁文大写字母和小写字符，以及调用<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以确定需要拉丁文小写字符进行编码的字节数。 然后，它显示此信息，以及如果添加字节顺序标记所需的字节总数。 它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，它指示所需拉丁文小写字符进行编码的字节的最大数目。 下面的示例使用填充希腊语和西里尔语字符和调用组成的数组<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法，以确定所需的西里尔语字符编码的字节数。 然后，它显示此信息，以及如果添加字节顺序标记所需的字节总数。 它将此数字与返回的值进行比较<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法，它指示所需的西里尔语字符编码的字节的最大数目。  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
或 
得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一组字符编码为一个字节序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="unicodeEncoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">指向第一个要编码的字符的指针。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。</param>
        <param name="byteCount">最多写入的字节数。</param>
        <summary>将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</summary>
        <returns>在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetBytes%2A>需要用于存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要计算最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 数据转换，如从流中读取的数据可能仅在连续的块中可用。 在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>对象提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。  
  
> [!NOTE]
>  若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。 在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任。 <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置码编码字节的序列的开头。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
  
或 
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。  
  
或 
 <paramref name="byteCount" /> 少于所产生的字节数。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的字符数组。</param>
        <param name="charIndex">第一个要编码的字符的索引。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">要包含所产生的字节序列的字节数组。</param>
        <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
        <summary>将指定字符数组中的一组字符编码到指定的字节数组中。</summary>
        <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要计算最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 数据转换，如从流中读取的数据可能仅在连续的块中可用。 在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。  
  
> [!NOTE]
>  若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。 在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任。 <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置码编码字节的序列的开头。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法进行编码的字符范围<xref:System.String>并将已编码的字节存储在某个范围的字节数组中的元素。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
  
或 
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  
  
或 
 <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
或 
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。  
  
或 
 <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">包含要编码的字符集的字符串。</param>
        <param name="charIndex">第一个要编码的字符的索引。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">要包含所产生的字节序列的字节数组。</param>
        <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
        <summary>将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</summary>
        <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要存储所产生的字节，应调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法。 若要计算最大数组大小，请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 数据转换，如从流中读取的数据可能仅在连续的块中可用。 在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。  
  
> [!NOTE]
>  若要确保正确解码已编码的字节在保存为文件或流时，可以添加前缀带前导码编码字节的流。 在字节流的开头插入该前导码 (如一系列字节写入到文件开头) 是开发人员的责任。 <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置码编码字节的序列的开头。  
  
   
  
## Examples  
 下面的示例演示如何对一系列 Unicode 字符数组中的元素进行编码和字节数组中的元素范围中存储已编码的字节。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。  
  
或 
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  
  
或 
 <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
或 
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。  
  
或 
 <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计算对一个字节序列进行解码所产生的字符数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">指向第一个要解码的字节的指针。</param>
        <param name="count">要解码的字节数。</param>
        <summary>计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</summary>
        <returns>对指定字节序列进行解码所产生的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetChars%2A>需要来存储所产生的字符，应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要计算的最大数组大小，该应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小于零。  
  
或 
得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解码的字节序列的字节数组。</param>
        <param name="index">第一个要解码的字节的索引。</param>
        <param name="count">要解码的字节数。</param>
        <summary>计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</summary>
        <returns>对指定字节序列进行解码所产生的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetChars%2A>若要存储所产生的字符，该应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要计算的最大数组大小，该应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法返回的字符数进行解码的字节数组中使用的元素范围所产生<xref:System.Text.UnicodeEncoding>。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。  
  
或 
得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一个字节序列解码为一组字符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">指向第一个要解码的字节的指针。</param>
        <param name="byteCount">要解码的字节数。</param>
        <param name="chars">一个指针，指向开始写入所产生的字符集的位置。</param>
        <param name="charCount">要写入的最大字符数。</param>
        <summary>将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</summary>
        <returns>在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算确切的数组大小，<xref:System.Text.UnicodeEncoding.GetChars%2A>需要来存储所产生的字符，应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要计算的最大数组大小，该应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 注意类型的方法已返回的字节数组，此方法返回的字符数组中包含的字符 U + FFFE。 您可以通过调用删除它<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 数据转换，如从流中读取的数据可能仅在连续的块中可用。 在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>对象提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
  
或 
 <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。  
  
或 
 <paramref name="charCount" /> 少于所产生的字符数。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解码的字节序列的字节数组。</param>
        <param name="byteIndex">第一个要解码的字节的索引。</param>
        <param name="byteCount">要解码的字节数。</param>
        <param name="chars">要用于包含所产生的字符集的字符数组。</param>
        <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
        <summary>将指定字节数组中的一个字节序列解码为指定的字符数组。</summary>
        <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetChars%2A>若要存储所产生的字符，该应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要计算的最大数组大小，该应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常更快地执行。  
  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 注意类型的方法已返回的字节数组，此方法返回的字符数组中包含的字符 U + FFFE。 您可以通过调用删除它<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 数据转换，如从流中读取的数据可能仅在连续的块中可用。 在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetChars%2A>方法进行解码的字节数组中的元素范围，并将结果存储中的字符数组。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
  
或 
 <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。  
  
或 
 <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。  
  
或 
 <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。  
  
或 
 <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="unicodeEncoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取可以将 UTF-16 编码的字节序列转换为 Unicode 字符序列的解码器。</summary>
        <returns>一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-16 编码的字节序列转换为 Unicode 字符序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法将连续的字节块转换为连续的字符，方式类似于块<xref:System.Text.UnicodeEncoding.GetChars%2A>。 但是，<xref:System.Text.Decoder>以便它可以正确地对跨块的字节序列进行解码的调用之间维护状态信息。 <xref:System.Text.Decoder>还保留数据块的末尾的尾随字节并将在下一步的解码操作中的尾随字节。 因此，<xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。  
  
 如果启用了错误检测，即`throwOnInvalidBytes`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Decoder>此方法返回。 如果启用了错误检测，并且在遇到无效的序列，解码器状态未定义，必须停止处理。  
  
   
  
## Examples  
 以下示例使用编码器和解码器来将字符串编码为字节数组，然后将字节解码为字符数组。  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">了解编码</related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="unicodeEncoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取可将 Unicode 字符序列转换为 UTF-16 编码的字节序列的编码器。</summary>
        <returns>将 Unicode 字符序列转换为 UTF-16 编码字节序列的 <see cref="T:System.Text.Encoder" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>方法将连续的字符块转换为连续的方式类似于中的字节块<xref:System.Text.UnicodeEncoding.GetBytes%2A>此类的方法。 但是，<xref:System.Text.Encoder>对象之间维护状态信息的调用，以便它可以正确地对跨块的字符序列进行编码。 <xref:System.Text.Encoder>对象还保留在数据块末尾的尾随字符，并在下一步的编码操作中使用尾随字符。 例如，数据块可能结尾不匹配的高代理项，且匹配的低代理项可能在下一个数据块。 因此，<xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。  
  
 如果启用了错误检测，即`throwOnInvalidBytes`构造函数的参数设置为`true`，在启用了错误检测<xref:System.Text.Encoder>此方法返回的对象。 如果启用了错误检测，并且在遇到无效的序列，则编码器的状态未定义，必须停止处理。  
  
   
  
## Examples  
 以下示例使用编码器和解码器来将字符串编码为字节数组，然后将字节解码为字符数组。  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">了解编码</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="unicodeEncoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前实例的哈希代码。</summary>
        <returns>当前 <see cref="T:System.Text.UnicodeEncoding" /> 对象的哈希代码。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="unicodeEncoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">要编码的字符的数目。</param>
        <summary>计算对指定数目的字符进行编码时产生的最大字节数。</summary>
        <returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetBytes%2A>若要存储所产生的字节，该应用程序使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>。 若要计算的最大数组大小，该应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法通常更快地执行。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 检索最坏的情况的数目，包括当前所选最差情形下<xref:System.Text.EncoderFallback>。 如果有可能较大字符串中，选择了回退<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>可以返回较大值。  
  
 在大多数情况下，此方法检索用于小字符串合理的数字。 对于大型字符串，可能需要使用非常大的缓冲区，在极少数的情况下，超过了更合理的缓冲区中捕获错误之间进行选择。 您可能还需要考虑不同的方法使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 与无关<xref:System.Text.UnicodeEncoding.GetChars%2A>。 如果你的应用程序需要使用具有相似的功能<xref:System.Text.UnicodeEncoding.GetChars%2A>，它应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 不一定是相同的值`N* GetMaxByteCount(1)`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法返回的最大指定的数目的字符进行编码所需的字节数。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 小于零。  
  
或 
得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="unicodeEncoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">要解码的字节数。</param>
        <summary>计算对指定数目的字节进行解码时产生的最大字符数。</summary>
        <returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要计算所需的确切的数组大小<xref:System.Text.UnicodeEncoding.GetChars%2A>若要存储所产生的字符，该应用程序使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>。 若要计算的最大数组大小，该应用程序应使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法通常分配较少的内存，而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法通常更快地执行。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 检索最坏的情况的数目，包括当前所选最差情形下<xref:System.Text.DecoderFallback>。 如果有可能较大字符串中，选择了回退<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>检索大值。  
  
 在大多数情况下，此方法检索用于小字符串合理的数字。 对于大型字符串，可能需要使用非常大的缓冲区，在极少数的情况下，超过了更合理的缓冲区中捕获错误之间进行选择。 您可能还需要考虑不同的方法使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A>。  
  
 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 与无关<xref:System.Text.UnicodeEncoding.GetBytes%2A>。 如果你的应用程序需要使用具有相似的功能<xref:System.Text.UnicodeEncoding.GetBytes%2A>，它应使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 不一定是相同的值`N* GetMaxCharCount(1)`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>解码指定的字节数由方法返回的最大字符数。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 小于零。  
  
或 
得到的字节数大于可作为整数返回的最大数量。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="unicodeEncoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果此实例的构造函数请求一个字节顺序标记，则将返回用 UTF-16 格式编码的 Unicode 字节顺序标记。</summary>
        <returns>一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UnicodeEncoding" /> 对象配置为提供一个这样的字节数组）。 否则，此方法返回一个零长度的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UnicodeEncoding>对象可以提供一个前导码，这是可以将作为前缀的编码过程中所产生的字节序列的字节数组。 作为开端字节顺序标记 （码位 U + FEFF） 使用的编码字节的序列可帮助确定的字节顺序转换格式或 UTF 解码器。 （以十六进制格式），Unicode 字节顺序标记 (BOM) 序列化是按如下所示：  
  
-   Big endian 字节顺序： FE FF  
  
-   Little-endian 字节顺序： FF FE  
  
 可以实例化<xref:System.Text.UnicodeEncoding>对象，其<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法按以下方式返回有效的物料清单：  
  
-   通过检索<xref:System.Text.UnicodeEncoding>返回的对象<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>或<xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType>属性。  
  
-   通过调用无参数<xref:System.Text.UnicodeEncoding.%23ctor>构造函数实例化<xref:System.Text.UnicodeEncoding>对象。  
  
-   通过提供`true`的值作为`byteOrderMark`自变量<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>或<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数。  
  
 我们建议你使用 BOM，因为它提供近乎确定其编码，如无标记或标记错误，否则就已失去引用的文件的编码的标识不具有 web 数据或存储时业务的随机文本文件国际关注点。 如果数据一致和正确的标记，可能避免通常用户问题。  
  
 提供编码类型的标准，BOM 是有点多余。 但是，它可以用于帮助发送正确的编码标头的服务器。 或者，它可以用作回退的编码是否则丢失的情况下。  
  
 有一些缺点使用 BOM。 例如，了解如何限制使用 BOM 的数据库字段很难。 文件串联可以也是个问题，例如，在此类合并的文件时不必要的字符可能出现的中间数据的方式。 但是，尽管有几个缺点下, 强烈建议使用一个 BOM。  
  
> [!CAUTION]
>  若要确保正确解码已编码的字节，应前缀带前导码编码字节的流的开始位置。 请注意，<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不预置到编码字节的序列 BOM; 提供相应的字节流的开始处 BOM 是开发人员的责任。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法来检索大 endian 或 little-endian 字节顺序的实例中的 Unicode 字节顺序标记<xref:System.Text.UnicodeEncoding>。  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 下面的示例实例化两个<xref:System.Text.UnicodeEncoding>对象，其中第一个不提供 BOM，并且第二个的作用。 然后，它调用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法以向文件写入 Unicode 编码的字符串之前写入 BOM。 如控制台输出示例中所示，保存第二个编码器中的字节的文件将具有三个比第一个的多个字节。  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 此外可以通过使用比较文件`fc`命令控制台窗口中，或者您可以检查包含十六进制视图模式的文本编辑器中的文件。 请注意，如果在支持 utf-16 编码的编辑器中打开该文件，将不显示 BOM。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="unicodeEncoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">包含要解码的字节序列的字节数组。</param>
        <param name="index">第一个要解码的字节的索引。</param>
        <param name="count">要解码的字节数。</param>
        <summary>将字节数组中某个范围的字节解码为一个字符串。</summary>
        <returns>包含指定字节序列解码结果的 <see cref="T:System.String" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用错误检测的无效的序列将导致此方法会引发<xref:System.ArgumentException>。 如果没有错误检测，将忽略无效的序列，并不会引发异常。  
  
 如果要解码的字节范围包含字节顺序标记 (BOM)，并且非 BOM 注意类型的方法已返回的字节数组，此方法返回的字符数组中包含的字符 U + FFFE。 您可以通过调用删除它<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 数据转换，如从流中读取的数据可能仅在连续的块中可用。 在这种情况下，或者如果数据量很大，因此需要划分为较小的块，该应用程序应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>对象提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法，分别。  
  
   
  
## Examples  
 下面的示例通过调用初始化数组<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法来确定完全多少个字节所需的已编码的字符串，然后添加字节顺序标记 (BOM) 的大小。 该示例然后调用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法来存储到之前调用数组 BOM<xref:System.Text.Encoding.GetBytes%2A>方法来存储已编码的字节数组。 该示例然后调用<xref:System.Text.UnicodeEncoding.GetString%2A>方法解码字符串。  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 请注意，在这种情况下已解码的字符串与不同的原始字符串，因为它开始于 16 位字节顺序标记 U + FFFD。 这意味着两个字符串将比较为不等，并且，如果字符串为输出，BOM 将显示为替换字符"？"。 若要删除的字符串的开始处的物料清单，可以调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
        <exception cref="T:System.ArgumentException">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>