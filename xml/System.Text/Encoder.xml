<Type Name="Encoder" FullName="System.Text.Encoder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="935e8a3f446a4bf08e1efb7afb01e36886d1cd6f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Encoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Encoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Encoder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Encoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Encoder abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>将一组字符转换为一个字节序列。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要获取的实现的实例<xref:System.Text.Encoder>类，应用程序应使用<xref:System.Text.Encoding.GetEncoder%2A>方法<xref:System.Text.Encoding>实现。  
  
 <xref:System.Text.Encoder.GetByteCount%2A>方法确定将多少个字节进行编码的一组 Unicode 字符和<xref:System.Text.Encoder.GetBytes%2A>方法执行实际的编码。 这两种方法的多个版本中有可用<xref:System.Text.Encoder>类。 有关详情，请参阅<xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>。  
  
 A<xref:System.Text.Encoder>对象会维护对连续调用之间的状态信息`GetBytes`或<xref:System.Text.Decoder.Convert%2A>方法，以便它可以正确编码字符跨块的序列。 <xref:System.Text.Encoder>还保留了尾随字符数据块的末尾，并在下一步的编码操作中使用的尾随字符。 例如，一个数据块可能结尾不匹配的高代理项，并且匹配的低代理项可能在下一个数据块中。 因此，<xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>在网络传输和文件操作很有用，因为这些操作通常处理的数据而不是完整的数据流块。  
  
> [!NOTE]
>  应用程序与它应确保设置进行刷新的状态信息的数据的流的完成时`flush`参数`true`中相应的方法调用。 如果发生异常或如果应用程序切换流，则应调用<xref:System.Text.Encoder.Reset%2A>若要清除的内部状态`Encoder`对象。  
  
## <a name="version-considerations"></a>版本注意事项  
 A<xref:System.Text.Decoder>或<xref:System.Text.Encoder>对象可以序列化期间的转换运算。 对象的状态是保留在相同版本的.NET Framework 中，反序列化，但丢失如果另一个版本中反序列化。  
  
   
  
## Examples  
 下面的示例演示如何将 Unicode 字符的数组转换为使用指定的编码的字节的块。 有关比较的字符数组第一次使用编码<xref:System.Text.UTF7Encoding>。 接下来，使用编码的字符数组<xref:System.Text.Encoder>。  
  
 [!code-cpp[System.Text.Encoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.Encoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.Encoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>当你的应用程序将继承此类时，它必须重写的所有成员。</para>
    </block>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoding" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.Encoder" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要获取此类的实现的实例，该应用程序应使用<xref:System.Text.Encoding.GetEncoder%2A>方法<xref:System.Text.Encoding>实现。  
  
   
  
## Examples  
 下面的示例演示用于初始化新的两种技术<xref:System.Text.Encoder>实例。  
  
 [!code-cpp[System.Text.Encoder.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.Encoder.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.Encoder.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将 Unicode 字符的缓冲区或数组转换为编码的字节序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes, bool flush, out int charsUsed, out int bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes, bool flush, [out] int32&amp; charsUsed, [out] int32&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.Convert(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Convert (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte), flush As Boolean, ByRef charsUsed As Integer, ByRef bytesUsed As Integer, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Convert(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes, bool flush, [Runtime::InteropServices::Out] int % charsUsed, [Runtime::InteropServices::Out] int % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="bytesUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="flush">To be added.</param>
        <param name="charsUsed">To be added.</param>
        <param name="bytesUsed">To be added.</param>
        <param name="completed">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (char* chars, int charCount, byte* bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount, bool flush, [out] int32&amp; charsUsed, [out] int32&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Convert(char* chars, int charCount, System::Byte* bytes, int byteCount, bool flush, [Runtime::InteropServices::Out] int % charsUsed, [Runtime::InteropServices::Out] int % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="bytesUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chars">要转换的 UTF-16 编码字符的字符串的地址。</param>
        <param name="charCount">要转换的 <c>chars</c> 中的字符数。</param>
        <param name="bytes">用于存储已转换字节的缓冲区的地址。</param>
        <param name="byteCount">要在转换中使用的 <c>bytes</c> 中的最大字节数。</param>
        <param name="flush">
          如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="charsUsed">当此方法返回时，包含在转换中使用的 <c>chars</c> 中的字符数。 此参数未经初始化即被传递。</param>
        <param name="bytesUsed">当此方法返回时，包含在转换中使用的字节数。 此参数未经初始化即被传递。</param>
        <param name="completed">当此方法返回时，如果转换了所有由 <c>charCount</c> 指定的字符，则包含 <see langword="true" />；否则，包含 <see langword="false" />。 此参数未经初始化即被传递。</param>
        <summary>将 Unicode 字符的缓冲区转换为编码的字节序列，并将结果存储在另一个缓冲区中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请记住，<xref:System.Text.Encoder>对象保存到的调用之间的状态<xref:System.Text.Encoder.Convert%2A>。 如果应用程序用的数据流完成的它应设置`flush`参数`true`若要确保刷新的状态信息。 使用此设置时，编码器将忽略无效字节的数据块的末尾，并清除内部缓冲区。 根据当前的回退设置转换是一个逻辑单元，如代理项对的高代理项的一部分的任何剩余处理的数据。  
  
 `Convert`方法旨在用于在循环中编码任意数量的输入，例如从文件或流中读取的数据。 它将编码操作的输出存储在固定大小的缓冲区。 <xref:System.Text.Encoder.GetBytes%2A> 如果输出缓冲区不够大，将引发异常但<xref:System.Text.Encoder.Convert%2A>将填充尽可能多的空间，并返回字符读取和写入的字节数。 另请参阅<xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>主题的详细的注释。  
  
 `completed`输出参数指示输入缓冲区中的所有数据是否已转换并存储在输出缓冲区中。 此参数设置为`false`如果指定数量的字符`charCount`无法将参数转换不超过指定的字节数`byteCount`参数。 在这种情况下，应用程序应使用输出缓冲区的内容也提供了新的输出缓冲区，增量`chars`按指定的字符数的参数`charsUsed`参数，然后调用`Convert`再次方法以处理剩余的输入。  
  
 `completed`参数还可以设置为`false`，即使`charsUsed`和`charCount`参数是否相等。 如果仍中的数据，则会发生这种情况下<xref:System.Text.Encoder>对象不在存储`chars`缓冲区。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输出。 输出缓冲区应大于或等于由 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法指示的大小。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex, int32 byteCount, bool flush, [out] int32&amp; charsUsed, [out] int32&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Convert (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer, byteCount As Integer, flush As Boolean, ByRef charsUsed As Integer, ByRef bytesUsed As Integer, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Convert(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, bool flush, [Runtime::InteropServices::Out] int % charsUsed, [Runtime::InteropServices::Out] int % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="bytesUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chars">要转换的字符数组。</param>
        <param name="charIndex">要转换的 <c>chars</c> 的第一个元素。</param>
        <param name="charCount">要转换的 <c>chars</c> 的元素数。</param>
        <param name="bytes">存储已转换的字节的数组。</param>
        <param name="byteIndex">存储数据的 <c>bytes</c> 的第一个元素。</param>
        <param name="byteCount">要在转换中使用的 <c>bytes</c> 的最大元素数。</param>
        <param name="flush">
          如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="charsUsed">当此方法返回时，包含在转换中使用的 <c>chars</c> 中的字符数。 此参数未经初始化即被传递。</param>
        <param name="bytesUsed">当此方法返回时，包含由转换生成的字节数。 此参数未经初始化即被传递。</param>
        <param name="completed">当此方法返回时，如果转换了所有由 <c>charCount</c> 指定的字符，则包含 <see langword="true" />；否则，包含 <see langword="false" />。 此参数未经初始化即被传递。</param>
        <summary>将 Unicode 字符的数组转换为编码字节序列，并将结果存储在字节数组中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请记住，<xref:System.Text.Encoder>对象保存到的调用之间的状态<xref:System.Text.Encoder.Convert%2A>。 如果应用程序用的数据流完成的它应设置`flush`参数`true`若要确保刷新的状态信息。 使用此设置时，编码器将忽略无效字节的数据块的末尾，并清除内部缓冲区。 根据当前的回退设置转换是一个逻辑单元，如代理项对的高代理项的一部分的任何剩余处理的数据。  
  
 `Convert`方法旨在用于在循环中解码任意数量的输入，例如从文件或流中读取的数据。 它将编码操作的输出存储在固定大小的缓冲区。 <xref:System.Text.Encoder.GetBytes%2A> 如果输出缓冲区不够大，将引发异常但<xref:System.Text.Encoder.Convert%2A>将填充尽可能多的空间，并返回字符读取和写入的字节数。 另请参阅<xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>主题的详细的注释。  
  
 `completed`输出参数指示输入缓冲区中的所有数据是否已转换并存储在输出缓冲区中。 此参数设置为`false`如果指定数量的字符`charCount`无法将参数转换不超过指定的字节数`byteCount`参数。 在这种情况下，应用程序应使用输出缓冲区的内容也提供了新的输出缓冲区，增量`chars`按指定的字符数的参数`charsUsed`参数，然后调用`Convert`再次方法以处理剩余的输入。  
  
 `completed`参数还可以设置为`false`，即使`charsUsed`和`charCount`参数是否相等。 如果仍中的数据，则会发生这种情况下<xref:System.Text.Encoder>对象不在存储`chars`缓冲区。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Text.Encoder.Convert%2A>方法将 utf-16 文件转换为 utf-8，字符，然后使用<xref:System.Text.Decoder.Convert%2A>方法可将 utf-8 字符转换为 UTF 16 个字符。  
  
 [!code-csharp[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]
 [!code-vb[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" /> 或 <paramref name="byteCount" /> 小于零。  
  
 或  
  
 <paramref name="chars" /> - <paramref name="charIndex" /> 的长度小于 <paramref name="charCount" />。  
  
 或  
  
 <paramref name="bytes" /> - <paramref name="byteIndex" /> 的长度小于 <paramref name="byteCount" />。</exception>
        <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输出。 输出缓冲区应大于或等于由 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法指示的大小。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public System.Text.EncoderFallback Fallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.EncoderFallback Fallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoder.Fallback" />
      <MemberSignature Language="VB.NET" Value="Public Property Fallback As EncoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::EncoderFallback ^ Fallback { System::Text::EncoderFallback ^ get(); void set(System::Text::EncoderFallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.EncoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前 <see cref="T:System.Text.EncoderFallback" /> 对象的 <see cref="T:System.Text.Encoder" /> 对象。</summary>
        <value>
          <see cref="T:System.Text.EncoderFallback" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.EncoderFallback>对象表示一个字符不能转换为已编码的字节序列时将调用错误处理程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentException">无法在设置操作中赋新值，这是因为当前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象含有尚未编码的数据。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="P:System.Text.Encoder.FallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="FallbackBuffer">
      <MemberSignature Language="C#" Value="public System.Text.EncoderFallbackBuffer FallbackBuffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.EncoderFallbackBuffer FallbackBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoder.FallbackBuffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FallbackBuffer As EncoderFallbackBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::EncoderFallbackBuffer ^ FallbackBuffer { System::Text::EncoderFallbackBuffer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.EncoderFallbackBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象关联的 <see cref="T:System.Text.Encoder" /> 对象。</summary>
        <value>
          <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.FallbackBuffer%2A>对象表示使用的数据<xref:System.Text.EncoderFallback>对象。 <xref:System.Text.EncoderFallback>对象表示一个字符不能转换为已编码的字节序列时将调用错误处理程序。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="P:System.Text.Encoder.Fallback" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在派生类中重写时，计算对一组字符进行编码所产生的字节数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (ReadOnlySpan&lt;char&gt; chars, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.GetByteCount(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As ReadOnlySpan(Of Char), flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(ReadOnlySpan&lt;char&gt; chars, bool flush);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="flush">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char* chars, int count, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char* chars, int32 count, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(char* chars, int count, bool flush);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="chars">指向第一个要编码的字符的指针。</param>
        <param name="count">要编码的字符的数目。</param>
        <param name="flush">
          若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。 一个参数指示计算后是否要清除编码器的内部状态。</summary>
        <returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会影响编码器的状态。  
  
 若要计算确切的数组大小，<xref:System.Text.Encoder.GetBytes%2A>需要用于存储所产生的字节，应用程序应使用<xref:System.Text.Encoder.GetByteCount%2A>。  
  
 如果`GetBytes`使用调用`flush`设置为`false`的编码器的内部缓冲区中存储的数据块的末尾的尾随字符，并且在下一步的编码操作中使用它们。 应用程序应调用`GetByteCount`上立即之前调用的数据块`GetBytes`上同一个块，以便任何尾随字符从上一个块包括在计算中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />（在 Visual Basic .NET 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Encoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetByteCount (char[] chars, int index, int count, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetByteCount (chars As Char(), index As Integer, count As Integer, flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count, bool flush);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的字符数组。</param>
        <param name="index">第一个要编码的字符的索引。</param>
        <param name="count">要编码的字符的数目。</param>
        <param name="flush">
          若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。 一个参数指示计算后是否要清除编码器的内部状态。</summary>
        <returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会影响编码器的状态。  
  
 若要计算确切的数组大小，<xref:System.Text.Encoder.GetBytes%2A>需要用于存储所产生的字节，应用程序应使用<xref:System.Text.Encoder.GetByteCount%2A>。  
  
 如果`GetBytes`使用调用`flush`设置为`false`的编码器的内部缓冲区中存储的数据块的末尾的尾随字符，并且在下一步的编码操作中使用它们。 应用程序应调用`GetByteCount`上立即之前调用的数据块`GetBytes`上同一个块，以便任何尾随字符从上一个块包括在计算中。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Text.Encoder.GetByteCount%2A>方法以返回所需使用 Unicode 的字符的数组进行编码的字节数<xref:System.Text.Encoder>。  
  
 [!code-cpp[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Encoder.Reset" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在派生类中重写时，将一组字符编码为一个字节序列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte), flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes, bool flush);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="flush">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount, bool flush);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="chars">指向第一个要编码的字符的指针。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。</param>
        <param name="byteCount">最多写入的字节数。</param>
        <param name="flush">
          如果要在转换后清除编码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在派生类中重写时，将一组字符（从指定的字符指针处开始）和内部缓冲区中的任何字符编码为从指定字节指针开始存储的字节序列。 一个参数指示转换后是否清除编码器的内部状态。</summary>
        <returns>在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请记住，<xref:System.Text.Encoder>对象保存到的调用之间的状态<xref:System.Text.Encoder.GetBytes%2A>。 如果应用程序用的数据流完成的它应设置`flush`参数`true`的最后一个调用中`GetBytes`若要确保对状态信息进行刷新的已编码的字节是否正确终止。 使用此设置时，编码器将忽略无效的数据块，如不匹配的代理项或不完整的组合序列末尾的字节，并清除内部缓冲区。  
  
 若要计算确切的缓冲区大小，`GetBytes`需要用于存储所产生的字符，应用程序应使用<xref:System.Text.Encoder.GetByteCount%2A>。  
  
 如果`GetBytes`使用调用`flush`设置为`false`，编码器在内部缓冲区中存储的数据块的末尾的尾随字节，并在下一步的编码操作中使用它们。 应用程序应调用`GetByteCount`上立即之前调用的数据块`GetBytes`上同一个块，以便任何尾随字符从上一个块包括在计算中。  
  
 如果你的应用程序是将转换的输入流的很多段，请考虑使用<xref:System.Text.Encoder.Convert%2A>方法。 <xref:System.Text.Encoder.GetBytes%2A> 如果输出缓冲区不够大，将引发异常但<xref:System.Text.Encoder.Convert%2A>将填充尽可能多的空间，并返回字符读取和写入的字节数。 另请参阅<xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>主题的详细的注释。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
  
 或  
  
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="byteCount" /> 少于所产生的字节数。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Encoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer, flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, bool flush);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="chars">包含要编码的字符集的字符数组。</param>
        <param name="charIndex">第一个要编码的字符的索引。</param>
        <param name="charCount">要编码的字符的数目。</param>
        <param name="bytes">要包含所产生的字节序列的字节数组。</param>
        <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
        <param name="flush">
          如果要在转换后清除编码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在派生类中重写时，将指定字符数组中的一组字符和内部缓冲区中的任何字符编码到指定的字节数组中。 一个参数指示转换后是否清除编码器的内部状态。</summary>
        <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请记住，<xref:System.Text.Encoder>对象保存到的调用之间的状态<xref:System.Text.Encoder.GetBytes%2A>。 如果应用程序用的数据流完成的它应设置`flush`参数`true`的最后一个调用中`GetBytes`若要确保对状态信息进行刷新的已编码的字节是否正确终止。 使用此设置时，编码器将忽略无效的数据块，如不匹配的代理项或不完整的组合序列末尾的字节，并清除内部缓冲区。  
  
 若要计算确切的缓冲区大小，`GetBytes`需要用于存储所产生的字符，应用程序应使用<xref:System.Text.Encoder.GetByteCount%2A>。  
  
 如果`GetBytes`使用调用`flush`设置为`false`，编码器在内部缓冲区中存储的数据块的末尾的尾随字节，并在下一步的编码操作中使用它们。 应用程序应调用`GetByteCount`上立即之前调用的数据块`GetBytes`上同一个块，以便任何尾随字符从上一个块包括在计算中。  
  
 如果你的应用程序是将转换的输入流的很多段，请考虑使用<xref:System.Text.Encoder.Convert%2A>方法。 <xref:System.Text.Encoder.GetBytes%2A> 如果输出缓冲区不够大，将引发异常但<xref:System.Text.Encoder.Convert%2A>将填充尽可能多的空间，并返回字符读取和写入的字节数。 另请参阅<xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>主题的详细的注释。  
  
   
  
## Examples  
 下面的示例演示如何进行编码的一系列字符数组中的元素并将已编码的字节存储在某个范围的字节数组中的元素。 <xref:System.Text.Encoder.GetByteCount%2A>方法用于确定所需的数组的大小<xref:System.Text.Encoder.GetBytes%2A>。  
  
 [!code-cpp[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
  
 或  
  
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  
  
 或  
  
 <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。  
  
 或  
  
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）  
  
 －和－  
  
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
        <altmember cref="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Encoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoder.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，将编码器设置回它的初始状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法清除的内部状态<xref:System.Text.Encoder>对象。 此方法清除保留的以前调用的任何状态信息<xref:System.Text.Encoder.GetBytes%2A>或<xref:System.Text.Decoder.Convert%2A>，包括尾随字符为单位在前一个数据块，如不匹配的高代理项的末尾。  
  
 你的应用程序应调用`Reset`方法如果它要重用相同的编码器，将引发异常的情况下，即使<xref:System.Text.Encoder.GetBytes%2A>或<xref:System.Text.Encoder.GetByteCount%2A>，或如果应用程序切换流。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>