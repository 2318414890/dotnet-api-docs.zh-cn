<Type Name="QuinticEase" FullName="System.Windows.Media.Animation.QuinticEase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f996b0e89eca6379d756c19ba87ac9069db39b5a" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39925459" /></Metadata><TypeSignature Language="C#" Value="public class QuinticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuinticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.QuinticEase" />
  <TypeSignature Language="VB.NET" Value="Public Class QuinticEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuinticEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type QuinticEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示一个缓动函数，该函数使用公式 f(t) = t<sup>5</sup> 创建加速和/或减速的动画。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以控制是否动画加速、 减速或这二者通过指定<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。 下图演示了不同的值<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>其中*f*(*t*) 表示动画进度和*t*表示时间。  
  
 ![不同缓动模式图的 QuinticEase。](~/add/media/quinticease-graph.png "的不同缓动模式图的 QuinticEase。")  
  
 以下是使用此函数的公式。  
  
 *f*(*t*) = *t*<sup>5</sup>  
  
> [!NOTE]
>  可以使用<xref:System.Windows.Media.Animation.PowerEase>来创建相同的行为<xref:System.Windows.Media.Animation.CubicEase>， <xref:System.Windows.Media.Animation.QuadraticEase>， <xref:System.Windows.Media.Animation.QuarticEase>，并<xref:System.Windows.Media.Animation.QuinticEase>使用<xref:System.Windows.Media.Animation.PowerEase.Power%2A>属性。 例如，如果你想要使用<xref:System.Windows.Media.Animation.PowerEase>将替换为<xref:System.Windows.Media.Animation.CubicEase>，指定<xref:System.Windows.Media.Animation.PowerEase.Power%2A>值为 3。  
  
 有几个其他缓动函数除了<xref:System.Windows.Media.Animation.QuinticEase>。  
 除了使用运行时中附带的缓动函数，可以创建自己的自定义缓动函数，通过继承<xref:System.Windows.Media.Animation.EasingFunctionBase>。  
  
## <a name="xaml-object-element-usage"></a>XAML 对象元素用法  
  
```xaml
<QuinticEase .../>  
```  
  
   
  
## Examples  
 下面的示例应用<xref:System.Windows.Media.Animation.QuinticEase>缓动函数到<xref:System.Windows.Media.Animation.DoubleAnimation>创建减速的动画。  
  
 [!code-xaml[QuinticEase#QuinticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/quinticease/CS/window1.xaml#quinticease)]   
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuinticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuinticEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QuinticEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.Animation.QuinticEase" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuinticEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="quinticEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。 在创建派生类时，必须重写此方法。</summary>
        <returns>新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 动画类间接继承自<xref:System.Windows.Freezable>。 因此，您需要重写<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>方法来构造自定义动画对象。  
  
   
  
## Examples  
 下面的示例演示的典型实现<xref:System.Windows.Freezable.CreateInstanceCore%2A>。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuinticEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="quinticEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">动画的规范化时间（进度）。</param>
        <summary>提供缓动函数的逻辑部分，您可重写该部分以生成 <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> 模式的自定义缓动函数。</summary>
        <returns>表示转换进度的双精度值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法转换规范化的时间以控制的动画的节奏<xref:System.Windows.Media.Animation.EasingMode.EaseIn>用例<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。  
  
 只需指定为缓动函数<xref:System.Windows.Media.Animation.EasingMode.EaseIn>情况下由于的实现<xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>方法转换`normalizedTime`有关<xref:System.Windows.Media.Animation.EasingMode.EaseOut>和<xref:System.Windows.Media.Animation.EasingMode.EaseInOut>情况。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>