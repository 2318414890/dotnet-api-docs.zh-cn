<Type Name="ExponentialEase" FullName="System.Windows.Media.Animation.ExponentialEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9b64f6b9a822f0b222ce00c5d0f012ade10ab20" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36499028" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExponentialEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ExponentialEase" />
  <TypeSignature Language="VB.NET" Value="Public Class ExponentialEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExponentialEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type ExponentialEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示一个缓动函数，该函数使用指数公式创建加速和/或减速的动画。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以控制是否动画加快，减速或这二者通过指定<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。 下图演示的不同值<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>其中*f*(*t*) 表示的动画进度和*t*表示时间。  
  
 ![不同缓动模式的 ExponentialEase 图。](~/add/media/exponentialease-graph.png "不同缓动模式的 ExponentialEase 图。")  
  
 用于此函数的公式如下所示。  
  
 ![ExponentialEase 的数学公式](~/add/media/exponentialease-formula.png "ExponentialEase 的数学公式")  
  
 使用上面的公式下, 图演示了几个不同的值的效果<xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A>属性：  
  
 ![三个 Exponent 值的简易指数](~/add/media/expo-easeproperty.png "三个 Exponent 值的简易指数")  
  
 还有一些其他缓动函数除了<xref:System.Windows.Media.Animation.ExponentialEase>其中你可以使用下面的 Silverlight 示例。  
  
 [运行此示例](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 除了使用运行时中附带的缓动函数，您可以通过继承创建您自己的自定义缓动函数<xref:System.Windows.Media.Animation.EasingFunctionBase>。  
  
<a name="xamlObjectElementUsage_ExponentialEase"></a>   
## <a name="xaml-object-element-usage"></a>XAML 对象元素用法  
  
```  
<ExponentialEase .../>  
```  
  
   
  
## Examples  
 下面的示例应用<xref:System.Windows.Media.Animation.ExponentialEase>缓动函数<xref:System.Windows.Media.Animation.DoubleAnimation>创建减速的动画。  
  
 [!code-xaml[ExponentialEase#ExponentialEase](~/samples/snippets/csharp/VS_Snippets_Wpf/exponentialease/CS/window1.xaml#exponentialease)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExponentialEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExponentialEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.Animation.ExponentialEase" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="exponentialEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。 在创建派生类时，必须重写此方法。</summary>
        <returns>新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 动画类间接继承自<xref:System.Windows.Freezable>。 因此，您需要重写<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>方法来构造自定义的动画对象。  
  
   
  
## Examples  
 下面的示例演示的典型实现<xref:System.Windows.Freezable.CreateInstanceCore%2A>。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="exponentialEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">动画的标准化时间（进度）。</param>
        <summary>提供可以重写的缓动函数的逻辑部分，以生成自定义缓动函数的 <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> 模式。</summary>
        <returns>双精度值，该值表示已转换的进度。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法转换规范化的时间，以控制动画节奏<xref:System.Windows.Media.Animation.EasingMode.EaseIn>用例<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。  
  
 只需指定你缓动函数<xref:System.Windows.Media.Animation.EasingMode.EaseIn>种情况下，因为的实现<xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>方法转换`normalizedTime`为<xref:System.Windows.Media.Animation.EasingMode.EaseOut>和<xref:System.Windows.Media.Animation.EasingMode.EaseInOut>用例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponent">
      <MemberSignature Language="C#" Value="public double Exponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Exponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberSignature Language="VB.NET" Value="Public Property Exponent As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Exponent { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Exponent : double with get, set" Usage="System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于确定动画的内插的指数。</summary>
        <value>用于确定动画的内插的指数。 默认值为 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  
  
 使用公式<xref:System.Windows.Media.Animation.ExponentialEase>如下所示。  
  
 ![ExponentialEase 的数学公式](~/add/media/exponentialease-formula.png "ExponentialEase 的数学公式")  
  
 使用上面的公式下, 图演示了几个不同的值的效果<xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A>属性：  
  
 ![三个 Exponent 值的简易指数](~/add/media/expo-easeproperty.png "三个 Exponent 值的简易指数")  
  
<a name="xamlAttributeUsage_Exponent"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object Exponent="double" .../>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExponentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExponentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExponentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ExponentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ExponentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>