<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1da3a84af0b95449d1d9cdbf7be9006f58878991" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649371" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将 <see cref="T:System.Windows.Input.RoutedCommand" /> 绑定到实现该命令的事件处理程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Input.CommandBinding>将与命令关联<xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed>和<xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute>事件实现并确定命令的状态。  
  
 当<xref:System.Windows.Input.RoutedCommand.Execute%2A>或<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用时， <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed>或<xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute>对命令目标引发事件。  如果对命令目标有<xref:System.Windows.Input.CommandBinding>对于命令，调用相应的处理程序。  如果命令目标没有<xref:System.Windows.Input.CommandBinding>对于命令，事件路由通过元素树具有的元素，直到<xref:System.Windows.Input.CommandBinding>找到。  
  
 A<xref:System.Windows.Input.CommandBinding>具有有限的使用与<xref:System.Windows.Input.ICommand>不<xref:System.Windows.Input.RoutedCommand>。  这是因为<xref:System.Windows.Input.CommandBinding>绑定到命令<xref:System.Windows.Input.ExecutedRoutedEventHandler>和<xref:System.Windows.Input.CanExecuteRoutedEventHandler>其侦听<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>路由事件时引发<xref:System.Windows.Input.RoutedCommand.Execute%2A>和<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.CommandBinding" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.CommandBinding" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command">新的 <see cref="T:System.Windows.Input.RoutedCommand" /> 所基于的命令。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.CommandBinding" /> 初始化 <see cref="T:System.Windows.Input.ICommand" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">新的 <see cref="T:System.Windows.Input.RoutedCommand" /> 所基于的命令。</param>
        <param name="executed">新 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 上的 <see cref="T:System.Windows.Input.RoutedCommand" /> 事件的处理程序。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.CommandBinding" /> 和指定的 <see cref="T:System.Windows.Input.ICommand" /> 事件处理程序初始化 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">新的 <see cref="T:System.Windows.Input.RoutedCommand" /> 所基于的命令。</param>
        <param name="executed">新 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 上的 <see cref="T:System.Windows.Input.RoutedCommand" /> 事件的处理程序。</param>
        <param name="canExecute">新 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 上的 <see cref="T:System.Windows.Input.RoutedCommand" /> 事件的处理程序。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.CommandBinding" /> 和指定的 <see cref="T:System.Windows.Input.ICommand" /> 及 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 事件处理程序初始化 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在与此 <see cref="T:System.Windows.Input.CommandBinding" /> 关联的命令开始检查能否对命令目标执行该命令时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用时，<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>对命令目标引发事件。  如果不处理该事件，<xref:System.Windows.Input.CommandBinding.CanExecute>引发事件。  如果对命令目标有<xref:System.Windows.Input.CommandBinding>对于命令，<xref:System.Windows.Input.CommandBinding.CanExecute>处理程序<xref:System.Windows.Input.CommandBinding>调用。  如果命令目标没有<xref:System.Windows.Input.CommandBinding>对于命令，<xref:System.Windows.Input.CommandBinding.CanExecute>事件气泡搜索具有的元素，在元素树中向上<xref:System.Windows.Input.CommandBinding>与命令关联。  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a>路由事件信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|路由策略|冒泡|  
|委托|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   对应的隧道事件<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Input.CommandBinding>映射<xref:System.Windows.Input.ExecutedRoutedEventHandler>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>处理程序<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 如下所示<xref:System.Windows.Input.CanExecuteRoutedEventHandler>哪些集<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>到`true`。  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Windows.Input.CommandBinding" /> 关联的 <see cref="T:System.Windows.Input.ICommand" />。</summary>
        <value>与此绑定关联的命令。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Windows.Input.CommandBinding>映射<xref:System.Windows.Input.ExecutedRoutedEventHandler>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>处理程序<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 如下所示<xref:System.Windows.Input.CanExecuteRoutedEventHandler>哪些集<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>到`true`。  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 如下所示<xref:System.Windows.Input.ExecutedRoutedEventHandler>这将创建<xref:System.Windows.MessageBox>时执行此命令。  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行与此 <see cref="T:System.Windows.Input.CommandBinding" /> 相关联的命令时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Input.RoutedCommand>执行，它会发出<xref:System.Windows.Input.CommandBinding.PreviewExecuted>命令目标上的事件。  如果<xref:System.Windows.Input.CommandBinding.PreviewExecuted>不处理事件，<xref:System.Windows.Input.CommandBinding.Executed>对命令目标引发事件。  如果对命令目标有<xref:System.Windows.Input.CommandBinding>的特定命令，<xref:System.Windows.Input.CommandBinding.Executed>处理程序<xref:System.Windows.Input.CommandBinding>调用。  如果命令目标没有<xref:System.Windows.Input.CommandBinding>该特定命令<xref:System.Windows.Input.CommandBinding.Executed>事件气泡搜索具有的元素，在元素树中向上<xref:System.Windows.Input.CommandBinding>与命令关联。  如果<xref:System.Windows.Input.CommandBinding>未找到，则该命令未处理。  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a>路由事件信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|路由策略|冒泡|  
|委托|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   对应的隧道事件<xref:System.Windows.Input.CommandBinding.PreviewExecuted>。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Input.CommandBinding>映射<xref:System.Windows.Input.ExecutedRoutedEventHandler>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>处理程序<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 如下所示<xref:System.Windows.Input.ExecutedRoutedEventHandler>这将创建<xref:System.Windows.MessageBox>时执行此命令。  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当与该 <see cref="T:System.Windows.Input.CommandBinding" /> 关联的命令启动检查以确定是否可以在当前命令目标上执行此命令时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用时，<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>事件引发对命令目标，如果对命令目标有<xref:System.Windows.Input.CommandBinding>命令。 则<xref:System.Windows.Input.CommandBinding.CanExecute>处理程序<xref:System.Windows.Input.CommandBinding>调用。  如果命令目标没有<xref:System.Windows.Input.CommandBinding>对于命令，<xref:System.Windows.Input.CommandBinding.CanExecute>事件气泡搜索具有的元素，在元素树中向上<xref:System.Windows.Input.CommandBinding>与命令关联。  如果不处理该事件，<xref:System.Windows.Input.CommandBinding.CanExecute>引发事件。  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a>路由事件信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|路由策略|隧道|  
|委托|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   对应的冒泡事件<xref:System.Windows.Input.CommandBinding.CanExecute>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行与此 <see cref="T:System.Windows.Input.CommandBinding" /> 相关联的命令时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Input.RoutedCommand>执行，它会发出<xref:System.Windows.Input.CommandBinding.PreviewExecuted>命令目标上的事件。  如果对命令目标有<xref:System.Windows.Input.CommandBinding>命令<xref:System.Windows.Input.CommandBinding.PreviewExecuted>处理程序<xref:System.Windows.Input.CommandBinding>调用。  如果命令目标没有<xref:System.Windows.Input.CommandBinding>命令<xref:System.Windows.Input.CommandBinding.PreviewExecuted>事件隧道向下搜索具有的元素，在元素树<xref:System.Windows.Input.CommandBinding>与命令关联。  如果不处理预览事件，<xref:System.Windows.Input.CommandBinding.Executed>命令目标引发事件。  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a>路由事件信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|路由策略|隧道|  
|委托|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   对应的冒泡事件<xref:System.Windows.Input.CommandBinding.Executed>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>