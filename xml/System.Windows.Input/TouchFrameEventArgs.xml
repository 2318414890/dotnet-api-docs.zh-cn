<Type Name="TouchFrameEventArgs" FullName="System.Windows.Input.TouchFrameEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="30f87b6247b094010302d8c5f86db873bb00fa53" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52226723" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TouchFrameEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TouchFrameEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.TouchFrameEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TouchFrameEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class TouchFrameEventArgs sealed : EventArgs" />
  <TypeSignature Language="F#" Value="type TouchFrameEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Windows.Input.Touch.FrameReported" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Touch.FrameReported>中包含事件[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]以支持与 Silverlight 兼容性。 如果不需要确保与 Silverlight 兼容性，使用触控事件，如<xref:System.Windows.UIElement.TouchDown>并<xref:System.Windows.UIElement.TouchMove>，然后在<xref:System.Windows.UIElement>， <xref:System.Windows.UIElement3D>，或<xref:System.Windows.ContentElement>。  
  
 使用<xref:System.Windows.Input.TouchFrameEventArgs>若要获取<xref:System.Windows.Input.TouchPoint>触摸事件与相关的值。 从<xref:System.Windows.Input.TouchPoint>，可以获取<xref:System.Windows.Input.TouchPoint.Position%2A>的触摸屏输入，并确定是否<xref:System.Windows.Input.TouchAction>已<xref:System.Windows.Input.TouchAction.Down>， <xref:System.Windows.Input.TouchAction.Move>，或<xref:System.Windows.Input.TouchAction.Up>操作。 此外可以使用<xref:System.Windows.Input.TouchPoint>若要获取<xref:System.Windows.Input.TouchDevice>。 从<xref:System.Windows.Input.TouchDevice>，可以确定设备<xref:System.Windows.Input.TouchDevice.Id%2A>和获取有关访问时的元素的信息。  
  
   
  
## Examples  
 下面的示例处理<xref:System.Windows.Input.Touch.FrameReported>事件，并访问中的触控数据<xref:System.Windows.Input.TouchFrameEventArgs>。 触摸屏输入按下时<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice>捕获到<xref:System.Windows.Controls.Canvas>。 当提升触控时，<xref:System.Windows.Input.TouchDevice>发布。 触摸屏输入时移过<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice.Id%2A>检查。 如果移动来自第一次触摸，记录其位置。 如果移动来自第二个触摸，行是从第一次触摸的位置绘制第二个触摸的位置。  
  
 此示例摘自现已推出一个更大示例<xref:System.Windows.Input.Touch>类概述。  
  
 [!code-csharp[TouchFrameSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]
 [!code-vb[TouchFrameSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetPrimaryTouchPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Input.TouchPoint GetPrimaryTouchPoint (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Input.TouchPoint GetPrimaryTouchPoint(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrimaryTouchPoint (relativeTo As IInputElement) As TouchPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Input::TouchPoint ^ GetPrimaryTouchPoint(System::Windows::IInputElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.GetPrimaryTouchPoint : System.Windows.IInputElement -&gt; System.Windows.Input.TouchPoint" Usage="touchFrameEventArgs.GetPrimaryTouchPoint relativeTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">用于定义坐标空间的元素。 若要使用 WPF 绝对坐标，则将 <paramref name="relativeTo" /> 指定为 <see langword="null" />。</param>
        <summary>返回主触摸设备相对于指定元素的当前触点。</summary>
        <returns>主 <see cref="T:System.Windows.Input.TouchDevice" /> 相对于指定元素的当前位置；如果主 <see cref="T:System.Windows.Input.TouchDevice" /> 不是活动的，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在一组活动触摸设备，第一个设备不<xref:System.Windows.Input.TouchDevice.Activated>是主要触摸设备。 例如，如果两根手指触摸屏幕，已关闭的第一个手指被表示主触摸设备。 如果第一根手指抬起第二根手指仍按下时，主要触摸设备将变为`null`。  
  
   
  
## Examples  
 下面的代码处理从检索的触摸点<xref:System.Windows.Input.TouchFrameEventArgs>。 触摸屏输入按下时<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice>捕获到<xref:System.Windows.Controls.Canvas>。 当提升触控时，<xref:System.Windows.Input.TouchDevice>发布。 触摸屏输入时移过<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice.Id%2A>检查。 如果<xref:System.Windows.Input.TouchDevice.Id%2A>匹配<xref:System.Windows.Input.TouchDevice.Id%2A>的主要触摸点，指示第一次触摸，记录其位置。 如果移动来自第二个触摸，行是从第一次触摸的位置绘制第二个触摸的位置。  
  
 此示例摘自现已推出一个更大示例<xref:System.Windows.Input.Touch>类概述。  
  
 [!code-csharp[TouchFrameSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#120)]
 [!code-vb[TouchFrameSample#120](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTouchPoints">
      <MemberSignature Language="C#" Value="public System.Windows.Input.TouchPointCollection GetTouchPoints (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Input.TouchPointCollection GetTouchPoints(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTouchPoints (relativeTo As IInputElement) As TouchPointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Input::TouchPointCollection ^ GetTouchPoints(System::Windows::IInputElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.GetTouchPoints : System.Windows.IInputElement -&gt; System.Windows.Input.TouchPointCollection" Usage="touchFrameEventArgs.GetTouchPoints relativeTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">用于定义坐标空间的元素。 若要使用 WPF 绝对坐标，则将 <paramref name="relativeTo" /> 指定为 <see langword="null" />。</param>
        <summary>返回一个集合，其中包含每个活动触摸设备相对于指定元素的当前触点。</summary>
        <returns>一个集合，其中包含每个活动 <see cref="T:System.Windows.Input.TouchPoint" /> 的当前 <see cref="T:System.Windows.Input.TouchDevice" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码的处理从检索的触摸点<xref:System.Windows.Input.TouchFrameEventArgs>。 在画布上，按下触摸屏输入时<xref:System.Windows.Input.TouchDevice>捕获到画布。 当引发触摸屏输入时，<xref:System.Windows.Input.TouchDevice>发布。 在触摸屏输入将在画布上移动时<xref:System.Windows.Input.TouchDevice.Id%2A>检查。 如果<xref:System.Windows.Input.TouchDevice.Id%2A>匹配<xref:System.Windows.Input.TouchDevice.Id%2A>的主要触摸点，指示第一次触摸，记录其位置。 如果移动来自第二个触摸，行是从第一次触摸的位置绘制第二个触摸的位置。  
  
 此示例摘自现已推出一个更大示例<xref:System.Windows.Input.Touch>类概述。  
  
 [!code-csharp[TouchFrameSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#120)]
 [!code-vb[TouchFrameSample#120](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SuspendMousePromotionUntilTouchUp">
      <MemberSignature Language="C#" Value="public void SuspendMousePromotionUntilTouchUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendMousePromotionUntilTouchUp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Sub SuspendMousePromotionUntilTouchUp ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SuspendMousePromotionUntilTouchUp();" />
      <MemberSignature Language="F#" Value="member this.SuspendMousePromotionUntilTouchUp : unit -&gt; unit" Usage="touchFrameEventArgs.SuspendMousePromotionUntilTouchUp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员未实现。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于 Silverlight 兼容性。 因为设备实现不同，而它是不在 WPF 中实现。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public int Timestamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timestamp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchFrameEventArgs.Timestamp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timestamp As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timestamp { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Timestamp : int" Usage="System.Windows.Input.TouchFrameEventArgs.Timestamp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此事件的时间戳。</summary>
        <value>此事件的时间戳。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>