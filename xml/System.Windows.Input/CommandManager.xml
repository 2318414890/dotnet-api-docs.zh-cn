<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommandManager.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5174db82edff5383f90d1d46c76c2a625f61f628a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174db82edff5383f90d1d46c76c2a625f61f628a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.CommandManager">
          <source>Provides command related utility methods that register <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</source>
          <target state="translated">提供为类所有者和命令注册 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> 对象、添加和移除命令事件处理程序的与命令有关的实用程序方法，并提供查询命令状态的服务。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is responsible for managing routed commands.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>负责管理路由的命令。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>For more information about commanding, see <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
          <target state="translated">有关命令的详细信息，请参阅<bpt id="p1">[</bpt>命令概述<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt;</ph> to register a <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to a class as opposed to an instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt;</ph>注册<ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>而不是实例的类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> to register an <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> to a class as opposed to an instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph>注册<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>而不是实例的类。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method forces the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph>方法强制<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>引发<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event informs a command source to query the command it is associated with to determine whether or not the command can execute.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>事件通知的命令源来查询它的关联以确定是否可以执行此命令的命令。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">要向其附加 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">可以执行的处理程序。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> 附加到指定的元素。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>并将它们添加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>即的命令源<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">首先，<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>进行创建并与关联<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">接下来，<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>创建。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>And finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">最后，将处理程序附加到和<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>使用<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">要向其附加 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">执行的处理程序。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> 附加到指定的元素。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>并将它们添加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>即的命令源<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">首先，<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>进行创建并与关联<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">接下来，<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>创建。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>And finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">最后，将处理程序附加到和<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>使用<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">要向其附加 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">可以执行的处理程序。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> 附加到指定的元素。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>并将它们添加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>即的命令源<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">首先，<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>进行创建并与关联<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">接下来，<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>创建。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">最后，将处理程序附加到<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>使用<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">要向其附加 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">可以执行的处理程序。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> 附加到指定的元素。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>并将它们添加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>即的命令源<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">首先，<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>进行创建并与关联<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">接下来，<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>创建。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">最后，将处理程序附加到<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>使用<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.CanExecuteEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.CanExecute" /&gt;</ph> attached event.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.CanExecute" /&gt;</ph> 附加事件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.ExecutedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.Executed" /&gt;</ph> attached event.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.Executed" /&gt;</ph> 附加事件。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>Forces the <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> to raise the <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /&gt;</ph> event.</source>
          <target state="translated">强制 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> 引发 <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>仅关注特定条件确定命令目标已更改时，例如，在键盘焦点的更改。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>In situations where the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> does not sufficiently determine a change in conditions that cause a command to not be able to execute, <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> can be called to force the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated">在情况下其中<ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>未充分确定的条件下，导致无法执行，命令更改<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph>可以调用以进行强制<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>引发<ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer&gt;</ph> to periodically call <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> to force the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer&gt;</ph>以定期调用<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph>强制<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>引发<ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> attached event.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> 附加事件。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.PreviewExecutedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /&gt;</ph> attached event.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /&gt;</ph> 附加事件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>The class with which to register <bpt id="p1">&lt;c&gt;</bpt>commandBinding<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">用来注册 <bpt id="p1">&lt;c&gt;</bpt>commandBinding<ept id="p1">&lt;/c&gt;</ept> 的类。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>The command binding to register.</source>
          <target state="translated">要注册的命令绑定。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>Registers a <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> with the specified type.</source>
          <target state="translated">使用指定的类型注册 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>This method enables a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to be associated with a class instead than an instance of a class.</source>
          <target state="translated">此方法使<ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>要而类的实例不是通过与类相关联。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="commandBinding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="commandBinding" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>The type to register <bpt id="p1">&lt;c&gt;</bpt>inputBinding<ept id="p1">&lt;/c&gt;</ept> with.</source>
          <target state="translated">用来注册 <bpt id="p1">&lt;c&gt;</bpt>inputBinding<ept id="p1">&lt;/c&gt;</ept> 的类。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>The input binding to register.</source>
          <target state="translated">要注册的输入绑定。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>Registers the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> with the specified type.</source>
          <target state="translated">使用指定的类型注册指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>This method enables an <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> to be associated with a type instead of an instance of a class.</source>
          <target state="translated">此方法使<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>要与类型而不是类的实例相关联。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inputBinding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="inputBinding" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated">要从中移除 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">可以执行的处理程序。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">从指定的元素分离指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">以下示例将分离<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>其以前已附加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated">要从中移除 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">执行的处理程序。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">从指定的元素分离指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">以下示例将分离<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>其以前已附加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated">要从中移除 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">可以执行的处理程序。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">从指定的元素分离指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">以下示例将分离<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>其以前已附加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated">要从中移除 <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> 的元素。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">执行的处理程序。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">从指定的元素分离指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">以下示例将分离<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>其以前已附加到<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>Occurs when the <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> detects conditions that might change the ability of a command to execute.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> 检测可能更改要执行的命令的功能的条件时发生。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>This event holds onto the handler as a weak reference.</source>
          <target state="translated">此事件为弱引用包含该处理程序。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.</source>
          <target state="translated">侦听此事件的对象应保持到其事件处理程序，以避免对它进行垃圾回收的强引用。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.</source>
          <target state="translated">这可以通过创建一个私有字段和将该处理程序分配作为值之前或之后将附加到此事件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>