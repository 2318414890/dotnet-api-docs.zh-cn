<Type Name="Touch" FullName="System.Windows.Input.Touch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bfe044e6246f3488392cc43580452b6a0c27114f" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53224028" /></Metadata><TypeSignature Language="C#" Value="public static class Touch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Touch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Touch" />
  <TypeSignature Language="VB.NET" Value="Public Class Touch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Touch abstract sealed" />
  <TypeSignature Language="F#" Value="type Touch = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个应用程序级服务，该服务处理来自操作系统的多点触控输入并引发 <see cref="E:System.Windows.Input.Touch.FrameReported" /> 事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Touch.FrameReported>中包含事件[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]以支持与 Silverlight 兼容性。 如果不需要确保与 Silverlight 兼容性，使用触控事件，如<xref:System.Windows.UIElement.TouchDown>并<xref:System.Windows.UIElement.TouchMove>，然后在<xref:System.Windows.UIElement>， <xref:System.Windows.UIElement3D>，或<xref:System.Windows.ContentElement>。  
  
 <xref:System.Windows.Input.Touch.FrameReported>事件不使用相同的事件模型与其他 WPF 输入事件，如<xref:System.Windows.UIElement.TouchDown>和<xref:System.Windows.UIElement.TouchMove>。 而不是公开为通过对象树的一个 UI，可能会路由的特定于元素的事件<xref:System.Windows.Input.Touch.FrameReported>事件是在应用程序级别处理单个事件。 因此，不能使用`sender`事件处理程序，以确定涉及哪些元素的参数。  
  
 使用<xref:System.Windows.Input.TouchFrameEventArgs>若要获取<xref:System.Windows.Input.TouchPoint>触摸事件与相关的值。 从<xref:System.Windows.Input.TouchPoint>，可以获取<xref:System.Windows.Input.TouchPoint.Position%2A>的触摸屏输入，并确定是否<xref:System.Windows.Input.TouchAction>已<xref:System.Windows.Input.TouchAction.Down>， <xref:System.Windows.Input.TouchAction.Move>，或<xref:System.Windows.Input.TouchAction.Up>操作。 此外可以使用<xref:System.Windows.Input.TouchPoint>若要获取<xref:System.Windows.Input.TouchDevice>。 从<xref:System.Windows.Input.TouchDevice>，可以确定设备<xref:System.Windows.Input.TouchDevice.Id%2A>和获取有关访问时的元素的信息。  
  
   
  
## Examples  
 以下示例使您能够在创建简单的模式<xref:System.Windows.Controls.Canvas>通过拖动两根手指在触摸屏。 表示每次触摸<xref:System.Windows.Input.TouchDevice>。该模式创建的收尾工作了所提供的触摸点之间绘制一条线。 此示例需要 Windows 兼容触摸屏幕。  
  
 下面的标记创建用户界面，其中包括<xref:System.Windows.Controls.Canvas>在中居中<xref:System.Windows.Controls.Grid>。  
  
 [!code-xaml[TouchFrameSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml#000)]  
  
 下面的代码处理<xref:System.Windows.Input.Touch.FrameReported>事件。 当触摸屏输入按下上<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice>捕获到<xref:System.Windows.Controls.Canvas>。 当提升触控时，<xref:System.Windows.Input.TouchDevice>发布。 触摸屏输入时移过<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice.Id%2A>检查。 如果移动来自第一次触摸，记录其位置。 如果移动来自第二个触摸，行是从第一次触摸的位置绘制第二个触摸的位置。  
  
 [!code-csharp[TouchFrameSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#100)]
 [!code-vb[TouchFrameSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#100)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FrameReported">
      <MemberSignature Language="C#" Value="public static event System.Windows.Input.TouchFrameEventHandler FrameReported;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TouchFrameEventHandler FrameReported" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Touch.FrameReported" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event FrameReported As TouchFrameEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Windows::Input::TouchFrameEventHandler ^ FrameReported;" />
      <MemberSignature Language="F#" Value="member this.FrameReported : System.Windows.Input.TouchFrameEventHandler " Usage="member this.FrameReported : System.Windows.Input.TouchFrameEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchFrameEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在发送触摸消息时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 框架是一个在一系列的多点触控消息或触摸点。 您可以通过处理响应触摸<xref:System.Windows.Input.Touch.FrameReported>事件和访问的详细信息<xref:System.Windows.Input.TouchPoint>从<xref:System.Windows.Input.TouchFrameEventArgs>事件数据。  
  
 <xref:System.Windows.Input.Touch.FrameReported>事件不与其他使用相同的事件模型[!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)]输入事件，例如<xref:System.Windows.UIElement.TouchDown>和<xref:System.Windows.UIElement.TouchMove>。 而不是公开为通过对象树的一个 UI，可能会路由的特定于元素的事件<xref:System.Windows.Input.Touch.FrameReported>事件是在应用程序级别处理单个事件。 因此，不能使用`sender`事件处理程序，以确定涉及哪些元素的参数。  
  
   
  
## Examples  
 下面的示例处理<xref:System.Windows.Input.Touch.FrameReported>事件。 当触摸屏输入按下上<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice>捕获到<xref:System.Windows.Controls.Canvas>。 当提升触控时，<xref:System.Windows.Input.TouchDevice>发布。 触摸屏输入时移过<xref:System.Windows.Controls.Canvas>，则<xref:System.Windows.Input.TouchDevice.Id%2A>检查。 如果移动来自第一次触摸，记录其位置。 如果移动来自第二个触摸，行是从第一次触摸的位置绘制第二个触摸的位置。  
  
 此示例摘自现已推出一个更大示例<xref:System.Windows.Input.Touch>类概述。  
  
 [!code-csharp[TouchFrameSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]
 [!code-vb[TouchFrameSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>