<Type Name="ICommandSource" FullName="System.Windows.Input.ICommandSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c6a35c8921b834456b837012f8343063f421434a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommandSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1d44f-101">定义一个知道如何调用命令的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1d44f-101">Defines an object that knows how to invoke a command.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d44f-102">命令源定义命令由该特定对象的调用方式。</span><span class="sxs-lookup"><span data-stu-id="1d44f-102">The command source defines how a command is invoked by that particular object.</span></span>  <span data-ttu-id="1d44f-103">例如，如果<xref:System.Windows.Controls.Button>都与命令，该命令关联时调用<xref:System.Windows.Controls.Button>单击。</span><span class="sxs-lookup"><span data-stu-id="1d44f-103">For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.</span></span>  
  
 <span data-ttu-id="1d44f-104">命令源通常会禁用自身如果与之关联的命令不能执行当前命令目标。</span><span class="sxs-lookup"><span data-stu-id="1d44f-104">A command source will normally disable itself if the command it is associated with cannot execute on the current command target.</span></span>  <span data-ttu-id="1d44f-105">例如，<xref:System.Windows.Controls.MenuItem>与关联<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令将呈灰色<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令无法执行对当前的命令目标。</span><span class="sxs-lookup"><span data-stu-id="1d44f-105">For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.</span></span>  
  
 <span data-ttu-id="1d44f-106">通常情况下，命令源会侦听<xref:System.Windows.Input.ICommand.CanExecuteChanged>命令的事件。</span><span class="sxs-lookup"><span data-stu-id="1d44f-106">Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.</span></span>  <span data-ttu-id="1d44f-107">这可告知命令源时情况的变化对命令目标，如降低键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="1d44f-107">This informs the command source when conditions change on the command target, such as loss of keyboard focus.</span></span>  <span data-ttu-id="1d44f-108">命令源可以然后查询命令使用<xref:System.Windows.Input.ICommand.CanExecute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1d44f-108">The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.</span></span>  
  
 <span data-ttu-id="1d44f-109">中的类的一些[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]实现<xref:System.Windows.Input.ICommandSource>是： <xref:System.Windows.Controls.Primitives.ButtonBase>， <xref:System.Windows.Controls.MenuItem>，和<xref:System.Windows.Documents.Hyperlink>。</span><span class="sxs-lookup"><span data-stu-id="1d44f-109">Some of the classes in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that implement <xref:System.Windows.Input.ICommandSource> are: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Documents.Hyperlink>.</span></span>  
  
 <span data-ttu-id="1d44f-110">在[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]命令系统中，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性<xref:System.Windows.Input.ICommandSource>适用时才<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="1d44f-110">In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="1d44f-111">如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上设置<xref:System.Windows.Input.ICommandSource>和相应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。</span><span class="sxs-lookup"><span data-stu-id="1d44f-111">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ICommand" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d44f-112">获取在调用命令源时执行的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d44f-112">Gets the command that will be executed when the command source is invoked.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d44f-113">在调用命令源时执行的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d44f-113">The command that will be executed when the command source is invoked.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d44f-114">表示可在执行命令时传递给该命令的用户定义的数据值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d44f-114">Represents a user defined data value that can be passed to the command when it is executed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d44f-115">命令特定数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d44f-115">The command specific data.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d44f-116">通常情况下，<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>用于执行时，将特定的信息传递给命令。</span><span class="sxs-lookup"><span data-stu-id="1d44f-116">Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="1d44f-117">由该命令定义的数据类型。</span><span class="sxs-lookup"><span data-stu-id="1d44f-117">The type of the data is defined by the command.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d44f-118">在其上执行该命令的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d44f-118">The object that the command is being executed on.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d44f-119">在其上执行该命令的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d44f-119">The object that the command is being executed on.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d44f-120">在[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]命令系统中，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性<xref:System.Windows.Input.ICommandSource>适用时才<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="1d44f-120">In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="1d44f-121">如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上设置<xref:System.Windows.Input.ICommandSource>和相应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。</span><span class="sxs-lookup"><span data-stu-id="1d44f-121">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="1d44f-122">如果用于<xref:System.Windows.Input.RoutedCommand>，命令目标是在其上的对象<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引发事件。</span><span class="sxs-lookup"><span data-stu-id="1d44f-122">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="1d44f-123">如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未设置属性时，具有键盘焦点的元素将使用为目标。</span><span class="sxs-lookup"><span data-stu-id="1d44f-123">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
  </Members>
</Type>