<Type Name="AccessKeyPressedEventHandler" FullName="System.Windows.Input.AccessKeyPressedEventHandler">
  <TypeSignature Language="C#" Value="public delegate void AccessKeyPressedEventHandler(object sender, AccessKeyPressedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed AccessKeyPressedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.AccessKeyPressedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub AccessKeyPressedEventHandler(sender As Object, e As AccessKeyPressedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void AccessKeyPressedEventHandler(System::Object ^ sender, AccessKeyPressedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.AccessKeyPressedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="120cf-101">事件处理程序附加到的对象。</span><span class="sxs-lookup"><span data-stu-id="120cf-101">The object where the event handler is attached.</span></span></param>
    <param name="e"><span data-ttu-id="120cf-102">事件数据。</span><span class="sxs-lookup"><span data-stu-id="120cf-102">The event data.</span></span></param>
    <summary><span data-ttu-id="120cf-103">表示将处理 <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> 附加事件的方法。</span><span class="sxs-lookup"><span data-stu-id="120cf-103">Represents the method that will handle the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> attached event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="120cf-104">中的访问键[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]由管理器类的行为有些像访问密钥的服务，并将转发到的访问键输入[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]输入系统。</span><span class="sxs-lookup"><span data-stu-id="120cf-104">Access keys in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are handled by a manager class that acts somewhat like a service for access keys, and forwards access key input to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system.</span></span> <span data-ttu-id="120cf-105">而不是处理按事件专门通过附加的处理程序的访问键<xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed>附加事件在特定对象，它通常是更好的做法要通过命令绑定，与特定命令关联的访问密钥，然后处理通过相应的路由事件的路由的命令。</span><span class="sxs-lookup"><span data-stu-id="120cf-105">Rather than handling access key pressed events specifically by attaching a handler for the <xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed> attached event on a specific object, it is generally a better practice to associate the access key with a particular command through a command binding, and then handle the routed commands through the corresponding routed events.</span></span> <span data-ttu-id="120cf-106">此方法提供统一的事件系统，无论在哪种输入的模式启动输入的用户输入。</span><span class="sxs-lookup"><span data-stu-id="120cf-106">This technique provides a unified event system for user input regardless of what input mode initiated the input.</span></span> <span data-ttu-id="120cf-107">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="120cf-107">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.AccessKeyManager" />
    <altmember cref="T:System.Windows.Input.AccessKeyPressedEventArgs" />
    <altmember cref="P:System.Windows.Controls.AccessText.AccessKey" />
  </Docs>
</Type>