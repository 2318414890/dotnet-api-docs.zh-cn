<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e7060feb6bd9cc789b91cd51b75c1f71d708b5f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">
      <span data-ttu-id="7e018-101">事件处理程序附加到的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e018-101">The object where the event handler is attached.</span>
      </span>
    </param>
    <param name="e">
      <span data-ttu-id="7e018-102">事件数据。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e018-102">The event data.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="7e018-103">表示将处理 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 和 <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> 路由事件以及相关附加事件的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e018-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e018-104">此委托包含的实现逻辑<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="7e018-104">This delegate contains the implementation logic for a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="7e018-105">将实施逻辑分离命令中允许的命令从不同源和类型，调用，并且允许的命令逻辑集中。</span><span class="sxs-lookup"><span data-stu-id="7e018-105">Separating the implementation logic from the command allows the command to be invoked from different sources and types, and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="7e018-106">此委托还用于<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>和<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>，这是上附加事件<xref:System.Windows.Input.CommandManager>实现很多命令的基础结构的类。</span><span class="sxs-lookup"><span data-stu-id="7e018-106">This delegate is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="7e018-107">但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>从特定的事件<xref:System.Windows.Input.CommandBinding>，而不是在工作<xref:System.Windows.Input.CommandManager>级别。</span><span class="sxs-lookup"><span data-stu-id="7e018-107">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="7e018-108">在<xref:System.Windows.Input.ExecutedRoutedEventArgs>，以下属性通常是感兴趣的编写事件处理程序为执行命令的结果的路由事件时：</span><span class="sxs-lookup"><span data-stu-id="7e018-108">Within <xref:System.Windows.Input.ExecutedRoutedEventArgs>, the following properties are generally of interest when you write an event handler for a routed event that results from an executed command:</span></span>  
  
-   <span data-ttu-id="7e018-109"><xref:System.Windows.RoutedEventArgs.Source%2A> 报告执行了该命令的目标。</span><span class="sxs-lookup"><span data-stu-id="7e018-109"><xref:System.Windows.RoutedEventArgs.Source%2A> reports the target where the command was executed.</span></span> <span data-ttu-id="7e018-110">一旦执行该命令，你可以认为的<xref:System.Windows.RoutedEventArgs.Source%2A>的详细信息通常在路由事件条款引发路由的事件的对象。</span><span class="sxs-lookup"><span data-stu-id="7e018-110">Once the command is executed, you can also think of the <xref:System.Windows.RoutedEventArgs.Source%2A> more generally in routed event terms, as the object that raised a routed event.</span></span>  
  
-   <span data-ttu-id="7e018-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 报告执行的命令。</span><span class="sxs-lookup"><span data-stu-id="7e018-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> reports the command that executed.</span></span> <span data-ttu-id="7e018-112">如果使用命令绑定，并且您编写可能处理多个命令的处理程序，此属性很有用。</span><span class="sxs-lookup"><span data-stu-id="7e018-112">This property is useful if you use command bindings and if you write handlers that potentially handle multiple commands.</span></span>  
  
-   <span data-ttu-id="7e018-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 报告正在执行的命令传递的任何特定于命令的参数。</span><span class="sxs-lookup"><span data-stu-id="7e018-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> reports any command-specific parameters that were passed by the executing command.</span></span> <span data-ttu-id="7e018-114">并非所有命令都使用或需要特定于命令的参数。</span><span class="sxs-lookup"><span data-stu-id="7e018-114">Not all commands use or expect command-specific parameters.</span></span>  
  
-   <span data-ttu-id="7e018-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> 报告是否由路由不同元素已进行处理源于执行命令的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="7e018-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> reports whether the routed event that resulted from the executed command was already handled by a different element along the route.</span></span> <span data-ttu-id="7e018-116">对于路由的事件处理程序，它是建议的做法，能够处理设置的事件时执行有意义的工作的处理程序<xref:System.Windows.RoutedEventArgs.Handled%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="7e018-116">For routed event handlers, it is a recommended practice to have handlers that do meaningful work when handling the event to set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true`.</span></span> <span data-ttu-id="7e018-117">这将阻止事件再次沿路由的处理事件的典型处理。</span><span class="sxs-lookup"><span data-stu-id="7e018-117">This prevents typical handlers for the event from handling the event again further along the route.</span></span> <span data-ttu-id="7e018-118">处理路由的事件的详细信息，请参阅[标记作为 Handled，和类处理的路由事件](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。</span><span class="sxs-lookup"><span data-stu-id="7e018-118">For more information on handling routed events, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="7e018-119">此委托还表示处理程序<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>和<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>，这是上附加事件<xref:System.Windows.Input.CommandManager>实现很多命令的基础结构的类。</span><span class="sxs-lookup"><span data-stu-id="7e018-119">This delegate also represents handlers for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="7e018-120">但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>从特定的事件<xref:System.Windows.Input.CommandBinding>，而不是在工作<xref:System.Windows.Input.CommandManager>级别。</span><span class="sxs-lookup"><span data-stu-id="7e018-120">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="7e018-121">有关命令的详细信息，请参阅[命令概述](~/docs/framework/wpf/advanced/commanding-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="7e018-121">For more information on commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e018-122">此示例将创建<xref:System.Windows.Input.ExecutedRoutedEventHandler>执行命令时在目标系统上设置 visual 属性。</span><span class="sxs-lookup"><span data-stu-id="7e018-122">This example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that sets a visual property on the target when the command is executed.</span></span> <span data-ttu-id="7e018-123">该示例还包括<xref:System.Windows.Input.CanExecuteRoutedEventHandler>相同命令。</span><span class="sxs-lookup"><span data-stu-id="7e018-123">The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.</span></span>  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>