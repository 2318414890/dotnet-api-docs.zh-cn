<Type Name="TraversalRequest" FullName="System.Windows.Input.TraversalRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3ae7c849b875b5a43e5d38b830ff097dbb8c435" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30656281" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TraversalRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TraversalRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.TraversalRequest" />
  <TypeSignature Language="VB.NET" Value="Public Class TraversalRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraversalRequest" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示要将焦点移到另一个控件的请求。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类用作输入参数为<xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType>方法。 <xref:System.Windows.UIElement.MoveFocus%2A>方法具有提供更实际实现的 WPF 框架级别重写 (<xref:System.Windows.FrameworkElement.MoveFocus%2A?displayProperty=nameWithType>)，以及上的并行实现<xref:System.Windows.ContentElement>和<xref:System.Windows.FrameworkContentElement>。 通常将设置上的属性<xref:System.Windows.Input.TraversalRequest>来定制聚焦的行为，当你请求，焦点移动到另一个元素。  
  
 此类还作为输入参数用于以下方法：  
  
-   <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>和该方法用于间的互操作的实现 (<xref:System.Windows.Forms.Integration.WindowsFormsHost.TabInto%2A>)。  
  
-   <xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A>。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Input.TraversalRequest>实例作为输入<xref:System.Windows.FrameworkElement.MoveFocus%2A?displayProperty=nameWithType>调用。  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraversalRequest (System.Windows.Input.FocusNavigationDirection focusNavigationDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.FocusNavigationDirection focusNavigationDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraversalRequest(System::Windows::Input::FocusNavigationDirection focusNavigationDirection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusNavigationDirection" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="focusNavigationDirection">预期的焦点遍历方向，作为一个枚举值。</param>
        <summary>初始化 <see cref="T:System.Windows.Input.TraversalRequest" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Windows.Input.TraversalRequest>实例作为输入<xref:System.Windows.FrameworkElement.MoveFocus%2A?displayProperty=nameWithType>调用。  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection" />
      </Docs>
    </Member>
    <Member MemberName="FocusNavigationDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Input.FocusNavigationDirection FocusNavigationDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.FocusNavigationDirection FocusNavigationDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusNavigationDirection As FocusNavigationDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::FocusNavigationDirection FocusNavigationDirection { System::Windows::Input::FocusNavigationDirection get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.FocusNavigationDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取遍历方向。</summary>
        <value>遍历方向枚举值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性是只读的因为<xref:System.Windows.Input.FocusNavigationDirection>是必需的输入的参数<xref:System.Windows.Input.TraversalRequest>类构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrapped">
      <MemberSignature Language="C#" Value="public bool Wrapped { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrapped" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TraversalRequest.Wrapped" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrapped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Wrapped { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示焦点遍历是否已到达可以具有焦点的最后一个子元素。</summary>
        <value>
          如果此遍历已到达可以具有焦点的最后一个子元素；则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可获得焦点的元素都是这些元素其中<xref:System.Windows.UIElement.Focusable%2A>属性是`true`。  
  
 此参数旨在通信调用方法时，使用制表位遍历指示是否换行<xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>， <xref:System.Windows.Forms.Integration.WindowsFormsHost.TabInto%2A>，或<xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A>。 如果要将焦点传递给实现的对象<xref:System.Windows.Interop.IKeyboardInputSink>，然后指定为 true<xref:System.Windows.Input.TraversalRequest.Wrapped%2A>会导致此`true`值传递给<xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>实现。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>