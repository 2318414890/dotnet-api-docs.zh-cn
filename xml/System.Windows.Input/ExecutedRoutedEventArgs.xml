<Type Name="ExecutedRoutedEventArgs" FullName="System.Windows.Input.ExecutedRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df8e779196cfe272739ecbac85415d9856b088d5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30648241" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutedRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutedRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutedRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8eae7-101">为 <see cref="E:System.Windows.Input.CommandManager.Executed" /> 和 <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> 路由事件提供数据。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8eae7-101">Provides data for the <see cref="E:System.Windows.Input.CommandManager.Executed" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> routed events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eae7-102"><xref:System.Windows.Input.ExecutedRoutedEventHandler> 表示实现的命令逻辑的方法<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="8eae7-102"><xref:System.Windows.Input.ExecutedRoutedEventHandler> represents the method that implements the command logic of a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="8eae7-103">将实施逻辑分离命令中允许的命令从不同源和类型调用，并且允许的命令逻辑集中。</span><span class="sxs-lookup"><span data-stu-id="8eae7-103">Separating the implementation logic from the command allows the command to be invoked from different sources and types and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="8eae7-104">此事件数据类也用于<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>和<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8eae7-104">This event data class is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8eae7-105">但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>从特定的事件<xref:System.Windows.Input.CommandBinding>，而不是在工作<xref:System.Windows.Input.CommandManager>级别。</span><span class="sxs-lookup"><span data-stu-id="8eae7-105">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="8eae7-106">有关命令的详细信息，请参阅[命令概述](~/docs/framework/wpf/advanced/commanding-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="8eae7-106">For more information on commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eae7-107">下面的示例创建<xref:System.Windows.Input.ExecutedRoutedEventHandler>，这将打开<xref:System.Windows.MessageBox>时执行此命令。</span><span class="sxs-lookup"><span data-stu-id="8eae7-107">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that opens a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8eae7-108">获取调用过的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8eae7-108">Gets the command that was invoked.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8eae7-109">与此事件关联的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8eae7-109">The command associated with this event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eae7-110">与事件相关联的命令可以强制转换为的特定实现<xref:System.Windows.Input.ICommand>，如<xref:System.Windows.Input.RoutedCommand>，如果类型未知。</span><span class="sxs-lookup"><span data-stu-id="8eae7-110">The command associated with the event can be cast to the specific implementation of <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>, if the type is known.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eae7-111">下面的示例创建<xref:System.Windows.Input.ExecutedRoutedEventHandler>用于处理多个命令。</span><span class="sxs-lookup"><span data-stu-id="8eae7-111">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that handles multiple commands.</span></span> <span data-ttu-id="8eae7-112">此处理程序检查<xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A>属性<xref:System.Windows.Input.ExecutedRoutedEventArgs>来确定要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="8eae7-112">The handler checks the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> property on the <xref:System.Windows.Input.ExecutedRoutedEventArgs> to determine which method to call.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecmdhander)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecmdhander)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8eae7-113">获取命令的数据参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8eae7-113">Gets data parameter of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8eae7-114">命令特定的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8eae7-114">The command-specific data.</span>
          </span>
          <span data-ttu-id="8eae7-115">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8eae7-115">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eae7-116">此属性表示由特定命令的一般数据参数。</span><span class="sxs-lookup"><span data-stu-id="8eae7-116">This property represents a generic data parameter that is defined by the particular command.</span></span>  
  
 <span data-ttu-id="8eae7-117">如果不需要此参数，`null`可以传递。</span><span class="sxs-lookup"><span data-stu-id="8eae7-117">If this parameter is not needed, `null` can be passed.</span></span>  
  
 <span data-ttu-id="8eae7-118">通常情况下，<xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A>用于执行时，将特定的信息传递给命令。</span><span class="sxs-lookup"><span data-stu-id="8eae7-118">Normally, the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="8eae7-119">由该命令定义的数据类型。</span><span class="sxs-lookup"><span data-stu-id="8eae7-119">The type of the data is defined by the command.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eae7-120">下面的示例创建<xref:System.Windows.Input.ExecutedRoutedEventHandler>自定义<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="8eae7-120">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> for a custom <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="8eae7-121">处理程序更新<xref:System.Windows.Controls.TextBox>使用当前时间和<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>属性<xref:System.Windows.Controls.Slider>控件传递给完成的句柄<xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8eae7-121">The handler updates a <xref:System.Windows.Controls.TextBox> with the current time and the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control that is passed to the handler through the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampleexecuted)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampleexecuted)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>