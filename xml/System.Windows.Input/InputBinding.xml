<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b90f23db0a0464ab8bde6a060b5dd9953d82808" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6d91c-101">表示 <see cref="T:System.Windows.Input.InputGesture" /> 和命令之间的绑定。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6d91c-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span>
      </span>
      <span data-ttu-id="6d91c-102">此命令可能是 <see cref="T:System.Windows.Input.RoutedCommand" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6d91c-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-103">你可以指定用户输入的创建来调用命令<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="6d91c-104">当用户执行指定的输入，<xref:System.Windows.Input.ICommand>设置为<xref:System.Windows.Input.InputBinding.Command%2A>执行属性。</span><span class="sxs-lookup"><span data-stu-id="6d91c-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="6d91c-105">你可以指定<xref:System.Windows.Input.InputBinding>时通过在创建绑定定义的对象的命令，将调用<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6d91c-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="6d91c-106">这使你可以定义自定义命令并将其与用户输入。</span><span class="sxs-lookup"><span data-stu-id="6d91c-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="6d91c-107">有关详细信息，请参阅示例部分中的第二个示例。</span><span class="sxs-lookup"><span data-stu-id="6d91c-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="6d91c-108"><xref:System.Windows.Input.InputBinding>可以通过注册特定对象上或在类级别定义<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>与<xref:System.Windows.Input.CommandManager>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="6d91c-109"><xref:System.Windows.Input.InputBinding>类本身不支持[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用法原因是不公开公共默认构造函数 （没有默认构造函数，但它受保护）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-109">The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="6d91c-110">但是，派生的类可以公开公共构造函数，因此可以在继承自派生类上设置属性<xref:System.Windows.Input.InputBinding>与[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况。</span><span class="sxs-lookup"><span data-stu-id="6d91c-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage.</span></span> <span data-ttu-id="6d91c-111">有两个现有<xref:System.Windows.Input.InputBinding>-派生类可在实例化[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并可以在中设置属性[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="6d91c-112">中的典型属性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]编程，它在中设置[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]和采用一个或多个<xref:System.Windows.Input.InputBinding>作为值的对象是<xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6d91c-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="6d91c-113">XAML 对象元素用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="6d91c-114">\<*inputBindingDerivedClass…/*></span><span class="sxs-lookup"><span data-stu-id="6d91c-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6d91c-115">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6d91c-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="6d91c-116">派生的类<xref:System.Windows.Input.InputBinding>，支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="6d91c-117">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6d91c-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d91c-118">下面的示例演示如何使用<xref:System.Windows.Input.KeyBinding>绑定<xref:System.Windows.Input.KeyGesture>到<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="6d91c-119">当执行键笔势，则将调用打开命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="6d91c-120">下面的示例演示如何将绑定到自定义命令<xref:System.Windows.Input.InputBinding>对象。</span><span class="sxs-lookup"><span data-stu-id="6d91c-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="6d91c-121">这些示例创建的应用程序使用户能够通过执行以下操作之一来更改背景色：</span><span class="sxs-lookup"><span data-stu-id="6d91c-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="6d91c-122">单击的按钮。</span><span class="sxs-lookup"><span data-stu-id="6d91c-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="6d91c-123">按 CTRL + C。</span><span class="sxs-lookup"><span data-stu-id="6d91c-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="6d91c-124">右键单击<xref:System.Windows.Controls.StackPanel>(外部<xref:System.Windows.Controls.ListBox>)。</span><span class="sxs-lookup"><span data-stu-id="6d91c-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="6d91c-125">第一个示例创建一个名为类`SimpleDelegateCommand`。</span><span class="sxs-lookup"><span data-stu-id="6d91c-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="6d91c-126">此类接受委托，以便创建命令的对象可以定义命令能够执行时发生的操作。</span><span class="sxs-lookup"><span data-stu-id="6d91c-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="6d91c-127">`SimpleDelegateCommand` 此外定义，这些属性指定哪个键和鼠标输入时，将调用该命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="6d91c-128">`GestureKey` 和`GestureModifier`指定键盘输入;`MouseGesture`指定鼠标输入。</span><span class="sxs-lookup"><span data-stu-id="6d91c-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="6d91c-129">下面的示例创建并初始化`ColorChangeCommand`，即`SimpleDelegateCommand`。</span><span class="sxs-lookup"><span data-stu-id="6d91c-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="6d91c-130">该示例还定义该命令将调用并设置时执行的方法`GestureKey`， `GestureModifier`，和`MouseGesture`属性。</span><span class="sxs-lookup"><span data-stu-id="6d91c-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="6d91c-131">应用程序将调用`InitializeCommand`当程序开始时，如如下所示的构造函数的方法<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="6d91c-132">最后，下面的示例创建用户界面。</span><span class="sxs-lookup"><span data-stu-id="6d91c-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="6d91c-133">该示例将添加<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>到<xref:System.Windows.Controls.StackPanel>包含<xref:System.Windows.Controls.Button>和<xref:System.Windows.Controls.ListBox>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="6d91c-134">当用户选择中的项<xref:System.Windows.Controls.ListBox>，他或她可以将背景的颜色更改为所选颜色。</span><span class="sxs-lookup"><span data-stu-id="6d91c-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="6d91c-135">在每个情况下，`CommandParameter`属性绑定到中的所选项目<xref:System.Windows.Controls.ListBox>，和`Command`属性绑定到`ColorChangeCommand`。</span><span class="sxs-lookup"><span data-stu-id="6d91c-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="6d91c-136"><xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>， <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>，和<xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType>属性绑定到相应的属性`SimpleDelegateCommand`类。</span><span class="sxs-lookup"><span data-stu-id="6d91c-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-137">初始化 <see cref="T:System.Windows.Input.InputBinding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-138">提供从 <see cref="T:System.Windows.Input.InputBinding" /> 派生的类的基初始化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-139"><xref:System.Windows.Input.InputBinding> 不从技术上讲是一个抽象类，但默认构造函数是有意访问受保护。</span><span class="sxs-lookup"><span data-stu-id="6d91c-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access.</span></span> <span data-ttu-id="6d91c-140">这具有等效于将<xref:System.Windows.Input.InputBinding>一个"抽象"类[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="6d91c-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="6d91c-141">中的现有属性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]具有[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]预期类型的对象的用法<xref:System.Windows.Input.InputBinding>，但不是能指定<xref:System.Windows.Input.InputBinding>实例中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="6d91c-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="6d91c-142">作为替代，你可以指定一个特定于设备的<xref:System.Windows.Input.InputBinding>作为值，例如派生类<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6d91c-143">如果你实现一个自定义<see cref="T:System.Windows.Input.InputBinding" />支持[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况，用作基初始化中使用此构造函数。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6d91c-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, use this constructor for base initialization.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="6d91c-144">要与 <c>gesture</c> 关联的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-144">The command to associate with <c>gesture</c>.</span>
          </span>
        </param>
        <param name="gesture">
          <span data-ttu-id="6d91c-145">要与 <c>command</c> 关联的输入笔势。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-145">The input gesture to associate with <c>command</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d91c-146">用指定的命令和输入笔势初始化 <see cref="T:System.Windows.Input.InputBinding" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-147">如果你是软件开发人员使用的绑定类的现有输入，你通常将不使用此构造函数，即使你正在定义的自定义命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="6d91c-148">相反，你将使用派生类的构造函数 (<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>)，或你将使用此构造函数作为自定义类的基实例化。</span><span class="sxs-lookup"><span data-stu-id="6d91c-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="6d91c-149">尽管<xref:System.Windows.Input.InputBinding>类原则上，在实践中您必须选择将表示输入的绑定哪些设备支持不同的输入的设备。</span><span class="sxs-lookup"><span data-stu-id="6d91c-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="6d91c-150">仅可以设置仅一个<xref:System.Windows.Input.InputBinding.Gesture%2A>上输入的绑定和笔势值是特定于设备的。</span><span class="sxs-lookup"><span data-stu-id="6d91c-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d91c-151">下面的示例演示如何使用此构造函数将关联<xref:System.Windows.Input.KeyGesture>与<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d91c-152">
            <paramref name="command" /> 或 <paramref name="gesture" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-152">
              <paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="6d91c-153">要克隆的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-153">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d91c-154">复制指定对象的属性的基（未经过动画处理的）值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-154">Copies the base (non-animated) values of the properties of the specified object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="6d91c-155">要克隆的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-155">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d91c-156">复制指定对象的属性的当前值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-156">Copies the current values of the properties of the specified object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-157">获取或设置与此输入绑定关联的 <see cref="T:System.Windows.Input.ICommand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6d91c-158">关联的命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-158">The associated command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-159"><xref:System.Windows.Input.InputBinding>类不支持[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用法原因是不公开公共默认构造函数 （它具有默认构造函数，但它受保护）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-159">The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="6d91c-160">但是，派生的类可以公开公共构造函数，因此，可以使用的属性，从继承<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="6d91c-161">有两个现有<xref:System.Windows.Input.InputBinding>派生类可在实例化[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并可以设置与属性[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用法是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="6d91c-162"><xref:System.Windows.Input.ICommand> 引用使某些预先存在的类型转换器<xref:System.Windows.Input.ICommand>实现以字符串形式指定值。</span><span class="sxs-lookup"><span data-stu-id="6d91c-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="6d91c-163">此类型转换行为设置此属性的属性值窗体。</span><span class="sxs-lookup"><span data-stu-id="6d91c-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="6d91c-164">你也可以将绑定<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性设置为<xref:System.Windows.Input.ICommand>对象上定义。</span><span class="sxs-lookup"><span data-stu-id="6d91c-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="6d91c-165">这使你可以定义自定义命令并将其与用户输入。</span><span class="sxs-lookup"><span data-stu-id="6d91c-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="6d91c-166">有关详细信息，请参阅中的第二个示例<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6d91c-167">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="6d91c-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="6d91c-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6d91c-169">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6d91c-170">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6d91c-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="6d91c-171">派生的类<xref:System.Windows.Input.InputBinding>，支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="6d91c-172">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6d91c-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="6d91c-173">对象实现<xref:System.Windows.Input.ICommand>支持对象元素语法 （具有公共默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d91c-174">下面的示例演示如何使用<xref:System.Windows.Input.KeyBinding>绑定<xref:System.Windows.Input.KeyGesture>到<xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType>命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="6d91c-175">当执行键笔势，则将调用打开命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d91c-176">
            <see cref="P:System.Windows.Input.InputBinding.Command" /> 值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-177">获取或设置特定命令的命令特定数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-177">Gets or sets the command-specific data for a particular command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6d91c-178">命令特定的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-178">The command-specific data.</span>
          </span>
          <span data-ttu-id="6d91c-179">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-179">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-180"><xref:System.Windows.Input.InputBinding.CommandParameter%2A>属性用于将特定的信息传递给命令中，执行时。</span><span class="sxs-lookup"><span data-stu-id="6d91c-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="6d91c-181">由该命令定义的数据类型。</span><span class="sxs-lookup"><span data-stu-id="6d91c-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="6d91c-182">很多命令不希望命令参数;对于这些命令，将忽略传递任何命令参数。</span><span class="sxs-lookup"><span data-stu-id="6d91c-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="6d91c-183">如果与关联的输入的绑定命令是<xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>的输入绑定传递到<xref:System.Windows.Input.RoutedCommand>处理程序通过<xref:System.Windows.Input.ExecutedRoutedEventArgs>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>时处理此命令的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6d91c-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="6d91c-184">数据类型和用途的命令参数为每个命令以不同方式定义，并且可以是`null`。</span><span class="sxs-lookup"><span data-stu-id="6d91c-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="6d91c-185">你可以将绑定<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性设置为<xref:System.Windows.Input.ICommand>对象上定义。</span><span class="sxs-lookup"><span data-stu-id="6d91c-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="6d91c-186">这使你可以定义自定义命令并将其与用户输入。</span><span class="sxs-lookup"><span data-stu-id="6d91c-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="6d91c-187">有关详细信息，请参阅中的第二个示例<xref:System.Windows.Input.InputBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="6d91c-188"><xref:System.Windows.Input.InputBinding>类不支持[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用法原因是不公开公共默认构造函数 （它具有默认构造函数，但它受保护）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-188">The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="6d91c-189">但是，派生的类可以公开公共构造函数，因此，可以设置从继承的属性<xref:System.Windows.Input.InputBinding>与[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况。</span><span class="sxs-lookup"><span data-stu-id="6d91c-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage.</span></span> <span data-ttu-id="6d91c-190">有两个现有<xref:System.Windows.Input.InputBinding>派生类可在实例化[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并可以在中设置属性[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6d91c-191">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6d91c-192">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6d91c-193">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6d91c-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="6d91c-194">派生的类<xref:System.Windows.Input.InputBinding>，支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="6d91c-195">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6d91c-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="6d91c-196">一个字符串，由特定的命令处理。</span><span class="sxs-lookup"><span data-stu-id="6d91c-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="6d91c-197">字符串是用于命令参数，因为它们可以轻松地设置的公共类型[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="6d91c-197">Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="6d91c-198">预期的字符串格式以及其用途，请参阅与关联的输入的绑定的特定命令的文档。</span><span class="sxs-lookup"><span data-stu-id="6d91c-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="6d91c-199">很多命令不需要参数。</span><span class="sxs-lookup"><span data-stu-id="6d91c-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="6d91c-200">由特定命令处理的对象。</span><span class="sxs-lookup"><span data-stu-id="6d91c-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="6d91c-201">所有现有[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]命令使用字符串。</span><span class="sxs-lookup"><span data-stu-id="6d91c-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="6d91c-202">因此，此属性元素语法仅适用于自定义命令方案。</span><span class="sxs-lookup"><span data-stu-id="6d91c-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="6d91c-203">为了支持此语法`commandParameterObject`对象还必须支持对象元素语法 （必须具有公共默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-204">标识 <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-205">标识 <see cref="P:System.Windows.Input.InputBinding.Command" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-206">获取或设置命令的目标元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-206">Gets or sets the target element of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6d91c-207">命令的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-207">The target of the command.</span>
          </span>
          <span data-ttu-id="6d91c-208">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-208">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-209">在[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]命令系统中，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性<xref:System.Windows.Input.ICommandSource>对象是适用时，才<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-209">In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="6d91c-210">如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上设置<xref:System.Windows.Input.ICommandSource>和相应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6d91c-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="6d91c-211">如果用于<xref:System.Windows.Input.RoutedCommand>，命令目标是在其上的对象<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引发事件。</span><span class="sxs-lookup"><span data-stu-id="6d91c-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="6d91c-212">如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>未设置属性，则具有键盘焦点的元素使用作为目标。</span><span class="sxs-lookup"><span data-stu-id="6d91c-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="6d91c-213"><xref:System.Windows.Input.InputBinding>类本身不支持[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况，原因是不公开公共默认构造函数 （没有默认构造函数，但它受保护）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-213">The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="6d91c-214">但是，派生的类可以公开公共构造函数，因此可以设置从继承的属性<xref:System.Windows.Input.InputBinding>与[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况。</span><span class="sxs-lookup"><span data-stu-id="6d91c-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage.</span></span> <span data-ttu-id="6d91c-215">有两个现有<xref:System.Windows.Input.InputBinding>派生类可在实例化[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并可以在中设置属性[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6d91c-216">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6d91c-217">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6d91c-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="6d91c-218">派生的类<xref:System.Windows.Input.InputBinding>，支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="6d91c-219">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6d91c-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="6d91c-220">一个字符串，使用绑定语法可以返回对现有的对象引用的类型名称的元素。</span><span class="sxs-lookup"><span data-stu-id="6d91c-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="6d91c-221">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6d91c-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-222">标识 <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 依赖项属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-223">创建 <see cref="T:System.Windows.Input.InputBinding" /> 的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d91c-224">新对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-224">The new object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6d91c-225">获取或设置与此输入绑定关联的 <see cref="T:System.Windows.Input.InputGesture" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6d91c-226">关联的笔势。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-226">The associated gesture.</span>
          </span>
          <span data-ttu-id="6d91c-227">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-227">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d91c-228">输入的笔势是调用该命令的操作。</span><span class="sxs-lookup"><span data-stu-id="6d91c-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="6d91c-229">示例中的输入笔势[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]是<xref:System.Windows.Input.KeyGesture>和<xref:System.Windows.Input.MouseGesture>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="6d91c-230">A<xref:System.Windows.Input.KeyGesture>既有<xref:System.Windows.Input.Key>和一组<xref:System.Windows.Input.ModifierKeys>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="6d91c-231">A<xref:System.Windows.Input.MouseGesture>既有<xref:System.Windows.Input.MouseAction>和一组<xref:System.Windows.Input.ModifierKeys>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="6d91c-232"><xref:System.Windows.Input.InputBinding>类本身不支持[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况，原因是不公开公共默认构造函数 （没有默认构造函数，但它受保护）。</span><span class="sxs-lookup"><span data-stu-id="6d91c-232">The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="6d91c-233">但是，派生的类可以公开公共构造函数，因此可以设置从继承的属性<xref:System.Windows.Input.InputBinding>与[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用情况。</span><span class="sxs-lookup"><span data-stu-id="6d91c-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage.</span></span> <span data-ttu-id="6d91c-234">有两个现有<xref:System.Windows.Input.InputBinding>派生类可在实例化[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并可以在中设置属性[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6d91c-235">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="6d91c-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="6d91c-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
 <span data-ttu-id="6d91c-237">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="6d91c-237">\- or -</span></span>  
  
 <span data-ttu-id="6d91c-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="6d91c-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
 <span data-ttu-id="6d91c-239">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="6d91c-239">\- or -</span></span>  
  
 <span data-ttu-id="6d91c-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="6d91c-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6d91c-241">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="6d91c-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6d91c-242">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6d91c-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="6d91c-243">派生的类<xref:System.Windows.Input.InputBinding>，支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="6d91c-244">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6d91c-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="6d91c-245">自定义派生的类<xref:System.Windows.Input.InputGesture>支持对象元素语法。</span><span class="sxs-lookup"><span data-stu-id="6d91c-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d91c-246">下面的示例演示如何使用<xref:System.Windows.Input.KeyBinding>绑定<xref:System.Windows.Input.KeyGesture>到<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="6d91c-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="6d91c-247">当<xref:System.Windows.Input.KeyGesture>按下 ALT + L，<xref:System.Windows.Input.ApplicationCommands.Close%2A>调用命令。</span><span class="sxs-lookup"><span data-stu-id="6d91c-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="6d91c-248">要克隆的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-248">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d91c-249">使用基（未经过动画处理的）属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="6d91c-250">要克隆的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-250">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d91c-251">使当前实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span>
          </span>
          <span data-ttu-id="6d91c-252">如果对象具有动画依赖属性，则复制其当前的动画值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d91c-252">If the object has animated dependency properties, their current animated values are copied.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>