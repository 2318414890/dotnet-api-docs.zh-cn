<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InputBinding.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56b90f23db0a0464ab8bde6a060b5dd9953d82808.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b90f23db0a0464ab8bde6a060b5dd9953d82808</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>Represents a binding between an <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> and a command.</source>
          <target state="translated">表示 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> 和命令之间的绑定。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>The command is potentially a <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</source>
          <target state="translated">此命令可能是 <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>You can specify that user input invokes a command by creating a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">你可以指定用户输入的创建来调用命令<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the user performs the specified input, the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is set to the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> property is executed.</source>
          <target state="translated">当用户执行指定的输入，<ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph>设置为<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>执行属性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>You can specify that the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invokes a command that is defined on an object by creating a binding on the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties.</source>
          <target state="translated">你可以指定<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>时通过在创建绑定定义的对象的命令，将调用<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">这使你可以定义自定义命令并将其与用户输入。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>For more information, see the second example in the Examples section.</source>
          <target state="translated">有关详细信息，请参阅示例部分中的第二个示例。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> with the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>可以通过注册特定对象上或在类级别定义<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph>与<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>类本身不支持<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>用法原因是不公开公共默认构造函数 （没有默认构造函数，但它受保护）。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">但是，派生的类可以公开公共构造函数，因此可以在继承自派生类上设置属性<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>与<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">有两个现有<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-派生类可在实例化<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>并可以在中设置属性<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>是<ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The typical property in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming that is set in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and takes one or more <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects as values is the <ph id="ph4">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">中的典型属性<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>编程，它在中设置<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>和采用一个或多个<ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>作为值的对象是<ph id="ph4">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>XAML Object Element Usage</source>
          <target state="translated">XAML 对象元素用法</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClass…/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClass…/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">派生的类<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>，支持对象元素语法，如<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>See Remarks.</source>
          <target state="translated">请参阅“备注”。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>绑定<ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>到<ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the key gesture is performed, the Open command is invoked.</source>
          <target state="translated">当执行键笔势，则将调用打开命令。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following examples show how to bind a custom command to <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects.</source>
          <target state="translated">下面的示例演示如何将绑定到自定义命令<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>These examples create an application that enables the user to change the background color by performing one of the following actions:</source>
          <target state="translated">这些示例创建的应用程序使用户能够通过执行以下操作之一来更改背景色：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Clicking a button.</source>
          <target state="translated">单击的按钮。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Pressing CTRL+C.</source>
          <target state="translated">按 CTRL + C。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Right-clicking a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (outside the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</source>
          <target state="translated">右键单击<ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>(外部<ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The first example creates a class named <ph id="ph1">`SimpleDelegateCommand`</ph>.</source>
          <target state="translated">第一个示例创建一个名为类<ph id="ph1">`SimpleDelegateCommand`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</source>
          <target state="translated">此类接受委托，以便创建命令的对象可以定义命令能够执行时发生的操作。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">`SimpleDelegateCommand`</ph> also defines properties that specify what key and mouse input invokes the command.</source>
          <target state="translated"><ph id="ph1">`SimpleDelegateCommand`</ph> 此外定义，这些属性指定哪个键和鼠标输入时，将调用该命令。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">`GestureKey`</ph> and <ph id="ph2">`GestureModifier`</ph> specify the keyboard input; <ph id="ph3">`MouseGesture`</ph> specifies the mouse input.</source>
          <target state="translated"><ph id="ph1">`GestureKey`</ph> 和<ph id="ph2">`GestureModifier`</ph>指定键盘输入;<ph id="ph3">`MouseGesture`</ph>指定鼠标输入。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following example creates and initializes the <ph id="ph1">`ColorChangeCommand`</ph>, which is a <ph id="ph2">`SimpleDelegateCommand`</ph>.</source>
          <target state="translated">下面的示例创建并初始化<ph id="ph1">`ColorChangeCommand`</ph>，即<ph id="ph2">`SimpleDelegateCommand`</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The example also defines the method that executes when the command is invoked and sets the <ph id="ph1">`GestureKey`</ph>, <ph id="ph2">`GestureModifier`</ph>, and <ph id="ph3">`MouseGesture`</ph> properties.</source>
          <target state="translated">该示例还定义该命令将调用并设置时执行的方法<ph id="ph1">`GestureKey`</ph>， <ph id="ph2">`GestureModifier`</ph>，和<ph id="ph3">`MouseGesture`</ph>属性。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>An application would call the <ph id="ph1">`InitializeCommand`</ph> method when the program begins, such as in the constructor of a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">应用程序将调用<ph id="ph1">`InitializeCommand`</ph>当程序开始时，如如下所示的构造函数的方法<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Finally, the following example creates the user interface.</source>
          <target state="translated">最后，下面的示例创建用户界面。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The example adds a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> that contains a <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> and a <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
          <target state="translated">该示例将添加<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>到<ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>包含<ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the user selects an item in the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, he or she can change the color of the background to the selected color.</source>
          <target state="translated">当用户选择中的项<ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>，他或她可以将背景的颜色更改为所选颜色。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>In each case, the <ph id="ph1">`CommandParameter`</ph> property is bound to the selected item in the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, and the <ph id="ph3">`Command`</ph> property is bound to the <ph id="ph4">`ColorChangeCommand`</ph>.</source>
          <target state="translated">在每个情况下，<ph id="ph1">`CommandParameter`</ph>属性绑定到中的所选项目<ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>，和<ph id="ph3">`Command`</ph>属性绑定到<ph id="ph4">`ColorChangeCommand`</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType&gt;</ph> properties are bound to the corresponding properties on the <ph id="ph4">`SimpleDelegateCommand`</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType&gt;</ph>属性绑定到相应的属性<ph id="ph4">`SimpleDelegateCommand`</ph>类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>Provides base initialization for classes derived from <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</source>
          <target state="translated">提供从 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> 派生的类的基初始化。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> is not technically an abstract class, but the default constructor is deliberately protected access.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> 不从技术上讲是一个抽象类，但默认构造函数是有意访问受保护。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>This has the effect of making <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> an "abstract" class for <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">这具有等效于将<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>一个"抽象"类<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, but you cannot specify an <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> instance in <ph id="ph5">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">中的现有属性<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>具有<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>预期类型的对象的用法<ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>，但不是能指定<ph id="ph4">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>实例中<ph id="ph5">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>Instead, you can specify one of the device-specific <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes as values, for instance <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">作为替代，你可以指定一个特定于设备的<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>作为值，例如派生类<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>If you implement a custom <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> that supports a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, use this constructor for base initialization.</source>
          <target state="translated">如果你实现一个自定义<ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>支持<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况，用作基初始化中使用此构造函数。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The command to associate with <bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要与 <bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept> 关联的命令。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The input gesture to associate with <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要与 <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept> 关联的输入笔势。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> class with the specified command and input gesture.</source>
          <target state="translated">用指定的命令和输入笔势初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
          <target state="translated">如果你是软件开发人员使用的绑定类的现有输入，你通常将不使用此构造函数，即使你正在定义的自定义命令。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Instead, you will either use constructors of derived classes (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), or you will use this constructor as the base instantiation of a custom class.</source>
          <target state="translated">相反，你将使用派生类的构造函数 (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>)，或你将使用此构造函数作为自定义类的基实例化。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
          <target state="translated">尽管<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>类原则上，在实践中您必须选择将表示输入的绑定哪些设备支持不同的输入的设备。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>You only can set only one <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> value on the input binding, and gestures are device-specific.</source>
          <target state="translated">仅可以设置仅一个<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph>上输入的绑定和笔势值是特定于设备的。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The following example shows how to use this constructor to associate a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何使用此构造函数将关联<ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>与<ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source><ph id="ph1">&lt;paramref name="command" /&gt;</ph> or <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="command" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">要克隆的对象。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
          <target state="translated">复制指定对象的属性的基（未经过动画处理的）值。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">要克隆的对象。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
          <source>Copies the current values of the properties of the specified object.</source>
          <target state="translated">复制指定对象的属性的当前值。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Command">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> associated with this input binding.</source>
          <target state="translated">获取或设置与此输入绑定关联的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The associated command.</source>
          <target state="translated">关联的命令。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>类不支持<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>用法原因是不公开公共默认构造函数 （它具有默认构造函数，但它受保护）。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">但是，派生的类可以公开公共构造函数，因此，可以使用的属性，从继承<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">有两个现有<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>派生类可在实例化<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>并可以设置与属性<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>用法是<ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> references a type converter that enables certain preexisting <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementations to specify values in the form of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> 引用使某些预先存在的类型转换器<ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph>实现以字符串形式指定值。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
          <target state="translated">此类型转换行为设置此属性的属性值窗体。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>You can also bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
          <target state="translated">你也可以将绑定<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph>属性设置为<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>对象上定义。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">这使你可以定义自定义命令并将其与用户输入。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的第二个示例<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性用法</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 属性元素用法</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">派生的类<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>，支持对象元素语法，如<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>See Remarks.</source>
          <target state="translated">请参阅“备注”。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>An object implementation of <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that supports object element syntax (has a public default constructor).</source>
          <target state="translated">对象实现<ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph>支持对象元素语法 （具有公共默认构造函数）。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType&gt;</ph> command.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>绑定<ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>到<ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType&gt;</ph>命令。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>When the key gesture is performed, the Open command is invoked.</source>
          <target state="translated">当执行键笔势，则将调用打开命令。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> 值为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Gets or sets the command-specific data for a particular command.</source>
          <target state="translated">获取或设置特定命令的命令特定数据。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The command-specific data.</source>
          <target state="translated">命令特定的数据。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> property is used to pass specific information to the command when it is executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>属性用于将特定的信息传递给命令中，执行时。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">由该命令定义的数据类型。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
          <target state="translated">很多命令不希望命令参数;对于这些命令，将忽略传递任何命令参数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>If the command that an input binding is associated with is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> of the input binding is passed to the <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> handlers through the <ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> event data when the command is processed.</source>
          <target state="translated">如果与关联的输入的绑定命令是<ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>的输入绑定传递到<ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>处理程序通过<ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph>时处理此命令的事件数据。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">数据类型和用途的命令参数为每个命令以不同方式定义，并且可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>You can bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
          <target state="translated">你可以将绑定<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph>属性设置为<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>对象上定义。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">这使你可以定义自定义命令并将其与用户输入。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的第二个示例<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>类不支持<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>用法原因是不公开公共默认构造函数 （它具有默认构造函数，但它受保护）。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">但是，派生的类可以公开公共构造函数，因此，可以设置从继承的属性<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>与<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">有两个现有<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>派生类可在实例化<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>并可以在中设置属性<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>是<ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性用法</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 属性元素用法</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">派生的类<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>，支持对象元素语法，如<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>See Remarks.</source>
          <target state="translated">请参阅“备注”。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>A string that is processed by a particular command.</source>
          <target state="translated">一个字符串，由特定的命令处理。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Strings are the common type used for command parameters because they can be easily set in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">字符串是用于命令参数，因为它们可以轻松地设置的公共类型<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
          <target state="translated">预期的字符串格式以及其用途，请参阅与关联的输入的绑定的特定命令的文档。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Many commands do not expect parameters.</source>
          <target state="translated">很多命令不需要参数。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>An object that is processed by a particular command.</source>
          <target state="translated">由特定命令处理的对象。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
          <target state="translated">所有现有<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>命令使用字符串。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
          <target state="translated">因此，此属性元素语法仅适用于自定义命令方案。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
          <target state="translated">为了支持此语法<ph id="ph1">`commandParameterObject`</ph>对象还必须支持对象元素语法 （必须具有公共默认构造函数）。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandParameterProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandParameter" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandParameter" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>Gets or sets the target element of the command.</source>
          <target state="translated">获取或设置命令的目标元素。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The target of the command.</source>
          <target state="translated">命令的目标。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>In the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on an <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> object is applicable only when the <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>命令系统中，<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph>属性<ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>对象是适用时，才<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>是<ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph>上设置<ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>和相应的命令不是<ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>，命令目标将被忽略。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>When used with a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the object on which the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised.</source>
          <target state="translated">如果用于<ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>，命令目标是在其上的对象<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph>引发事件。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property is not set, the element with keyboard focus is used as the target.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph>未设置属性，则具有键盘焦点的元素使用作为目标。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>类本身不支持<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况，原因是不公开公共默认构造函数 （没有默认构造函数，但它受保护）。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">但是，派生的类可以公开公共构造函数，因此可以设置从继承的属性<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>与<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">有两个现有<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>派生类可在实例化<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>并可以在中设置属性<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>是<ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性用法</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">派生的类<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>，支持对象元素语法，如<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>See Remarks.</source>
          <target state="translated">请参阅“备注”。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
          <target state="translated">一个字符串，使用绑定语法可以返回对现有的对象引用的类型名称的元素。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>See Remarks.</source>
          <target state="translated">请参阅“备注”。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandTargetProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandTarget" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandTarget" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CreateInstanceCore">
          <source>Creates an instance of an <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</source>
          <target state="translated">创建 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> 的实例。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CreateInstanceCore">
          <source>The new object.</source>
          <target state="translated">新对象。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> associated with this input binding.</source>
          <target state="translated">获取或设置与此输入绑定关联的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The associated gesture.</source>
          <target state="translated">关联的笔势。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The input gesture is the action that invokes the command.</source>
          <target state="translated">输入的笔势是调用该命令的操作。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Examples of input gestures in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> are <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</source>
          <target state="translated">示例中的输入笔势<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>是<ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>既有<ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph>和一组<ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>既有<ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph>和一组<ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>类本身不支持<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况，原因是不公开公共默认构造函数 （没有默认构造函数，但它受保护）。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>However, derived classes can expose a public constructor and thus can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">但是，派生的类可以公开公共构造函数，因此可以设置从继承的属性<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>与<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用情况。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">有两个现有<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>派生类可在实例化<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>并可以在中设置属性<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>是<ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>和<ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性用法</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 属性元素用法</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">派生的类<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>，支持对象元素语法，如<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>See Remarks.</source>
          <target state="translated">请参阅“备注”。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A custom derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> that supports object element syntax.</source>
          <target state="translated">自定义派生的类<ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>支持对象元素语法。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>绑定<ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>到<ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> ALT+L is pressed, the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command is invoked.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>按下 ALT + L，<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph>调用命令。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">要克隆的对象。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
          <source>Makes the instance a frozen clone of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> by using base (non-animated) property values.</source>
          <target state="translated">使用基（未经过动画处理的）属性值使该实例成为指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> 的冻结复本。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">要克隆的对象。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>Makes the current instance a frozen clone of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph>.</source>
          <target state="translated">使当前实例成为指定的 <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> 的冻结复本。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">如果对象具有动画依赖属性，则复制其当前的动画值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>