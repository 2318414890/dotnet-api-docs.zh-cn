<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="259a584e242641c39f79a17d1968b75dbb3a8c21" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53393429" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Input.InputGesture" /> 和命令之间的绑定。 此命令可能是 <see cref="T:System.Windows.Input.RoutedCommand" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定用户输入通过创建调用命令<xref:System.Windows.Input.InputBinding>。 当用户执行指定的输入<xref:System.Windows.Input.ICommand>设置为<xref:System.Windows.Input.InputBinding.Command%2A>执行属性。  
  
 您可以指定<xref:System.Windows.Input.InputBinding>调用命令对象上定义的上创建绑定<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性。 这使你能够定义自定义命令并将其与用户输入相关联。 有关详细信息，请参阅示例部分中的第二个示例。  
  
 <xref:System.Windows.Input.InputBinding>可以通过注册对特定对象或类级别定义<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>与<xref:System.Windows.Input.CommandManager>。  
  
 <xref:System.Windows.Input.InputBinding>类本身不支持 XAML 用法，因为它不公开公共默认构造函数 （没有默认构造函数，但它受保护）。 但是，派生的类可以公开公共构造函数，因此可以从继承在派生类上设置属性<xref:System.Windows.Input.InputBinding>与 XAML 用法。 有两个现有<xref:System.Windows.Input.InputBinding>-可以在 XAML 中实例化并可在 XAML 中设置属性的派生的类均<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。 中的典型属性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]编程，它一个或多个设置在 XAML 和采用<xref:System.Windows.Input.InputBinding>作为值的对象是<xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType>属性。  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a>XAML 对象元素用法  
 \<*inputBindingDerivedClass…/*>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 派生的类<xref:System.Windows.Input.InputBinding>的支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 请参阅“备注”。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Input.KeyBinding>绑定<xref:System.Windows.Input.KeyGesture>到<xref:System.Windows.Input.ApplicationCommands.Open%2A>命令。 当执行键笔势，则将调用打开命令。  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 以下示例演示如何将绑定到自定义命令<xref:System.Windows.Input.InputBinding>对象。 这些示例中创建该应用程序，用户可以通过执行以下操作之一来更改背景色：  
  
-   单击一个按钮。  
  
-   按 CTRL + C。  
  
-   右键单击<xref:System.Windows.Controls.StackPanel>(外部<xref:System.Windows.Controls.ListBox>)。  
  
 第一个示例创建一个名为类`SimpleDelegateCommand`。 此类接受一个委托，以便创建命令的对象可以定义该命令在执行时发生的操作。 `SimpleDelegateCommand` 此外定义了这些属性指定哪个键和鼠标输入调用该命令。 `GestureKey` 和`GestureModifier`指定键盘输入;`MouseGesture`指定鼠标输入。  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 以下示例创建并初始化`ColorChangeCommand`，这是`SimpleDelegateCommand`。 该示例还定义时将调用该命令，并设置执行的方法`GestureKey`， `GestureModifier`，和`MouseGesture`属性。 应用程序将调用`InitializeCommand`方法在程序开始，此类如下所示的构造函数时<xref:System.Windows.Window>。  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 最后，下面的示例创建的用户界面。 该示例将添加<xref:System.Windows.Input.KeyBinding>和一个<xref:System.Windows.Input.MouseBinding>到<xref:System.Windows.Controls.StackPanel>，其中包含<xref:System.Windows.Controls.Button>和<xref:System.Windows.Controls.ListBox>。 当用户选择中的项<xref:System.Windows.Controls.ListBox>，他或她可以为所选颜色更改背景颜色。 每种情况下，`CommandParameter`属性将绑定到的选定项<xref:System.Windows.Controls.ListBox>，并`Command`属性绑定到`ColorChangeCommand`。 <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>， <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>，并<xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType>属性绑定到相应的属性`SimpleDelegateCommand`类。  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.InputBinding" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>提供从 <see cref="T:System.Windows.Input.InputBinding" /> 派生的类的基初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding> 从技术上讲是一个抽象类，但默认构造函数是有意受保护的访问。 此操作将使<xref:System.Windows.Input.InputBinding>的"抽象"类的 XAML。 中的现有属性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]具有预期类型的对象的 XAML 用法<xref:System.Windows.Input.InputBinding>，但不能指定<xref:System.Windows.Input.InputBinding>在 XAML 中的实例。 相反，您可以指定一个特定于设备的<xref:System.Windows.Input.InputBinding>作为值，例如派生类<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果实现一个自定义<see cref="T:System.Windows.Input.InputBinding" />支持 XAML 用法，请使用此构造函数的基本初始化。</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">要与 <paramref name="gesture" /> 关联的命令。</param>
        <param name="gesture">要与 <paramref name="command" /> 关联的输入笔势。</param>
        <summary>用指定的命令和输入笔势初始化 <see cref="T:System.Windows.Input.InputBinding" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你是软件开发人员使用的绑定类的现有输入，则通常将不使用此构造函数，即使定义自定义命令。 相反，您将使用派生类的构造函数 (<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>)，或你将使用此构造函数作为自定义类的基本实例化。 尽管<xref:System.Windows.Input.InputBinding>类从原理上讲，在实践中，必须选择输入的绑定将表示哪些设备支持不同的输入的设备。 你仅可以设置仅一个<xref:System.Windows.Input.InputBinding.Gesture%2A>上的输入的绑定和手势的值是特定于设备的。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数来将相关联<xref:System.Windows.Input.KeyGesture>与<xref:System.Windows.Input.RoutedCommand>。  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> 或 <paramref name="gesture" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要克隆的对象。</param>
        <summary>复制指定对象的属性的基（未经过动画处理的）值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCurrentValueCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要克隆的对象。</param>
        <summary>复制指定对象的属性的当前值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此输入绑定关联的 <see cref="T:System.Windows.Input.ICommand" />。</summary>
        <value>关联的命令。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding>类不支持 XAML 用法，因为它不公开公共默认构造函数 （它具有默认构造函数，但它受保护）。 但是，派生的类可以公开公共构造函数，因此，可以使用属性继承自<xref:System.Windows.Input.InputBinding>。 有两个现有<xref:System.Windows.Input.InputBinding>派生的类可以在 XAML 中实例化，可以设置具有 XAML 用法的属性是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
 <xref:System.Windows.Input.ICommand> 引用使某些预先存在的类型转换器<xref:System.Windows.Input.ICommand>实现，以字符串的形式指定值。 此类型转换行为设置此属性的属性值形式。 此外可以绑定<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，并<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性设置为<xref:System.Windows.Input.ICommand>对象上定义。 这使你能够定义自定义命令并将其与用户输入相关联。 有关详细信息，请参阅中的第二个示例<xref:System.Windows.Input.InputBinding>。  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
 <`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 派生的类<xref:System.Windows.Input.InputBinding>的支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 请参阅“备注”。  
  
 `iCommandImplementation`  
 对象实现<xref:System.Windows.Input.ICommand>支持对象元素语法 （具有公共默认构造函数）。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Input.KeyBinding>绑定<xref:System.Windows.Input.KeyGesture>到<xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType>命令。 当执行键笔势，则将调用打开命令。  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Input.InputBinding.Command" /> 值为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置特定命令的命令特定数据。</summary>
        <value>命令特定的数据。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding.CommandParameter%2A>属性用于在执行时向命令传递的特定信息。 该命令由定义的数据类型。 许多命令不需要命令参数;有关这些命令，将忽略传递任何命令参数。  
  
 如果与关联的输入的绑定的命令是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.InputBinding.CommandParameter%2A>的输入绑定将传递给<xref:System.Windows.Input.RoutedCommand>处理程序通过<xref:System.Windows.Input.ExecutedRoutedEventArgs>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>事件数据时处理命令。  
  
 数据类型和命令参数的用途以不同的方式定义为每个命令，可以是`null`。 可以将绑定<xref:System.Windows.Input.InputBinding.Command%2A>， <xref:System.Windows.Input.InputBinding.CommandParameter%2A>，并<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性设置为<xref:System.Windows.Input.ICommand>对象上定义。 这使你能够定义自定义命令并将其与用户输入相关联。 有关详细信息，请参阅中的第二个示例<xref:System.Windows.Input.InputBinding>。  
  
 <xref:System.Windows.Input.InputBinding>类不支持 XAML 用法，因为它不公开公共默认构造函数 （它具有默认构造函数，但它受保护）。 但是，派生的类可以公开公共构造函数，因此，可以设置的属性，从继承<xref:System.Windows.Input.InputBinding>与 XAML 用法。 有两个现有<xref:System.Windows.Input.InputBinding>派生的类，可以在 XAML 中实例化并可在 XAML 中设置属性是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 派生的类<xref:System.Windows.Input.InputBinding>的支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 请参阅“备注”。  
  
 `commandParameterString`  
 一个字符串，由特定命令处理。 字符串是用于命令参数，因为它们可以轻松地设置在 XAML 中的公共类型。 预期的字符串格式和它的用途，请参阅与关联的输入的绑定的特定命令的文档。 许多命令不需要参数。  
  
 `commandParameterObject`  
 由特定命令处理的对象。 所有现有[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]命令使用的字符串。 因此，此属性元素语法是仅适用于自定义命令的方案。 为了支持此语法`commandParameterObject`对象还必须支持对象元素语法 （必须具有公共默认构造函数）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Input.InputBinding.Command" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置命令的目标元素。</summary>
        <value>命令的目标。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在命令系统中，Windows Presentation Foundation<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上的属性<xref:System.Windows.Input.ICommandSource>对象是仅在<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。 如果在 <xref:System.Windows.Input.ICommandSource> 上设置 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 并且相应的命令不是 <xref:System.Windows.Input.RoutedCommand>，则忽略命令目标。  
  
 与一起使用时<xref:System.Windows.Input.RoutedCommand>，命令目标是在其上的对象<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引发事件。 如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性未设置，则具有键盘焦点的元素用作目标。  
  
 <xref:System.Windows.Input.InputBinding>类本身不支持 XAML 用法，因为它不公开公共默认构造函数 （没有默认构造函数，但它受保护）。 但是，派生的类可以公开公共构造函数，因此可以设置属性，则继承其<xref:System.Windows.Input.InputBinding>与 XAML 用法。 有两个现有<xref:System.Windows.Input.InputBinding>派生的类，可以在 XAML 中实例化并可在 XAML 中设置属性是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 派生的类<xref:System.Windows.Input.InputBinding>的支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 请参阅“备注”。  
  
 `bindingToTarget`  
 使用一种可以返回到现有的对象引用的绑定语法的字符串的名称的元素。 请参阅“备注”。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Input.InputBinding" /> 的实例。</summary>
        <returns>新对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此输入绑定关联的 <see cref="T:System.Windows.Input.InputGesture" />。</summary>
        <value>关联的笔势。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入的笔势是调用命令的操作。 示例中的输入笔势[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]都<xref:System.Windows.Input.KeyGesture>和<xref:System.Windows.Input.MouseGesture>。 一个<xref:System.Windows.Input.KeyGesture>组成<xref:System.Windows.Input.Key>和一系列<xref:System.Windows.Input.ModifierKeys>。 一个<xref:System.Windows.Input.MouseGesture>组成<xref:System.Windows.Input.MouseAction>和一系列<xref:System.Windows.Input.ModifierKeys>。  
  
 <xref:System.Windows.Input.InputBinding>类本身不支持 XAML 用法，因为它不公开公共默认构造函数 （没有默认构造函数，但它受保护）。 但是，派生的类可以公开公共构造函数，因此可以设置的属性，从继承<xref:System.Windows.Input.InputBinding>与 XAML 用法。 有两个现有<xref:System.Windows.Input.InputBinding>派生的类，可以在 XAML 中实例化并可在 XAML 中设置属性是<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
 <<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/>  
  
或
  
 <<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/>  
  
或
  
 <`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a>XAML 值  
 `inputBindingDerivedClass`  
 派生的类<xref:System.Windows.Input.InputBinding>的支持对象元素语法，如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>。 请参阅“备注”。  
  
 `inputGestureImplementation`  
 自定义派生的类<xref:System.Windows.Input.InputGesture>支持对象元素语法。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Input.KeyBinding>绑定<xref:System.Windows.Input.KeyGesture>到<xref:System.Windows.Input.RoutedCommand>。 当<xref:System.Windows.Input.KeyGesture>按下 ALT + L，<xref:System.Windows.Input.ApplicationCommands.Close%2A>调用命令。  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要克隆的对象。</param>
        <summary>使用基（未经过动画处理的）属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要克隆的对象。</param>
        <summary>使当前实例成为指定 <see cref="T:System.Windows.Freezable" /> 的冻结克隆。 如果对象具有动画依赖属性，则复制其当前的动画值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>