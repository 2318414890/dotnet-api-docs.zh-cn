<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d121d70b297e74ddd57378598dec8607d68ad468" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37503876" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e1330-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1330-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-102"><xref:System.Windows.Input.RoutedCommand.Execute%2A>并<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>上的方法<xref:System.Windows.Input.RoutedCommand>不包含该命令的应用程序逻辑与典型情况一样<xref:System.Windows.Input.ICommand>，但这些方法而不是，引发遍历元素树，以查找的对象的事件<xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="e1330-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="e1330-103">事件处理程序附加到<xref:System.Windows.Input.CommandBinding>包含命令逻辑。</span><span class="sxs-lookup"><span data-stu-id="e1330-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="e1330-104"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法将引发<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>事件。</span><span class="sxs-lookup"><span data-stu-id="e1330-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="e1330-105"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法将引发<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>事件。</span><span class="sxs-lookup"><span data-stu-id="e1330-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="e1330-106">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="e1330-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="e1330-107">\<*object* *property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="e1330-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="e1330-108">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="e1330-108">\- or -</span></span>  
  
 <span data-ttu-id="e1330-109">\<*对象**属性*="*predefinedClassName*。*predefinedCommandName*"/ ></span><span class="sxs-lookup"><span data-stu-id="e1330-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="e1330-110">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="e1330-110">\- or -</span></span>  
  
 <span data-ttu-id="e1330-111">\<*对象**属性*="{ *customClassName*。*customCommandName*}"/ ></span><span class="sxs-lookup"><span data-stu-id="e1330-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="e1330-112">XAML 值</span><span class="sxs-lookup"><span data-stu-id="e1330-112">XAML Values</span></span>  
 <span data-ttu-id="e1330-113">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="e1330-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="e1330-114">预定义的命令类之一。</span><span class="sxs-lookup"><span data-stu-id="e1330-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="e1330-115">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="e1330-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="e1330-116">预定义的命令之一。</span><span class="sxs-lookup"><span data-stu-id="e1330-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="e1330-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="e1330-117">*customClassName*</span></span>  
 <span data-ttu-id="e1330-118">自定义类，该类包含自定义命令。</span><span class="sxs-lookup"><span data-stu-id="e1330-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="e1330-119">通常需要自定义类`xlmns`前缀映射; 请参阅[XAML 命名空间和 WPF XAML 的 Namespace 映射](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="e1330-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="e1330-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="e1330-120">*customCommandName*</span></span>  
 <span data-ttu-id="e1330-121">自定义命令。</span><span class="sxs-lookup"><span data-stu-id="e1330-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e1330-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1330-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e1330-124">Declared name for serialization.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-124">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="e1330-125">The type which is registering the command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-125">The type which is registering the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1330-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e1330-127">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-127">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e1330-128">
            <paramref name="ownerType" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-128">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e1330-129">Declared name for serialization.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-129">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="e1330-130">The type that is registering the command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-130">The type that is registering the command.</span>
          </span>
        </param>
        <param name="inputGestures">
          <span data-ttu-id="e1330-131">Default input gestures associated with this command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-131">Default input gestures associated with this command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1330-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e1330-133">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-133">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e1330-134">the length of <paramref name="name" /> is zero  \- or -  <paramref name="ownerType" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-134">the length of <paramref name="name" /> is zero  \- or -  <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="e1330-135">A user defined data type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-135">A user defined data type.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e1330-136">The command target.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-136">The command target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1330-137">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-137">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1330-138">
            <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-138">
              <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-139">确定如果的实际逻辑<xref:System.Windows.Input.RoutedCommand>才能执行当前命令目标没有包含在<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法，而不是<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>引发<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>事件的隧道和冒泡通过元素正在查找的对象的树<xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="e1330-139">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="e1330-140">如果<xref:System.Windows.Input.CommandBinding>为此<xref:System.Windows.Input.RoutedCommand>找到，则<xref:System.Windows.Input.CanExecuteRoutedEventHandler>附加到<xref:System.Windows.Input.CommandBinding>调用。</span><span class="sxs-lookup"><span data-stu-id="e1330-140">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="e1330-141">这些处理程序提供编程逻辑用于确定是否<xref:System.Windows.Input.RoutedCommand>可以或不执行。</span><span class="sxs-lookup"><span data-stu-id="e1330-141">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="e1330-142"><xref:System.Windows.Input.CommandManager.PreviewCanExecute>并<xref:System.Windows.Input.CommandManager.PreviewExecuted>事件，则将引发<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-142">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="e1330-143">如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未设置上<xref:System.Windows.Input.ICommandSource>，则<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>具有键盘焦点的元素上引发事件。</span><span class="sxs-lookup"><span data-stu-id="e1330-143">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1330-144">下面的示例是<xref:System.Windows.Input.ICommand.CanExecuteChanged>事件处理程序的自定义实现从<xref:System.Windows.Input.ICommandSource>。</span><span class="sxs-lookup"><span data-stu-id="e1330-144">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="e1330-145">`this.Command` 在此示例中是<xref:System.Windows.Input.ICommandSource.Command%2A>属性上的<xref:System.Windows.Input.ICommandSource>。</span><span class="sxs-lookup"><span data-stu-id="e1330-145">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="e1330-146">如果该命令不是`null`，该命令将强制转换为<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="e1330-146">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="e1330-147">如果该命令是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-147">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="e1330-148">如果命令不是<xref:System.Windows.Input.RoutedCommand>，强制转换为<xref:System.Windows.Input.ICommand>并<xref:System.Windows.Input.ICommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-148">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="e1330-149">如果<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法将返回`true`，然后启用该控件; 否则，该控件为禁用。</span><span class="sxs-lookup"><span data-stu-id="e1330-149">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e1330-150">
            <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-150">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1330-151">Occurs when changes to the command source are detected by the command manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-151">Occurs when changes to the command source are detected by the command manager.</span>
          </span>
          <span data-ttu-id="e1330-152">These changes often affect whether the command should execute on the current command target.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-152">These changes often affect whether the command should execute on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-153"><xref:System.Windows.Input.RoutedCommand>侦听<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，引发的<xref:System.Windows.Input.CommandManager>。</span><span class="sxs-lookup"><span data-stu-id="e1330-153">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="e1330-154"><xref:System.Windows.Input.CommandManager.RequerySuggested>时满足条件时将引发事件，可能会更改是否应执行该命令，如更改在键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="e1330-154">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="e1330-155">当该命令收到<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，它会发出<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="e1330-155">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="e1330-156">通常情况下，命令源将侦听此事件和查询<xref:System.Windows.Input.RoutedCommand>通过<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e1330-156">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="e1330-157">如果无法执行此命令作为其命令绑定的一部分，大多数命令源将禁用自身。</span><span class="sxs-lookup"><span data-stu-id="e1330-157">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="e1330-158">此示例是当<xref:System.Windows.Controls.MenuItem>用本身灰色出时无法执行此命令。</span><span class="sxs-lookup"><span data-stu-id="e1330-158">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="e1330-159">在某些情况下，<xref:System.Windows.Input.CommandManager>不知道的条件可更改要执行的命令的功能的更改。</span><span class="sxs-lookup"><span data-stu-id="e1330-159">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="e1330-160">在这些情况下，您可以强制<xref:System.Windows.Input.CommandManager>到引发<xref:System.Windows.Input.CommandManager.RequerySuggested>通过调用事件<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>方法，这又导致<xref:System.Windows.Input.RoutedCommand>引发<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="e1330-160">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1330-161">下面的示例是<xref:System.Windows.Input.ICommand.CanExecuteChanged>事件处理程序的自定义实现从<xref:System.Windows.Input.ICommandSource>。</span><span class="sxs-lookup"><span data-stu-id="e1330-161">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="e1330-162">`this.Command` 在此示例中是<xref:System.Windows.Input.ICommandSource.Command%2A>属性上的<xref:System.Windows.Input.ICommandSource>。</span><span class="sxs-lookup"><span data-stu-id="e1330-162">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="e1330-163">如果该命令不是`null`，该命令将强制转换为<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="e1330-163">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="e1330-164">如果该命令是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-164">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="e1330-165">如果命令不是<xref:System.Windows.Input.RoutedCommand>，强制转换为<xref:System.Windows.Input.ICommand>并<xref:System.Windows.Input.ICommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-165">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="e1330-166">如果<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法将返回`true`，然后启用该控件; 否则，该控件处于禁用状态。</span><span class="sxs-lookup"><span data-stu-id="e1330-166">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="e1330-167">User defined parameter to be passed to the handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-167">User defined parameter to be passed to the handler.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e1330-168">Element at which to begin looking for command handlers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-168">Element at which to begin looking for command handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1330-169">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-169">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-170">执行的实际逻辑<xref:System.Windows.Input.RoutedCommand>未包含在<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e1330-170">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="e1330-171"><xref:System.Windows.Input.RoutedCommand.Execute%2A> 将引发<xref:System.Windows.Input.CommandManager.PreviewExecuted>并<xref:System.Windows.Input.CommandManager.Executed>隧道和浮升通过元素树，查找的对象的事件<xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="e1330-171"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="e1330-172">如果<xref:System.Windows.Input.CommandBinding>为此<xref:System.Windows.Input.RoutedCommand>找到，则<xref:System.Windows.Input.ExecutedRoutedEventHandler>附加到<xref:System.Windows.Input.CommandBinding>调用。</span><span class="sxs-lookup"><span data-stu-id="e1330-172">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="e1330-173">这些处理程序提供执行的编程逻辑<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="e1330-173">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="e1330-174"><xref:System.Windows.Input.CommandManager.PreviewExecuted>并<xref:System.Windows.Input.CommandManager.Executed>事件，则将引发<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-174">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="e1330-175">如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未设置上<xref:System.Windows.Input.ICommandSource>，则<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>具有键盘焦点的元素上引发事件。</span><span class="sxs-lookup"><span data-stu-id="e1330-175">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1330-176">下面的示例是从自定义实现的<xref:System.Windows.Input.ICommandSource>示例。</span><span class="sxs-lookup"><span data-stu-id="e1330-176">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="e1330-177">`this.Command` 在此示例中是 Command 属性上<xref:System.Windows.Input.ICommandSource>。</span><span class="sxs-lookup"><span data-stu-id="e1330-177">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="e1330-178">如果该命令不为 null，该命令转换为<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="e1330-178">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="e1330-179">如果它是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-179">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="e1330-180">如果该命令不是<xref:System.Windows.Input.RoutedCommand>，强制转换为<xref:System.Windows.Input.ICommand>并<xref:System.Windows.Input.ICommand.Execute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1330-180">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e1330-181">
            <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-181">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1330-182">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-182">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1330-183">输入的笔势。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-183">The input gestures.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e1330-184">下面的示例演示如何将添加一个新<xref:System.Windows.Input.MouseGesture>到<xref:System.Windows.Input.RoutedCommand>。</span><span class="sxs-lookup"><span data-stu-id="e1330-184">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1330-185">Gets the name of the command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-185">Gets the name of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1330-186">命令的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-186">The name of the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-187">可以使用此属性，引用时<xref:System.Windows.Input.RoutedCommand>在[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="e1330-187">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1330-188">Gets the type that is registered with the command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-188">Gets the type that is registered with the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1330-189">命令所有者的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-189">The type of the command owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="e1330-190">Data used by the command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-190">Data used by the command.</span>
          </span>
          <span data-ttu-id="e1330-191">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-191">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1330-192">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-192">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1330-193">
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-193">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-194">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="e1330-194">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e1330-195">它只能在 <xref:System.Windows.Input.RoutedCommand> 实例被强制转换为 <xref:System.Windows.Input.ICommand> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="e1330-195">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="e1330-196">Data used by the command.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-196">Data used by the command.</span>
          </span>
          <span data-ttu-id="e1330-197">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-197">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1330-198">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1330-198">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1330-199">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="e1330-199">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e1330-200">它只能在 <xref:System.Windows.Input.RoutedCommand> 实例被强制转换为 <xref:System.Windows.Input.ICommand> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="e1330-200">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1330-201">请参阅</span><span class="sxs-lookup"><span data-stu-id="e1330-201">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>