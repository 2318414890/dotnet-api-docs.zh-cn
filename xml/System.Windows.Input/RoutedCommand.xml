<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659621" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义一个实现 <see cref="T:System.Windows.Input.ICommand" /> 并通过元素树路由的命令。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>和<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>没有该命令的应用程序逻辑，这与典型的情况相同<xref:System.Windows.Input.ICommand>，但相反，这些方法引发遍历元素树，以查找的对象的事件<xref:System.Windows.Input.CommandBinding>.  事件处理程序附加到<xref:System.Windows.Input.CommandBinding>包含命令逻辑。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>方法引发<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>事件。  <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法引发<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>事件。  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
 \<*object* *property*="*predefinedCommandName*"/>  
  
 \- 或 -  
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
 \- 或 -  
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>XAML 值  
 *predefinedClassName*  
 预定义的命令类之一。  
  
 *predefinedCommandName*  
 预定义的命令之一。  
  
 *customClassName*  
 自定义类，该类包含自定义命令。 自定义类通常需要`xlmns`的前缀映射; 请参阅[XAML 命名空间和 WPF XAML Namespace 映射](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)。  
  
 *customCommandName*  
 自定义命令。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">用于序列化的已声明名称。</param>
        <param name="ownerType">正在注册命令的类型。</param>
        <summary>使用指定的名称和所有者类型初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">用于序列化的已声明名称。</param>
        <param name="ownerType">正在注册命令的类型。</param>
        <param name="inputGestures">与此命令关联的默认输入笔势。</param>
        <summary>使用指定的名称、所有者类型和笔势集合初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 的长度为零。  
  
 \- 或 -  
  
 <paramref name="ownerType" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">用户定义的数据类型。</param>
        <param name="target">命令目标。</param>
        <summary>确定此 <see cref="T:System.Windows.Input.RoutedCommand" /> 在其当前状态是否可以执行。</summary>
        <returns>
          如果可以对当前命令目标执行此命令，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 确定如果的实际逻辑<xref:System.Windows.Input.RoutedCommand>可以执行对当前命令目标不包含在<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法，而是<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>引发<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>事件隧道和通过气泡元素查找的对象的树<xref:System.Windows.Input.CommandBinding>。  如果<xref:System.Windows.Input.CommandBinding>该<xref:System.Windows.Input.RoutedCommand>找到，则<xref:System.Windows.Input.CanExecuteRoutedEventHandler>附加到<xref:System.Windows.Input.CommandBinding>调用。  这些处理程序提供用于确定是否的编程逻辑<xref:System.Windows.Input.RoutedCommand>可以或不执行。  
  
 <xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.PreviewExecuted>上引发事件<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>。  如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未对设置<xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>具有键盘焦点的元素上引发事件。  
  
   
  
## Examples  
 下面的示例是<xref:System.Windows.Input.ICommand.CanExecuteChanged>事件处理程序的自定义实现<xref:System.Windows.Input.ICommandSource>。  
  
 `this.Command` 在此示例是<xref:System.Windows.Input.ICommandSource.Command%2A>属性<xref:System.Windows.Input.ICommandSource>。  如果该命令不是`null`，该命令将被强制转换为<xref:System.Windows.Input.RoutedCommand>。  如果该命令是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  如果命令不是<xref:System.Windows.Input.RoutedCommand>，它被强制转换为<xref:System.Windows.Input.ICommand>和<xref:System.Windows.Input.ICommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 如果<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法返回`true`，则启用该控件; 否则，该控件将禁用。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当命令管理器检测到对命令源所进行的更改时发生。 这些更改通常影响是否应对当前命令目标执行命令。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand>侦听<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，由引发<xref:System.Windows.Input.CommandManager>。 <xref:System.Windows.Input.CommandManager.RequerySuggested>满足条件时将引发事件，可能会更改是否应执行该命令，如键盘焦点的变化。  当命令收到<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，它会发出<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>事件。  通常情况下，命令源将侦听此事件和查询<xref:System.Windows.Input.RoutedCommand>通过<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法。  如果无法执行该命令作为其命令绑定的一部分，大多数命令源会禁用本身。  此示例是当<xref:System.Windows.Controls.MenuItem>用本身灰色出时无法执行该命令。  
  
 在某些情况下，<xref:System.Windows.Input.CommandManager>不知道的条件可更改要执行的命令的功能的更改。  在这些情况下，你可以强制执行<xref:System.Windows.Input.CommandManager>到引发<xref:System.Windows.Input.CommandManager.RequerySuggested>通过调用的事件<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>方法，这反过来导致<xref:System.Windows.Input.RoutedCommand>引发<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>事件。  
  
   
  
## Examples  
 下面的示例是<xref:System.Windows.Input.ICommand.CanExecuteChanged>事件处理程序的自定义实现<xref:System.Windows.Input.ICommandSource>。  
  
 `this.Command` 在此示例是<xref:System.Windows.Input.ICommandSource.Command%2A>属性<xref:System.Windows.Input.ICommandSource>。  如果该命令不是`null`，该命令将被强制转换为<xref:System.Windows.Input.RoutedCommand>。  如果该命令是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  如果命令不是<xref:System.Windows.Input.RoutedCommand>，它被强制转换为<xref:System.Windows.Input.ICommand>和<xref:System.Windows.Input.ICommand.CanExecute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 如果<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法返回`true`，然后启用该控件; 否则，该控件已被禁用。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">要传递到处理程序的用户定义的参数。</param>
        <param name="target">要在其中查找命令处理程序的元素。</param>
        <summary>对当前命令目标执行 <see cref="T:System.Windows.Input.RoutedCommand" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行的实际逻辑<xref:System.Windows.Input.RoutedCommand>未包含在<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法。  <xref:System.Windows.Input.RoutedCommand.Execute%2A> 引发<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>隧道和向上遍历元素树查找的对象的事件<xref:System.Windows.Input.CommandBinding>。  如果<xref:System.Windows.Input.CommandBinding>该<xref:System.Windows.Input.RoutedCommand>找到，则<xref:System.Windows.Input.ExecutedRoutedEventHandler>附加到<xref:System.Windows.Input.CommandBinding>调用。  这些处理程序提供执行的编程逻辑<xref:System.Windows.Input.RoutedCommand>。  
  
 <xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>上引发事件<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>。  如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未对设置<xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>具有键盘焦点的元素上引发事件。  
  
   
  
## Examples  
 下面的示例摘自的自定义实现<xref:System.Windows.Input.ICommandSource>示例。  
  
 `this.Command` 在此示例位于命令属性<xref:System.Windows.Input.ICommandSource>。  如果该命令不为 null，该命令被强制转换为<xref:System.Windows.Input.RoutedCommand>。  如果它是<xref:System.Windows.Input.RoutedCommand>，则<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>和<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  如果该命令不是<xref:System.Windows.Input.RoutedCommand>，它被强制转换为<xref:System.Windows.Input.ICommand>和<xref:System.Windows.Input.ICommand.Execute%2A>方法调用传递<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此命令关联的 <see cref="T:System.Windows.Input.InputGesture" /> 对象的集合。</summary>
        <value>输入笔势。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何添加新<xref:System.Windows.Input.MouseGesture>到<xref:System.Windows.Input.RoutedCommand>。  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取命令的名称。</summary>
        <value>命令的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此属性，引用时<xref:System.Windows.Input.RoutedCommand>中[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取使用命令注册的类型。</summary>
        <value>命令所有者的类型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">此命令使用的数据。  如果此命令不需要传递数据，则该对象可以设置为 <see langword="null" />。</param>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />。</summary>
        <returns>
          如果可以执行此命令，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Input.RoutedCommand> 实例强制转换为 <xref:System.Windows.Input.ICommand> 接口时使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">此命令使用的数据。  如果此命令不需要传递数据，则该对象可以设置为 <see langword="null" />。</param>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Input.RoutedCommand> 实例强制转换为 <xref:System.Windows.Input.ICommand> 接口时使用。  
  
   
  
## Examples  
 请参阅  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>