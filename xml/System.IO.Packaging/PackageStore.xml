<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a1feca71d3ae4974e4fcaea64b9771e7e1ec2ee9" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55313773" /></Metadata><TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示结合 <see cref="T:System.IO.Packaging.Package" /> 使用的应用程序特定的 <see cref="T:System.IO.Packaging.PackWebRequest" /> 实例的集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageStore>定义已打开，而该应用程序中处于活动状态的引用集合的包。  包添加到<xref:System.IO.Packaging.PackageStore>访问是按其键值的 URI。  <xref:System.IO.Packaging.PackageStore>支持三种常见用途：  
  
1.  访问<xref:System.IO.Packaging.PackagePart>通过数据<xref:System.IO.Packaging.PackWebRequest>。  
  
2.  应用程序获取的实例<xref:System.IO.Packaging.Package>给定包的 URI。  
  
3.  访问包，将创建并存储在<xref:System.IO.MemoryStream>。  
  
 若要提高性能并最大程度减少重复的文件打开/关闭操作的开销<xref:System.IO.Packaging.PackageStore>用于管理的包访问的实例<xref:System.IO.Packaging.PackWebRequest>和直接由应用程序。  访问在包中，数据时<xref:System.IO.Packaging.Package>地址的请求<xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackagePart.Uri%2A>首先进行检查以查看该程序包是否已定义且在中打开<xref:System.IO.Packaging.PackageStore>。  如果包定义在中，打开<xref:System.IO.Packaging.PackageStore>，请求可以反复打开和关闭每个请求的包不直接访问部分。  
  
 如果你的应用程序打开的包<xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>，<xref:System.IO.Packaging.PackageStore.AddPackage%2A>可以调用以添加到包<xref:System.IO.Packaging.PackageStore>。  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 应更高版本调用以从包中删除<xref:System.IO.Packaging.PackageStore>之前调用<xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>。  
  
 使用打开 XPS 包<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>构造函数将自动添加和删除从<xref:System.IO.Packaging.PackageStore>创建和释放文档时。  (不需要调用<xref:System.IO.Packaging.PackageStore.AddPackage%2A>或<xref:System.IO.Packaging.PackageStore.RemovePackage%2A>单独打开的 XPS 包与<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>构造函数。)  
  
 通过访问包的文件 I/O 权限<xref:System.IO.Packaging.PackageStore>仍保持打开时为包设置的 I/O 权限。  <xref:System.IO.Packaging.PackageStore>仅提供对已添加存储的包的引用。  它是应用程序负责正确打开、 更新和关闭每个包。  
  
 包添加到<xref:System.IO.Packaging.PackageStore>结合使用时，可以在多线程环境中访问[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]如分析器<xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>。  在多线程环境操作时，应用程序必须锁定之前访问包。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">要在 <see cref="T:System.IO.Packaging.PackWebRequest" /> 中比较的 <paramref name="package" /> 的键 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="package">要添加到存储区的包。</param>
        <summary>将 <see cref="T:System.IO.Packaging.Package" /> 添加到存储区。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 定义包的键进行比较，当您调用的 URI <xref:System.IO.Packaging.PackWebRequest>。  
  
 如果`packageUri`匹配<xref:System.IO.Packaging.PackagePart.Uri%2A>有关<xref:System.IO.Packaging.PackagePart>中<xref:System.IO.Packaging.PackWebRequest>调用中定义的包<xref:System.IO.Packaging.PackageStore>用于访问所请求的部分。  
  
 如果`packageUri`不符<xref:System.IO.Packaging.PackagePart.Uri%2A>有关<xref:System.IO.Packaging.PackagePart>中<xref:System.IO.Packaging.PackWebRequest>调用，用指定的 URI 的包会打开用于访问所请求的部分。  
  
 **安全说明**此方法要求<xref:System.Security.Permissions.EnvironmentPermission>的所有自定义<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 类型。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 是无效的包 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">带有指定 <paramref name="packageUri" /> 的包已位于存储区中。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">要返回的包的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>从存储区中返回带有指定 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 的 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <returns>带有指定 <paramref name="packageUri" /> 的包；或者 <see langword="null" />（如果带有指定 <paramref name="packageUri" /> 的包不在存储区中）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 匹配的 Uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法调用。  
  
 **安全说明**此方法要求<xref:System.Security.Permissions.EnvironmentPermission>的所有自定义<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 类型。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackageStore.GetPackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 是无效的包 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">要移除的包的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>从存储区中移除带有指定 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 的 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 匹配的 Uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法调用。  
  
 **安全说明**此方法要求<xref:System.Security.Permissions.EnvironmentPermission>的所有自定义<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 类型。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 是无效的包 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>