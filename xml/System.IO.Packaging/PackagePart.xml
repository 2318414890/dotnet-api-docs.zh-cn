<Type Name="PackagePart" FullName="System.IO.Packaging.PackagePart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="154c70fa5276cdccac41f7e7f56b00b2e5fd1bb9" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682754" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PackagePart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PackagePart extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackagePart" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PackagePart" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackagePart abstract" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为存储在 <see cref="T:System.IO.Packaging.Package" /> 中的部分提供基类。  此类为抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.IO.Packaging.PackagePart>三个基本元素组成：  
  
|Access|描述|  
|------------|-----------------|  
|<xref:System.IO.Packaging.PackagePart.Uri%2A>|[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]的一部分。|  
|<xref:System.IO.Packaging.PackagePart.ContentType%2A>|[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]类型的内容的流。|  
|<xref:System.IO.Packaging.PackagePart.GetStream%2A>|此部分的内容数据流。|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [WPF 中的 Pack URI](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md)  
  
 [开放式打包约定规范](http://go.microsoft.com/fwlink/?LinkID=71255)  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="partUri">该部分的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
        <summary>使用指定的父 <see cref="T:System.IO.Packaging.PackagePart" /> 和部分 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 初始化 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是有效的<xref:System.IO.Packaging.PackagePart>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根据带[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范和[开放式打包约定](http://go.microsoft.com/fwlink/?LinkID=71255)规范。  
  
 使用此构造函数时<xref:System.IO.Packaging.PackagePart.ContentType%2A>部件的立即未知，并且将设置更高版本时<xref:System.IO.Packaging.Package.CreatePart%2A>调用。  
  
 默认情况下，<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>部件的属性初始化为<xref:System.IO.Packaging.CompressionOption.NotCompressed>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri, System::String ^ contentType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="partUri">该部分的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
        <param name="contentType">部分数据流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型。</param>
        <summary>使用指定的父 <see cref="T:System.IO.Packaging.PackagePart" />、部分 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 和 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型初始化 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是有效的<xref:System.IO.Packaging.PackagePart>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根据带[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范和[开放式打包约定](http://go.microsoft.com/fwlink/?LinkID=71255)规范。  
  
 默认情况下，<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>部件的属性初始化为<xref:System.IO.Packaging.CompressionOption.NotCompressed>。  
  
 `contentType` 必须是[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]类型格式根据[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文本传输协议 HTTP*，3.7 节了解。  下表显示的内容示例[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]中使用类型[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]文档。  
  
|描述|内容类型|  
|-----------------|------------------|  
|字体|application/vnd.ms-opentype|  
|ICC 配置文件|application/vnd.ms-color.iccprofile|  
|JPEG 图像|图像/jpeg|  
|经过模糊处理的字体|application/vnd.ms-package.obfuscated-opentype|  
|PNG 图像|图像/png|  
|PrintTicket|application/vnd.ms-printing.printticket+xml|  
|TIFF 图像|图像/tiff|  
|Windows Media 照片图像|image/vnd.ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="partUri">该部分的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
        <param name="contentType">部分的数据流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型。</param>
        <param name="compressionOption">部分数据流的压缩选项。</param>
        <summary>使用指定的父 <see cref="T:System.IO.Packaging.PackagePart" />、部分 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]、[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型和 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 初始化 <see cref="T:System.IO.Packaging.CompressionOption" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是有效的<xref:System.IO.Packaging.PackagePart>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根据带[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范和[开放式打包约定](http://go.microsoft.com/fwlink/?LinkID=71255)规范。  
  
 `contentType` 必须是[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]类型格式根据[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文本传输协议 HTTP*，3.7 节了解。  下表显示的内容示例[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]中使用类型[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]文档。  
  
|描述|内容类型|  
|-----------------|------------------|  
|字体|application/vnd.ms-opentype|  
|ICC 配置文件|application/vnd.ms-color.iccprofile|  
|JPEG 图像|图像/jpeg|  
|经过模糊处理的字体|application/vnd.ms-package.obfuscated-opentype|  
|PNG 图像|图像/png|  
|PrintTicket|application/vnd.ms-printing.printticket+xml|  
|TIFF 图像|图像/tiff|  
|Windows Media 照片图像|image/vnd.ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionOption" /> 值无效。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="CompressionOption">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.CompressionOption CompressionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Packaging.CompressionOption CompressionOption" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.CompressionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompressionOption As CompressionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::CompressionOption CompressionOption { System::IO::Packaging::CompressionOption get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.CompressionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取部分内容流的压缩选项。</summary>
        <value>部分内容流的压缩选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 是一个只读属性，可以访问仅当父<xref:System.IO.Packaging.Package>处于打开状态。  
  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A>属性自动设置<xref:System.IO.Packaging.PackagePart.%23ctor%2A>构造函数。  它由构造函数中，设置后<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>不能更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取内容流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</summary>
        <value>部分的内容数据流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 是一个只读属性，可以访问仅当父<xref:System.IO.Packaging.Package>处于打开状态。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A>属性自动设置<xref:System.IO.Packaging.PackagePart.%23ctor%2A>构造函数。  它由构造函数中，设置后<xref:System.IO.Packaging.PackagePart.ContentType%2A>不能更改。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A>属性是[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]类型格式根据[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文本传输协议 HTTP*，3.7 节了解。  下表显示的内容示例[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]中使用类型[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]文档。  
  
|描述|内容类型|  
|-----------------|------------------|  
|字体|application/vnd.ms-opentype|  
|ICC 配置文件|application/vnd.ms-color.iccprofile|  
|JPEG 图像|图像/jpeg|  
|经过模糊处理的字体|application/vnd.ms-package.obfuscated-opentype|  
|PNG 图像|图像/png|  
|PrintTicket|application/vnd.ms-printing.printticket+xml|  
|TIFF 图像|图像/tiff|  
|Windows Media 照片图像|image/vnd.ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。  
  
 或  
  
 派生类 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法返回的字符串为空。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分级关系定义此部分的目标一部分或资源之间的关联。  部分级关系可以是两种形式之一。  
  
-   源之间<xref:System.IO.Packaging.PackagePart>到目标<xref:System.IO.Packaging.PackagePart>内<xref:System.IO.Packaging.Package>。  
  
-   源之间<xref:System.IO.Packaging.PackagePart>到包外部的目标资源。  
  
 在部分关系源部分都视为"所有者"的关系。  当删除源部分时，还删除拥有的一部分的所有关系。  创建或删除的关系的过程不会以物理方式更改目标部分或以任何方式的资源。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>方法不会以物理方式更改的源部分中，或目标部分或以任何方式的资源。  
  
 关系的目标不能为另一个关系。  
  
 有关包关系的详细信息请参阅部分 1.3*开放式打包约定 (OPC)* 规范下载[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 有关详细信息，有关 XPS 文档，请参阅*打开 XML 纸张规范 (XPS)* 下载[ http://go.microsoft.com/fwlink/?LinkID=67000 ](http://go.microsoft.com/fwlink/?LinkID=67000)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="targetMode">枚举值之一。 例如，如果目标部分在 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 的内部，则为 <see cref="T:System.IO.Packaging.Package" />；如果目标是 <see cref="F:System.IO.Packaging.TargetMode.External" /> 外部的资源，则为 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="relationshipType">关系的角色。</param>
        <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
        <returns>此 <see cref="T:System.IO.Packaging.PackagePart" /> 与目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分级关系定义此部分的目标一部分或资源之间的关联。  部分级关系可以是两种形式之一。  
  
-   源之间<xref:System.IO.Packaging.PackagePart>到目标<xref:System.IO.Packaging.PackagePart>内<xref:System.IO.Packaging.Package>。  
  
-   源之间<xref:System.IO.Packaging.PackagePart>到包外部的目标资源。  
  
 在部分关系源部分都视为"所有者"的关系。  当删除源部分时，还删除拥有的一部分的所有关系。  创建或删除的关系的过程不会以物理方式更改目标部分或以任何方式的资源。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>方法不会以物理方式更改的源部分中，或目标部分或以任何方式的资源。  
  
 关系的目标不能为另一个关系。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必须根据格式是相对 URI [RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范。  内部的相对 URI 可以是可以是绝对路径开头正斜杠 （"/"） 字符如"/ page1.xaml"或"/ images/picture4.jpg"，或相对路径，如".../ imagespicture1.jpg"可解析根据包根目录 （"/"） 的基 uri。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是绝对或相对的 URI 格式根据[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范。  "http://www.microsoft.com/page2.xml"是一个绝对 URI，它引用的外部的目标资源"page2.xml"的一个示例。  "images/picture1.jpg"是一个相对的 URI，也引用外部的目标资源"1.jpg"但哪些解析对包本身的 URI 的示例。  
  
 `relationshipType` 必须是[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，形成根据[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范。  不同的包类型可以定义不同的部分级关系类型。  下表显示了一部分级`relationshipType`Uri 定义的文档，符合*打开 XML 纸张规范 (XPS)*。  
  
|XPS 文档部分级关系|关系类型 URI|  
|-------------------------------------------|---------------------------|  
|数字签名定义|[http://schemas.microsoft.com/xps/2005/06/signature-definitions](http://schemas.microsoft.com/xps/2005/06/signature-definitions)|  
|DiscardControl|http://schemas.microsoft.com/xps/2005/06/discard-control|  
|DocumentStructure|http://schemas.microsoft.com/xps/2005/06/documentstructure|  
|PrintTicket|http://schemas.microsoft.com/xps/2005/06/printticket|  
|所需的资源|http://schemas.microsoft.com/xps/2005/06/required-resource|  
|受限制的字体|http://schemas.microsoft.com/xps/2005/06/restricted-font|  
|StartPart|http://schemas.microsoft.com/xps/2005/06/fixedrepresentation|  
|StoryFragments|http://schemas.microsoft.com/xps/2005/06/storyfragments|  
  
 有关包关系的详细信息请参阅部分 1.3*开放式打包约定 (OPC)* 规范下载[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 有关详细信息，有关 XPS 文档，请参阅*打开 XML 纸张规范 (XPS)* 下载[ http://go.microsoft.com/fwlink/?LinkID=67000 ](http://go.microsoft.com/fwlink/?LinkID=67000)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> 参数不是有效的 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。</exception>
        <exception cref="T:System.ArgumentException">由 <paramref name="targetUri" /> 标识的部分是关系（关系的目标不能是另一个关系）。  
  
 或  
  
 将 <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，但 <paramref name="targetUri" /> 是绝对外部 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.IO.IOException">包是只读的（无法添加新关系）。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="targetMode">枚举值之一。 例如，如果目标部分在 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 的内部，则为 <see cref="T:System.IO.Packaging.Package" />；如果目标是 <see cref="F:System.IO.Packaging.TargetMode.External" /> 外部的资源，则为 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="relationshipType">关系的角色。</param>
        <param name="id">关系的唯一 ID。</param>
        <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
        <returns>此 <see cref="T:System.IO.Packaging.PackagePart" /> 与目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分级关系定义此部分的目标一部分或资源之间的关联。  部分级关系可以是两种形式之一。  
  
-   源之间<xref:System.IO.Packaging.PackagePart>到目标<xref:System.IO.Packaging.PackagePart>内<xref:System.IO.Packaging.Package>。  
  
-   源之间<xref:System.IO.Packaging.PackagePart>到包外部的目标资源。  
  
 在部分关系源部分都视为"所有者"的关系。  当删除源部分时，还删除拥有的一部分的所有关系。  创建或删除的关系的过程不会以物理方式更改目标部分或以任何方式的资源。  
  
 `id` 必须是有效的 XML 标识符。  `id`类型是 xsd:ID 并且必须遵循中规定的命名约定*XML 架构第 2 部分： 数据类型*规范 (请参阅[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>方法不会以物理方式更改的源部分中，或目标部分或以任何方式的资源。  
  
 关系的目标不能为另一个关系。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必须根据格式是相对 URI [RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范。  内部的相对 URI 可以是可以是绝对路径开头正斜杠 （"/"） 字符如"/ page1.xaml"或"/ images/picture4.jpg"，或相对路径，如".../ imagespicture1.jpg"可解析根据包根目录 （"/"） 的基 uri。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是绝对或相对的 URI 格式根据[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范。  "http://www.microsoft.com/page2.xml"是一个绝对 URI，它引用的外部的目标资源"page2.xml"的一个示例。  "images/picture1.jpg"是一个相对的 URI，也引用外部的目标资源"1.jpg"但哪些解析对包本身的 URI 的示例。  
  
 `relationshipType` 必须是[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]，形成根据[RFC 3986](http://tools.ietf.org/html/rfc3986) *统一资源标识符 (URI) 泛型语法*规范。  不同的包类型可以定义不同的部分级关系类型。  下表显示了一部分级`relationshipType`Uri 定义的文档，符合*打开 XML 纸张规范 (XPS)*。  
  
|XPS 文档部分级关系|关系类型 URI|  
|-------------------------------------------|---------------------------|  
|数字签名定义|http://schemas.microsoft.com/xps/2005/06/signature-definitions|  
|DiscardControl|http://schemas.microsoft.com/xps/2005/06/discard-control|  
|DocumentStructure|http://schemas.microsoft.com/xps/2005/06/documentstructure|  
|PrintTicket|http://schemas.microsoft.com/xps/2005/06/printticket|  
|所需的资源|http://schemas.microsoft.com/xps/2005/06/required-resource|  
|受限制的字体|http://schemas.microsoft.com/xps/2005/06/restricted-font|  
|StartPart|http://schemas.microsoft.com/xps/2005/06/fixedrepresentation|  
|StoryFragments|http://schemas.microsoft.com/xps/2005/06/storyfragments|  
  
 有关包关系的详细信息请参阅部分 1.3*开放式打包约定 (OPC)* 规范下载[ http://go.microsoft.com/fwlink/?LinkID=71255 ](http://go.microsoft.com/fwlink/?LinkID=71255)。  
  
 有关详细信息，有关 XPS 文档，请参阅*打开 XML 纸张规范 (XPS)* 下载[ http://go.microsoft.com/fwlink/?LinkID=67000 ](http://go.microsoft.com/fwlink/?LinkID=67000)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> 参数不是有效的 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。</exception>
        <exception cref="T:System.ArgumentException">由 <paramref name="targetUri" /> 标识的部分是关系（关系的目标不能是另一个关系）。  
  
 或  
  
 将 <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，但 <paramref name="targetUri" /> 是绝对外部 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.IO.IOException">包是只读的（无法添加新关系）。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。  
  
 或  
  
 已存在具有指定 <paramref name="id" /> 的部分。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要删除的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>删除指定的部分级 <see cref="T:System.IO.Packaging.PackageRelationship" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。  `id`类型是 xsd:ID 并且必须遵循中规定的命名约定*XML 架构第 2 部分： 数据类型*规范 (请参阅[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 如果指定`id`不符<xref:System.IO.Packaging.PackageRelationship.Id%2A>没有关系删除任何所拥有的此部分的关系，并且不会引发异常。  
  
 删除指定的关系，以外<xref:System.IO.Packaging.PackagePart.DeleteRelationship%2A>方法不会以物理方式更改此部分或目标部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">包是只读的（无法删除关系）。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetContentTypeCore">
      <MemberSignature Language="C#" Value="protected virtual string GetContentTypeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetContentTypeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetContentTypeCore () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetContentTypeCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当在派生类中重写时，返回部分内容的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</summary>
        <returns>部分内容的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A> 是的一个虚拟方法<xref:System.IO.Packaging.PackagePart>抽象基类。 仅在其中的内容类型的值不能在提供的构造，时间的派生类型中实现此方法，或如果计算内容类型值是不常用的或成本高昂的操作。 返回值必须为有效[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]内容类型。  
  
 派生的类可以调用<xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A>初始化<xref:System.IO.Packaging.PackagePart.ContentType%2A>的派生类的默认值的属性。  后<xref:System.IO.Packaging.PackagePart.ContentType%2A>属性已设置它不能更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">派生类不为 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法提供所需的重写实现。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>返回具有指定 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的关系。</summary>
        <returns>与指定 <paramref name="id" /> 相匹配的关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。  `id`类型是 xsd:ID 并且必须遵循中规定的命名约定*XML 架构第 2 部分： 数据类型*规范 (请参阅[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 你可以使用<xref:System.IO.Packaging.PackagePart.RelationshipExists%2A>方法确定是否与指定的关系<xref:System.IO.Packaging.PackageRelationship.Id%2A>归此部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> 是一个空字符串。</exception>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。  
  
 或  
  
 包中不存在具有指定 <paramref name="id" /> 的关系。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此部分拥有的所有关系的集合。</summary>
        <returns>此部分拥有的所有关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的集合不`null`; 但是，如果一部分未定义任何关系的集合可能包含零个元素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">要在集合中查找并返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
        <summary>返回与指定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 相匹配的关系的集合。</summary>
        <returns>与指定 <paramref name="relationshipType" /> 相匹配的关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的集合不`null`; 但是，如果没有关系匹配指定的集合可能包含零个元素`relationshipType`部分定义。  
  
 任何前导空格或尾随空格中的`relationshipType`自动修整字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> 是一个空字符串。</exception>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回部分内容数据流。</summary>
        <block subset="none" type="usage">
          <para>
            <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 内部调用派生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />方法实际打开并返回部分数据流基于派生类中实现的物理格式。  
  
 默认情况下，<see cref="T:System.IO.Packaging.ZipPackagePart" />子类实现的抽象<see cref="T:System.IO.Packaging.PackagePart" />提供和使用类。  在默认操作中，<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />内部调用<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />类以打开并从 ZIP 文件返回部分数据流。</para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回部分内容数据流。</summary>
        <returns>此部分的内容数据流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法打开与内容流<xref:System.IO.FileMode>的<xref:System.IO.FileMode.OpenOrCreate>和<xref:System.IO.FileAccess>与父级相同的权限<xref:System.IO.Packaging.Package>。  
  
 重载<xref:System.IO.Packaging.PackagePart.GetStream%2A>方法允许你设置特定<xref:System.IO.FileMode>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 <see langword="null" />。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream" /> 内部调用派生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />方法实际打开并返回部分数据流基于派生类中实现的物理格式。  
  
 默认情况下，<see cref="T:System.IO.Packaging.ZipPackagePart" />子类实现的抽象<see cref="T:System.IO.Packaging.PackagePart" />提供和使用类。  在默认操作中，<see cref="M:System.IO.Packaging.PackagePart.GetStream" />内部调用<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />类以打开并从 ZIP 文件返回部分数据流。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (mode As FileMode) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream(System::IO::FileMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="mode">打开内容流时采用的 I/O 模式。</param>
        <summary>返回在指定 I/O <see cref="T:System.IO.FileMode" /> 中打开的内容流。</summary>
        <returns>此部分的内容流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileAccess>返回的内容流的权限是与父级的权限相同<xref:System.IO.Packaging.Package>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 参数不是有效的 <see cref="T:System.IO.FileMode" /> 枚举值。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="mode" /> 参数与包和部分流不兼容。  
  
 或  
  
 派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 <see langword="null" />。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" /> 内部调用派生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />方法实际打开并返回部分数据流基于派生类中实现的物理格式。  
  
 默认情况下，<see cref="T:System.IO.Packaging.ZipPackagePart" />子类实现的抽象<see cref="T:System.IO.Packaging.PackagePart" />提供和使用类。  在默认操作中，<see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" />内部调用<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />类以打开并从 ZIP 文件返回部分数据流。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (mode As FileMode, access As FileAccess) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream(System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">打开内容流时采用的 I/O 模式。</param>
        <param name="access">打开内容流时使用的访问权限。</param>
        <summary>返回使用指定 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 打开的部分内容流。</summary>
        <returns>此部分的内容流。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 参数不是有效的 <see cref="T:System.IO.FileMode" /> 枚举值。  
  
 或  
  
 <paramref name="access" /> 参数不是有效的 <see cref="T:System.IO.FileAccess" /> 枚举值。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="mode" /> 或 <paramref name="access" /> 与包和部分流不兼容。  
  
 或  
  
 <paramref name="access" /> 参数指定为 <see cref="F:System.IO.FileAccess.Read" />，但 <paramref name="mode" /> 参数需要写访问权。  （<see cref="T:System.IO.FileMode" />、<see cref="F:System.IO.FileMode.Create" />、<see cref="F:System.IO.FileMode.CreateNew" /> 和 <see cref="F:System.IO.FileMode.Truncate" /> 的 <see cref="F:System.IO.FileMode.Append" /> 值需要 <see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" /> 访问权限。）  
  
 或  
  
 派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 <see langword="null" />。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> 内部调用派生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />方法实际打开并返回部分数据流基于派生类中实现的物理格式。  
  
 默认情况下，<see cref="T:System.IO.Packaging.ZipPackagePart" />子类实现的抽象<see cref="T:System.IO.Packaging.PackagePart" />提供和使用类。  在默认操作中，<see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" />内部调用<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />类以打开并从 ZIP 文件返回部分数据流。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStreamCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Stream GetStreamCore (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Stream GetStreamCore(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetStreamCore (mode As FileMode, access As FileAccess) As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Stream ^ GetStreamCore(System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">打开内容流时采用的 I/O 模式。</param>
        <param name="access">打开内容流时使用的访问权限。</param>
        <summary>当在派生类中重写时，返回使用指定的 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 打开的部分内容流。</summary>
        <returns>此部分的内容数据流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序不应调用<xref:System.IO.Packaging.PackagePart.GetStreamCore%2A>直接，而应调用<xref:System.IO.Packaging.PackagePart.GetStream%2A>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />实现应作出有关顺序或所执行的操作没有假设<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />调用它的方法。</para>
        </block>
        <block subset="none" type="usage">
          <para>派生<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />方法由调用<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />方法以打开并返回部分数据流基于派生类中实现的物理格式。  
  
 默认情况下，<see cref="T:System.IO.Packaging.ZipPackagePart" />子类实现的抽象<see cref="T:System.IO.Packaging.PackagePart" />提供和使用类。  在默认操作中，<see cref="Overload:System.IO.Packaging.PackagePart.GetStream" />内部调用<see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />的<see cref="T:System.IO.Packaging.ZipPackagePart" />类以打开并从 ZIP 文件返回部分数据流。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Package">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.Package Package { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.Package Package" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Package" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Package As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::Package ^ Package { System::IO::Packaging::Package ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此部分的父 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <value>此部分的父包。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.Package%2A> 是一个只读属性，可以访问仅当父<xref:System.IO.Packaging.Package>处于打开状态。  
  
 <xref:System.IO.Packaging.PackagePart.Package%2A>属性自动设置<xref:System.IO.Packaging.PackagePart.%23ctor%2A>构造函数。  构造函数中，父设置完成后<xref:System.IO.Packaging.PackagePart.Package%2A>无法更改该部件的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要检查的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>返回一个值，指示此部分是否拥有具有指定 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的关系。</summary>
        <returns>
          如果此部分拥有具有指定 <paramref name="id" /> 的关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。  `id`类型是 xsd:ID 并且必须遵循中规定的命名约定*XML 架构第 2 部分： 数据类型*规范 (请参阅[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Uri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Uri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Uri { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取部分的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</summary>
        <value>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]的相对于包根的部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.Uri%2A> 是一个只读属性，可以访问仅当父<xref:System.IO.Packaging.Package>处于打开状态。  
  
 <xref:System.IO.Packaging.PackagePart.Uri%2A>属性自动设置<xref:System.IO.Packaging.PackagePart.%23ctor%2A>构造函数。  它由构造函数中，设置后<xref:System.IO.Packaging.PackagePart.Uri%2A>不能更改的一部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
 或  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>