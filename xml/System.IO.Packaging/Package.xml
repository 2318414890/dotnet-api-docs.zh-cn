<Type Name="Package" FullName="System.IO.Packaging.Package">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="277b1344a360222f54b6cbd21a9f82498043593d" />
    <Meta Name="ms.sourcegitcommit" Value="c902e847cd05ac37d93eca981b0fb009aae0a790" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/28/2018" />
    <Meta Name="ms.locfileid" Value="52455038" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Package&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Package abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type Package = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示一个可以存储多个数据对象的容器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> 是一个抽象类，可用于将对象组织到可移植性和高效访问定义的物理格式的单个实体。  
  
 ZIP 文件是物理的主要格式<xref:System.IO.Packaging.Package>。  其他<xref:System.IO.Packaging.Package>实现可能使用其他物理格式，如 XML 文档时，数据库，或 Web 服务。  
  
 与文件系统，类似的项包含在<xref:System.IO.Packaging.Package>中分层组织文件夹和文件的引用。  
  
 尽管<xref:System.IO.Packaging.Package>本身是一个抽象类，<xref:System.IO.Packaging.ZipPackage>派生的类用作默认情况下<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 一个<xref:System.IO.Packaging.PackagePart>（"部件"） 是表示存储在一个对象的抽象类<xref:System.IO.Packaging.Package>。  
  
 一个<xref:System.IO.Packaging.PackageRelationship>（"关系"） 定义一个源之间的关联<xref:System.IO.Packaging.Package>或<xref:System.IO.Packaging.PackagePart>和目标对象。  一个<xref:System.IO.Packaging.PackageRelationship>可以是两种类型，其中每个可以是以下两种形式之一：  
  
-   包级别关系 (由<xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=nameWithType>方法) 相关<xref:System.IO.Packaging.Package>为：  
  
    -   包中的目标部件。  
  
    -   目标包外部的资源。  
  
-   部件级关系 (由<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=nameWithType>方法) 与源<xref:System.IO.Packaging.PackagePart>为：  
  
    -   在包中的另一个目标部件。  
  
    -   目标包外部的资源。  
  
 关系的源<xref:System.IO.Packaging.Package>或源<xref:System.IO.Packaging.PackagePart>被视为此关系的"所有者"。  删除源对象时，也删除源对象拥有的所有关系。  创建或删除的关系的过程不会以物理方式更改以任何方式的源或目标对象。  
  
 一个<xref:System.IO.Packaging.PackageDigitalSignature>（"数字签名"） 是组合的部件和关系表示数字签名中包含<xref:System.IO.Packaging.Package>。  数字签名标识，发起方，并验证已签名的部件和关系包含在<xref:System.IO.Packaging.Package>尚未修改。  
  
 包还支持数字版权管理 (DRM)，它允许中的内容元素<xref:System.IO.Packaging.Package>进行加密的经过授权的用户授予特定访问权限。  
  
 基于<xref:System.IO.Packaging.Package>体系结构中，<xref:System.Windows.Xps.Packaging.XpsDocument>是一种包类型设计用来存储文档基于开放式[XML 纸张规范 (XPS)](https://go.microsoft.com/fwlink/?LinkID=65761)。  
  
 .NET Framework 使用包来存储内容、 资源和页面和文档，默认情况下使用标准 ZIP 文件的关系。 你的应用程序可以使用任何 ZIP 文件，如<xref:System.IO.Packaging>类来存储，并根据需要保护任何类型或单个有效地访问容器中的数据文件数。  
  
 有关详细信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示了创建的基本步骤<xref:System.IO.Packaging.Package>。  在此示例中，创建一个包以包含文档和文档的一部分显示的图形图像。  (这是类似于在其中具有某一 HTML 文件的情况下\<i m G > 引用外部图像文件的标记。)两个<xref:System.IO.Packaging.PackageRelationship>还包含在包中的元素。  第一个"包级"关系，定义作为包的根元素的文档部分。  第二个"部件级"的关系定义的文档部分 （"源"的部分级关系） 和其使用的图像部分 （"目标"的部分级关系） 之间的关联。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定 (OPC) 规范</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=74494">开放打包约定的数字签名框架</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Packaging.Package" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package openFileAccess" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">包的文件 IO 权限。</param>
        <summary>初始化使用给定的 <see cref="T:System.IO.Packaging.Package" /> 的 <see cref="T:System.IO.FileAccess" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> 是一个受保护的构造函数的<xref:System.IO.Packaging.Package>抽象基类。 在派生类中调用时<xref:System.IO.Packaging.Package.%23ctor%2A>构造函数初始化派生类的新实例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="openFileAccess" /> 的值无效。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess, streaming As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess * bool -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package (openFileAccess, streaming)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
        <Parameter Name="streaming" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">包的文件 IO 权限。</param>
        <param name="streaming">如果打开包以进行流式处理，则为 <see langword="true" />，否则为 <see langword="false" />。</param>
        <summary>初始化使用给定 <see cref="T:System.IO.Packaging.Package" /> 和流选项的 <see cref="T:System.IO.FileAccess" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> 是一个受保护的构造函数的<xref:System.IO.Packaging.Package>抽象基类的抽象基类。 在派生类中调用时<xref:System.IO.Packaging.Package.%23ctor%2A>构造函数初始化派生类的新实例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="openFileAccess" /> 的值无效。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="package.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存并关闭包和所有基础部件流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关<xref:System.IO.Packaging.Package>类<xref:System.IO.Packaging.Package.Close%2A>并<xref:System.IO.Packaging.Package.Dispose%2A>执行相同的操作 — 没有理由来调用<xref:System.IO.Packaging.Package.Dispose%2A>如果调用<xref:System.IO.Packaging.Package.Close%2A>，或进行相反转换。  
  
 <xref:System.IO.Packaging.Package.Close%2A> 并<xref:System.IO.Packaging.Package.Dispose%2A>在内部调用<xref:System.IO.Packaging.Package.Flush%2A>。  
  
> [!NOTE]
>  `using`语句 (不同于`using`命名空间指令) 的建议的方法是<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>包。  [写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)并[读取包的示例](https://go.microsoft.com/fwlink/?LinkID=160034)演示了如何关闭和释放使用的包`using`语句。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建新的包部件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 初始化一个空<xref:System.IO.Stream>新部分。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType>方法可用于获取对与部件关联的流实例的引用。  
  
 有关包部件的详细信息，请参阅部分 1.1 开放打包约定 (OPC) 规范可供下载的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.PackagePart>，然后将数据存储到的部分。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> 在内部调用派生的类<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />方法实际创建部件基于在派生类中实现的物理格式。</para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">新部件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="contentType">数据流的内容类型。</param>
        <summary>使用给定的 URI 和内容类型创建新的未压缩部件。</summary>
        <returns>新创建的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 初始化一个空<xref:System.IO.Stream>新部分。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType>方法可用于获取对与部件关联的流实例的引用。  
  
 该部件<xref:System.IO.Packaging.PackagePart.CompressionOption%2A>是<xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=nameWithType>。  
  
 有关包部件的其他信息，请参阅部分 1.1 中可供下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.PackagePart>，然后将数据存储到的部分。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">包中已存在具有指定的 <paramref name="partUri" /> 的部件。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读的（无法添加新部件）。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> 在内部调用派生的类的<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />方法实际创建部件基于在派生类中实现的物理格式。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">新部件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <param name="contentType">数据流的内容类型。</param>
        <param name="compressionOption">数据流的压缩选项、<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> 或 <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 压缩。</param>
        <summary>使用给定的 URI、内容类型和压缩选项创建新部件。</summary>
        <returns>新创建的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的类，<xref:System.IO.Packaging.Package.CreatePart%2A>方法仅支持两个`compressionOption`值，<xref:System.IO.Packaging.CompressionOption.NotCompressed>或<xref:System.IO.Packaging.CompressionOption.Normal>压缩。  其他<xref:System.IO.Packaging.CompressionOption>的值<xref:System.IO.Packaging.CompressionOption.Maximum>， <xref:System.IO.Packaging.CompressionOption.Fast>，或<xref:System.IO.Packaging.CompressionOption.SuperFast>使用<xref:System.IO.Packaging.CompressionOption.Normal>压缩。  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 创建一个空<xref:System.IO.Stream>新部分。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType>方法可用于获取对与部件关联的流实例的引用。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.PackagePart>，然后将数据存储到的部分。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">包中已存在具有指定的 <paramref name="partUri" /> 的部件。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionOption" /> 值无效。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读的（无法添加新部件）。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 在内部调用派生的类的<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />方法实际创建部件基于在派生类中实现的物理格式。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ CreatePartCore(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="abstract member CreatePartCore : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePartCore (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">正在创建的部件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="contentType">数据流的内容类型。</param>
        <param name="compressionOption">数据流的压缩选项。</param>
        <summary>在派生类中重写时，会在包中创建一个新部件。</summary>
        <returns>创建的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生<xref:System.IO.Packaging.Package.CreatePartCore%2A>方法由调用<xref:System.IO.Packaging.Package.CreatePart%2A>方法创建的部件基于在派生类中实现的物理格式。  
  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生类实现的抽象<xref:System.IO.Packaging.Package>提供和使用类。  在默认操作中，<xref:System.IO.Packaging.Package.CreatePart%2A>在内部调用<xref:System.IO.Packaging.Package.CreatePartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类，以 ZIP 文件中创建新的部件。  
  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的类，<xref:System.IO.Packaging.Package.CreatePartCore%2A>方法仅支持两个`compressionOption`值，<xref:System.IO.Packaging.CompressionOption.NotCompressed>或<xref:System.IO.Packaging.CompressionOption.Normal>压缩。  其他<xref:System.IO.Packaging.CompressionOption>的值<xref:System.IO.Packaging.CompressionOption.Maximum>， <xref:System.IO.Packaging.CompressionOption.Fast>，或<xref:System.IO.Packaging.CompressionOption.SuperFast>使用<xref:System.IO.Packaging.CompressionOption.Normal>压缩。  
  
 有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生<see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />实现应作出任何假设订单或由执行的操作<see cref="Overload:System.IO.Packaging.Package.CreatePart" />调用它的方法。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建与给定的部件的包级别关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部件或资源之间的关联。  包级别关系可以是两种形式之一。  
  
-   之间<xref:System.IO.Packaging.Package>到目标<xref:System.IO.Packaging.PackagePart>包内。  
  
-   之间<xref:System.IO.Packaging.Package>到包外部的目标资源。  
  
 包关系中包被视为此关系的"所有者"。  当删除包时，还删除拥有的包的所有关系。  创建或删除关系的过程不会以物理方式更改目标部件或以任何方式的资源。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例说明了如何创建<xref:System.IO.Packaging.PackageRelationship>之间<xref:System.IO.Packaging.Package>和根文档部分。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="targetMode">指示目标部件对包来说是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 还是 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
        <param name="relationshipType">唯一定义关系的角色的 URI。</param>
        <summary>使用给定的 URI、目标模式和关系类型创建与部件的包级别关系。</summary>
        <returns>与指定部件的包级别关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部件或资源之间的关联。  包级别关系可以是两种形式之一。  
  
-   之间<xref:System.IO.Packaging.Package>指向目标部件在包中。  
  
-   之间<xref:System.IO.Packaging.Package>到包外部的目标资源。  
  
 包关系中包被视为此关系的"所有者"。  当删除包时，还删除拥有的包的所有关系。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 不会以物理方式更改目标部件或以任何方式的资源。  
  
 关系的目标不能为另一个关系。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必须是相对 URI 的格式根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。  内部的相对 URI 可以是任一绝对路径开头的正斜杠 （"/"） 字符如"/ page1.xaml"或"/ images/picture4.jpg"，或相对路径，如".../ imagespicture1.jpg"可解析对包根目录 （"/"） 作为基 URI。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是任一绝对或相对 URI 的格式正确根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。 `http://www.microsoft.com/page2.xml` 是绝对 URI 引用的外部目标资源"page2.xml"的一个示例。  "images/picture1.jpg"是一个相对 URI，还引用外部目标资源"1.jpg"但并解析对包本身的 URI 的示例。  
  
 `relationshipType` 必须是[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]根据构成[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。  下表显示了包级别`relationshipType`开放打包约定 (OPC) 规范所定义的 Uri。  
  
|数据包级关系|关系类型 URI|  
|---------------------------------|---------------------------|  
|核心属性|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|数字签名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|数字签名证书|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|数字签名源|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|缩略图|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 有关打包和包关系的详细信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.IO.Packaging.Package.CreateRelationship%2A>来创建<xref:System.IO.Packaging.PackageRelationship>之间<xref:System.IO.Packaging.Package>和根文档部分。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="targetUri" /> 部件为 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，而 <paramref name="targetUri" /> 为绝对 URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> 的值无效。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <param name="targetMode">指示目标部件对包来说是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 还是 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
        <param name="relationshipType">唯一定义关系的角色的 URI。</param>
        <param name="id">唯一 XML 标识符。</param>
        <summary>使用给定的 URI、目标模式、关系类型和 [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)] 创建与部件的包级别关系。</summary>
        <returns>与指定部件的包级别关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部件或资源之间的关联。  包级别关系可以是两种形式之一。  
  
-   之间<xref:System.IO.Packaging.Package>指向目标部件在包中。  
  
-   之间<xref:System.IO.Packaging.Package>到包外部的目标资源。  
  
 包关系中包被视为此关系的"所有者"。  当删除包时，还删除拥有的包的所有关系。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 不会以物理方式更改目标部件或以任何方式的资源。  
  
 关系的目标不能为另一个关系。  
  
 `id` 必须是有效的 XML 标识符。  `id`类型是 xsd:ID，而且必须遵循 XML 架构第 2 部分中所规定的命名约定： 数据类型规范 (请参阅[ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID))。  
  
 如果`id`指定为`null`将自动生成的唯一 ID。  `id`指定一个空字符串无效。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.Internal>，`targetUri`必须是相对 URI 的格式根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。  内部的相对 URI 可以是任一绝对路径开头的正斜杠 （"/"） 字符如"/ page1.xaml"或"/ images/picture4.jpg"，或相对路径，如".../ imagespicture1.jpg"可解析对包根目录 （"/"） 作为基 URI。  
  
 如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode.External>，`targetUri`可以是任一绝对或相对 URI 的格式正确根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。 `http://www.microsoft.com/page2.xml` 是绝对 URI 引用的外部目标资源"page2.xml"的一个示例。  "images/picture1.jpg"是一个相对 URI，还引用外部目标资源"1.jpg"但并解析对包本身的 URI 的示例。  
  
 `relationshipType` 必须是一个 URI，它根据形成[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。  下表显示了包级别`relationshipType`开放打包约定 (OPC) 规范所定义的 Uri。  
  
|数据包级关系|关系类型 URI|  
|---------------------------------|---------------------------|  
|核心属性|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|数字签名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|数字签名证书|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|数字签名源|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|缩略图|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 有关打包和包关系的其他信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.IO.Packaging.Package.CreateRelationship%2A>来创建<xref:System.IO.Packaging.PackageRelationship>之间<xref:System.IO.Packaging.Package>和根文档部分。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="targetUri" /> 部件为 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，而 <paramref name="targetUri" /> 为绝对 URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> 的值无效。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符；或者包中已存在具有指定的 <paramref name="id" /> 的部件。</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePart (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.DeletePart : Uri -&gt; unit" Usage="package.DeletePart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要删除的部件的 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</param>
        <summary>使用包中给定的 URI 删除部件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是相对 URI 的绝对路径，这将启动以正斜杠 （"/"） 字符组成。  绝对路径是相对于包根，并且根据正确[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 的通用语法规范。  "/ page1.xaml"和"/ images/picture4.jpg"是有效的部件 Uri 的示例。  
  
 如果具有指定的部件，会引发任何异常`partUri`不是包中。  (可以使用<xref:System.IO.Packaging.Package.PartExists%2A>方法，以确定是否具有指定的部件`partUri`包中。)  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> 在内部调用派生的类的<see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />方法实际删除部件基于在派生类中实现的物理格式。</para>
        </block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeletePartCore (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeletePartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member DeletePartCore : Uri -&gt; unit" Usage="package.DeletePartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要删除的 <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" />。</param>
        <summary>在派生类中重写时，会使用给定的 URI 删除部件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生类实现的抽象<xref:System.IO.Packaging.Package>提供和使用类。  在默认操作中，<xref:System.IO.Packaging.Package.DeletePart%2A>在内部调用<xref:System.IO.Packaging.Package.DeletePartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类来执行实际删除基于物理格式在派生类中实现的操作。  
  
 有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生的类<see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />调用实现<see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />方法的指定部分基于派生类中实现的物理格式。  
  
派生<see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />实现应作出任何假设订单或由执行的操作<see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />调用它的方法。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="package.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要删除的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的 <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
        <summary>删除包级别关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部件或资源之间的关联。  包级别关系可以是两种形式之一。  
  
-   之间<xref:System.IO.Packaging.Package>指向目标部件在包中。  
  
-   之间<xref:System.IO.Packaging.Package>到包外部的目标资源。  
  
 包关系中包被视为此关系的"所有者"。  当删除包时，还删除拥有的包的所有关系。  
  
 如果与指定的关系，则会引发任何异常`id`不是包中。  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> 不会以物理方式更改以任何方式的目标部件。  
  
 有关包关系的详细信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="package.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>刷新并保存所有部件和关系的内容，关闭包，并释放所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确保正确地保存所有更改，<xref:System.IO.Packaging.Package.Dispose%2A>还完成，将刷新，并关闭所有部件和包中包含的关系。  
  
 有关<xref:System.IO.Packaging.Package>类，<xref:System.IO.Packaging.Package.Dispose%2A>并<xref:System.IO.Packaging.Package.Close%2A>执行相同的操作-无需调用<xref:System.IO.Packaging.Package.Dispose%2A>如果调用<xref:System.IO.Packaging.Package.Close%2A>，或反之。  
  
 <xref:System.IO.Packaging.Package.Close%2A> 并<xref:System.IO.Packaging.Package.Dispose%2A>在内部调用<xref:System.IO.Packaging.Package.Flush%2A>。  
  
 分配和管理非内存资源的派生的类应重写此方法来释放资源时<xref:System.IO.Packaging.Package.Dispose%2A>调用。 此外应调用派生类重写<xref:System.IO.Packaging.Package.Flush%2A>和基本类<xref:System.IO.Packaging.Package.Dispose%2A>方法以确保始终执行的基本类清除。  
  
> [!NOTE]
>  `using`语句 (不同于`using`命名空间指令) 的建议的方法是<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>包。 [写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)演示如何关闭和释放使用的包`using`语句。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberSignature Language="F#" Value="member this.FileOpenAccess : System.IO.FileAccess" Usage="System.IO.Packaging.Package.FileOpenAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包的文件访问设置。</summary>
        <value>
          <see cref="T:System.IO.FileAccess" /> 值之一：<see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FileOpenAccess%2A> 属性没有默认值。  中指定文件访问设置<xref:System.IO.Packaging.Package.%23ctor%2A>构造函数调用时创建新的包，或者在<xref:System.IO.Packaging.Package.Open%2A>打开现有的包时调用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="package.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存包中包含的所有部件和关系的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.Flush%2A> 在内部调用派生的类的<xref:System.IO.Packaging.Package.FlushCore%2A>实现来执行实际的特定格式的刷新操作。  派生的类的<xref:System.IO.Packaging.Package.FlushCore%2A>方法负责实际保存到特定物理派生的类实现的部件和关系的内容。  
  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用基类。 在默认操作中，<xref:System.IO.Packaging.Package.Flush%2A>在内部调用<xref:System.IO.Packaging.Package.FlushCore%2A>ZIP 文件包中保存的部件和关系。  
  
 <xref:System.IO.Packaging.Package.Flush%2A> 自动调用<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>方法。  当<xref:System.IO.Packaging.Package.Close%2A>或<xref:System.IO.Packaging.Package.Dispose%2A>称为无需调用<xref:System.IO.Packaging.Package.Flush%2A>单独。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读的，无法进行修改。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> 在内部调用派生的类的<see cref="M:System.IO.Packaging.Package.FlushCore" />方法实际刷新部件基于在派生类中实现的物理格式。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FlushCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FlushCore();" />
      <MemberSignature Language="F#" Value="abstract member FlushCore : unit -&gt; unit" Usage="package.FlushCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，会将所有部件和关系的内容保存到派生类存储区中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FlushCore%2A> 由调用<xref:System.IO.Packaging.Package.Flush%2A>方法来执行实际的刷新操作基于派生类中实现的物理格式。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生<see cref="M:System.IO.Packaging.Package.FlushCore" />实现应不做任何假设订单或由执行的操作<see cref="M:System.IO.Packaging.Package.Flush" />调用它的方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPart (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ GetPart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.GetPart : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要返回的部件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>返回具有给定 URI 的部件。</summary>
        <returns>具有指定 <paramref name="partUri" /> 的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException>如果具有指定的部件，将引发`partUri`不存在。  
  
 <xref:System.IO.Packaging.Package.PartExists%2A>方法可以用于确定是否`partUri`引用现有部件。  
  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用基类。  在默认操作中，<xref:System.IO.Packaging.Package.GetPart%2A>在内部调用<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类以便从 ZIP 文件返回请求的一部分。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何查找、 检索和读取包中包含的部分。  有关完整示例，请参阅[读取包的示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</exception>
        <exception cref="T:System.InvalidOperationException">包中不存在具有指定 <paramref name="partUri" /> 的部件。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> 在内部调用派生的类<see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />方法实际刷新部件基于在派生类中实现的物理格式。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartCore (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ GetPartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member GetPartCore : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要检索的部件的 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</param>
        <summary>在派生类中重写时，会返回由给定 URI 寻址的部件。</summary>
        <returns>请求的部件；或者，如果包中不存在具有指定 <paramref name="partUri" /> 的部件，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用类。  在默认操作中，<xref:System.IO.Packaging.Package.GetPart%2A>在内部调用<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类来检索从 ZIP 文件的一部分。  
  
 有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生的类<see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />调用实现<see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />方法访问，并返回的指定的部分基于派生类中实现的物理格式。  
  
派生<see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />实现应作出任何假设订单或由执行的操作<see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />调用它的方法。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParts () As PackagePartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePartCollection ^ GetParts();" />
      <MemberSignature Language="F#" Value="member this.GetParts : unit -&gt; System.IO.Packaging.PackagePartCollection" Usage="package.GetParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回包中所有部件的集合。</summary>
        <returns>包中包含的所有 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetParts%2A> 返回所包含的所有部件的集合中包包括<xref:System.IO.Packaging.PackageRelationship>部件。  
  
 <xref:System.IO.Packaging.Package.GetParts%2A> 将永远不会返回`null`; 但是，如果包中不包含任何部分，则返回的集合将包含零个元素。  
  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用基类。  在默认操作中，<xref:System.IO.Packaging.Package.GetParts%2A>调用<xref:System.IO.Packaging.Package.GetPartsCore%2A>方法的<xref:System.IO.Packaging.ZipPackage>类以返回从 ZIP 文件的各个部分。  
  
 有关包和包部件的详细信息，请参阅部分 1.1 开放打包约定 (OPC) 规范可供下载的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.IO.Packaging.Package.GetParts%2A>方法，获取集合中包含的部件<xref:System.IO.Packaging.Package>。  有关完整的程序源代码，请参阅[使用数字签名示例创建一个包](https://go.microsoft.com/fwlink/?LinkID=159966)。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> 在内部调用派生的类<see cref="M:System.IO.Packaging.Package.GetPartsCore" />方法实际刷新部件基于在派生类中实现的物理格式。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartsCore () As PackagePart()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::IO::Packaging::PackagePart ^&gt; ^ GetPartsCore();" />
      <MemberSignature Language="F#" Value="abstract member GetPartsCore : unit -&gt; System.IO.Packaging.PackagePart[]" Usage="package.GetPartsCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，会返回包中所有部件的数组。</summary>
        <returns>包中包含的所有部件的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在派生的类<xref:System.IO.Packaging.Package.GetPartsCore%2A>调用实现<xref:System.IO.Packaging.Package.GetParts%2A>方法访问，并返回部分数组基于派生类中实现的物理格式。  
  
 默认情况下<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用类。  在默认操作中，<xref:System.IO.Packaging.Package.GetParts%2A>在内部调用<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类从 ZIP 文件中检索各个部分。  
  
 有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生<see cref="M:System.IO.Packaging.Package.GetPartsCore" />实现应作出任何假设订单或由执行的操作<see cref="M:System.IO.Packaging.Package.GetParts" />调用它的方法。</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>返回具有给定标识符的包级别关系。</summary>
        <returns>具有指定 <paramref name="id" /> 的包级别关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。 `id`类型是 xsd:ID，而且必须遵循中所规定的命名约定[3.3.8 XML 架构第 2 部分： 数据类型规范](https://www.w3.org/TR/xmlschema-2/#ID)。  
  
 有关打包和包关系的其他信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.InvalidOperationException">包中不存在具有指定 <paramref name="id" /> 的关系。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回所有包级别关系的集合。</summary>
        <returns>包中包含的所有包级别关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 将永远不会返回`null`; 不过，如果包中不包含任何包级别关系，则返回的集合可能包含零个元素。  
  
 包级别关系定义包和关联的目标部件或资源之间的关联。  包级别关系可以是两种形式之一。  
  
-   之间<xref:System.IO.Packaging.Package>指向目标部件在包中。  
  
-   之间<xref:System.IO.Packaging.Package>到包外部的目标资源。  
  
 包关系中包被视为此关系的"所有者"。  当删除包时，还删除拥有的包的所有关系。  创建或删除关系的过程不会以物理方式更改目标部件或以任何方式的资源。  
  
 有关打包和包关系的其他信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范的<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">在集合中匹配和返回的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
        <summary>返回与给定的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 匹配的所有包级别关系的集合。</summary>
        <returns>与指定的 <paramref name="relationshipType" /> 匹配的包级别关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 将永远不会返回`null`; 不过，返回的集合可能包含零个元素，如果没有具有指定的包级别关系`relationshipType`。  
  
 下表显示了包级别`relationshipType`开放打包约定 (OPC) 规范所定义的 Uri。  
  
|数据包级关系|关系类型 URI|  
|---------------------------------|---------------------------|  
|核心属性|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|数字签名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|数字签名证书|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|数字签名源|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|缩略图|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何检索已为包定义的关系。  有关完整示例，请参阅[读取包的示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> 是一个空字符串。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开包。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.Package>包含<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>一起存储的数据元素。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">在其上打开包的 IO 流。</param>
        <summary>在给定的 IO 流上打开包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <summary>打开位于给定路径和文件名的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 这<xref:System.IO.Packaging.Package.Open%2A>方法打开包具有默认特性<xref:System.IO.FileMode.OpenOrCreate>， <xref:System.IO.FileAccess.ReadWrite>，和<xref:System.IO.FileShare.None>（若要指定不同的属性使用的另一个 Open 方法重载之一）。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.Package>包含<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>一起存储的数据元素。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">在其上打开包的 IO 流。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <summary>使用给定的 IO 流和文件模式打开包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 值无效。</exception>
        <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <summary>使用给定的文件模式打开位于给定路径的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 这<xref:System.IO.Packaging.Package.Open%2A>方法打开包具有默认特性<xref:System.IO.FileAccess.ReadWrite>和<xref:System.IO.FileShare.None>（若要指定不同的属性使用的另一个 Open 方法重载之一）。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.Package>包含<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>一起存储的数据元素。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 的值无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">在其上打开包的 IO 流。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <param name="packageAccess">用于打开包的文件访问。</param>
        <summary>使用给定的 IO 流、文件模式和文件访问设置打开包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值无效。</exception>
        <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <param name="packageAccess">用于打开包的文件访问。</param>
        <summary>使用给定的文件模式和文件访问设置打开位于给定路径的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 这<xref:System.IO.Packaging.Package.Open%2A>方法中打开的包，默认值<xref:System.IO.FileShare.None>特性 (若要指定不同的属性使用<xref:System.IO.Packaging.Package.Open%2A>方法重载)。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何打开和读取<xref:System.IO.Packaging.Package>，其中包含<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>一起存储的数据元素。  有关完整示例，请参阅[读取包的示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess, packageShare As FileShare) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess, System::IO::FileShare packageShare);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess, packageShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <param name="packageAccess">用于打开包的文件访问。</param>
        <param name="packageShare">用于打开包的文件共享模式。</param>
        <summary>使用给定的文件模式、文件访问和文件共享设置打开位于给定路径的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是由默认包类型<xref:System.IO.Packaging.Package.Open%2A>方法。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新<xref:System.IO.Packaging.Package>包含<xref:System.IO.Packaging.PackageRelationship>和<xref:System.IO.Packaging.PackagePart>一起存储的数据元素。  有关完整示例，请参阅[写入包的示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" />、<paramref name="packageAccess" /> 或 <paramref name="packageShare" /> 的值无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PackageProperties : System.IO.Packaging.PackageProperties" Usage="System.IO.Packaging.Package.PackageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包的核心属性。</summary>
        <value>包的核心属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关核心包属性的其他信息，请参阅第 3.1 节中可供下载的开放式打包约定 (OPC) 规范在<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartExists (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PartExists(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member PartExists : Uri -&gt; bool&#xA;override this.PartExists : Uri -&gt; bool" Usage="package.PartExists partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要检查的部件的 <see cref="T:System.Uri" />。</param>
        <summary>指示具有给定 URI 的部件是否在包中。</summary>
        <returns>如果具有指定的 <paramref name="partUri" /> 的部件在包中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri`应以正斜杠字符开头"/"且绝对于包的根目录。  
  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取信息）。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="package.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要检查的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>指示具有给定 ID 的包级别关系是否包含在包中。</summary>
        <returns>如果具有指定的 <paramref name="id" /> 的包级别关系在包中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关其他信息，请参阅下载的开放式打包约定 (OPC) 规范<https://go.microsoft.com/fwlink/?LinkID=71255>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，不是为应用程序使用而设计的。  改用类型安全的 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>