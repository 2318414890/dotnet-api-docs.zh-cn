<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5798da4527033c1c50c91971ade4a4177c5c15ce" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729201" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有关时区调整的信息，例如与夏令时的相互转换。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule>类的有效起始和结束日期的特定时间更改到和从夏时制，分别定义，以及其增量 （的确切数据量依据进行此调整会导致时区的标准时间更改）。 此外，两个属性返回<xref:System.TimeZoneInfo.TransitionTime>定义从标准时间与每个转换发生时的对象。  
  
> [!NOTE]
>  实例<xref:System.TimeZoneInfo.AdjustmentRule>类是不可变。 一旦创建对象后，无法修改其值。  
  
 若要创建<xref:System.TimeZoneInfo.AdjustmentRule>对象，请调用`static`(`Shared`在 Visual Basic 中)<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType>方法。 然后，你可以提供的数组<xref:System.TimeZoneInfo.AdjustmentRule>的对象添加到两个重载<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法。 若要检索特定时区的调整规则，请调用其<xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType>方法，返回的数组<xref:System.TimeZoneInfo.AdjustmentRule>对象。  
  
   
  
## Examples  
 下面的示例检索在本地系统上定义的所有时区，并显示有关其调整规则的完整信息。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 下面是输出的生成该示例一小部分。 确切的输出将因操作系统和在其运行该示例的日期。  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" />
        <Parameter Name="dateEnd" Type="System.DateTime" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" />
      </Parameters>
      <Docs>
        <param name="dateStart">调整规则的生效日期。 如果 <c>dateStart</c> 参数的值为 <see langword="DateTime.MinValue.Date" />，那么这是时区的第一个有效的调整规则。</param>
        <param name="dateEnd">执行调整规则的最后日期。 如果 <c>dateEnd</c> 参数的值为 <see langword="DateTime.MaxValue.Date" />，则调整规则无结束日期。</param>
        <param name="daylightDelta">调整所产生的时间更改。 将该值添加到时区的 <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> 属性，以便获取从协调世界时 (UTC) 开始的正确的夏令时偏移量。 该值的范围介于 -14 到 14。</param>
        <param name="daylightTransitionStart">定义夏令时的开始时间的对象。</param>
        <param name="daylightTransitionEnd">定义夏令时的结束时间的对象。</param>
        <summary>为特定时区创建新调整规则。</summary>
        <returns>表示新调整规则的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于创建自定义时区的一个或多个调整规则。 数组<xref:System.TimeZoneInfo.AdjustmentRule>然后通过调用此方法返回的对象可以作为传递`adjustmentRules`两个重载的参数<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 该示例阐释了此过程。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>方法可以用于仅定义新的时区调整规则; 它不能用于修改现有的时区调整规则。  
  
 `dateStart`和`dateEnd`参数必须是不带时间部分的日期值或<xref:System.ArgumentException>引发。 可以通过检索删除时间组件<xref:System.DateTime>值的日期和时间的<xref:System.DateTime.Date%2A>属性中的以下语句所示：  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 <xref:System.DateTime.Kind%2A>属性`dateStart`和`dateEnd`参数还必须是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
 值`daylightDelta`参数可以介于-14 到 14。 总和`daylightDelta`参数和`baseUtcOffset`对的调用中使用参数<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法也必须必须介于-14 到 14 或<xref:System.InvalidTimeZoneException>引发。  
  
> [!NOTE]
>  `daylightDelta`参数定义时区的标准时间和其夏时制之间的差异。 它不是定义时区的标准时间偏移量从协调世界时 (UTC)。 <xref:System.TimeZoneInfo>类假定此相对于 UTC 的偏移量为时区的整个生存期常数。 若要反映与不由应用程序的调整规则引起的 UTC 的时区偏移量的变化，你必须使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法来创建新的自定义时区。  
  
   
  
## Examples  
 下面的示例创建备用的中部标准时区并定义三个调整规则的高峰期间 1976年-1986、 1987年-2006年，2007年和更高版本。 这些规则添加到泛型<xref:System.Collections.Generic.List%601>其元素然后复制到的对象<xref:System.TimeZoneInfo.AdjustmentRule>数组。 此数组然后用于调用<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">参数 <paramref name="dateStart" /> 或 <paramref name="dateEnd" /> 的属性 <see cref="P:System.DateTime.Kind" /> 的值不等于 <see cref="F:System.DateTimeKind.Unspecified" />。  
  
 或  
  
 <paramref name="daylightTransitionStart" /> 参数等于 <paramref name="daylightTransitionEnd" /> 参数。  
  
 或  
  
 <paramref name="dateStart" /> 或 <paramref name="dateEnd" /> 参数包含一个日期的时间值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dateEnd" /> 早于 <paramref name="dateStart" />。  
  
 或  
  
 <paramref name="daylightDelta" /> 小于 -14 或大于 14。  
  
 或  
  
 <paramref name="daylightDelta" /> 参数的 <see cref="P:System.TimeSpan.Milliseconds" /> 属性不等于 0。  
  
 或  
  
 <paramref name="daylightDelta" /> 参数的 <see cref="P:System.TimeSpan.Ticks" /> 属性不等于整秒数。</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取调整规则失效的日期。</summary>
        <value>
          <see cref="T:System.DateTime" /> 值，指示调整规则失效的日期。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A>属性是不带时间部分的日期值。  
  
 因为当前的调整规则的结束日期通常不知道，你可以分配`DateTime.MaxValue.Date`到<xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A>时创建自定义的调整规则的属性。  
  
> [!IMPORTANT]
>  如果没有人信服的理由，否则，应定义要在此期间时区采用标准时间的时间间隔内发生的调整规则的结束日期。 如果没有令人信服的理由，否则，不应定义要在此期间时区使用夏令时的时间间隔内发生的调整规则的结束日期。 例如，如果从夏令时的时区的转换发生在年 3 月的第三个星期日和其转换为夏时制发生在 10 月的第一个星期日，调整规则的有效结束日期不应为特定的年 12 月 31 日年，因为该日期的夏时制段内发生。  
  
 默认情况下，Windows XP 中的注册表中定义一个调整规则，其结束日期为 9999 年 12 月 31 日星期五 (的值`DateTime.MaxValue.Date`)，为每个时区。 对于在美国国内的时区，在 Windows Vista 注册表将两个调整规则定义：  
  
-   年 1 月 1 日星期一 0001 到 2006 年 12 月 31日日，星期日。  
  
-   星期一，01，2007 2007年 1 月，至 12 月 31 日，星期五，9999。  
  
 这意味着，虽然时区调整规则存储在注册表中可用于执行当前所在的时区相关操作，但它们不能可靠地用于检索历史时区信息。 有关在历史时区识别应用程序中定义自定义的时区，并带有多个可用的调整规则的信息，请参阅[如何： 创建带有调整规则的时间区域](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)。  
  
   
  
## Examples  
 下面的示例显示有关在本地计算机的系统注册表中，包括起始和结束日期其调整规则定义的时区的所有信息。  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取调整规则生效的日期。</summary>
        <value>一个 <see cref="T:System.DateTime" /> 值，该值指示调整规则生效的日期。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A>属性是不带时间部分的日期值。 它定义在其特定的调整规则生效的日期。  这是一套 （这通常由一个转换为夏时制和定义一个转换回标准时间） 的转换将生效的日期。 例如，调整规则可能进入 2017 年 1 月 1 日，影响，它提供了到年 3 月的第二个星期日夏时制转换回标准时间转换年 11 月的第一个星期日。 请注意，调整规则的开始日期不依赖于第一个转换的日期。  
  
 你可以分配`DateTime.MinValue.Date`到<xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A>属性在创建时使用的自定义的调整规则在时区识别应用程序中，没有用于历史时区信息。  
  
> [!IMPORTANT]
>  如果没有人信服的理由，否则，应定义要在此期间时区采用标准时间的时间间隔内发生的调整规则的开始日期。 如果没有令人信服的理由，否则，不应定义调整规则的开始日期时间时区采用夏时制的时间间隔内发生。 例如，如果从夏令时的时区的转换发生在年 3 月的第三个星期日和其转换为夏时制发生在 10 月的第一个星期日，调整规则的有效开始日期不应为 1 月 1 日的特定年，因为该日期的夏时制段内发生。  
  
 默认情况下，Windows XP 中的注册表中定义一个调整规则的开始日期为 0001 年 1 月 1 日星期一 (的值`DateTime.MinValue.Date`)，为每个时区。 对于在美国国内的时区，在 Windows Vista 注册表将两个调整规则定义：  
  
-   年 1 月 1 日星期一 0001 到 2006 年 12 月 31日日，星期日。  
  
-   星期一，01，2007 2007年 1 月，至 12 月 31 日，星期五，9999。  
  
 这意味着，虽然时区调整规则存储在注册表中可用于执行当前所在的时区相关操作，但它们不能可靠地用于检索历史时区信息。 有关在历史时区识别应用程序中定义自定义的时区，并带有多个可用的调整规则的信息，请参阅[如何： 创建带有调整规则的时间区域](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)。  
  
   
  
## Examples  
 下面的示例显示有关在本地计算机的系统注册表中，包括起始和结束日期其调整规则定义的时区的所有信息。  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取构成时区的夏令时所需的时间量。 将此时间量从协调世界时 (UTC) 添加到时区偏移量。</summary>
        <value>一个 <see cref="T:System.TimeSpan" /> 对象，该对象指示将添加到调整规则引起的标准时间更改的时间量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下公式定义时区的夏时制：  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 值<xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A>属性介于 14 小时到-14 小时。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A>属性衡量时区的标准时间与其夏时制之间的差值。 它不适用于更改时区的标准偏移量从协调世界时 (UTC)。 若要表示已更改其标准时间相对于 UTC 的时区，必须调用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法来创建新的时区。  
  
 最常用的值的<xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A>属性是 1.0 的小时数。 夏时制调整规则的应用程序增加一小时时区偏移量从协调世界时 (UTC)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取有关每年何时从夏时制转换回标准时间的信息。</summary>
        <value>一个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象，定义每年何时从夏时制转换回时区的标准时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime>返回对象<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A>属性定义的固定日期规则或恢复到标准时间的浮动日期规则。 固定日期规则提供月、 日和时间发生转换。 浮动日期规则提供月、 周、 每周的日期和时间转换发生在一天中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取有关每年何时从标准时间转换为夏时制的信息。</summary>
        <value>一个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象，定义每年何时从时区的标准时间转换为夏时制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime>返回对象<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A>属性定义的固定日期规则或浮动日期规则转换为夏时制。 固定日期规则提供月、 日和时间发生转换。 浮动日期规则提供月，每周日期是星期几，并在转换发生的一天的时间。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" />
      </Parameters>
      <Docs>
        <param name="other">要与当前对象进行比较的对象。</param>
        <summary>确定当前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象是否等于第二个 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象。</summary>
        <returns>
          如果两个 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象具有相等的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定是否两个<xref:System.TimeZoneInfo.AdjustmentRule>对象是否相等，<xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29>方法比较每个对象的成员值。 两个调整规则是否相等，如果它们具有相同的生效日期、 相同的增量和的相同值<xref:System.TimeZoneInfo.TransitionTime>对象由其<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A>和<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A>属性。  
  
   
  
## Examples  
 下面的示例调用<xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType>方法来为加拿大中部标准时间和墨西哥标准时间中部标准时间比较的调整规则。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 此代码将向控制台显示以下输出：  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
        <returns>一个 32 位有符号整数，用作当前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
        <summary>在 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的反序列化完成时运行。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的对象。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的数据填充该对象。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
  </Members>
</Type>