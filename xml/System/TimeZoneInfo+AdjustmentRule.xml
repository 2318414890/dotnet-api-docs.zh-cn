<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="467d3308862a112d978e033e7a42d185de5d1415" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727722" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo.AdjustmentRule = class&#xA;    interface IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides information about a time zone adjustment, such as the transition to and from daylight saving time.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule>类的有效起始和结束日期的特定时间更改到和从夏时制，分别定义，以及其增量 （具体量调整用来使时区的标准时间更改）。 此外，两个属性返回<xref:System.TimeZoneInfo.TransitionTime>定义每个转换到和从标准时间发生时的对象。  
  
> [!NOTE]
>  实例<xref:System.TimeZoneInfo.AdjustmentRule>类是不可变。 一旦已创建一个对象，不能修改其值。  
  
 若要创建<xref:System.TimeZoneInfo.AdjustmentRule>对象，请调用`static`(`Shared`在 Visual Basic 中)<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType>方法。 然后可以提供的数组<xref:System.TimeZoneInfo.AdjustmentRule>对象为两个重载<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法。 若要检索特定时区的调整规则，请调用其<xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType>方法，返回的数组<xref:System.TimeZoneInfo.AdjustmentRule>对象。  
  
   
  
## Examples  
 下面的示例检索所有本地系统上定义的时区，并显示有关其调整规则的完整信息。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 下面是输出的生成该示例的一小部分。 确切输出根据操作系统和在其运行该示例的日期会有所不同。  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="F#" Value="static member CreateAdjustmentRule : DateTime * DateTime * TimeSpan * TimeZoneInfo.TransitionTime * TimeZoneInfo.TransitionTime -&gt; TimeZoneInfo.AdjustmentRule" Usage="System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule (dateStart, dateEnd, daylightDelta, daylightTransitionStart, daylightTransitionEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" />
        <Parameter Name="dateEnd" Type="System.DateTime" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" />
      </Parameters>
      <Docs>
        <param name="dateStart">The effective date of the adjustment rule. If the value of the <c>dateStart</c> parameter is <see langword="DateTime.MinValue.Date" />, this is the first adjustment rule in effect for a time zone.</param>
        <param name="dateEnd">The last date that the adjustment rule is in force. If the value of the <c>dateEnd</c> parameter is <see langword="DateTime.MaxValue.Date" />, the adjustment rule has no end date.</param>
        <param name="daylightDelta">The time change that results from the adjustment. This value is added to the time zone's <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.</param>
        <param name="daylightTransitionStart">An object that defines the start of daylight saving time.</param>
        <param name="daylightTransitionEnd">An object that defines the end of daylight saving time.</param>
        <summary>Creates a new adjustment rule for a particular time zone.</summary>
        <returns>An object that represents the new adjustment rule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于创建自定义时区的一个或多个调整规则。 一个数组<xref:System.TimeZoneInfo.AdjustmentRule>然后通过调用此方法返回的对象可以作为传递`adjustmentRules`两个重载的参数<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 该示例阐释了此过程。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>可以使用方法只需定义新时区的调整规则; 它不能用于修改现有的时区调整规则。  
  
 `dateStart`并`dateEnd`参数必须是不带时间部分的日期值或<xref:System.ArgumentException>引发。 可以通过检索中删除时间组件<xref:System.DateTime>中的日期和时间的值<xref:System.DateTime.Date%2A>属性，如以下语句所示：  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 <xref:System.DateTime.Kind%2A>的属性`dateStart`并`dateEnd`参数也必须<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
 值`daylightDelta`参数的范围可以介于-14 到 14。 总和`daylightDelta`参数和`baseUtcOffset`对调用中使用的参数<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法也必须必须介于-14 到 14 或<xref:System.InvalidTimeZoneException>引发。  
  
> [!NOTE]
>  `daylightDelta`参数定义时区的标准时间和其夏时制之间的差异。 它不是定义时区的标准时间偏移量从协调世界时 (UTC)。 <xref:System.TimeZoneInfo>类假定此相对于 UTC 的偏移量为常量的整个生命期的时区。 以反映与不由应用程序的调整规则引起的 UTC 时区的偏移量中的更改，必须使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法来创建新的自定义时区。  
  
   
  
## Examples  
 以下示例创建备用的中部标准时区，并定义三个调整规则的段 1976年 1986，1987年-2006年和 2007年及更高版本。 这些规则添加到泛型<xref:System.Collections.Generic.List%601>对象，然后将它的元素复制到<xref:System.TimeZoneInfo.AdjustmentRule>数组。 然后对的调用中使用此数组<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter does not equal <see cref="F:System.DateTimeKind.Unspecified" />.  -or-  The <paramref name="daylightTransitionStart" /> parameter is equal to the <paramref name="daylightTransitionEnd" /> parameter.  -or-  The <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter includes a time of day value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dateEnd" /> is earlier than <paramref name="dateStart" />.  -or-  <paramref name="daylightDelta" /> is less than -14 or greater than 14.  -or-  The <see cref="P:System.TimeSpan.Milliseconds" /> property of the <paramref name="daylightDelta" /> parameter is not equal to 0.  -or-  The <see cref="P:System.TimeSpan.Ticks" /> property of the <paramref name="daylightDelta" /> parameter does not equal a whole number of seconds.</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateEnd : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date when the adjustment rule ceases to be in effect.</summary>
        <value>
          <see cref="T:System.DateTime" /> 值，指示调整规则失效的日期。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A>属性是不带时间部分的日期值。  
  
 因为通常不知道当前的调整规则的结束日期，可以将分配`DateTime.MaxValue.Date`到<xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A>时创建自定义的调整规则的属性。  
  
> [!IMPORTANT]
>  除非有其他人信服的理由，否则应定义调整规则的结束日期，以便在此期间的时区实行标准时间的时间间隔内发生。 除非有充足的理由这样做，否则不应定义调整规则的结束日期，以便在此期间的时区实行夏时制的时间间隔内发生。 例如，如果从夏时制时区的转换发生在年 3 月的第三个星期日和为夏时制转换发生在年 10 月的第一个星期日，调整规则的有效结束日期不应年 12 月 31 日的特定年份 （因为夏时制时间内发生，该日期）。  
  
 默认情况下，Windows XP 中的注册表定义一个调整规则，其结束日期为 9999 年 12 月 31 日星期五 (的值`DateTime.MaxValue.Date`)，为每个时区。 对于在美国的时区，Windows Vista 中的注册表定义两个调整规则：  
  
-   年 1 月 1 日星期一 0001 到 2006 年 12 月 31日日，星期日。  
  
-   星期一，2007 年 1 月 1 日，，到 12 月 31 日，星期五，9999。  
  
 这意味着，尽管时区调整规则存储在注册表中可用于执行当前与时区相关的操作，但它们不能可靠地用于检索历史时区信息。 在历史时区感知应用程序中定义多个调整规则，可以使用自定义时区的信息，请参阅[如何： 创建时间的时区调整规则](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)。  
  
   
  
## Examples  
 以下示例显示有关所有定义在本地计算机的系统注册表中，包括起始和结束日期的其调整规则的时区信息。  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateStart : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date when the adjustment rule takes effect.</summary>
        <value>一个 <see cref="T:System.DateTime" /> 值，该值指示调整规则生效的日期。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A>属性是不带时间部分的日期值。 它定义在其特定的调整规则生效的日期。  这是一组转换 （这通常由一个转换为夏时制和定义一个转换回标准时间） 将生效的日期。 例如，调整规则可能会将从 2017 年 1 月 1 日，提供到夏时制年 3 月的第二个星期日的转换以及转换为标准时间的年 11 月的第一个星期日。 请注意，调整规则的开始日期不绑定到的第一个转换的日期。  
  
 可以将分配`DateTime.MinValue.Date`到<xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A>属性在创建时使用的自定义的调整规则的时区感知应用程序，无需使用历史时区信息。  
  
> [!IMPORTANT]
>  除非有其他人信服的理由，否则应定义要在此期间的时区实行标准时间的时间间隔内发生的调整规则的开始日期。 除非有充足的理由这样做，否则不应定义调整规则的开始日期时间时区采用夏时制的时间间隔内发生。 例如，如果从夏时制时区的转换发生在年 3 月的第三个星期日和为夏时制转换发生在年 10 月的第一个星期日，调整规则的有效开始日期不应特定的 1 月 1 日年份 （因为夏时制时间内发生，该日期）。  
  
 默认情况下，Windows XP 中的注册表定义一个调整规则，其开始日期是 0001 年 1 月 1 日星期一 (值`DateTime.MinValue.Date`)，为每个时区。 对于在美国的时区，Windows Vista 中的注册表定义两个调整规则：  
  
-   年 1 月 1 日星期一 0001 到 2006 年 12 月 31日日，星期日。  
  
-   星期一，2007 年 1 月 1 日，，到 12 月 31 日，星期五，9999。  
  
 这意味着，尽管时区调整规则存储在注册表中可用于执行当前与时区相关的操作，但它们不能可靠地用于检索历史时区信息。 在历史时区感知应用程序中定义多个调整规则，可以使用自定义时区的信息，请参阅[如何： 创建时间的时区调整规则](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)。  
  
   
  
## Examples  
 以下示例显示有关所有定义在本地计算机的系统注册表中，包括起始和结束日期的其调整规则的时区信息。  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightDelta : TimeSpan" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).</summary>
        <value>一个 <see cref="T:System.TimeSpan" /> 对象，该对象指示将添加到调整规则引起的标准时间更改的时间量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的公式定义时区的夏时制：  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 值<xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A>属性介于 14 小时到-14 小时。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A>属性来测量其夏时制时区的标准时间之间的区别。 它不适用于更改时区的标准偏移量从协调世界时 (UTC)。 若要表示已更改其标准时间偏移量与 UTC 的时区，必须调用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法来创建新的时区。  
  
 最常见的值的<xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A>属性是 1.0 的小时数。 夏令时调整规则的应用程序会增加一小时的时区的偏移量从协调世界时 (UTC)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionEnd : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the annual transition from daylight saving time back to standard time.</summary>
        <value>一个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象，定义每年何时从夏时制转换回时区的标准时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime>返回对象<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A>属性定义的固定日期规则或浮动日期规则以便返回给标准时间。 固定日期规则提供月、 日和在转换发生的时间。 浮动日期规则提供月、 周、 日期是星期几，以及在转换发生的时间。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionStart : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the annual transition from standard time to daylight saving time.</summary>
        <value>一个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象，定义每年何时从时区的标准时间转换为夏时制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime>返回对象<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A>属性定义的固定日期规则或浮动日期规则转换为夏时制。 固定日期规则提供月、 日和在转换发生的时间。 浮动日期规则提供了月份周日期是星期几，并在转换发生的时间。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo.AdjustmentRule -&gt; bool" Usage="adjustmentRule.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" />
      </Parameters>
      <Docs>
        <param name="other">The object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object is equal to a second <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects have equal values; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定两个<xref:System.TimeZoneInfo.AdjustmentRule>对象是否相等，<xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29>方法将每个对象的成员值进行比较。 两个调整规则是否相等，如果它们具有相同有效日期、 相同的增量和的相同值<xref:System.TimeZoneInfo.TransitionTime>返回的对象及其<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A>和<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A>属性。  
  
   
  
## Examples  
 下面的示例调用<xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType>方法用来比较中部标准时间与加拿大中部标准时间和墨西哥标准时间的调整规则。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 此代码向控制台显示以下输出：  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="adjustmentRule.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
        <returns>A 32-bit signed integer that serves as the hash code for the current <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of a <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object is completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data that is required to serialize this object.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
  </Members>
</Type>