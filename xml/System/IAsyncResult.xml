<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IAsyncResult.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52276b9f380f6f18b31bcbd48397cc4ae980b77ed.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2276b9f380f6f18b31bcbd48397cc4ae980b77ed</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IAsyncResult">
          <source>Represents the status of an asynchronous operation.</source>
          <target state="translated">表示异步操作的状态。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface is implemented by classes containing methods that can operate asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>接口由包含可异步操作的方法的类实现。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>It is the return type of methods that initiate an asynchronous operation, such as <ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType&gt;</ph>, and it is passed to methods that conclude an asynchronous operation, such as <ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">它是启动异步操作，如的方法的返回类型<ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType&gt;</ph>，以及将其传递到方法结束异步操作，如<ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> objects are also passed to methods invoked by <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegates when an asynchronous operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 对象还传递给调用的方法<ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>委托异步操作完成时。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>An object that supports the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.</source>
          <target state="translated">支持的对象<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>接口将异步操作的状态信息存储并提供的同步对象，以使线程能够在操作完成时发出信号。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is the implementation of <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> that is returned by the <ph id="ph3">`BeginInvoke`</ph> method when you use a delegate to call a method asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>类是实现<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>返回<ph id="ph3">`BeginInvoke`</ph>方法时使用委托来以异步方式调用方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>For a detailed description of how the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface is used, see the <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept> topic.</source>
          <target state="translated">有关如何的详细说明<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>使用接口，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph>属性来获取<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>，以及如何在委托上等待的异步调用。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">当异步调用完成时 <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 会收到信号，而你可以通过调用 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 方法来等待它。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">此示例由两个类组成： 包含以异步方式调用的方法和包含的类的类<ph id="ph1">`Main`</ph>进行调用的方法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">有关详细信息和使用委托来以异步方式调用方法的更多示例，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.AsyncState">
          <source>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</source>
          <target state="translated">获取一个用户定义的对象，该对象限定或包含有关异步操作的信息。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>A user-defined object that qualifies or contains information about an asynchronous operation.</source>
          <target state="translated">一个用户定义的对象，限定或包含有关异步操作的信息。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>This property returns the object that is the last parameter of the method that initiates an asynchronous operation.</source>
          <target state="translated">此属性返回启动异步操作的方法的最后一个参数的对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>The following code example demonstrates how the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> property is used to pass information to a callback method.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph>属性用于将信息传递给回调方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>The last parameter of the <ph id="ph1">`BeginInvoke`</ph> method call is a format string, which the callback method uses to format an output message.</source>
          <target state="translated">最后一个参数<ph id="ph1">`BeginInvoke`</ph>方法调用是一个格式字符串，该回调方法用来设置输出消息的格式。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">此示例由两个类组成： 包含以异步方式调用的方法和包含的类的类<ph id="ph1">`Main`</ph>进行调用的方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">有关此回调示例的工作原理的详细信息和使用委托来以异步方式调用方法的更多示例，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>Implement this property to allow the caller of an asynchronous operation to obtain an application-defined object specified at the start of the operation.</source>
          <target state="translated">实现此属性以允许异步操作的调用方，以获取在该操作开始时指定的应用程序定义的对象。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>This object can be used to pass state information for the asynchronous operation to an <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> that you provide.</source>
          <target state="translated">此对象可以用于传递到的异步操作的状态信息<ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>你提供。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">获取用于等待异步操作完成的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">用于等待异步操作完成的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The return value allows the client to wait for an asynchronous operation to complete instead of polling <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> until the operation concludes.</source>
          <target state="translated">返回值允许客户端等待异步操作以完成而不是轮询<ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph>直到操作结束。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The return value can be used to perform a <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> operation.</source>
          <target state="translated">返回值可以用于执行<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>操作。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The common language runtime supplies a number of waitable objects, such as <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Mutex&gt;</ph>, all of which mirror Win32 synchronization primitives.</source>
          <target state="translated">公共语言运行时提供了大量可等待对象，如<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>，和<ph id="ph3">&lt;xref:System.Threading.Mutex&gt;</ph>，所有这些镜像 Win32 同步基元。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph>属性来获取<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>，以及如何在委托上等待的异步调用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">当异步调用完成时 <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 会收到信号，而你可以通过调用 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 方法来等待它。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">此示例由两个类组成： 包含以异步方式调用的方法和包含的类的类<ph id="ph1">`Main`</ph>进行调用的方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">有关详细信息和使用委托来以异步方式调用方法的更多示例，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The object that implements <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> does not need to create the <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> until the <ph id="ph3">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> property is read.</source>
          <target state="translated">实现的对象<ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>不需要创建<ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>直到<ph id="ph3">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>属性为只读。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>It is the choice of the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> implementer.</source>
          <target state="translated">它是选择<ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>实施者。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>However, if the implementer creates <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>, it is the responsibility of the implementer to signal the <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that will terminate the wait at the appropriate time.</source>
          <target state="translated">但是，如果实施者创建<ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>，它负责实施者发出信号<ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>，将终止在适当的时间等待。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> terminates the wait on behalf of the caller when an asynchronously invoked method returns.</source>
          <target state="translated">例如，<ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>终止代表调用方等待异步调用的方法返回时。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>Once created, <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> should be kept alive until the user calls the method that concludes the asynchronous operation.</source>
          <target state="translated">一旦创建，<ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>应将保持活动状态，直至用户调用到结束异步操作的方法。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>At that time the object behind <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> can be discarded.</source>
          <target state="translated">之后的对象的 at<ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>被放弃。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>Clients that wait for the operation to complete (as opposed to polling) use this property to obtain a synchronization object to wait on.</source>
          <target state="translated">等待操作完成 （而不是轮询） 的客户端使用此属性来获取要等待同步对象。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>When you use the <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method of a delegate to call a method asynchronously and obtain a wait handle from the resulting <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, we recommend that you close the wait handle as soon as you are finished using it, by calling the <ph id="ph3">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> method.</source>
          <target state="translated">当你使用<ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph>方法的委托来以异步方式调用方法，并从生成中获取的等待句柄<ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，我们建议你在使用它，通过调用完时，就会立即关闭等待句柄<ph id="ph3">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>If you simply release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle, but garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">如果你只需释放对等待句柄的所有引用，当垃圾回收功能回收此等待句柄，但显式关闭或释放可释放对象时垃圾回收的工作效率更高时，将释放系统资源。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>For more information, see the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /&gt;</ph> property.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Gets a value that indicates whether the asynchronous operation completed synchronously.</source>
          <target state="translated">获取一个值，该值指示异步操作是否同步完成。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果异步操作同步完成，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>If the synchronous completion of the call is detected in the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.</source>
          <target state="translated">如果同步完成调用中检测到<ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph>委托，但很可能启动异步操作的线程是当前线程。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Most implementers of the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface will not use this property and should return <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">大多数实施者<ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>接口将不会使用此属性，应返回<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, a task that is created with the <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph> method will not complete if this property is not implemented correctly.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>，与创建的任务<ph id="ph2">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>方法将无法完成，如果此属性实现不正确。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>See <bpt id="p1">[</bpt>Application Compatibility in 4.5<ept id="p1">](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>4.5 中的应用程序兼容性<ept id="p1">](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Use this property to determine if the asynchronous operation completed synchronously.</source>
          <target state="translated">此属性用于确定是否异步操作同步完成。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>For example, this property can return <ph id="ph1">&lt;see langword="true" /&gt;</ph> for an asynchronous I/O operation if the I/O request was small.</source>
          <target state="translated">例如，此属性可以返回<ph id="ph1">&lt;see langword="true" /&gt;</ph>对于异步 I/O 操作如果 I/O 请求很小。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.IsCompleted">
          <source>Gets a value that indicates whether the asynchronous operation has completed.</source>
          <target state="translated">获取一个值，该值指示异步操作是否已完成。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is complete; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作完成则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>When this property is <ph id="ph1">`true`</ph>, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.</source>
          <target state="translated">当此属性是<ph id="ph1">`true`</ph>，你可以假定为安全地放弃用于分配由异步操作的任何资源。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to discover when an asynchronous call completes.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>来发现异步调用何时完成。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>In this case, the asynchronous call is made by using the <ph id="ph1">`BeginInvoke`</ph> method of a delegate.</source>
          <target state="translated">在这种情况下，通过使用进行异步调用<ph id="ph1">`BeginInvoke`</ph>方法的委托。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>You might use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property to poll for completion when making the asynchronous call from a thread that services the user interface.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph>属性轮询完成时进行异步调用的线程服务的用户界面。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">对完成情况进行轮询允许在 <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> 线程中执行异步调用时继续执行调用线程。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">此示例由两个类组成： 包含以异步方式调用的方法和包含的类的类<ph id="ph1">`Main`</ph>进行调用的方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">有关详细信息和使用委托来以异步方式调用方法的更多示例，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>Implementers will typically return the value of a private field or internal test as the value of this property.</source>
          <target state="translated">实施者通常将为此属性的值返回的值的私有字段或内部测试。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>Clients that poll for operation status (as opposed to waiting on a synchronization object) use this property to determine the status of the operation.</source>
          <target state="translated">轮询操作状态 （而不是等待同步对象上） 的客户端使用此属性来确定该操作的状态。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>