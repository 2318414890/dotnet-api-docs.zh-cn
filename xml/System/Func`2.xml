<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`2.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592c283526b5eff775e544f9b80f8037a8be49acc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92c283526b5eff775e544f9b80f8037a8be49acc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The type of the parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委托封装的方法的参数类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">此委托封装的方法的返回值类型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Func`2">
          <source>The parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委托封装的方法的参数。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Func`2">
          <source>Encapsulates a method that has one parameter and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">封装一个具有一个参数并返回 <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> 参数指定的类型值的方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Func`2">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">此委托封装的方法的返回值。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">可以使用此委托来表示可以作为参数传递而不用显式声明自定义委托的方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">封装的方法必须对应于此委托定义方法签名。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</source>
          <target state="translated">这意味着，封装的方法必须具有一个参数传递给它的值，并且它必须返回一个值。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>To reference a method that has one parameter and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the generic <ph id="ph4">&lt;xref:System.Action%601&gt;</ph> delegate instead.</source>
          <target state="translated">若要引用的方法具有一个参数并返回<ph id="ph1">`void`</ph>(或在 Visual Basic 中，声明为<ph id="ph2">`Sub`</ph>而不是<ph id="ph3">`Function`</ph>)，使用泛型<ph id="ph4">&lt;xref:System.Action%601&gt;</ph>委托。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</source>
          <target state="translated">当你使用<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>委托，则不需要显式定义委托，用于封装具有单个参数的方法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>For example, the following code explicitly declares a delegate named <ph id="ph1">`ConvertMethod`</ph> and assigns a reference to the <ph id="ph2">`UppercaseString`</ph> method to its delegate instance.</source>
          <target state="translated">例如，下面的代码显式声明一个名为的委托<ph id="ph1">`ConvertMethod`</ph>并将分配到的引用<ph id="ph2">`UppercaseString`</ph>给其委托实例的方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">下面的示例简化了此代码实例化<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>而不是显式定义新的委托，并向其分配指定的方法的委托。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">你还可以使用<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>委托与 C# 中的匿名方法，如下面的示例所示。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(有关匿名方法的简介，请参阅<bpt id="p1">[</bpt>匿名方法<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">你还可以分配到 lambda 表达式<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>委托，如下面的示例所示。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(有关 lambda 表达式的简介，请参阅<bpt id="p1">[</bpt>Lambda 表达式<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>和<bpt id="p2">[</bpt>Lambda 表达式<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">Lambda 表达式的基础类型是一个泛型<ph id="ph1">`Func`</ph>委托。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">这使它可以将 lambda 表达式作为参数传递而不显式将其分配给委托。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">&lt;xref:System.Func%602&gt;</ph> delegate.</source>
          <target state="translated">具体而言，因为许多方法中的类型<ph id="ph1">&lt;xref:System.Linq&gt;</ph>命名空间具有<ph id="ph2">&lt;xref:System.Func%602&gt;</ph>参数，你可以将传递这些方法的 lambda 表达式而不显式实例化<ph id="ph3">&lt;xref:System.Func%602&gt;</ph>委托。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The following example demonstrates how to declare and use a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate.</source>
          <target state="translated">下面的示例演示如何声明和使用<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>委托。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>This example declares a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</source>
          <target state="translated">此示例声明<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>变量并将其分配将字符串中的字符转换为大写的 lambda 表达式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The delegate that encapsulates this method is subsequently passed to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType&gt;</ph> method to change the strings in an array of strings to uppercase.</source>
          <target state="translated">委托，用于封装此方法随后传递到<ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType&gt;</ph>方法更改为大写的字符串数组中的字符串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>