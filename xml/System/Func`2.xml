<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce1b17da990e16f2a2209a952b5b7df87ebe0009" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37480518" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
    <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
    <param name="arg">此委托封装的方法的参数。</param>
    <summary>封装一个具有一个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
    <returns>此委托封装的方法的返回值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此委托来表示可以作为参数传递而无需显式声明自定义委托的方法。 封装的方法必须对应于此委托定义的方法签名。 这意味着封装的方法必须通过值传递给它的一个参数，并且它必须返回一个值。  
  
> [!NOTE]
>  若要引用的方法，有一个参数并返回`void`(或在 Visual Basic 中的声明为`Sub`而不是作为`Function`)，使用泛型<xref:System.Action%601>改为委托。  
  
 当你使用<xref:System.Func%602>委托时，您无需显式定义用于封装具有单个参数的方法的委托。 例如，下面的代码显式声明名为的委托`ConvertMethod`，并将分配到的引用`UppercaseString`给其委托实例的方法。  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 下面的示例简化了此代码实例化<xref:System.Func%602>而不是显式定义一个新委托，并为其赋值命名的方法的委托。  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 此外可以使用<xref:System.Func%602>委托与匿名方法在 C# 中，如以下示例所示。 (有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 你还可以分配一个 lambda 表达式到<xref:System.Func%602>委托，如以下示例所示。 (有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)并[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 Lambda 表达式的基础类型是一个泛型`Func`委托。 这样，可以将 lambda 表达式作为参数传递而无需显式将其分配给委托。 具体而言，因为许多方法中的类型<xref:System.Linq>命名空间具有<xref:System.Func%602>参数，您可以将传递这些方法的 lambda 表达式无需显式实例化<xref:System.Func%602>委托。  
  
   
  
## Examples  
 下面的示例演示如何声明和使用<xref:System.Func%602>委托。 此示例声明<xref:System.Func%602>变量并将其分配将在字符串中的字符转换为大写的 lambda 表达式。 此委托封装此方法随后传递给<xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType>方法更改为大写的字符串数组中的字符串。  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>