<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa411050e839a877b80d93acdac19b913a6e8a46" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39854290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="945cc-101">表示委托，委托是一种数据结构，它引用静态方法或引用类实例及该类的实例方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="945cc-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-102"><xref:System.Delegate>类是委托类型的基类。</span><span class="sxs-lookup"><span data-stu-id="945cc-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="945cc-103">但是，只有系统和编译器可以派生自显式<xref:System.Delegate>类或从<xref:System.MulticastDelegate>类。</span><span class="sxs-lookup"><span data-stu-id="945cc-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="945cc-104">此外，还不允许从委托类型派生新类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="945cc-105"><xref:System.Delegate>类不被视为是委托类型; 它是用于委托类型派生一个类。</span><span class="sxs-lookup"><span data-stu-id="945cc-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="945cc-106">大多数语言实现`delegate`关键字，并为这些语言的编译器可派生自<xref:System.MulticastDelegate>类; 因此，用户应使用`delegate`语言提供的关键字。</span><span class="sxs-lookup"><span data-stu-id="945cc-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-107">公共语言运行时提供`Invoke`对于每个委托类型，具有相同的签名与委托的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="945cc-108">您不需要显式调用此方法，从 C#、 Visual Basic 或 Visual c + +，因为编译器会自动调用。</span><span class="sxs-lookup"><span data-stu-id="945cc-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="945cc-109">`Invoke`方法可在[反射](~/docs/framework/reflection-and-codedom/reflection.md)时想要查找的委托类型签名。</span><span class="sxs-lookup"><span data-stu-id="945cc-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="945cc-110">公共语言运行时提供每个委托类型与`BeginInvoke`和`EndInvoke`方法，以便能够异步调用的委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="945cc-111">有关这些方法的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="945cc-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="945cc-112">委托类型的声明建立指定的一个或多个方法签名的协定。</span><span class="sxs-lookup"><span data-stu-id="945cc-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="945cc-113">委托是所引用的委托类型的实例：</span><span class="sxs-lookup"><span data-stu-id="945cc-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="945cc-114">类型和可分配给该类型的目标对象的实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="945cc-115">具有隐藏的类型的实例方法`this`参数在形参表中公开。</span><span class="sxs-lookup"><span data-stu-id="945cc-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="945cc-116">委托被称为是一个委托，它打开的实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="945cc-117">一种静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-117">A static method.</span></span>  
  
-   <span data-ttu-id="945cc-118">静态方法，并且可分配给该方法的第一个参数的目标对象。</span><span class="sxs-lookup"><span data-stu-id="945cc-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="945cc-119">委托被称为封闭式其第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="945cc-120">有关绑定的委托的详细信息，请参阅<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-121">在.NET framework 1.0 和 1.1 中，委托可以表示一种方法，仅当该方法的签名与委托类型指定的签名完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="945cc-122">因此，仅第一个和第三个项目符号前面的列表中都受支持，并且第一项要求的类型完全匹配项。</span><span class="sxs-lookup"><span data-stu-id="945cc-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="945cc-123">委托时委托表示实例方法通过其第一个参数 （最常见的情况） 关闭时，将对方法的入口点的引用和对一个名为目标，这是赋给定义的类型的类型的对象的引用存储方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="945cc-124">当委托表示打开的实例方法时，它存储到该方法的入口点的引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="945cc-125">委托签名必须包括隐藏`this`参数在其形参表; 在这种情况下，委托不具有对目标对象的引用和调用委托时，必须提供目标对象。</span><span class="sxs-lookup"><span data-stu-id="945cc-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="945cc-126">当委托表示静态方法时，该委托存储到该方法的入口点的引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="945cc-127">当委托表示静态方法通过其第一个参数已关闭时，委托将存储对方法的入口点的引用和对可分配给该方法的第一个参数的类型的目标对象的引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="945cc-128">当调用委托时，静态方法的第一个参数接收目标对象。</span><span class="sxs-lookup"><span data-stu-id="945cc-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="945cc-129">委托的调用列表是列表的一个有序中的每个元素调用一个委托所表示的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="945cc-130">调用列表可以包含重复的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="945cc-131">在调用过程的调用列表中出现的顺序调用的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="945cc-132">尝试调用其调用列表; 中的每个方法的委托对于每个时间它们会显示在调用列表后，会调用重复项。</span><span class="sxs-lookup"><span data-stu-id="945cc-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="945cc-133">委托是固定不变;创建后，委托的调用列表将不会更改。</span><span class="sxs-lookup"><span data-stu-id="945cc-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="945cc-134">委托被引用的多路广播，或可组合，因为委托可以调用一个或多个方法，并且可以用在组合操作。</span><span class="sxs-lookup"><span data-stu-id="945cc-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="945cc-135">合并操作，如<xref:System.Delegate.Combine%2A>和<xref:System.Delegate.Remove%2A>，不会更改现有委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="945cc-136">相反，此类操作返回包含结果的操作，一个不变的委托，一个新委托或`null`。</span><span class="sxs-lookup"><span data-stu-id="945cc-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="945cc-137">合并操作将返回`null`时操作的结果是不引用至少一种方法的委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="945cc-138">合并操作，返回未更改的委托时请求的操作不起作用。</span><span class="sxs-lookup"><span data-stu-id="945cc-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-139">托管语言使用<xref:System.Delegate.Combine%2A>和<xref:System.Delegate.Remove%2A>方法来实现委托操作。</span><span class="sxs-lookup"><span data-stu-id="945cc-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="945cc-140">示例包括`AddHandler`和`RemoveHandler`在 Visual Basic 中的语句和上的 + = 和-= 运算符委托在 C# 中的类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="945cc-141">从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，泛型委托类型可以具有 variant 类型参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="945cc-142">逆变类型参数可以用作参数类型的委托，协变类型参数可以用作返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="945cc-143">此功能允许泛型委托类型相同的泛型类型定义，如中所述为赋值兼容其类型参数是引用类型具有继承关系，如果从[协方差和逆变](~/docs/standard/generics/covariance-and-contravariance.md)。</span><span class="sxs-lookup"><span data-stu-id="945cc-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-144">赋值兼容的泛型委托的变体由于并不一定是可组合。</span><span class="sxs-lookup"><span data-stu-id="945cc-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="945cc-145">若要可组合，类型必须完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="945cc-146">例如，假设一个名为`Derived`派生的类名为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="945cc-147">类型的委托`Action<Base>`(`Action(Of Base)`在 Visual Basic 中) 可以分配给类型的变量的`Action<Derived>`，但不能组合两个委托，因为类型不完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="945cc-148">如果调用的方法引发异常，该方法停止执行、 异常传递回委托，调用方和剩余方法的调用列表中不会调用。</span><span class="sxs-lookup"><span data-stu-id="945cc-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="945cc-149">在调用方中捕获该异常不会更改此行为。</span><span class="sxs-lookup"><span data-stu-id="945cc-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="945cc-150">当由委托调用的方法的签名包括返回值时，委托的调用列表中返回的最后一个元素的返回值。</span><span class="sxs-lookup"><span data-stu-id="945cc-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="945cc-151">如果签名包括按引用传递的参数，参数的最终值将按顺序执行并更新参数的值的调用列表中每个方法的结果。</span><span class="sxs-lookup"><span data-stu-id="945cc-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="945cc-152">最接近的 C 或 c + + 中是委托的函数指针。</span><span class="sxs-lookup"><span data-stu-id="945cc-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="945cc-153">委托可以表示的静态方法或实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="945cc-154">当委托表示实例方法时，该委托存储不仅对方法的入口点，而且还对类实例的引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="945cc-155">函数与指针不同，委托是面向对象和类型安全的。</span><span class="sxs-lookup"><span data-stu-id="945cc-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="945cc-156">下面的示例演示如何定义一个名为的委托`myMethodDelegate`。</span><span class="sxs-lookup"><span data-stu-id="945cc-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="945cc-157">实例方法和嵌套的静态方法来创建此委托的实例`mySampleClass`类。</span><span class="sxs-lookup"><span data-stu-id="945cc-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="945cc-158">实例方法的委托需要的实例`mySampleClass`。</span><span class="sxs-lookup"><span data-stu-id="945cc-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="945cc-159">`mySampleClass`实例保存在名为`mySC`。</span><span class="sxs-lookup"><span data-stu-id="945cc-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="945cc-160">初始化一个新委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-160">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="945cc-161">类实例，委托对其调用 <c>method</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-161">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-162">委托表示的实例方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-162">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-163">初始化一个委托，该委托对指定的类实例调用指定的实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-164">不能在应用程序代码中使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="945cc-164">This constructor cannot be used in application code.</span></span> <span data-ttu-id="945cc-165">若要通过指定实例方法的名称创建一个委托，使用的重载<xref:System.Delegate.CreateDelegate%2A>指定方法名称和目标对象的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-165">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="945cc-166">例如，<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29>方法重载创建具有指定名称的实例方法的委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-166">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="945cc-167">此构造函数实例只方法创建委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-167">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="945cc-168">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-168">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-169">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-169">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-170">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-170">-or-</span>
          </span>
          <span data-ttu-id="945cc-171">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-171">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-172">绑定到目标方法时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-172">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-173">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-173">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-174">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-174">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="945cc-175">表示定义 <c>method</c> 的类的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-175">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-176">委托表示的静态方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-176">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-177">初始化一个委托，该委托从指定的类调用指定的静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-177">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-178">不能在应用程序代码中使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="945cc-178">This constructor cannot be used in application code.</span></span> <span data-ttu-id="945cc-179">若要指定静态方法的名称创建一个委托，使用的重载<xref:System.Delegate.CreateDelegate%2A>指定方法名称，但未指定目标对象的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-179">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="945cc-180">例如，<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29>方法重载创建具有指定名称的方法的静态委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-180">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="945cc-181">此构造函数创建只为静态方法的委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-181">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="945cc-182">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-182">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-183">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-183">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-184">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-184">-or-</span>
          </span>
          <span data-ttu-id="945cc-185">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-185">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-186">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-186">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-187">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-187">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-188">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-188">-or-</span>
          </span>
          <span data-ttu-id="945cc-189">
            <paramref name="target" /> 表示开放式泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-189">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-190">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-190">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-191">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-191">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="945cc-192">创建委托的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-192">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-193">委托的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-193">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-194">克隆具有相同<xref:System.Type>，与原始委托的目标、 方法和调用列表。</span><span class="sxs-lookup"><span data-stu-id="945cc-194">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="945cc-195">浅表副本创建与原始对象相同的类型的新实例，然后将复制的原始对象的非静态字段。</span><span class="sxs-lookup"><span data-stu-id="945cc-195">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="945cc-196">如果此字段为值类型，则执行字段的按位复制。</span><span class="sxs-lookup"><span data-stu-id="945cc-196">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="945cc-197">如果此字段为引用类型，则复制引用，但被引用的对象;因此，在原始对象的引用和克隆中的引用点对同一对象。</span><span class="sxs-lookup"><span data-stu-id="945cc-197">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="945cc-198">与此相反，对象的深层副本会复制所有内容直接或间接引用的对象中的字段。</span><span class="sxs-lookup"><span data-stu-id="945cc-198">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-199">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-199">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-200">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-200">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="945cc-201">将指定的多路广播（可组合）委托的调用列表连接起来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-201">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="945cc-202">要组合的委托的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-202">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-203">将委托数组的调用列表连接在一起。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-203">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-204">新的委托，该委托的调用列表将 <paramref name="delegates" /> 数组中的委托的调用列表串联在一起。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-204">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="945cc-205">如果 <paramref name="delegates" /> 为 <see langword="null" />，<paramref name="delegates" /> 包含零个元素，或 <paramref name="delegates" /> 中的每个条目均为 <see langword="null" />，则返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-205">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-206">如果`delegates`数组包含的条目`null`，这些条目将被忽略。</span><span class="sxs-lookup"><span data-stu-id="945cc-206">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="945cc-207">调用列表可以包含重复项;它是指同一对象上的相同方法的条目。</span><span class="sxs-lookup"><span data-stu-id="945cc-207">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-208">赋值兼容的泛型委托的变体由于并不一定是可组合。</span><span class="sxs-lookup"><span data-stu-id="945cc-208">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="945cc-209">若要可组合，类型必须完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-209">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="945cc-210">例如，假设一个名为`Derived`派生的类名为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-210">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="945cc-211">类型的委托`Action<Base>`(`Action(Of Base)`在 Visual Basic 中) 可以分配给类型的变量`Action<Derived>`，如中所述[协变和逆变](~/docs/standard/generics/covariance-and-contravariance.md)，但不能组合两个委托，因为此操作类型不完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-211">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="945cc-212"><xref:System.Delegate.Combine%2A> 可用于创建调用多个方法的时间事件发生的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="945cc-212"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-213">不是所有 <paramref name="delegates" /> 中的非 null 项都是同一委托类型的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-213">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-214">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-214">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-215">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-215">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="945cc-216">最先出现其调用列表的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-216">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="945cc-217">最后出现其调用列表的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-217">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-218">将两个委托的调用列表连接在一起。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-218">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-219">新的委托，它的调用列表将 <paramref name="a" /> 和 <paramref name="b" /> 的调用列表按该顺序连接在一起。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-219">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="945cc-220">如果 <paramref name="b" /> 为 <see langword="null" />，则返回 <paramref name="a" />；如果 <paramref name="a" /> 为 null 引用，则返回 <paramref name="b" />；如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 null 引用，则返回 null 引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-220">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-221">调用列表可以包含重复项;它是指同一对象上的相同方法的条目。</span><span class="sxs-lookup"><span data-stu-id="945cc-221">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-222">赋值兼容的泛型委托的变体由于并不一定是可组合。</span><span class="sxs-lookup"><span data-stu-id="945cc-222">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="945cc-223">若要可组合，类型必须完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-223">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="945cc-224">例如，假设一个名为`Derived`派生的类名为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-224">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="945cc-225">类型的委托`Action<Base>`(`Action(Of Base)`在 Visual Basic 中) 可以分配给类型的变量`Action<Derived>`，如中所述[协变和逆变](~/docs/standard/generics/covariance-and-contravariance.md)，但不能组合两个委托，因为此操作类型不完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-225">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="945cc-226"><xref:System.Delegate.Combine%2A> 可用于创建调用多个方法的时间事件发生的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="945cc-226"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-227">
            <paramref name="a" /> 和 <paramref name="b" /> 均不为 <see langword="null" />，且 <paramref name="a" /> 和 <paramref name="b" /> 不是相同委托类型的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-227">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-228">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-229">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="945cc-230">多路广播（可组合）委托，其调用列表要追加到当前多路广播（可组合）委托的调用列表的结尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-230">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-231">将指定多路广播（可组合）委托和当前多路广播（可组合）委托的调用列表连接起来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-231">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-232">新的多路广播（可组合）委托，其调用列表将当前多路广播（可组合）委托的调用列表和 <paramref name="d" /> 的调用列表连接在一起；或者如果 <paramref name="d" /> 为 <see langword="null" />，则返回当前多路广播（可组合）委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-232">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-233">此方法仅适用于当前委托是多路广播 （可组合）。</span><span class="sxs-lookup"><span data-stu-id="945cc-233">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="945cc-234">当前实现只需引发<xref:System.MulticastNotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="945cc-234">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="945cc-235">调用列表可以包含重复项;它是指同一对象上的相同方法的条目。</span><span class="sxs-lookup"><span data-stu-id="945cc-235">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="945cc-236">始终引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-236">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-237">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-238">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="945cc-239">创建指定类型的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-239">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-240">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-240">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-241">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-241">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="945cc-242">.NET Framework 1.0 和 1.1 版中仅支持静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-242">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-243">创建指定类型的委托以表示指定的静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-243">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-244">表示指定静态方法的指定类型的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-244">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-245">在.NET Framework 1.0 和 1.1 版中，此方法的重载创建只为静态方法的委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-245">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="945cc-246">在.NET Framework 2.0 版中，此方法的重载还可以创建打开实例方法的委托;即，显式提供的隐藏第一个参数的委托实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-246">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="945cc-247">有关的详细说明，请参阅更多常规<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>方法重载，它允许您创建的打开或关闭实例或静态方法的委托的所有组合并根据需要指定第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-247">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-248">此方法应使用重载时委托未关闭通过其第一个参数，因为它在这种情况下是某种程度上更快。</span><span class="sxs-lookup"><span data-stu-id="945cc-248">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="945cc-249">此方法的重载是等效于调用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法重载并指定`true`为`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="945cc-249">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-250">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-251">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-251">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-252">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-252">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="945cc-253">兼容的参数类型和返回类型</span><span class="sxs-lookup"><span data-stu-id="945cc-253">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="945cc-254">在.NET Framework 2.0 版中，参数类型和使用此方法的重载创建委托的返回类型必须是与参数类型和委托表示; 方法的返回类型兼容类型不需要完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-254">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="945cc-255">这表示在.NET Framework 版本 1.0 和 1.1 中，类型必须完全匹配的绑定行为是放宽了。</span><span class="sxs-lookup"><span data-stu-id="945cc-255">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="945cc-256">如果委托参数的类型的限制性强于方法参数的类型，则该委托的参数与该方法的相应参数兼容，因为这可保证传递给委托的参数可以安全地传递给方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-256">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="945cc-257">同样，如果方法的返回类型的限制性强于委托的返回类型，则该委托的返回类型与该方法的返回类型兼容，因为这可保证方法的返回值可以安全地强制转换为委托的返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-257">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-258">例如，一个委托，其类型的参数<xref:System.Collections.Hashtable>和返回类型为<xref:System.Object>可以表示具有类型的参数的方法<xref:System.Object>以及一个返回值类型的<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="945cc-258">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="945cc-259">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="945cc-259">This section contains two code examples.</span></span> <span data-ttu-id="945cc-260">第一个示例演示两种类型的委托可以使用此方法的重载来创建： 打开通过实例方法，并通过静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-260">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="945cc-261">第二个代码示例演示了兼容的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-261">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="945cc-262">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="945cc-262">**Example 1**</span></span>  
  
 <span data-ttu-id="945cc-263">下面的代码示例演示了可以使用此重载创建委托的两种方法<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-263">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-264">有两个重载<xref:System.Delegate.CreateDelegate%2A>方法指定<xref:System.Reflection.MethodInfo>，但不是第一个参数; 它们的功能相同，只一个允许您指定是否引发失败时要将绑定，而是其他总是引发。</span><span class="sxs-lookup"><span data-stu-id="945cc-264">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="945cc-265">此代码示例使用两个重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-265">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="945cc-266">此示例声明一个类`C`静态方法一起`M2`和实例方法`M1`，和两个委托类型：`D1`的实例`C`和一个字符串，和`D2`采用一个字符串。</span><span class="sxs-lookup"><span data-stu-id="945cc-266">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="945cc-267">名为第二个类`Example`包含创建委托的代码。</span><span class="sxs-lookup"><span data-stu-id="945cc-267">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="945cc-268">类型的委托`D1`，表示打开的实例方法，为实例方法创建`M1`。</span><span class="sxs-lookup"><span data-stu-id="945cc-268">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="945cc-269">当调用委托时，必须传递实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-269">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-270">类型的委托`D2`，表示打开的静态方法，为静态方法创建`M2`。</span><span class="sxs-lookup"><span data-stu-id="945cc-270">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="945cc-271">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="945cc-271">**Example 2**</span></span>  
  
 <span data-ttu-id="945cc-272">下面的代码示例演示了兼容性的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-272">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="945cc-273">代码示例定义名为的基类`Base`和一个名为类`Derived`派生`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-273">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="945cc-274">派生的类具有`static`(`Shared`在 Visual Basic 中) 名为方法`MyMethod`类型的一个参数与`Base`和返回类型为`Derived`。</span><span class="sxs-lookup"><span data-stu-id="945cc-274">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="945cc-275">代码示例还定义名为的委托`Example`它具有一个参数的类型`Derived`和返回类型为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-275">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="945cc-276">代码示例演示委托名为`Example`可以用来表示该方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-276">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="945cc-277">该方法可以绑定到委托，因为：</span><span class="sxs-lookup"><span data-stu-id="945cc-277">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="945cc-278">委托的参数类型 (`Derived`) 的参数类型比的限制性更强`MyMethod`(`Base`)，以便它始终是安全传递到委托的自变量`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-278">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="945cc-279">返回类型`MyMethod`(`Derived`) 是限制性强于委托的参数类型 (`Base`)，以便它始终是安全的委托的返回类型的方法的返回类型转换。</span><span class="sxs-lookup"><span data-stu-id="945cc-279">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-280">代码示例会生成任何输出。</span><span class="sxs-lookup"><span data-stu-id="945cc-280">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-281">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-281">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-282">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-282">-or-</span>
          </span>
          <span data-ttu-id="945cc-283">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-283">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-284">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-284">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-285">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-285">-or-</span>
          </span>
          <span data-ttu-id="945cc-286">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-286">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-287">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-287">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-288">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-288">-or-</span>
          </span>
          <span data-ttu-id="945cc-289">
            <paramref name="method" /> 不是一种静态方法，并且 .NET Framework 版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-289">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="945cc-290">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-290">-or-</span>
          </span>
          <span data-ttu-id="945cc-291">无法绑定 <paramref name="method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-291">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="945cc-292">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-292">-or-</span>
          </span>
          <span data-ttu-id="945cc-293">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-293">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="945cc-294">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-294">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-295">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-295">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-296">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-296">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-297">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-297">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-298">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-298">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-299">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-299">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="945cc-300">委托要绑定到的对象，若要将 <c>method</c> 作为 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />），则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-300">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-301">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-301">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-302">使用指定的第一个参数创建指定类型的委托，该委托表示指定的静态方法或实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-302">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-303">指定类型的委托，表示指定的静态或实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-303">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-304">调用此方法重载是等效于调用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法重载并指定`true`为`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="945cc-304">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="945cc-305">这两个重载提供最灵活的方式来创建委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-305">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="945cc-306">若要创建委托的静态或实例方法，并可以选择指定的第一个参数，可以使用它们。</span><span class="sxs-lookup"><span data-stu-id="945cc-306">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-307">如果未提供第一个参数，使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法重载，以更好的性能。</span><span class="sxs-lookup"><span data-stu-id="945cc-307">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="945cc-308">委托类型和方法必须具有兼容返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-308">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="945cc-309">返回类型，即`method`必须是可赋值的返回类型为`type`。</span><span class="sxs-lookup"><span data-stu-id="945cc-309">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="945cc-310">如果`firstArgument`是提供，将它传递到`method`每次调用委托时;`firstArgument`称为绑定到委托，委托是说要关闭通过其第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-310">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="945cc-311">如果`method`是`static`(`Shared`在 Visual Basic 中)，则参数调用委托时提供的列表包括除第一个; 以外的所有参数，如果`method`然后是实例方法，`firstArgument`传递到隐藏的实例参数 (由`this`在 C# 中，或由`Me`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="945cc-311">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="945cc-312">如果`firstArgument`提供，则第一个参数`method`必须是引用类型，和`firstArgument`必须与该类型兼容。</span><span class="sxs-lookup"><span data-stu-id="945cc-312">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="945cc-313">如果`method`是`static`(`Shared`在 Visual Basic 中) 且其第一个参数的类型<xref:System.Object>或<xref:System.ValueType>，然后`firstArgument`可以是值类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-313">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="945cc-314">在这种情况下`firstArgument`自动装箱。</span><span class="sxs-lookup"><span data-stu-id="945cc-314">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="945cc-315">自动装箱不会发生的任何其他参数，因为它将在 C# 或 Visual Basic 函数中调用。</span><span class="sxs-lookup"><span data-stu-id="945cc-315">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="945cc-316">如果`firstArgument`为 null 引用和`method`是实例方法，结果取决于委托类型的签名`type`和`method`:</span><span class="sxs-lookup"><span data-stu-id="945cc-316">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="945cc-317">如果签名`type`显式包含的隐藏第一个参数`method`，则委托被称为来表示打开的实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-317">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="945cc-318">当调用委托时，参数列表中的第一个参数传递到隐藏的实例参数`method`。</span><span class="sxs-lookup"><span data-stu-id="945cc-318">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="945cc-319">如果签名的`method`和`type`匹配 （也就是说，所有参数类型都是兼容），则委托称为关闭通过空引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-319">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="945cc-320">调用委托就像不是特别有用的办法就的 null 实例上调用实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-320">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="945cc-321">如果`firstArgument`为 null 引用和`method`是静态的结果依赖于委托类型的签名`type`和`method`:</span><span class="sxs-lookup"><span data-stu-id="945cc-321">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="945cc-322">如果签名`method`和`type`匹配 （也就是说，所有参数类型都是兼容），则委托被称为来表示开放的静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-322">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="945cc-323">这是最常见的情况对静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-323">This is the most common case for static methods.</span></span> <span data-ttu-id="945cc-324">在这种情况下，通过获取性能稍好<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-324">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="945cc-325">如果签名`type`开头的第二个参数`method`和参数类型的其余部分是兼容的设备，然后委托被称为封闭式 null 引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-325">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="945cc-326">调用委托时，将为 null 引用传递到的第一个参数`method`。</span><span class="sxs-lookup"><span data-stu-id="945cc-326">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-327">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-327">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-328">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-328">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-329">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-329">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="945cc-330">兼容的参数类型和返回类型</span><span class="sxs-lookup"><span data-stu-id="945cc-330">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="945cc-331">参数类型和委托的返回类型必须与参数类型和委托表示; 方法的返回类型兼容类型不需要完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-331">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-332">在.NET Framework 1.0 和 1.1 版中，类型必须完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-332">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="945cc-333">如果委托参数的类型的限制性强于方法参数的类型，则该委托的参数与该方法的相应参数兼容，因为这可保证传递给委托的参数可以安全地传递给方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-333">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="945cc-334">同样，如果方法的返回类型的限制性强于委托的返回类型，则该委托的返回类型与该方法的返回类型兼容，因为这可保证方法的返回值可以安全地强制转换为委托的返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-334">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-335">例如，一个委托，其类型的参数<xref:System.Collections.Hashtable>和返回类型为<xref:System.Object>可以表示具有类型的参数的方法<xref:System.Object>以及一个返回值类型的<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="945cc-335">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="945cc-336">确定方法委托可以表示</span><span class="sxs-lookup"><span data-stu-id="945cc-336">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="945cc-337">另一个有用方法看作的灵活性方面的此重载的<xref:System.Delegate.CreateDelegate%2A>是任何给定的委托可以表示四个不同的方法签名和方法的类型 （静态和实例） 的组合。</span><span class="sxs-lookup"><span data-stu-id="945cc-337">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="945cc-338">委托类型，请考虑`D`带有一个自变量类型的`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-338">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="945cc-339">以下介绍的方法`D`可以表示，因为它必须匹配在所有情况下忽略的返回类型：</span><span class="sxs-lookup"><span data-stu-id="945cc-339">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="945cc-340">`D` 可以表示有且只有一个参数类型的任何实例方法`C`，无论实例方法属于哪种类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-340">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="945cc-341">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`是类型的实例`method`属于，和结果委托所说，通过该实例关闭。</span><span class="sxs-lookup"><span data-stu-id="945cc-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="945cc-342">(一般而言，`D`如果还可以通过 null 引用封闭`firstArgument`为 null 引用。)</span><span class="sxs-lookup"><span data-stu-id="945cc-342">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="945cc-343">`D` 可以表示的实例方法`C`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-343">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="945cc-344">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`为 null 引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-344">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="945cc-345">结果委托表示打开的实例方法，并且的实例`C`必须提供每次调用它时。</span><span class="sxs-lookup"><span data-stu-id="945cc-345">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-346">`D` 可以表示采用一种参数类型的静态方法`C`，和方法可以属于任何类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-346">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="945cc-347">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`为 null 引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-347">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="945cc-348">结果委托表示开放的静态方法，并且的实例`C`必须提供每次调用它时。</span><span class="sxs-lookup"><span data-stu-id="945cc-348">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-349">`D` 可以表示所属类型的静态方法`F`并且有两个参数，类型为`F`并键入`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-349">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="945cc-350">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`的一个实例`F`。</span><span class="sxs-lookup"><span data-stu-id="945cc-350">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="945cc-351">生成委托表示静态方法，通过该实例的关闭`F`。</span><span class="sxs-lookup"><span data-stu-id="945cc-351">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="945cc-352">请注意，在这种情况其中`F`和`C`属于同一类型、 静态方法有两个参数为该类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-352">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="945cc-353">(在这种情况下，`D`如果通过 null 引用封闭`firstArgument`为 null 引用。)</span><span class="sxs-lookup"><span data-stu-id="945cc-353">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="945cc-354">本部分包含三个代码示例。</span><span class="sxs-lookup"><span data-stu-id="945cc-354">This section contains three code examples.</span></span> <span data-ttu-id="945cc-355">第一个示例演示了四种类型的可创建的委托： 关闭通过实例方法，通过实例方法，打开的静态方法，通过打开和关闭通过静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-355">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="945cc-356">第二个代码示例演示了兼容的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-356">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="945cc-357">第三个代码示例定义一个委托类型，并演示可以表示委托类型的所有方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-357">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="945cc-358">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="945cc-358">**Example 1**</span></span>  
  
 <span data-ttu-id="945cc-359">下面的代码示例演示了可以使用此重载创建委托的四个方法<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-359">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-360">有两个重载<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和一个<xref:System.Reflection.MethodInfo>; 它们的功能相同，只一个允许您指定是否引发失败时要将绑定，而是其他总是引发。</span><span class="sxs-lookup"><span data-stu-id="945cc-360">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="945cc-361">此代码示例使用两个重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-361">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="945cc-362">此示例声明一个类`C`使用静态方法`M2`和实例方法`M1`，和三个委托类型：`D1`的实例`C`和一个字符串，`D2`采用一个字符串，并`D3`没有参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-362">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="945cc-363">名为第二个类`Example`包含创建委托的代码。</span><span class="sxs-lookup"><span data-stu-id="945cc-363">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="945cc-364">类型的委托`D2`、 已关闭的实例`C`，为实例方法创建`M1`。</span><span class="sxs-lookup"><span data-stu-id="945cc-364">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="945cc-365">使用不同的字符串，显示的绑定的实例调用`C`始终使用。</span><span class="sxs-lookup"><span data-stu-id="945cc-365">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="945cc-366">类型的委托`D1`，表示打开的实例方法，为实例方法创建`M1`。</span><span class="sxs-lookup"><span data-stu-id="945cc-366">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="945cc-367">当调用委托时，必须传递实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-367">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-368">类型的委托`D2`，表示打开的静态方法，为静态方法创建`M2`。</span><span class="sxs-lookup"><span data-stu-id="945cc-368">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="945cc-369">最后，类型的委托`D3`、 已关闭的字符串上，为静态方法创建`M2`。</span><span class="sxs-lookup"><span data-stu-id="945cc-369">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="945cc-370">调用方法以显示其使用的绑定的字符串。</span><span class="sxs-lookup"><span data-stu-id="945cc-370">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="945cc-371">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="945cc-371">**Example 2**</span></span>  
  
 <span data-ttu-id="945cc-372">下面的代码示例演示了兼容性的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-372">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-373">此代码示例使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-373">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="945cc-374">使用其他重载采用<xref:System.Reflection.MethodInfo>类似。</span><span class="sxs-lookup"><span data-stu-id="945cc-374">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="945cc-375">代码示例定义名为的基类`Base`和一个名为类`Derived`派生`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-375">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="945cc-376">派生的类具有`static`(`Shared`在 Visual Basic 中) 名为方法`MyMethod`类型的一个参数与`Base`和返回类型为`Derived`。</span><span class="sxs-lookup"><span data-stu-id="945cc-376">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="945cc-377">代码示例还定义名为的委托`Example`它具有一个参数的类型`Derived`和返回类型为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-377">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="945cc-378">代码示例演示委托名为`Example`可以用来表示该方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-378">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="945cc-379">该方法可以绑定到委托，因为：</span><span class="sxs-lookup"><span data-stu-id="945cc-379">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="945cc-380">委托的参数类型 (`Derived`) 的参数类型比的限制性更强`MyMethod`(`Base`)，以便它始终是安全传递到委托的自变量`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-380">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="945cc-381">返回类型`MyMethod`(`Derived`) 是限制性强于委托的参数类型 (`Base`)，以便它始终是安全的委托的返回类型的方法的返回类型转换。</span><span class="sxs-lookup"><span data-stu-id="945cc-381">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-382">代码示例会生成任何输出。</span><span class="sxs-lookup"><span data-stu-id="945cc-382">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="945cc-383">**示例 3**</span><span class="sxs-lookup"><span data-stu-id="945cc-383">**Example 3**</span></span>  
  
 <span data-ttu-id="945cc-384">下面的代码示例显示了所有方法的单个的委托类型可以表示使用<xref:System.Delegate.CreateDelegate%2A>方法来创建委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-384">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-385">有两个重载<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和一个<xref:System.Reflection.MethodInfo>; 它们的功能相同，只一个允许您指定是否引发失败时要将绑定，而是其他总是引发。</span><span class="sxs-lookup"><span data-stu-id="945cc-385">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="945cc-386">此代码示例使用两个重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-386">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="945cc-387">代码示例定义两个类：`C`并`F`，和委托类型`D`带有一个自变量类型的`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-387">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="945cc-388">类具有匹配的静态和实例方法`M1`， `M3`，并`M4`，和类`C`还具有实例方法`M2`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-388">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="945cc-389">名为第三个类`Example`包含创建委托的代码。</span><span class="sxs-lookup"><span data-stu-id="945cc-389">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="945cc-390">委托实例创建方法`M1`类型的`C`并键入`F`; 每个已关闭对相应类型的实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-390">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="945cc-391">方法`M1`类型的`C`显示`ID`属性的绑定实例和自变量。</span><span class="sxs-lookup"><span data-stu-id="945cc-391">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="945cc-392">方法创建委托`M2`类型的`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-392">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="945cc-393">这是一个开放的实例的委托，委托自变量表示实例方法的隐藏第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-393">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="945cc-394">该方法具有任何其他参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-394">The method has no other arguments.</span></span> <span data-ttu-id="945cc-395">调用，就好像静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-395">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="945cc-396">为静态方法创建委托`M3`类型的`C`并键入`F`; 这些是打开的静态委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-396">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="945cc-397">最后，为静态方法创建委托`M4`类型的`C`并键入`F`; 每个方法具有作为其第一个参数的声明类型和提供的类型的实例，因此委托关闭通过其第一个参数.</span><span class="sxs-lookup"><span data-stu-id="945cc-397">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="945cc-398">方法`M4`类型的`C`显示`ID`属性的绑定实例和自变量。</span><span class="sxs-lookup"><span data-stu-id="945cc-398">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-399">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-399">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-400">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-400">-or-</span>
          </span>
          <span data-ttu-id="945cc-401">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-401">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-402">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-402">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-403">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-403">-or-</span>
          </span>
          <span data-ttu-id="945cc-404">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-404">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-405">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-405">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-406">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-406">-or-</span>
          </span>
          <span data-ttu-id="945cc-407">无法绑定 <paramref name="method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-407">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="945cc-408">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-408">-or-</span>
          </span>
          <span data-ttu-id="945cc-409">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-409">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="945cc-410">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-410">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-411">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-411">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-412">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-412">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-413">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-413">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-414">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-414">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-415">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-415">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="945cc-416">类实例，对其调用 <c>method</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-416">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-417">委托要表示的实例方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-417">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-418">创建指定类型的委托，该委托表示要对指定的类实例调用的指定实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-418">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-419">指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-419">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-420">此方法创建委托实例仅方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-420">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="945cc-421">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-421">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="945cc-422">此方法的重载是等效于调用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法重载，指定`false`有关`ignoreCase`并`true`为`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="945cc-422">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-423">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-423">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-424">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-424">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-425">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-425">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-426">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-426">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-427">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-427">-or-</span>
          </span>
          <span data-ttu-id="945cc-428">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-428">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-429">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-429">-or-</span>
          </span>
          <span data-ttu-id="945cc-430">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-430">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-431">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-431">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-432">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-432">-or-</span>
          </span>
          <span data-ttu-id="945cc-433">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-433">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-434">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-434">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-435">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-435">-or-</span>
          </span>
          <span data-ttu-id="945cc-436">
            <paramref name="method" /> 不是实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-436">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="945cc-437">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-437">-or-</span>
          </span>
          <span data-ttu-id="945cc-438">无法绑定 <paramref name="method" />，例如因为找不到它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-438">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-439">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-439">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-440">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-440">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-441">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-441">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-442">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-442">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-443">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-443">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-444">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-444">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="945cc-445">如果无法绑定 <c>method</c> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-445">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-446">使用针对绑定失败的指定行为，创建用于表示指定静态方法的指定类型的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-446">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-447">表示指定静态方法的指定类型的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-447">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-448">此方法的重载可以创建开放的静态方法的委托并打开实例方法委托，公开的隐藏第一个参数的委托，它是实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-448">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="945cc-449">有关的详细说明，请参阅更多常规<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法重载，它允许你创建的打开或关闭委托的所有组合实例或静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-449">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-450">此方法应使用重载时委托未关闭通过其第一个参数，因为它在这种情况下是某种程度上更快。</span><span class="sxs-lookup"><span data-stu-id="945cc-450">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-451">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-451">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-452">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-452">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-453">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-453">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="945cc-454">兼容的参数类型和返回类型</span><span class="sxs-lookup"><span data-stu-id="945cc-454">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="945cc-455">参数类型和委托的返回类型必须与参数类型和委托表示; 方法的返回类型兼容类型不需要完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-455">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-456">在.NET Framework 1.0 和 1.1 版中，类型必须完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-456">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="945cc-457">如果委托参数的类型的限制性强于方法参数的类型，则该委托的参数与该方法的相应参数兼容，因为这可保证传递给委托的参数可以安全地传递给方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-457">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="945cc-458">同样，如果方法的返回类型的限制性强于委托的返回类型，则该委托的返回类型与该方法的返回类型兼容，因为这可保证方法的返回值可以安全地强制转换为委托的返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-458">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-459">例如，一个委托，其类型的参数<xref:System.Collections.Hashtable>和返回类型为<xref:System.Object>可以表示具有类型的参数的方法<xref:System.Object>以及一个返回值类型的<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="945cc-459">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="945cc-460">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="945cc-460">This section contains two code examples.</span></span> <span data-ttu-id="945cc-461">第一个示例演示两种类型的委托可以使用此方法的重载来创建： 打开通过实例方法，并通过静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-461">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="945cc-462">第二个代码示例演示了兼容的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-462">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="945cc-463">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="945cc-463">**Example 1**</span></span>  
  
 <span data-ttu-id="945cc-464">下面的代码示例演示了可以使用此重载创建委托的两种方法<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-464">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-465">有两个重载<xref:System.Delegate.CreateDelegate%2A>方法指定<xref:System.Reflection.MethodInfo>，但不是第一个参数; 它们的功能相同，只一个允许您指定是否引发失败时要将绑定，而是其他总是引发。</span><span class="sxs-lookup"><span data-stu-id="945cc-465">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="945cc-466">此代码示例使用两个重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-466">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="945cc-467">此示例声明一个类`C`静态方法一起`M2`和实例方法`M1`，和两个委托类型：`D1`的实例`C`和一个字符串，和`D2`采用一个字符串。</span><span class="sxs-lookup"><span data-stu-id="945cc-467">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="945cc-468">名为第二个类`Example`包含创建委托的代码。</span><span class="sxs-lookup"><span data-stu-id="945cc-468">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="945cc-469">类型的委托`D1`，表示打开的实例方法，为实例方法创建`M1`。</span><span class="sxs-lookup"><span data-stu-id="945cc-469">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="945cc-470">当调用委托时，必须传递实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-470">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-471">类型的委托`D2`，表示打开的静态方法，为静态方法创建`M2`。</span><span class="sxs-lookup"><span data-stu-id="945cc-471">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="945cc-472">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="945cc-472">**Example 2**</span></span>  
  
 <span data-ttu-id="945cc-473">下面的代码示例演示了兼容性的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-473">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-474">此代码示例使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-474">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="945cc-475">使用其他重载采用<xref:System.Reflection.MethodInfo>类似。</span><span class="sxs-lookup"><span data-stu-id="945cc-475">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="945cc-476">代码示例定义名为的基类`Base`和一个名为类`Derived`派生`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-476">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="945cc-477">派生的类具有`static`(`Shared`在 Visual Basic 中) 名为方法`MyMethod`类型的一个参数与`Base`和返回类型为`Derived`。</span><span class="sxs-lookup"><span data-stu-id="945cc-477">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="945cc-478">代码示例还定义名为的委托`Example`它具有一个参数的类型`Derived`和返回类型为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-478">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="945cc-479">代码示例演示委托名为`Example`可以用来表示该方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-479">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="945cc-480">该方法可以绑定到委托，因为：</span><span class="sxs-lookup"><span data-stu-id="945cc-480">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="945cc-481">委托的参数类型 (`Derived`) 的参数类型比的限制性更强`MyMethod`(`Base`)，以便它始终是安全传递到委托的自变量`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-481">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="945cc-482">返回类型`MyMethod`(`Derived`) 是限制性强于委托的参数类型 (`Base`)，以便它始终是安全的委托的返回类型的方法的返回类型转换。</span><span class="sxs-lookup"><span data-stu-id="945cc-482">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-483">代码示例会生成任何输出。</span><span class="sxs-lookup"><span data-stu-id="945cc-483">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-484">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-484">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-485">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-485">-or-</span>
          </span>
          <span data-ttu-id="945cc-486">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-486">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-487">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-487">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-488">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-488">-or-</span>
          </span>
          <span data-ttu-id="945cc-489">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-489">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-490">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-490">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-491">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-491">-or-</span>
          </span>
          <span data-ttu-id="945cc-492">无法绑定 <paramref name="method" />，且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-492">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="945cc-493">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-493">-or-</span>
          </span>
          <span data-ttu-id="945cc-494">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-494">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="945cc-495">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-496">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-496">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-497">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-497">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-498">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-499">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-500">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-500">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="945cc-501">表示实现 <c>method</c> 的类的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-501">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-502">委托要表示的静态方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-502">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-503">创建指定类型的委托，该委托表示指定类的指定静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-503">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-504">指定类型的委托，该委托表示指定类的指定静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-504">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-505">此方法创建委托只为静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-505">This method creates delegates for static methods only.</span></span> <span data-ttu-id="945cc-506">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-506">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="945cc-507">此方法的重载是等效于调用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法重载，指定`false`有关`ignoreCase`并`true`为`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="945cc-507">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-508">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-508">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-509">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-509">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-510">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-510">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-511">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-511">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-512">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-512">-or-</span>
          </span>
          <span data-ttu-id="945cc-513">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-513">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-514">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-514">-or-</span>
          </span>
          <span data-ttu-id="945cc-515">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-515">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-516">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-516">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-517">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-517">-or-</span>
          </span>
          <span data-ttu-id="945cc-518">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-518">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-519">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-519">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-520">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-520">-or-</span>
          </span>
          <span data-ttu-id="945cc-521">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-521">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-522">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-522">-or-</span>
          </span>
          <span data-ttu-id="945cc-523">
            <paramref name="target" /> 为开放式泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-523">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="945cc-524">也就是说，其 <see cref="P:System.Type.ContainsGenericParameters" /> 属性为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-524">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="945cc-525">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-525">-or-</span>
          </span>
          <span data-ttu-id="945cc-526">
            <paramref name="method" /> 不是 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-526">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="945cc-527">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-527">-or-</span>
          </span>
          <span data-ttu-id="945cc-528">无法绑定 <paramref name="method" />，例如因为找不到它，并且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-528">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-529">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-529">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-530">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-530">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-531">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-531">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-532">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-533">一个 <see cref="T:System.Type" />，表示要创建的委托的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-533">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="945cc-534">一个 <see cref="T:System.Object" />，它是委托表示的方法的第一个参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-534">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="945cc-535">对于实例方法，它必须与实例类型兼容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-535">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-536">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-536">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="945cc-537">如果无法绑定 <c>method</c> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-537">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-538">使用指定的第一个自变量和针对绑定失败的指定行为，创建表示指定的静态方法或实例方法的指定类型的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-538">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-539">表示指定的静态方法或实例方法的指定类型的委托，如果 <paramref name="throwOnBindFailure" /> 为 <see langword="null" />，并且委托无法绑定到 <paramref name="method" />，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-539">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-540">此方法的重载和<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>方法重载，它总是引发绑定失败，提供最灵活的方式来创建委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-540">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="945cc-541">可以使用它们来创建委托的静态或实例方法，无论第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-541">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-542">如果未提供第一个参数，使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法重载，以更好的性能。</span><span class="sxs-lookup"><span data-stu-id="945cc-542">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="945cc-543">委托类型和方法必须具有兼容返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-543">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="945cc-544">返回类型，即`method`必须是可赋值的返回类型为`type`。</span><span class="sxs-lookup"><span data-stu-id="945cc-544">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="945cc-545">如果`firstArgument`是提供，将它传递到`method`每次调用委托时;`firstArgument`称为绑定到委托，委托是说要关闭通过其第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-545">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="945cc-546">如果`method`是`static`(`Shared`在 Visual Basic 中)，则参数调用委托时提供的列表包括除第一个; 以外的所有参数，如果`method`然后是实例方法，`firstArgument`传递到隐藏的实例参数 (由`this`在 C# 中，或由`Me`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="945cc-546">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="945cc-547">如果`firstArgument`提供，则第一个参数`method`必须是引用类型，和`firstArgument`必须与该类型兼容。</span><span class="sxs-lookup"><span data-stu-id="945cc-547">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="945cc-548">如果`method`是`static`(`Shared`在 Visual Basic 中) 且其第一个参数的类型<xref:System.Object>或<xref:System.ValueType>，然后`firstArgument`可以是值类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-548">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="945cc-549">在这种情况下`firstArgument`自动装箱。</span><span class="sxs-lookup"><span data-stu-id="945cc-549">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="945cc-550">自动装箱不会发生的任何其他参数，因为它将在 C# 或 Visual Basic 函数中调用。</span><span class="sxs-lookup"><span data-stu-id="945cc-550">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="945cc-551">如果`firstArgument`为 null 引用和`method`是实例方法，结果取决于委托类型的签名`type`和`method`:</span><span class="sxs-lookup"><span data-stu-id="945cc-551">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="945cc-552">如果签名`type`显式包含的隐藏第一个参数`method`，则委托被称为来表示打开的实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-552">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="945cc-553">当调用委托时，参数列表中的第一个参数传递到隐藏的实例参数`method`。</span><span class="sxs-lookup"><span data-stu-id="945cc-553">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="945cc-554">如果签名的`method`和`type`匹配 （也就是说，所有参数类型都是兼容），则委托称为关闭通过空引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-554">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="945cc-555">调用委托就像不是特别有用的办法就的 null 实例上调用实例方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-555">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="945cc-556">如果`firstArgument`为 null 引用和`method`是静态的结果依赖于委托类型的签名`type`和`method`:</span><span class="sxs-lookup"><span data-stu-id="945cc-556">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="945cc-557">如果签名`method`和`type`匹配 （也就是说，所有参数类型都是兼容），则委托被称为来表示开放的静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-557">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="945cc-558">这是最常见的情况对静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-558">This is the most common case for static methods.</span></span> <span data-ttu-id="945cc-559">在这种情况下，通过获取性能稍好<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-559">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="945cc-560">如果签名`type`开头的第二个参数`method`和参数类型的其余部分是兼容的设备，然后委托被称为封闭式 null 引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-560">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="945cc-561">调用委托时，将为 null 引用传递到的第一个参数`method`。</span><span class="sxs-lookup"><span data-stu-id="945cc-561">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-562">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-562">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-563">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-563">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-564">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-564">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="945cc-565">兼容的参数类型和返回类型</span><span class="sxs-lookup"><span data-stu-id="945cc-565">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="945cc-566">参数类型和委托的返回类型必须与参数类型和委托表示; 方法的返回类型兼容类型不需要完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-566">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-567">.NET Framework 1.0 和 1.1 版中的类型必须完全匹配。</span><span class="sxs-lookup"><span data-stu-id="945cc-567">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="945cc-568">如果委托参数的类型的限制性强于方法参数的类型，则该委托的参数与该方法的相应参数兼容，因为这可保证传递给委托的参数可以安全地传递给方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-568">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="945cc-569">同样，如果方法的返回类型的限制性强于委托的返回类型，则该委托的返回类型与该方法的返回类型兼容，因为这可保证方法的返回值可以安全地强制转换为委托的返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-569">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-570">例如，一个委托，其类型的参数<xref:System.Collections.Hashtable>和返回类型为<xref:System.Object>可以表示具有类型的参数的方法<xref:System.Object>以及一个返回值类型的<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="945cc-570">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="945cc-571">确定方法委托可以表示</span><span class="sxs-lookup"><span data-stu-id="945cc-571">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="945cc-572">另一个有用方法看作的灵活性方面的此重载的<xref:System.Delegate.CreateDelegate%2A>是任何给定的委托可以表示四个不同的方法签名和方法的类型 （静态和实例） 的组合。</span><span class="sxs-lookup"><span data-stu-id="945cc-572">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="945cc-573">委托类型，请考虑`D`带有一个自变量类型的`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-573">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="945cc-574">以下介绍的方法`D`可以表示，因为它必须匹配在所有情况下忽略的返回类型：</span><span class="sxs-lookup"><span data-stu-id="945cc-574">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="945cc-575">`D` 可以表示有且只有一个参数类型的任何实例方法`C`，无论实例方法属于哪种类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-575">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="945cc-576">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`是类型的实例`method`属于，和结果委托所说，通过该实例关闭。</span><span class="sxs-lookup"><span data-stu-id="945cc-576">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="945cc-577">(一般而言，`D`如果还可以通过 null 引用封闭`firstArgument`是`null`。)</span><span class="sxs-lookup"><span data-stu-id="945cc-577">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="945cc-578">`D` 可以表示的实例方法`C`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-578">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="945cc-579">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`为 null 引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-579">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="945cc-580">结果委托表示打开的实例方法，并且的实例`C`必须提供每次调用它时。</span><span class="sxs-lookup"><span data-stu-id="945cc-580">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-581">`D` 可以表示采用一种参数类型的静态方法`C`，和方法可以属于任何类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-581">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="945cc-582">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`为 null 引用。</span><span class="sxs-lookup"><span data-stu-id="945cc-582">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="945cc-583">结果委托表示开放的静态方法，并且的实例`C`必须提供每次调用它时。</span><span class="sxs-lookup"><span data-stu-id="945cc-583">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-584">`D` 可以表示所属类型的静态方法`F`并且有两个参数，类型为`F`并键入`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-584">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="945cc-585">当<xref:System.Delegate.CreateDelegate%2A>调用时，`firstArgument`的一个实例`F`。</span><span class="sxs-lookup"><span data-stu-id="945cc-585">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="945cc-586">生成委托表示静态方法，通过该实例的关闭`F`。</span><span class="sxs-lookup"><span data-stu-id="945cc-586">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="945cc-587">请注意，在这种情况其中`F`和`C`属于同一类型、 静态方法有两个参数为该类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-587">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="945cc-588">(在这种情况下，`D`如果通过 null 引用封闭`firstArgument`是`null`。)</span><span class="sxs-lookup"><span data-stu-id="945cc-588">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="945cc-589">本部分包含三个代码示例。</span><span class="sxs-lookup"><span data-stu-id="945cc-589">This section contains three code examples.</span></span> <span data-ttu-id="945cc-590">第一个示例演示了四种类型的可创建的委托： 关闭通过实例方法，通过实例方法，打开的静态方法，通过打开和关闭通过静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-590">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="945cc-591">第二个代码示例演示了兼容的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-591">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="945cc-592">第三个代码示例定义一个委托类型，并演示可以表示委托类型的所有方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-592">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="945cc-593">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="945cc-593">**Example 1**</span></span>  
  
 <span data-ttu-id="945cc-594">下面的代码示例演示了可以使用此重载创建委托的四个方法<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-594">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-595">有两个重载<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和一个<xref:System.Reflection.MethodInfo>; 它们的功能相同，只一个允许您指定是否引发失败时要将绑定，而是其他总是引发。</span><span class="sxs-lookup"><span data-stu-id="945cc-595">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="945cc-596">此代码示例使用两个重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-596">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="945cc-597">此示例声明一个类`C`使用静态方法`M2`和实例方法`M1`，和三个委托类型：`D1`的实例`C`和一个字符串，`D2`采用一个字符串，并`D3`没有参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-597">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="945cc-598">名为第二个类`Example`包含创建委托的代码。</span><span class="sxs-lookup"><span data-stu-id="945cc-598">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="945cc-599">类型的委托`D2`、 已关闭的实例`C`，为实例方法创建`M1`。</span><span class="sxs-lookup"><span data-stu-id="945cc-599">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="945cc-600">使用不同的字符串，显示的绑定的实例调用`C`始终使用。</span><span class="sxs-lookup"><span data-stu-id="945cc-600">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="945cc-601">类型的委托`D1`，表示打开的实例方法，为实例方法创建`M1`。</span><span class="sxs-lookup"><span data-stu-id="945cc-601">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="945cc-602">当调用委托时，必须传递实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-602">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="945cc-603">类型的委托`D2`，表示打开的静态方法，为静态方法创建`M2`。</span><span class="sxs-lookup"><span data-stu-id="945cc-603">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="945cc-604">最后，类型的委托`D3`、 已关闭的字符串上，为静态方法创建`M2`。</span><span class="sxs-lookup"><span data-stu-id="945cc-604">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="945cc-605">调用方法以显示其使用的绑定的字符串。</span><span class="sxs-lookup"><span data-stu-id="945cc-605">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="945cc-606">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="945cc-606">**Example 2**</span></span>  
  
 <span data-ttu-id="945cc-607">下面的代码示例演示了兼容性的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="945cc-607">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-608">此代码示例使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-608">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="945cc-609">使用其他重载采用<xref:System.Reflection.MethodInfo>类似。</span><span class="sxs-lookup"><span data-stu-id="945cc-609">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="945cc-610">代码示例定义名为的基类`Base`和一个名为类`Derived`派生`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-610">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="945cc-611">派生的类具有`static`(`Shared`在 Visual Basic 中) 名为方法`MyMethod`类型的一个参数与`Base`和返回类型为`Derived`。</span><span class="sxs-lookup"><span data-stu-id="945cc-611">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="945cc-612">代码示例还定义名为的委托`Example`它具有一个参数的类型`Derived`和返回类型为`Base`。</span><span class="sxs-lookup"><span data-stu-id="945cc-612">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="945cc-613">代码示例演示委托名为`Example`可以用来表示该方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-613">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="945cc-614">该方法可以绑定到委托，因为：</span><span class="sxs-lookup"><span data-stu-id="945cc-614">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="945cc-615">委托的参数类型 (`Derived`) 的参数类型比的限制性更强`MyMethod`(`Base`)，以便它始终是安全传递到委托的自变量`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="945cc-615">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="945cc-616">返回类型`MyMethod`(`Derived`) 是限制性强于委托的参数类型 (`Base`)，以便它始终是安全的委托的返回类型的方法的返回类型转换。</span><span class="sxs-lookup"><span data-stu-id="945cc-616">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="945cc-617">代码示例会生成任何输出。</span><span class="sxs-lookup"><span data-stu-id="945cc-617">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="945cc-618">**示例 3**</span><span class="sxs-lookup"><span data-stu-id="945cc-618">**Example 3**</span></span>  
  
 <span data-ttu-id="945cc-619">下面的代码示例显示了一个委托类型可以表示的所有方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-619">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-620">有两个重载<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和一个<xref:System.Reflection.MethodInfo>; 它们的功能相同，只一个允许您指定是否引发失败时要将绑定，而是其他总是引发。</span><span class="sxs-lookup"><span data-stu-id="945cc-620">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="945cc-621">此代码示例使用两个重载。</span><span class="sxs-lookup"><span data-stu-id="945cc-621">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="945cc-622">代码示例定义两个类：`C`并`F`，和委托类型`D`带有一个自变量类型的`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-622">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="945cc-623">类具有匹配的静态和实例方法`M1`， `M3`，并`M4`，和类`C`还具有实例方法`M2`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-623">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="945cc-624">名为第三个类`Example`包含创建委托的代码。</span><span class="sxs-lookup"><span data-stu-id="945cc-624">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="945cc-625">委托实例创建方法`M1`类型的`C`并键入`F`; 每个已关闭对相应类型的实例。</span><span class="sxs-lookup"><span data-stu-id="945cc-625">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="945cc-626">方法`M1`类型的`C`显示`ID`属性的绑定实例和自变量。</span><span class="sxs-lookup"><span data-stu-id="945cc-626">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="945cc-627">方法创建委托`M2`类型的`C`。</span><span class="sxs-lookup"><span data-stu-id="945cc-627">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="945cc-628">这是一个开放的实例的委托，委托自变量表示实例方法的隐藏第一个参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-628">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="945cc-629">该方法具有任何其他参数。</span><span class="sxs-lookup"><span data-stu-id="945cc-629">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="945cc-630">为静态方法创建委托`M3`类型的`C`并键入`F`; 这些是打开的静态委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-630">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="945cc-631">最后，为静态方法创建委托`M4`类型的`C`并键入`F`; 每个方法具有作为其第一个参数的声明类型和提供的类型的实例，因此委托关闭通过其第一个参数.</span><span class="sxs-lookup"><span data-stu-id="945cc-631">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="945cc-632">方法`M4`类型的`C`显示`ID`属性的绑定实例和自变量。</span><span class="sxs-lookup"><span data-stu-id="945cc-632">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-633">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-633">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-634">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-634">-or-</span>
          </span>
          <span data-ttu-id="945cc-635">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-635">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-636">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-636">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-637">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-637">-or-</span>
          </span>
          <span data-ttu-id="945cc-638">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-638">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-639">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-639">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-640">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-640">-or-</span>
          </span>
          <span data-ttu-id="945cc-641">无法绑定 <paramref name="method" />，且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-641">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="945cc-642">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-642">-or-</span>
          </span>
          <span data-ttu-id="945cc-643">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-643">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="945cc-644">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-644">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-645">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-645">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-646">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-646">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-647">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-647">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-648">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-648">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-649">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-649">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="945cc-650">类实例，对其调用 <c>method</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-650">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-651">委托要表示的实例方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-651">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="945cc-652">一个布尔值，它指示在比较方法名称时是否忽略大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-652">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-653">创建指定类型的委托，该委托表示要按指定的大小写敏感度对指定类实例调用的指定实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-653">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-654">指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-654">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-655">此方法创建委托实例仅方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-655">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="945cc-656">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-656">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="945cc-657">此方法的重载是等效于调用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法重载，指定`true`为`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="945cc-657">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-658">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-658">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-659">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-659">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-660">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-660">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-661">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-661">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-662">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-662">-or-</span>
          </span>
          <span data-ttu-id="945cc-663">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-663">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-664">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-664">-or-</span>
          </span>
          <span data-ttu-id="945cc-665">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-665">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-666">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-666">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-667">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-667">-or-</span>
          </span>
          <span data-ttu-id="945cc-668">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-668">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-669">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-669">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-670">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-670">-or-</span>
          </span>
          <span data-ttu-id="945cc-671">
            <paramref name="method" /> 不是实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-671">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="945cc-672">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-672">-or-</span>
          </span>
          <span data-ttu-id="945cc-673">无法绑定 <paramref name="method" />，例如因为找不到它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-673">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-674">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-674">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-675">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-675">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-676">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-676">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-677">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-677">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-678">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-678">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="945cc-679">表示实现 <c>method</c> 的类的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-679">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-680">委托要表示的静态方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-680">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="945cc-681">一个布尔值，它指示在比较方法名称时是否忽略大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-681">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-682">使用用于指定是否区分大小写的值创建指定类型的委托，该委托表示指定类的指定静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-682">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-683">指定类型的委托，该委托表示指定类的指定静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-683">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-684">此方法创建委托只为静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-684">This method creates delegates for static methods only.</span></span> <span data-ttu-id="945cc-685">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-685">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="945cc-686">此方法的重载是等效于调用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法重载，指定`true`为`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="945cc-686">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-687">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-687">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-688">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-688">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-689">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-689">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-690">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-690">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-691">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-691">-or-</span>
          </span>
          <span data-ttu-id="945cc-692">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-692">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-693">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-693">-or-</span>
          </span>
          <span data-ttu-id="945cc-694">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-695">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-695">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-696">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-696">-or-</span>
          </span>
          <span data-ttu-id="945cc-697">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-697">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-698">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-698">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-699">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-699">-or-</span>
          </span>
          <span data-ttu-id="945cc-700">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-700">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-701">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-701">-or-</span>
          </span>
          <span data-ttu-id="945cc-702">
            <paramref name="target" /> 为开放式泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-702">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="945cc-703">也就是说，其 <see cref="P:System.Type.ContainsGenericParameters" /> 属性为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-703">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="945cc-704">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-704">-or-</span>
          </span>
          <span data-ttu-id="945cc-705">
            <paramref name="method" /> 不是 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-705">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="945cc-706">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-706">-or-</span>
          </span>
          <span data-ttu-id="945cc-707">无法绑定 <paramref name="method" />，例如因为找不到它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-707">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-708">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-708">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-709">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-709">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-710">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-710">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-711">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-711">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-712">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-712">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="945cc-713">类实例，对其调用 <c>method</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-713">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-714">委托要表示的实例方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-714">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="945cc-715">一个布尔值，它指示在比较方法名称时是否忽略大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-715">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="945cc-716">如果无法绑定 <c>method</c> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-716">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-717">使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示要对指定类实例调用的指定实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-717">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-718">指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-718">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-719">此方法创建委托实例仅方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-719">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="945cc-720">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-720">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-721">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-721">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-722">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-722">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-723">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-723">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-724">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-724">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-725">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-725">-or-</span>
          </span>
          <span data-ttu-id="945cc-726">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-726">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-727">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-727">-or-</span>
          </span>
          <span data-ttu-id="945cc-728">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-728">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-729">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-729">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-730">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-730">-or-</span>
          </span>
          <span data-ttu-id="945cc-731">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-731">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-732">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-732">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-733">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-733">-or-</span>
          </span>
          <span data-ttu-id="945cc-734">
            <paramref name="method" /> 不是实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-734">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="945cc-735">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-735">-or-</span>
          </span>
          <span data-ttu-id="945cc-736">无法绑定 <paramref name="method" />，例如因为找不到它，并且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-736">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-737">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-737">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-738">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-738">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-739">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-739">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-740">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-740">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="945cc-741">要创建的委托的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-741">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="945cc-742">表示实现 <c>method</c> 的类的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-742">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="945cc-743">委托要表示的静态方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-743">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="945cc-744">一个布尔值，它指示在比较方法名称时是否忽略大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-744">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="945cc-745">如果无法绑定 <c>method</c> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-745">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-746">使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示指定类的指定静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-746">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-747">指定类型的委托，该委托表示指定类的指定静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-747">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-748">此方法创建委托只为静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-748">This method creates delegates for static methods only.</span></span> <span data-ttu-id="945cc-749">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-749">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="945cc-750">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共方法，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共方法的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="945cc-750">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="945cc-751">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="945cc-751">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="945cc-752">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="945cc-752">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="945cc-753">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-753">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-754">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-754">-or-</span>
          </span>
          <span data-ttu-id="945cc-755">
            <paramref name="target" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-755">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-756">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-756">-or-</span>
          </span>
          <span data-ttu-id="945cc-757">
            <paramref name="method" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-757">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-758">
            <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-758">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="945cc-759">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-759">-or-</span>
          </span>
          <span data-ttu-id="945cc-760">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-760">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-761">请参阅[反射中的运行时类型](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-761">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="945cc-762">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-762">-or-</span>
          </span>
          <span data-ttu-id="945cc-763">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-763">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="945cc-764">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-764">-or-</span>
          </span>
          <span data-ttu-id="945cc-765">
            <paramref name="target" /> 为开放式泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-765">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="945cc-766">也就是说，其 <see cref="P:System.Type.ContainsGenericParameters" /> 属性为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-766">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="945cc-767">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-767">-or-</span>
          </span>
          <span data-ttu-id="945cc-768">
            <paramref name="method" /> 不是 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-768">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="945cc-769">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-769">-or-</span>
          </span>
          <span data-ttu-id="945cc-770">无法绑定 <paramref name="method" />，例如因为找不到它，并且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-770">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="945cc-771">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-771">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="945cc-772">调用方没有访问 <paramref name="method" /> 所必需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-772">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-773">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-773">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-774">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-774">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="945cc-775">作为自变量传递给当前委托所表示的方法的对象数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-775">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="945cc-776">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-776">-or-</span>
          </span>
          <span data-ttu-id="945cc-777">如果当前委托所表示的方法不需要参数，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-777">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-778">动态调用（后期绑定）由当前委托所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-778">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-779">委托所表示的方法返回的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-779">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-780">此方法调用 <xref:System.Delegate.DynamicInvokeImpl%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-780">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-781">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-781">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="945cc-782">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-782">-or-</span>
          </span>
          <span data-ttu-id="945cc-783">
            <paramref name="args" /> 中列出的参数的数目、顺序或类型无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-783">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-784">对对象或类调用委托所表示的方法，但该对象或类不支持这种方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-784">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="945cc-785">委托所表示的方法是实例方法，目标对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-785">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-786">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-786">-or-</span>
          </span>
          <span data-ttu-id="945cc-787">封装的方法之一引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-787">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-788">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-788">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-789">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-789">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="945cc-790">作为自变量传递给当前委托所表示的方法的对象数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-790">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="945cc-791">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-791">-or-</span>
          </span>
          <span data-ttu-id="945cc-792">如果当前委托所表示的方法不需要参数，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-792">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-793">动态调用（后期绑定）由当前委托所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-793">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-794">委托所表示的方法返回的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-794">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-795">此方法实现 <xref:System.Delegate.DynamicInvoke%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-795">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-796">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-796">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="945cc-797">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-797">-or-</span>
          </span>
          <span data-ttu-id="945cc-798">
            <paramref name="args" /> 中列出的参数的数目、顺序或类型无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-798">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-799">对对象或类调用委托所表示的方法，但该对象或类不支持这种方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-799">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="945cc-800">委托所表示的方法是实例方法，目标对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-800">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="945cc-801">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-801">-or-</span>
          </span>
          <span data-ttu-id="945cc-802">封装的方法之一引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-802">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-803">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-803">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-804">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-804">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="945cc-805">要与当前委托进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-805">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-806">确定指定的对象和当前委托的类型是否相同，是否共享相同的目标、方法和调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-806">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-807">如果 <paramref name="obj" /> 和当前委托具有相同的目标、方法和调用列表，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-807">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-808">如果两个委托不属于同一类型，它们不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-808">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="945cc-809">在.NET Framework 1.0 和 1.1 版中，两个委托已视为好像它们的目标、 方法和调用列表等于，即使委托是不同类型的相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-809">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="945cc-810">这些方法和目标进行比较的相等性，如下所示：</span><span class="sxs-lookup"><span data-stu-id="945cc-810">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="945cc-811">如果所比较的两个方法都是静态并且同一类上的相同方法，这些方法被视为相等，这些目标也被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-811">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="945cc-812">如果要比较的两种方法是实例方法，并且同一对象上的相同方法，这些方法被视为相等，这些目标也被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-812">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="945cc-813">否则为方法不被视为相等，并且目标也不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-813">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="945cc-814">两个调用列表将被视为相同，仅当它们具有相同的顺序，从两个列表的相应元素表示相同的方法和目标。</span><span class="sxs-lookup"><span data-stu-id="945cc-814">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-815">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-815">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-816">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-816">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-817">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="945cc-818">返回委托的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-818">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-819">委托的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-819">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-820">两个原因必须不保留此方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="945cc-820">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="945cc-821">首先，可能会更改类的哈希函数生成更好的分布，使旧的哈希函数中的所有值都无用。</span><span class="sxs-lookup"><span data-stu-id="945cc-821">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="945cc-822">其次，此类的默认实现不保证不同实例将返回相同的值。</span><span class="sxs-lookup"><span data-stu-id="945cc-822">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-823">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-823">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-824">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-824">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="945cc-825">返回委托的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-825">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-826">委托构成的数组，表示当前委托的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-826">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-827">数组中的每个委托表示一个方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-827">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="945cc-828">数组中的委托的顺序是在其中为当前委托调用那些委托所表示的方法的相同顺序。</span><span class="sxs-lookup"><span data-stu-id="945cc-828">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="945cc-829">下面的示例将三种方法分配给委托。</span><span class="sxs-lookup"><span data-stu-id="945cc-829">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="945cc-830">然后，它调用<xref:System.Delegate.GetInvocationList%2A>方法获取的总计数以相反顺序执行委托并执行其名称不包括子字符串的方法分配给该委托的方法的"文件"。</span><span class="sxs-lookup"><span data-stu-id="945cc-830">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-831">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-831">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-832">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-832">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="945cc-833">获取当前委托所表示的静态方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-833">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-834">描述当前委托表示的静态方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-834">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-835">此方法仅适用于当前委托表示静态方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-835">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-836">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-836">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-837">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-837">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-838">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-838">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="945cc-839">不支持。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-839">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="945cc-840">不支持。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-840">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-841">不支持。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-841">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="945cc-842">不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-842">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="945cc-843">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-843">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="945cc-844">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-844">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="945cc-845">获取委托所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-845">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="945cc-846">描述委托所表示的方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-846">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-847">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-847">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-848">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-848">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-849">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-849">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="945cc-850">要比较的第一个委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-850">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="945cc-851">要比较的第二个委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-851">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-852">确定指定的委托是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-852">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-853">如果 <see langword="true" /> 等于 <paramref name="d1" />，则为 <paramref name="d2" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-853">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-854">具有相同的目标、 方法和调用列表的相同类型的两个委托被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-854">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="945cc-855">如果两个委托不属于同一类型，它们不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-855">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="945cc-856">在.NET Framework 1.0 和 1.1 版中，两个委托已视为好像它们的目标、 方法和调用列表等于，即使委托是不同类型的相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-856">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="945cc-857">这些方法和目标进行比较的相等性，如下所示：</span><span class="sxs-lookup"><span data-stu-id="945cc-857">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="945cc-858">如果所比较的两个方法都是静态并且同一类上的相同方法，这些方法被视为相等，这些目标也被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-858">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="945cc-859">如果要比较的两种方法是实例方法，并且同一对象上的相同方法，这些方法被视为相等，这些目标也被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-859">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="945cc-860">否则为方法不被视为相等，并且目标也不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-860">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="945cc-861">如果它们具有相同的顺序，从两个列表的相应元素表示相同的方法和目标，两个调用列表将被视为相同。</span><span class="sxs-lookup"><span data-stu-id="945cc-861">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="945cc-862">此运算符的等效方法是 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="945cc-862">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-863">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-863">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-864">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-864">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="945cc-865">要比较的第一个委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-865">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="945cc-866">要比较的第二个委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-866">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-867">确定指定的委托是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-867">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-868">如果 <see langword="true" /> 不等于 <paramref name="d1" />，则为 <paramref name="d2" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-868">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-869">两个委托被视为不相等如果它们都是不同类型，或具有不同的方法、 不同的目标或不同的调用列表。</span><span class="sxs-lookup"><span data-stu-id="945cc-869">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="945cc-870">如果两个委托不属于同一类型，它们不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-870">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="945cc-871">在.NET Framework 1.0 和 1.1 版中，两个委托被视为好像它们的目标、 方法和调用列表等于，即使委托是不同类型的相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-871">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="945cc-872">这些方法和目标进行比较的相等性，如下所示：</span><span class="sxs-lookup"><span data-stu-id="945cc-872">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="945cc-873">如果所比较的两个方法都是静态并且同一类上的相同方法，这些方法被视为相等，这些目标也被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-873">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="945cc-874">如果要比较的两种方法是实例方法，并且同一对象上的相同方法，这些方法被视为相等，这些目标也被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-874">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="945cc-875">否则为方法不被视为相等，并且目标也不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="945cc-875">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="945cc-876">两个调用列表不相等，如果它们具有不同的大小，如果它们的顺序不同，或者从一个列表中至少一个元素表示的方法或不同于由其他列表中的对应元素的目标。</span><span class="sxs-lookup"><span data-stu-id="945cc-876">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="945cc-877">此运算符的等效方法是 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="945cc-877">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-878">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-878">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-879">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-879">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="945cc-880">委托，将从中移除 <c>value</c> 的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-880">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="945cc-881">委托，它提供从 <c>source</c> 调用列表中移除的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-881">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-882">从一个委托的调用列表中移除另一个委托的最后一个调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-882">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-883">一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="value" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="source" /> 的最后一个调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-883">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="945cc-884">如果 <paramref name="source" /> 为 <see langword="null" />，或在 <paramref name="value" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-884">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="945cc-885">如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，或 <paramref name="source" /> 为空引用，则返回空引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-885">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-886">如果的调用列表`value`匹配一组相邻的调用列表中的元素`source`，然后调用列表`value`说过的调用列表中出现`source`。</span><span class="sxs-lookup"><span data-stu-id="945cc-886">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="945cc-887">如果调用列表`value`的调用列表中出现多次`source`，删除最后一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="945cc-887">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-888">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-888">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-889">委托类型不匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-889">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-890">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-890">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-891">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-891">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="945cc-892">委托，将从中移除 <c>value</c> 的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-892">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="945cc-893">委托，它提供从 <c>source</c> 调用列表中移除的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-893">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-894">从一个委托的调用列表中移除另一个委托的所有调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-894">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-895">一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="value" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="source" /> 的所有调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-895">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="945cc-896">如果 <paramref name="source" /> 为 <see langword="null" />，或在 <paramref name="value" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-896">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="945cc-897">如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，如果 <paramref name="source" /> 只包含等于 <paramref name="value" /> 的调用列表的一系列调用列表，或者如果 <paramref name="source" /> 为空引用，则返回空引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-897">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-898">如果的调用列表`value`匹配一组相邻的调用列表中的元素`source`，然后调用列表`value`说过的调用列表中出现`source`。</span><span class="sxs-lookup"><span data-stu-id="945cc-898">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="945cc-899">如果调用列表`value`的调用列表中出现多次`source`，删除所有匹配项。</span><span class="sxs-lookup"><span data-stu-id="945cc-899">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-900">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-900">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="945cc-901">委托类型不匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-901">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-902">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-902">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-903">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-903">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="945cc-904">委托，它提供要从当前委托的调用列表中移除的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-904">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="945cc-905">从一个委托的调用列表中移除另一个委托的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-905">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="945cc-906">一个新委托，其调用列表的构成方法为：获取当前委托的调用列表，如果在当前委托的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="value" /> 的调用列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-906">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="945cc-907">如果 <paramref name="value" /> 为 <see langword="null" />，或者在当前委托的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回当前委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-907">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="945cc-908">如果 <paramref name="value" /> 的调用列表等于当前委托的调用列表，则返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-908">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-909">如果调用列表`value`匹配一组相邻的当前委托的调用列表，然后调用列表中的元素`value`说发生在当前委托的调用列表中。</span><span class="sxs-lookup"><span data-stu-id="945cc-909">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="945cc-910">如果调用列表的`value`出现不止一次当前委托的调用列表中删除最后一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="945cc-910">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="945cc-911">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-911">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-912">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-912">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-913">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-913">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="945cc-914">获取类实例，当前委托将对其调用实例方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-914">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="945cc-915">如果委托表示实例方法，则为当前委托对其调用实例方法的对象；如果委托表示静态方法，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-915">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="945cc-916">另一实例方法是与类; 的实例相关联的方法静态方法是与类本身相关联的方法。</span><span class="sxs-lookup"><span data-stu-id="945cc-916">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="945cc-917">如果该委托调用一个或多个实例方法，此属性将返回目标的最后一个实例方法的调用列表中。</span><span class="sxs-lookup"><span data-stu-id="945cc-917">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="945cc-918">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-918">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="945cc-919">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="945cc-919">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>