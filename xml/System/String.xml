<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="String.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">037e736f-f76f-422a-bcb7-5d2d599f851d401fd31105c0672ff290b44bd02a359e72436589.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">401fd31105c0672ff290b44bd02a359e72436589</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fc53860cd2661bb7bde6e4b2858fcda4ec4c889</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/10/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Represents text as a sequence of UTF-16 code units.</source>
          <target state="translated">将文本表示为 UTF-16 代码单元的序列。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A string is a sequential collection of characters that is used to represent text.</source>
          <target state="translated">字符串是用于表示文本的字符的有序集合。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A <ph id="ph1">&lt;xref:System.String&gt;</ph> object is a sequential collection of <ph id="ph2">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> objects that represent a string; a <ph id="ph3">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> object corresponds to a UTF-16 code unit.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.String&gt;</ph>对象是的有序集合<ph id="ph2">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph>对象表示一个字符串;<ph id="ph3">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph>对象都对应于一个 utf-16 代码单元。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The value of the <ph id="ph1">&lt;xref:System.String&gt;</ph> object is the content of the sequential collection of <ph id="ph2">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> objects, and that value is immutable (that is, it is read-only).</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.String&gt;</ph>对象是有序集合的内容<ph id="ph2">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph>对象，并且值是不可变 （即，它是只读的）。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information about the immutability of strings, see the <bpt id="p1">[</bpt>Immutability and the StringBuilder class<ept id="p1">](#Immutability)</ept> section later in this topic.</source>
          <target state="translated">字符串的不可变性的详细信息，请参阅<bpt id="p1">[</bpt>不可变性和 StringBuilder 类<ept id="p1">](#Immutability)</ept>本主题中后面的部分。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The maximum size of a <ph id="ph1">&lt;xref:System.String&gt;</ph> object in memory is 2GB, or about 1 billion characters.</source>
          <target state="translated">最大大小<ph id="ph1">&lt;xref:System.String&gt;</ph>在内存中的对象是 2 GB，还是约 1 亿个字符。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In this section:</source>
          <target state="translated">本节内容：</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Instantiating a String object<ept id="p1">](#Instantiation)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>实例化字符串对象<ept id="p1">](#Instantiation)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Char objects and Unicode characters<ept id="p1">](#Characters)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Char 对象和 Unicode 字符<ept id="p1">](#Characters)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Strings and The Unicode Standard<ept id="p1">](#Unicode)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>字符串和 Unicode 标准<ept id="p1">](#Unicode)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Strings and embedded null characters<ept id="p1">](#EmbeddedNulls)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>字符串和嵌入的空字符<ept id="p1">](#EmbeddedNulls)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Strings and indexes<ept id="p1">](#Indexes)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>字符串和索引<ept id="p1">](#Indexes)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Null strings and empty strings<ept id="p1">](#Nulls)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Null 字符串和空字符串<ept id="p1">](#Nulls)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Immutability and the StringBuilder class<ept id="p1">](#Immutability)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>不可变性和 StringBuilder 类<ept id="p1">](#Immutability)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Ordinal vs. culture-sensitive operations<ept id="p1">](#CultureSensitive)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>序号与区分区域性的操作<ept id="p1">](#CultureSensitive)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Normalization<ept id="p1">](#Normalization)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>规范化<ept id="p1">](#Normalization)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>String operations by category<ept id="p1">](#ByCategory)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>按类别列出的字符串操作<ept id="p1">](#ByCategory)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Instantiating a String object</source>
          <target state="translated">实例化字符串对象</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.String&gt;</ph> object in the following ways:</source>
          <target state="translated">可以实例化<ph id="ph1">&lt;xref:System.String&gt;</ph>对象通过以下方式：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By assigning a string literal to a <ph id="ph1">&lt;xref:System.String&gt;</ph> variable.</source>
          <target state="translated">通过将分配一个字符串赋给<ph id="ph1">&lt;xref:System.String&gt;</ph>变量。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is the most commonly used method for creating a string.</source>
          <target state="translated">这是用于创建字符串的最常用的方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses assignment to create several strings.</source>
          <target state="translated">下面的示例使用分配创建多个字符串。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that in C#, because the backslash (<ph id="ph1">\\</ph>) is an escape character, literal backslashes in a string must be escaped or the entire string must be <ph id="ph2">@-quoted</ph>.</source>
          <target state="translated">请注意，在 C# 中，因为反斜杠 (<ph id="ph1">\\</ph>) 是转义字符，必须转义字符串中的文本反斜杠或整个字符串必须是<ph id="ph2">@-quoted</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By calling a <ph id="ph1">&lt;xref:System.String&gt;</ph> class constructor.</source>
          <target state="translated">通过调用<ph id="ph1">&lt;xref:System.String&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example instantiates strings by calling several class constructors.</source>
          <target state="translated">下面的示例通过调用多个类构造函数实例化字符串。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.</source>
          <target state="translated">请注意，一些构造函数包含指向字符数组或作为参数的有符号的字节数组的指针。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Visual Basic does not support calls to these constructors.</source>
          <target state="translated">Visual Basic 不支持对这些构造函数的调用。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For detailed information about <ph id="ph1">&lt;xref:System.String&gt;</ph> constructors, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;xref:System.String&gt;</ph>构造函数，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By using the string concatenation operator (+ in C# and &amp; or + in Visual Basic) to create a single string from any combination of <ph id="ph1">&lt;xref:System.String&gt;</ph> instances and string literals.</source>
          <target state="translated">通过使用字符串串联运算符 (+ C# 中和 （&amp; a) 或 + 在 Visual Basic 中) 从的任意组合创建单个字符串<ph id="ph1">&lt;xref:System.String&gt;</ph>实例和字符串文本。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the use of the string concatenation operator.</source>
          <target state="translated">下面的示例演示如何使用字符串串联运算符。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By retrieving a property or calling a method that returns a string.</source>
          <target state="translated">通过检索属性或调用的方法可返回一个字符串。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses the methods of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class to extract a substring from a larger string.</source>
          <target state="translated">下面的示例使用的方法<ph id="ph1">&lt;xref:System.String&gt;</ph>类来从较大字符串中提取子字符串。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By calling a formatting method to convert a value or object to its string representation.</source>
          <target state="translated">通过调用格式设置方法将值或对象转换为其字符串表示形式。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses the                <bpt id="p1">[</bpt>composite formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> feature to embed the string representation of two objects into a string.</source>
          <target state="translated">下面的示例使用<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>功能嵌入两个对象的字符串表示形式转换为字符串。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Char objects and Unicode characters</source>
          <target state="translated">Char 对象和 Unicode 字符</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.</source>
          <target state="translated">由 Unicode 标量值，也称为 Unicode 码位或的 Unicode 字符的序号 （数字） 值定义字符串中的每个字符。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <ph id="ph1">&lt;xref:System.Char&gt;</ph> object.</source>
          <target state="translated">每个码位编码使用 utf-16 编码，和的数值的编码的每个元素都由<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that, because a <ph id="ph1">&lt;xref:System.String&gt;</ph> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <ph id="ph2">&lt;xref:System.String&gt;</ph> object that is not a well-formed Unicode string.</source>
          <target state="translated">请注意，因为<ph id="ph1">&lt;xref:System.String&gt;</ph>实例包含 utf-16 代码单元的有序集合，可以创建<ph id="ph2">&lt;xref:System.String&gt;</ph>不是格式正确的 Unicode 字符串的对象。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.</source>
          <target state="translated">例如，就可以创建具有无相应的高代理项的低代理项的字符串。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Although some methods, such as the methods of encoding and decoding objects in the <ph id="ph1">&lt;xref:System.Text&gt;</ph> namespace, may performs checks to ensure that strings are well-formed, <ph id="ph2">&lt;xref:System.String&gt;</ph> class members don't ensure that a string is well-formed.</source>
          <target state="translated">尽管某些方法，如编码和解码中的对象的方法<ph id="ph1">&lt;xref:System.Text&gt;</ph>命名空间，可能会执行检查，以确保字符串是格式正确<ph id="ph2">&lt;xref:System.String&gt;</ph>类成员不能确保字符串的格式正确。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A single <ph id="ph1">&lt;xref:System.Char&gt;</ph> object usually represents a single code point; that is, the numeric value of the <ph id="ph2">&lt;xref:System.Char&gt;</ph> equals the code point.</source>
          <target state="translated">单个<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象通常表示单个码位; 也就是说的数值<ph id="ph2">&lt;xref:System.Char&gt;</ph>等于码位。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the code point for the character "a" is U+0061.</source>
          <target state="translated">例如，码位的字符"a"为 U + 0061。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, a code point might require more than one encoded element (more than one <ph id="ph1">&lt;xref:System.Char&gt;</ph> object).</source>
          <target state="translated">但是，代码点可能需要多个编码的元素 (多个<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象)。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The Unicode standard defines two types of characters that correspond to multiple <ph id="ph1">&lt;xref:System.Char&gt;</ph> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.</source>
          <target state="translated">Unicode 标准定义了两种类型的字符对应到多个<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象： graphemes 和对应的 Unicode 补充平面中的字符的 Unicode 补充码位。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A grapheme is represented by a base character followed by one or more combining characters.</source>
          <target state="translated">由基字符后跟一个或多个组合字符表示字形。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the character ä is represented by a <ph id="ph1">&lt;xref:System.Char&gt;</ph> object whose code point is U+0061 followed by a <ph id="ph2">&lt;xref:System.Char&gt;</ph> object whose code point is U+0308.</source>
          <target state="translated">例如，由一个表示字符 ä<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象，其码位为 U + 0061 跟一个<ph id="ph2">&lt;xref:System.Char&gt;</ph>其码位为 U + 0308年的对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This character can also be defined by a single <ph id="ph1">&lt;xref:System.Char&gt;</ph> object that has a code point of U+00E4.</source>
          <target state="translated">此字符也可定义由单个<ph id="ph1">&lt;xref:System.Char&gt;</ph>具有 U + 00E4 码位的对象。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.</source>
          <target state="translated">如下面的示例所示，相等的区分区域性的比较指示这两种表示相等，尽管普通序号比较不。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.</source>
          <target state="translated">但是，如果两个字符串进行规范化，序号比较还指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(For more information on normalizing strings, see the <bpt id="p1">[</bpt>Normalization<ept id="p1">](#Normalization)</ept> section.)</source>
          <target state="translated">(有关规范化字符串的详细信息，请参阅<bpt id="p1">[</bpt>规范化<ept id="p1">](#Normalization)</ept>部分。)</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A Unicode supplementary code point (a surrogate pair) is represented by a <ph id="ph1">&lt;xref:System.Char&gt;</ph> object whose code point is a high surrogate followed by a <ph id="ph2">&lt;xref:System.Char&gt;</ph> object whose code point is a low surrogate.</source>
          <target state="translated">补充代码点 （代理项对） 表示通过 Unicode<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象，其码位是一个高代理项跟<ph id="ph2">&lt;xref:System.Char&gt;</ph>其码位是一个低代理项的对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The code units of high surrogates range from U+D800 to U+DBFF.</source>
          <target state="translated">高代理项范围从 U + D800 到 U + DBFF 代码单元。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The code units of low surrogates range from U+DC00 to U+DFFF.</source>
          <target state="translated">低代理项范围从 U + DC00 到 U + DFFF 代码单元。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.</source>
          <target state="translated">代理项对用于表示 16 的 Unicode 补充平面中的字符。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example creates a surrogate character and passes it to the <ph id="ph1">&lt;xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph> method to determine whether it is a surrogate pair.</source>
          <target state="translated">下面的示例创建一个代理项字符并将其传递给<ph id="ph1">&lt;xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph>方法来确定它是否是一个代理项对。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Strings and The Unicode Standard</source>
          <target state="translated">字符串和 Unicode 标准</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Characters in a string are represented by UTF-16 encoded code units, which correspond to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">字符串中的字符编码的 utf-16 代码单元，它们分别对应于由表示<ph id="ph1">&lt;xref:System.Char&gt;</ph>值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <ph id="ph1">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> enumeration.</source>
          <target state="translated">字符串中的每个字符已由.NET Framework 中表示的关联的 Unicode 字符类别<ph id="ph1">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The category of a character or a surrogate pair can be determined by calling the <ph id="ph1">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">可以调用来确定一个字符或代理项对类别<ph id="ph1">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET maintains its own table of characters and their corresponding categories, which ensures that a specific version of a .NET implementation running on different platforms returns identical character category information.</source>
          <target state="translated">.NET 维护其自己表的字符和其相应的类别，这将确保在不同平台上运行的.NET 实现的特定版本，返回相同的字符类别信息。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following table lists .NET versions and the versions of the Unicode Standard on which their character categories are based.</source>
          <target state="translated">下表列出.NET 版本和其字符类别所基于的 Unicode 标准版本。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET Framework version</source>
          <target state="translated">.NET Framework 版本</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Version of the Unicode Standard</source>
          <target state="translated">Unicode 标准版本</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 4.0.0<ept id="p1">](https://www.unicode.org/versions/Unicode4.0.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，4.0.0 版<ept id="p1">](https://www.unicode.org/versions/Unicode4.0.0/)</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The .NET Framework 2.0</source>
          <target state="translated">.NET Framework 2.0</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 8.0.0<ept id="p1">](https://www.unicode.org/versions/Unicode8.0.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，8.0.0 版<ept id="p1">](https://www.unicode.org/versions/Unicode8.0.0/)</ept></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET Core (all versions)</source>
          <target state="translated">.NET 核心 （所有版本）</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 8.0.0<ept id="p1">](https://www.unicode.org/versions/Unicode8.0.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，8.0.0 版<ept id="p1">](https://www.unicode.org/versions/Unicode8.0.0/)</ept></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard.</source>
          <target state="translated">此外，.NET Framework 支持的字符串比较和排序基于 Unicode 标准。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In versions of the .NET Framework through the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework maintains its own table of string data.</source>
          <target state="translated">在通过.NET Framework 的版本<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，.NET Framework 维护其自己的字符串数据的表。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is also true of versions of the .NET Framework starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> running on Windows 7.</source>
          <target state="translated">这也是如此开头的.NET framework 的版本<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>在 Windows 7 上运行。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>Window 8 和更高版本的 Windows 操作系统上运行，运行时委托字符串比较和排序操作到操作系统。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.</source>
          <target state="translated">下表列出的.NET Framework 版本和 Unicode 标准的字符的比较和排序所基于的版本。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET Framework version</source>
          <target state="translated">.NET Framework 版本</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Version of the Unicode Standard</source>
          <target state="translated">Unicode 标准版本</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 4.0.0<ept id="p1">](https://www.unicode.org/versions/Unicode4.0.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，4.0.0 版<ept id="p1">](https://www.unicode.org/versions/Unicode4.0.0/)</ept></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The .NET Framework 2.0</source>
          <target state="translated">.NET Framework 2.0</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later on Windows 7</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> 和更高版本在 Windows 7</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本为 5.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode5.0.0)</ept></target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later on Windows 8 and later Windows operating systems</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> 和更高版本在 Windows 8 和更高版本的 Windows 操作系统</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 标准，版本 6.3.0<ept id="p1">](https://www.unicode.org/versions/Unicode6.3.0/)</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In .NET Core, sorting and comparison operations are based on <bpt id="p1">[</bpt>Version 8.0.0 of the Unicode Standard<ept id="p1">](https://www.unicode.org/versions/Unicode8.0.0/)</ept>.</source>
          <target state="translated">在.NET 核心中排序和比较操作基于<bpt id="p1">[</bpt>Unicode 标准版本 8.0.0<ept id="p1">](https://www.unicode.org/versions/Unicode8.0.0/)</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Strings and embedded null characters</source>
          <target state="translated">字符串和嵌入的空字符</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In the .NET Framework, a <ph id="ph1">&lt;xref:System.String&gt;</ph> object can include embedded null characters, which count as a part of the string's length.</source>
          <target state="translated">在.NET Framework 中，<ph id="ph1">&lt;xref:System.String&gt;</ph>对象可以包括嵌入的 null 字符，计数作为字符串的长度的一部分。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length.</source>
          <target state="translated">但是，在某些语言，如 C 和 c + +，null 字符指示一个字符串的末尾; 它不被视为字符串的一部分，并且不被视为字符串的长度的一部分。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <ph id="ph1">&lt;xref:System.String&gt;</ph> objects:</source>
          <target state="translated">这意味着 C 和 c + + 程序员或用 C 或 c + + 编写的库可能会使有关字符串的下列常规假设不一定是有效时应用于<ph id="ph1">&lt;xref:System.String&gt;</ph>对象：</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The value returned by the <ph id="ph1">`strlen`</ph> or <ph id="ph2">`wcslen`</ph> functions does not necessarily equal <ph id="ph3">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">返回的值<ph id="ph1">`strlen`</ph>或<ph id="ph2">`wcslen`</ph>函数不一定等于<ph id="ph3">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The string created by the <ph id="ph1">`strcpy_s`</ph> or <ph id="ph2">`wcscpy_s`</ph> functions is not necessarily identical to the string created by the <ph id="ph3">&lt;xref:System.String.Copy%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过创建字符串<ph id="ph1">`strcpy_s`</ph>或<ph id="ph2">`wcscpy_s`</ph>函数不一定相同的字符串创建的<ph id="ph3">&lt;xref:System.String.Copy%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You should ensure that native C and C++ code that instantiates <ph id="ph1">&lt;xref:System.String&gt;</ph> objects, and code that is passed <ph id="ph2">&lt;xref:System.String&gt;</ph> objects through platform invoke, don't assume that an embedded null character marks the end of the string.</source>
          <target state="translated">你应确保实例化该本机 C 和 c + + 代码<ph id="ph1">&lt;xref:System.String&gt;</ph>对象，并传入代码<ph id="ph2">&lt;xref:System.String&gt;</ph>对象通过平台调用、 不要想当然地嵌入的 null 字符将标记字符串的末尾。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.</source>
          <target state="translated">此外在排序 （或比较） 字符串时，并将搜索字符串时，字符串中嵌入的空字符的处理方式不同。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.</source>
          <target state="translated">执行包括使用固定区域性的比较的两个字符串之间的区分区域性的比较时，将忽略 null 字符。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>They are considered only for ordinal or case-insensitive ordinal comparisons.</source>
          <target state="translated">它们都仅进行序号或不区分大小写的序号比较。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>On the other hand, embedded null characters are always considered when searching a string with methods such as <ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.String.StartsWith%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.String.IndexOf%2A&gt;</ph>.</source>
          <target state="translated">另一方面，嵌入的空字符始终被视为如使用方法搜索字符串时<ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.String.StartsWith%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.String.IndexOf%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Strings and indexes</source>
          <target state="translated">字符串和索引</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An index is the position of a <ph id="ph1">&lt;xref:System.Char&gt;</ph> object (not a Unicode character) in a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">索引是的位置<ph id="ph1">&lt;xref:System.Char&gt;</ph>中的对象 （而不是 Unicode 字符） <ph id="ph2">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.</source>
          <target state="translated">索引是从为索引位置零的字符串中的第一个位置开始的从零开始的、 非负数字。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A number of search methods, such as <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, return the index of a character or substring in the string instance.</source>
          <target state="translated">一个数字的搜索方法，如<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>、 返回字符的索引或字符串实例中子字符串。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Chars%2A&gt;</ph> property lets you access individual <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects by their index position in the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Chars%2A&gt;</ph>属性，允许你访问单个<ph id="ph2">&lt;xref:System.Char&gt;</ph>按其在字符串中的索引位置的对象。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the <ph id="ph1">&lt;xref:System.String.Chars%2A&gt;</ph> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects in a string by using code such as the following.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String.Chars%2A&gt;</ph>属性为默认属性 （在 Visual Basic 中) 或索引器 （在 C# 中)，您可以访问个人<ph id="ph2">&lt;xref:System.Char&gt;</ph>中使用类似以下的代码的字符串对象。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This code looks for white space or punctuation characters in a string to determine how many words the string contains.</source>
          <target state="translated">此代码将查找空白字符或字符串以确定该字符串包含的单词数中的标点字符。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the <ph id="ph1">&lt;xref:System.String&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, you can also iterate through the <ph id="ph3">&lt;xref:System.Char&gt;</ph> objects in a string by using a <ph id="ph4">`foreach`</ph> construct, as the following example shows.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String&gt;</ph>类实现<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>接口，还可以循环通过<ph id="ph3">&lt;xref:System.Char&gt;</ph>中使用的字符串对象<ph id="ph4">`foreach`</ph>构造，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <ph id="ph1">&lt;xref:System.Char&gt;</ph> object.</source>
          <target state="translated">因为的 Unicode 字符可能是编码为多个连续的索引值不可能对应于连续的 Unicode 字符，<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.</source>
          <target state="translated">具体而言，字符串可能包含由基字符后跟一个或多个组合字符或代理项对形成时，多字符文本单位。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To work with Unicode characters instead of <ph id="ph1">&lt;xref:System.Char&gt;</ph> objects, use the <ph id="ph2">&lt;xref:System.Globalization.StringInfo?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> classes.</source>
          <target state="translated">使用 Unicode 字符，而不是<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象，请使用<ph id="ph2">&lt;xref:System.Globalization.StringInfo?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the difference between code that works with <ph id="ph1">&lt;xref:System.Char&gt;</ph> objects and code that works with Unicode characters.</source>
          <target state="translated">下面的示例演示使用代码的之间的差异<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象和适用于 Unicode 字符代码。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It compares the number of characters or text elements in each word of a sentence.</source>
          <target state="translated">它比较字符或中的句子的每个单词的文本元素的数。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The string includes two sequences of a base character followed by a combining character.</source>
          <target state="translated">该字符串包含两个的基字符后跟组合字符序列。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This example works with text elements by using the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> class to enumerate all the text elements in a string.</source>
          <target state="translated">此示例适用于文本元素通过使用<ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph>类来枚举字符串的所有文本元素。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can also retrieve an array that contains the starting index of each text element by calling the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">您还可以检索通过调用包含每个文本元素的起始索引的数组<ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information about working with units of text rather than individual <ph id="ph1">&lt;xref:System.Char&gt;</ph> values, see the <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> class.</source>
          <target state="translated">有关使用文本，而不是单个单位<ph id="ph1">&lt;xref:System.Char&gt;</ph>值，请参阅<ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Null strings and empty strings</source>
          <target state="translated">Null 字符串和空字符串</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A string that has been declared but has not been assigned a value is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">已声明但尚未分配值的字符串<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Attempting to call methods on that string throws a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>.</source>
          <target state="translated">尝试在该字符串上调用方法将引发<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A null string is different from an empty string, which is a string whose value is "" or <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Null 字符串是不同于空字符串，这是一个字符串，其值""或<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.</source>
          <target state="translated">在某些情况下，将 null 字符串或空字符串作为方法调用中的参数传递的操作将会引发异常。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, passing a null string to the <ph id="ph1">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>, and passing an empty string throws a <ph id="ph3">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">例如，将传递到一个 null 字符串<ph id="ph1">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph>方法抛出异常<ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>，并传递空字符串将引发<ph id="ph3">&lt;xref:System.FormatException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In other cases, a method argument can be either a null string or an empty string.</source>
          <target state="translated">在其他情况下，方法自变量可以是空字符串或空字符串。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, if you are providing an <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> implementation for a class, you want to equate both a null string and an empty string with the general ("G") format specifier.</source>
          <target state="translated">例如，如果你要提供<ph id="ph1">&lt;xref:System.IFormattable&gt;</ph>类实现中的，你想要将一个 null 字符串和一个空字符串视为相等与常规 ("G") 格式说明符。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> class includes the following two convenience methods that enable you to test whether a string is <ph id="ph2">`null`</ph> or empty:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String&gt;</ph>类包括以下两个方便的方法，使您能够测试字符串是否为<ph id="ph2">`null`</ph>或为空：</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>, which indicates whether a string is either <ph id="ph2">`null`</ph> or is equal to  <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>指示是否字符串是<ph id="ph2">`null`</ph>或等于<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This method eliminates the need to use code such as the following:</source>
          <target state="translated">此方法无需使用例如以下代码：</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph>, which indicates whether a string is <ph id="ph2">`null`</ph>, equals <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, or consists exclusively of white-space characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph>指示一个字符串是否<ph id="ph2">`null`</ph>，等于<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>，或仅由空白字符组成。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This method eliminates the need to use code such as the following:</source>
          <target state="translated">此方法无需使用例如以下代码：</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method in the <ph id="ph2">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation of a custom <ph id="ph3">`Temperature`</ph> class.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>中的方法<ph id="ph2">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph>的自定义实现<ph id="ph3">`Temperature`</ph>类。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The method supports the "G", "C", "F", and "K" format strings.</source>
          <target state="translated">该方法支持"G"、"C"、"F"和"K"格式字符串。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If an empty format string or a format string whose value is <ph id="ph1">`null`</ph> is passed to the method, its value is changed to the "G" format string.</source>
          <target state="translated">如果将空格式字符串或格式字符串的值是<ph id="ph1">`null`</ph>传递给方法，其值更改为"G"格式字符串。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Immutability and the StringBuilder class</source>
          <target state="translated">不可变性和 StringBuilder 类</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A <ph id="ph1">&lt;xref:System.String&gt;</ph> object is called immutable (read-only), because its value cannot be modified after it has been created.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.String&gt;</ph>对象称为不可变 （只读），因为它已被创建后不能修改其值。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Methods that appear to modify a <ph id="ph1">&lt;xref:System.String&gt;</ph> object actually return a new <ph id="ph2">&lt;xref:System.String&gt;</ph> object that contains the modification.</source>
          <target state="translated">看起来要修改的方法<ph id="ph1">&lt;xref:System.String&gt;</ph>对象实际返回一个新<ph id="ph2">&lt;xref:System.String&gt;</ph>包含修改的对象。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.</source>
          <target state="translated">由于字符串是不可变，执行的字符串操作例程重复添加或删除操作到看起来是单个字符串可以精确显著的性能损失。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.</source>
          <target state="translated">例如，下面的代码使用的随机数生成器使用 1000年个字符，范围从 0x0001 到 0x052F 中创建一个字符串。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Although the code appears to use string concatenation to append a new character to the existing string named <ph id="ph1">`str`</ph>, it actually creates a new <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each concatenation operation.</source>
          <target state="translated">尽管代码会使用字符串串联以将新字符追加到名为的现有字符串<ph id="ph1">`str`</ph>，它实际创建一个新<ph id="ph2">&lt;xref:System.String&gt;</ph>为每个串联操作的对象。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class instead of the <ph id="ph2">&lt;xref:System.String&gt;</ph> class for operations that make multiple changes to the value of a string.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>类而不是<ph id="ph2">&lt;xref:System.String&gt;</ph>类用于对字符串的值进行多个更改的操作。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Unlike instances of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class, <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.</source>
          <target state="translated">与实例的不同<ph id="ph1">&lt;xref:System.String&gt;</ph>类，<ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph>是可变的对象; 当你连接、 追加或删除从字符串的子字符串，在单个字符串上执行的操作。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>When you have finished modifying the value of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, you can call its <ph id="ph2">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType&gt;</ph> method to convert it to a string.</source>
          <target state="translated">完成后修改的值<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>对象，可以调用其<ph id="ph2">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType&gt;</ph>方法将其转换为字符串。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example replaces the <ph id="ph1">&lt;xref:System.String&gt;</ph> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
          <target state="translated">下面的示例替换<ph id="ph1">&lt;xref:System.String&gt;</ph>在前面的示例可用于连接到从 0x0001 到与 0x052F 的范围内的 1000 个随机字符<ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Ordinal vs. culture-sensitive operations</source>
          <target state="translated">序号与区分区域性的操作</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Members of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class perform either ordinal or culture-sensitive (linguistic) operations on a <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">成员<ph id="ph1">&lt;xref:System.String&gt;</ph>类执行序号或区分区域性的 （语言） 操作<ph id="ph2">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An ordinal operation acts on the numeric value of each <ph id="ph1">&lt;xref:System.Char&gt;</ph> object.</source>
          <target state="translated">序号操作将作用于每个数值<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A culture-sensitive operation acts on the value of the <ph id="ph1">&lt;xref:System.String&gt;</ph> object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.</source>
          <target state="translated">区分区域性的操作作用于的值<ph id="ph1">&lt;xref:System.String&gt;</ph>对象，并采用特定于区域性的大小写、 排序、 格式和考虑分析规则。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.</source>
          <target state="translated">显式声明的区域性或隐式的当前区域性的上下文中执行区分区域性的操作。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The two kinds of operations can produce very different results when they are performed on the same string.</source>
          <target state="translated">它们在相同的字符串执行时，两种操作可以生成非常不同的结果。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>), which is loosely based on the culture settings of the English language independent of region.</source>
          <target state="translated">.NET Framework 还支持通过使用固定区域性的不区分区域性的语言的字符串操作 (<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>)，它松散基于独立于区域的英语语言的区域性设置。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Unlike other <ph id="ph1">&lt;xref:System.Globalization.CultureInfo?displayProperty=nameWithType&gt;</ph> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework.</source>
          <target state="translated">与其他不同<ph id="ph1">&lt;xref:System.Globalization.CultureInfo?displayProperty=nameWithType&gt;</ph>保证设置、 固定区域性设置都保持一致的单个计算机上，从系统中，与在.NET Framework 的版本间的系统。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.</source>
          <target state="translated">固定区域性可以是跨所有区域性看到作为一种的黑色框，以确保稳定性的字符串比较和排序。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.</source>
          <target state="translated">如果你的应用程序进行安全决策有关符号的标识符，如文件名称或命名管道，或有关持久化数据，如 XML 文件中的基于文本的数据，该操作应使用序号比较，而不是区分区域性的比较。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</source>
          <target state="translated">这是因为区分区域性的比较在起作用，产生不同的结果，根据区域性而序号比较仅取决于比较的字符的二进制值。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Most methods that perform string operations include an overload that has a parameter of type <ph id="ph1">&lt;xref:System.StringComparison&gt;</ph>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.</source>
          <target state="translated">执行字符串操作的大多数方法包括具有类型参数的重载<ph id="ph1">&lt;xref:System.StringComparison&gt;</ph>，从中可以指定是否方法执行序号或区分区域性的操作。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In general, you should call this overload to make the intent of your method call clear.</source>
          <target state="translated">一般情况下，应调用此重载，以使你的方法的调用的意图。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For best practices and guidance for using ordinal and culture-sensitive operations on strings, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关最佳实践和使用字符串的序号和区分区域性的操作的指南，请参阅<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Operations for <bpt id="p1">[</bpt>casing<ept id="p1">](#casing)</ept>, <bpt id="p2">[</bpt>parsing and formatting<ept id="p2">](#parsing)</ept>, <bpt id="p3">[</bpt>comparison and sorting<ept id="p3">](#comparison)</ept>, and <bpt id="p4">[</bpt>testing for equality<ept id="p4">](#equality)</ept> can be either ordinal or culture-sensitive.</source>
          <target state="translated">用于操作<bpt id="p1">[</bpt>大小写<ept id="p1">](#casing)</ept>，<bpt id="p2">[</bpt>分析和格式化<ept id="p2">](#parsing)</ept>，<bpt id="p3">[</bpt>比较和排序<ept id="p3">](#comparison)</ept>，和<bpt id="p4">[</bpt>相等性测试<ept id="p4">](#equality)</ept>可以是序号或区分区域性的。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following sections discuss each category of operation.</source>
          <target state="translated">以下各节讨论每个类别的操作。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You should always call a method overload that makes the intent of your method call clear.</source>
          <target state="translated">始终应调用的方法重载，使你的方法的调用的意图。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, instead of calling the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <ph id="ph2">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method with a value of <ph id="ph3">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
          <target state="translated">例如，而不是调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph>方法来通过使用当前区域性的约定执行区分区域性的比较的两个字符串应调用<ph id="ph2">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>具有值的方法<ph id="ph3">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>为<ph id="ph4">`comparisonType`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>有关使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Casing</source>
          <target state="translated">大小写</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.</source>
          <target state="translated">大小写规则确定如何更改 Unicode 字符; 的大小写例如，从小写到大写。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Often, a casing operation is performed before a string comparison.</source>
          <target state="translated">通常情况下，字符串比较之前执行的大小写操作。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, a string might be converted to uppercase so that it can be compared with another uppercase string.</source>
          <target state="translated">例如，一个字符串，可能会转换为大写，以便它可以与另一个大写的字符串比较。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can convert the characters in a string to lowercase by calling the <ph id="ph1">&lt;xref:System.String.ToLower%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method, and you can convert them to uppercase by calling the <ph id="ph3">&lt;xref:System.String.ToUpper%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.</source>
          <target state="translated">你可以将转换为通过调用小写的字符串中的字符<ph id="ph1">&lt;xref:System.String.ToLower%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>方法，并且你可以将其转换为大写通过调用<ph id="ph3">&lt;xref:System.String.ToUpper%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In addition, you can use the <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType&gt;</ph> method to convert a string to title case.</source>
          <target state="translated">此外，你可以使用<ph id="ph1">&lt;xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType&gt;</ph>方法将字符串转换为词首字母大写。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.</source>
          <target state="translated">大小写操作可以基于当前区域性、 指定的区域性或固定区域性的规则。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.</source>
          <target state="translated">由于大小写映射可能有所不同具体取决于所用的区域性，大小写操作的结果可以根据区域性有所不同。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The actual differences in casing are of three kinds:</source>
          <target state="translated">中的大小写的实际差异有三种：</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).</source>
          <target state="translated">大小写映射的 LATIN CAPITAL LETTER I 方面的差异 (U + 0049)，拉丁文小写字母 I (U + 0069)，LATIN CAPITAL LETTER I 随 (U + 0130)，上面的点和拉丁文小写字母无点 I (U + 0131)。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.</source>
          <target state="translated">在 TR-TR （土耳其语 （土耳其）） 和 （阿塞拜疆，拉丁语） az-Latn-AZ 区域性和 tr、 az 和 az Latn 非特定区域性，拉丁文大写字母 I 的小写等效项是拉丁文小写字母无点 I、 和拉丁文小写字母 I 的大写等效项高于拉丁文大写字母 I 使用圆点。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.</source>
          <target state="translated">在所有其他区域性，包括固定区域性，拉丁文小写字母 I 和 LATIN CAPITAL LETTER 进行大写和小写等效项。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.</source>
          <target state="translated">下面的示例演示如何设计的字符串比较，以防止文件系统访问权限可能会失败是否它依赖于区分区域性的大小写比较。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(The casing conventions of the invariant culture should have been used.)</source>
          <target state="translated">（固定区域性的大小写约定应该已使用。）</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Differences in case mappings between the invariant culture and all other cultures.</source>
          <target state="translated">固定区域性和所有其他区域性之间的大小写映射差异。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.</source>
          <target state="translated">在这些情况下，使用固定区域性的大小写规则更改为大写或小写字符返回相同的字符。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For all other cultures, it returns a different character.</source>
          <target state="translated">对于所有其他区域性，它将返回不同的字符。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Some of the affected characters are listed in the following table.</source>
          <target state="translated">下表列出了一些受影响的字符。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Character</source>
          <target state="translated">字符</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If changed to</source>
          <target state="translated">如果更改为</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Returns</source>
          <target state="translated">返回</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>MICRON SIGN (U+00B5)</source>
          <target state="translated">微米登录 (U + 00B5)</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Uppercase</source>
          <target state="translated">大写</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>GREEK CAPITAL LETTER MU (U+-39C)</source>
          <target state="translated">希腊文大写字母 MU (U +-39 C)</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</source>
          <target state="translated">拉丁文大写字母 I 带点的上方 (U + 0130)</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Lowercase</source>
          <target state="translated">小写</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN SMALL LETTER I (U+0069)</source>
          <target state="translated">拉丁文小写字母 I (U + 0069)</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN SMALL LETTER DOTLESS I (U+0131)</source>
          <target state="translated">拉丁文小写字母无点我 (U + 0131)</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Uppercase</source>
          <target state="translated">大写</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN CAPITAL LETTER I (U+0049)</source>
          <target state="translated">拉丁文大写字母 I (U + 0049)</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN SMALL LETTER LONG S (U+017F)</source>
          <target state="translated">拉丁文小写字母长 S (U + 017F)</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Uppercase</source>
          <target state="translated">大写</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN CAPITAL LETTER S (U+0053)</source>
          <target state="translated">拉丁文大写字母 S (U + 0053)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</source>
          <target state="translated">带抑扬符的小写字母 Z 拉丁文大写字母 D (U + 01C 5)</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Lowercase</source>
          <target state="translated">小写</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>LATIN SMALL LETTER DZ WITH CARON (U+01C6)</source>
          <target state="translated">拉丁文小写字母 DZ 带抑扬符 (U + 01C 6)</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>COMBINING GREEK YPOGEGRAMMENI (U+0345)</source>
          <target state="translated">组合希腊语 YPOGEGRAMMENI (U + 0345)</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Uppercase</source>
          <target state="translated">大写</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>GREEK CAPITAL LETTER IOTA (U+0399)</source>
          <target state="translated">希腊文大写字母 IOTA (U + 0399)</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.</source>
          <target state="translated">中的 ASCII 字符范围内的两个字母大小写混合的对的大小写映射的差异。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.</source>
          <target state="translated">在大多数区域性中，两个字母大小写混合的对等于等效的两个字母大写或小写对。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:</source>
          <target state="translated">这是不适用的以下区域性中的以下两个字母对，因为每种情况下对它们进行比较到二合字母：</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>"lJ" and "nJ" in the hr-HR (Croatian (Croatia)) culture.</source>
          <target state="translated">"lJ"和"nJ"HR-HR （克罗地亚语 （克罗地亚）） 区域性中。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>"cH" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.</source>
          <target state="translated">"频道"cs CZ （捷克语 （捷克共和国）） 和 sk-SK （斯洛伐克语 （斯洛伐克）） 区域性中。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>"aA" in the da-DK (Danish (Denmark)) culture.</source>
          <target state="translated">"aA"DA-DK （丹麦语 （丹麦）） 区域性中。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>"cS", "dZ", "dZS", "nY", "sZ", "tY", and "zS" in the hu-HU (Hungarian (Hungary)) culture.</source>
          <target state="translated">"cS"、"dZ"、"dZS"、"nY"、"sZ"、"tY"和"zS"HU-HU、 （匈牙利语 （匈牙利）） 区域性中。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>"cH" and "lL" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.</source>
          <target state="translated">"频道"和"lL"es ES_tradnl （西班牙语 （西班牙，传统排序）） 区域性中。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>"cH", "gI", "kH", "nG" "nH", "pH", "qU', "tH", and "tR" in the vi-VN (Vietnamese (Vietnam)) culture.</source>
          <target state="translated">"频道"、"gI"、"kH"、"nG""nH"、"pH"，"qU，"tH"和"tR"中的 vi-VN （越南语 （越南）） 区域性。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.</source>
          <target state="translated">但是，很少会遇到的情况下，这些对区分区域性的比较在其中创建一个问题，因为这些对很少出现在固定的字符串或标识符。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.</source>
          <target state="translated">下面的示例阐释了一些在大小写规则区域性时将字符串转换为大写形式之间的差异。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Parsing and formatting</source>
          <target state="translated">分析和格式化</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Formatting and parsing are inverse operations.</source>
          <target state="translated">格式设置和分析为反向操作。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.</source>
          <target state="translated">格式设置规则可确定如何将一个值，如日期和时间或大量，转换为其字符串表示形式，而分析规则可确定如何将字符串表示形式转换为一个值，如日期和时间。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Both formatting and parsing rules are dependent on cultural conventions.</source>
          <target state="translated">格式化和分析规则都依赖于区域性的约定。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.</source>
          <target state="translated">下面的示例演示解释特定于区域性的日期字符串时，会产生不明确性。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.</source>
          <target state="translated">无需知道用于生成的日期字符串的区域性的约定，则不可以知道 2011-03-01、 2011 年 3 月 1 日，和 01/03/2011年表示 2011 年 1 月 3 日或 2011 年 3 月 1 日。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.</source>
          <target state="translated">同样，如下面的示例所示，单个字符串可能产生不同的日期，具体取决于在分析操作中使用其约定的区域性。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String comparison and sorting</source>
          <target state="translated">字符串比较和排序</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Conventions for comparing and sorting strings vary from culture to culture.</source>
          <target state="translated">用于比较和排序字符串的约定不同区域性的。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the sort order may be based on phonetics or on the visual representation of characters.</source>
          <target state="translated">例如，排序顺序可能基于拼音或基于字符的可视表示。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In East Asian languages, characters are sorted by the stroke and radical of ideographs.</source>
          <target state="translated">在东亚语言中，按文字的笔画和部首对字符进行排序。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Sorting also depends on the order languages and cultures use for the alphabet.</source>
          <target state="translated">排序也取决于字母表使用的排序语言和区域性。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet.</source>
          <target state="translated">例如，丹麦语中有“Æ”字符，它在字母表中排在“Z”之后。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture.</source>
          <target state="translated">此外，比较可以区分大小写或不区分大小写，并且在某些情况下大小写规则也因区域性而异。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.</source>
          <target state="translated">序号比较，另一方面，使用时比较和排序字符串的字符串中的每个字符的 Unicode 码位。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.</source>
          <target state="translated">排序规则可确定与每个其他 Unicode 字符的字母顺序以及如何两个字符串进行比较。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph> method compares two strings based on the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> parameter.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph>方法比较两个字符串基于<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the parameter value is <ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <ph id="ph2">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>, the method performs an ordinal comparison.</source>
          <target state="translated">如果参数值为<ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>，该方法执行使用当前区域性的约定的语言比较，如果参数值为<ph id="ph2">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>，该方法执行序号比较。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph> method (using culture-sensitive comparison) considers "a" less than "A", but the second call to the same method (using ordinal comparison) considers "a" greater than "A".</source>
          <target state="translated">因此，如以下示例所示，如果当前区域性为美国英语，首次调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph>（使用区分区域性的比较） 的方法会将"a"小于"A"，但是对相同的方法 （使用序号比较） 的第二个调用认为"a"大于"A"。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The .NET Framework supports word, string, and ordinal sort rules:</source>
          <target state="translated">.NET Framework 支持 word、 字符串和序号排序规则：</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.</source>
          <target state="translated">单词排序在其中某些非字母数字 Unicode 字符可能具有特殊的权重执行区分区域性的比较的字符串。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the hyphen (-) might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.</source>
          <target state="translated">例如，连字符 （-） 可能具有很小的权重分配给它，以便"联合"和"合作"挨着出现在已排序的列表。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For a list of the <ph id="ph1">&lt;xref:System.String&gt;</ph> methods that compare two strings using word sort rules, see the <bpt id="p1">[</bpt>String operations by category<ept id="p1">](#ByCategory)</ept> section.</source>
          <target state="translated">有关的列表<ph id="ph1">&lt;xref:System.String&gt;</ph>方法比较两个字符串使用单词排序规则，请参阅<bpt id="p1">[</bpt>按类别字符串运算<ept id="p1">](#ByCategory)</ept>部分。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A string sort also performs a culture-sensitive comparison.</source>
          <target state="translated">字符串排序还执行区分区域性的比较。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.</source>
          <target state="translated">它具有与单词排序，类似，只不过没有任何特殊的情况下，并且所有非字母数字符号排在所有字母数字的 Unicode 字符之前。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Two strings can be compared using string sort rules by calling the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType&gt;</ph> method overloads that have an <ph id="ph2">`options`</ph> parameter that is supplied a value of <ph id="ph3">&lt;xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">可以通过调用中使用字符串排序规则来比较两个字符串<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType&gt;</ph>具有的方法重载<ph id="ph2">`options`</ph>参数提供的值<ph id="ph3">&lt;xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.</source>
          <target state="translated">请注意，这是.NET Framework 提供比较两个字符串使用字符串排序规则的唯一方法。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An ordinal sort compares strings based on the numeric value of each <ph id="ph1">&lt;xref:System.Char&gt;</ph> object in the string.</source>
          <target state="translated">序号排序比较基于每个数值字符串<ph id="ph1">&lt;xref:System.Char&gt;</ph>字符串中的对象。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.</source>
          <target state="translated">序号比较是自动区分大小写的因为一个字符的大写和小写版本具有不同的码位。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, if case is not important, you can specify an ordinal comparison that ignores case.</source>
          <target state="translated">但是，如果大小写并不重要，你可以指定不区分大小写的序号比较。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.</source>
          <target state="translated">这相当于将转换为大写通过使用固定区域性，然后对结果执行序号比较的字符串。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For a list of the <ph id="ph1">&lt;xref:System.String&gt;</ph> methods that compare two strings using ordinal sort rules, see the <bpt id="p1">[</bpt>String operations by category<ept id="p1">](#ByCategory)</ept> section.</source>
          <target state="translated">有关的列表<ph id="ph1">&lt;xref:System.String&gt;</ph>方法比较两个字符串使用序号排序规则，请参阅<bpt id="p1">[</bpt>按类别字符串运算<ept id="p1">](#ByCategory)</ept>部分。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, including the invariant culture that is specified by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">区分区域性的比较是任何显式或隐式使用的比较<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>对象，包括由指定的固定区域性<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The implicit culture is the current culture, which is specified by the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">隐式区域性为当前区域性，由指定<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <ph id="ph1">&lt;xref:System.Char.IsLetter%2A?displayProperty=nameWithType&gt;</ph> property returns <ph id="ph2">`true`</ph>) across cultures.</source>
          <target state="translated">没有相当字母字符的排序顺序中的变体 (即，字符为其<ph id="ph1">&lt;xref:System.Char.IsLetter%2A?displayProperty=nameWithType&gt;</ph>属性返回<ph id="ph2">`true`</ph>) 跨区域性。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object to a string comparison method such as <ph id="ph2">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph>.</source>
          <target state="translated">你可以指定通过提供使用特定区域性的约定的区分区域性的比较<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>如对象的字符串比较方法<ph id="ph2">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>, or any member of the <ph id="ph3">&lt;xref:System.Globalization.CompareOptions&gt;</ph> enumeration other than <ph id="ph4">&lt;xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id="ph5">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> to an appropriate overload of the <ph id="ph6">&lt;xref:System.String.Compare%2A&gt;</ph> method.</source>
          <target state="translated">你可以指定通过提供使用当前区域性的约定的区分区域性的比较<ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>，或任何成员的<ph id="ph3">&lt;xref:System.Globalization.CompareOptions&gt;</ph>以外的其他枚举<ph id="ph4">&lt;xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType&gt;</ph>或<ph id="ph5">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>的相应重载<ph id="ph6">&lt;xref:System.String.Compare%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.</source>
          <target state="translated">通常适用于排序而序号比较不区分区域性的比较。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.</source>
          <target state="translated">序号比较是通常适用于确定两个字符串是否相等 (即，用于确定标识) 而不是区分区域性的比较。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the difference between culture-sensitive and ordinal comparison.</source>
          <target state="translated">下面的示例演示区分区域性且序号比较之间的差异。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The example evaluates three strings, "Apple", "Æble", and "AEble", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method is called).</source>
          <target state="translated">该示例计算结果的三个字符串、"Apple"、"Æble"和"AEble"，以使用序号比较和 DA-DK 并 EN-US 区域性的约定 (其中每个时的默认区域性<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>调用方法)。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the Danish language treats the character "Æ" as an individual letter and sorts it after "Z" in the alphabet, the string "Æble" is greater than "Apple".</source>
          <target state="translated">因为丹麦语语言字符"Æ"将其视为单个字母并对进行排序它在"Z"之后在字母表中，字符串"Æble"大于"Apple"。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, "Æble" is not considered equivalent to "AEble", so "Æble" is also greater than "AEble".</source>
          <target state="translated">但是，"Æble"不被视为等效于"AEble"，因此"Æble"也是大于"AEble"。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The en-US culture doesn't include the letter"Æ" but treats it as equivalent to "AE", which explains why  "Æble" is less than "Apple" but equal to "AEble".</source>
          <target state="translated">EN-US 区域性不包括字母"Æ"，但会将其视为等效于"遍历"，解释了为什么"Æble"小于"Apple"但等于"AEble"。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Ordinal comparison, on the other hand, considers "Apple" to be less than "Æble", and "Æble" to be greater than "AEble".</source>
          <target state="translated">序号比较，另一方面，会将"Apple"小于"Æble"和"Æble"必须晚于"AEble"。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Use the following general guidelines to choose an appropriate sorting or string comparison method:</source>
          <target state="translated">使用以下常规指导原则来选择适当的排序或字符串比较方法：</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.</source>
          <target state="translated">如果你想要进行排序的字符串基于用户的区域性，您应该对基于当前区域性的约定对其进行排序。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the user's culture changes, the order of sorted strings will also change accordingly.</source>
          <target state="translated">如果用户的区域性发生变化，也将相应地更改排序字符串的顺序。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, a thesaurus application should always sort words based on the user's culture.</source>
          <target state="translated">例如，同义词库应用程序应始终进行排序基于用户的区域性的单词。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents that culture to a comparison method.</source>
          <target state="translated">如果你想要进行排序的字符串基于特定区域性的约定，你应通过提供订购这些<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>对象，表示该区域性的比较方法。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.</source>
          <target state="translated">例如，旨在教授学生特定语言的应用程序，你希望字符串进行排序基于一个使用该语言的区域性的约定。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.</source>
          <target state="translated">如果你想字符串的顺序，以跨区域性保持不变，应基于固定区域性的约定，或者使用序号比较。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.</source>
          <target state="translated">例如，你将使用序号排序组织的文件、 进程、 互斥体的名称或命名管道。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">有关涉及安全决策 （例如用户名是否有效） 的比较，你始终应该执行序号测试相等性通过调用的重载<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework.</source>
          <target state="translated">区分区域性的排序和大小写的字符串比较中使用的规则取决于.NET Framework 的版本。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In the .NET Framework <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> running on the <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard.</source>
          <target state="translated">.NET Framework 中<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>上运行<ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>操作系统、 排序、 大小写、 规范化和 Unicode 字符信息符合 Unicode 6.0 标准。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>On other operating systems, it conforms to the Unicode 5.0 standard.</source>
          <target state="translated">在其他操作系统，使其符合 Unicode 5.0 标准。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information about word, string, and ordinal sort rules, see the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph> topic.</source>
          <target state="translated">有关 word、 字符串和序号排序规则的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>主题。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For additional recommendations on when to use each rule, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关何时使用每个规则的其他建议，请参阅<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Ordinarily, you don't call string comparison methods such as <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> directly to determine the sort order of strings.</source>
          <target state="translated">通常，你不调用字符串比较方法，如<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>直接以确定字符串的排序顺序。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Instead, comparison methods are called by sorting methods such as <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">相反，比较方法调用的排序方法，如<ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.</source>
          <target state="translated">下面的示例无需显式调用的字符串比较方法，执行四个不同的排序操作 （使用当前区域性、 使用固定区域性的单词排序、 序号排序和字符串排序使用固定区域性的单词排序），尽管它们指定要使用的比较类型。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that each type of sort produces a unique ordering of strings in its array.</source>
          <target state="translated">请注意每种类型的排序，生成唯一排序其数组中的字符串。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison.</source>
          <target state="translated">在内部，.net Framework 使用排序键来支持 culturallysensitive 字符串比较。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.</source>
          <target state="translated">对于字符串中的每个字符，都赋予若干类排序权重，包括字母、大小写和变音符。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A sort key, represented by the <ph id="ph1">&lt;xref:System.Globalization.SortKey&gt;</ph> class, provides a repository of these weights for a particular string.</source>
          <target state="translated">排序键，由表示<ph id="ph1">&lt;xref:System.Globalization.SortKey&gt;</ph>类中，特定字符串中提供的这些权重的存储库。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.</source>
          <target state="translated">如果你的应用程序执行大量的搜索或排序的字符串在同一组上的操作，你可以通过生成并存储它使用的所有字符串的排序键来提高其性能。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>When a sort or comparison operation is required, you use the sort keys instead of the strings.</source>
          <target state="translated">需要进行排序或比较操作时，你将使用排序键，而不是字符串。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Globalization.SortKey&gt;</ph> class.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Globalization.SortKey&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you don't specify a string comparison convention, sorting methods such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> perform a culture-sensitive, case-sensitive sort on strings.</source>
          <target state="translated">如果未指定的字符串比较约定，如排序方法<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>对字符串执行区分区域性且区分大小写的排序。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates how changing the current culture affects the order of sorted strings in an array.</source>
          <target state="translated">下面的示例说明了如何更改当前区域性影响数组中的排序字符串的顺序。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It creates an array of three strings.</source>
          <target state="translated">它创建三个字符串的数组。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>First, it sets the <ph id="ph1">`System.Threading.Thread.CurrentThread.CurrentCulture`</ph> property to en-US and calls the <ph id="ph2">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">首先，它将 <ph id="ph1">`System.Threading.Thread.CurrentThread.CurrentCulture`</ph> 属性设置为 en-US，并调用 <ph id="ph2">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The resulting sort order is based on sorting conventions for the English (United States) culture.</source>
          <target state="translated">结果的排序顺序取决于排序英语 （美国） 区域性的约定。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Next, the example sets the <ph id="ph1">`System.Threading.Thread.CurrentThread.CurrentCulture`</ph> property to da-DK and calls the <ph id="ph2">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method again.</source>
          <target state="translated">接着，此示例将 <ph id="ph1">`System.Threading.Thread.CurrentThread.CurrentCulture`</ph> 属性设置为 da-DK 并再次调用 <ph id="ph2">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).</source>
          <target state="translated">请注意，最终排序顺序与使用 en-US 时的结果不一样，因为这次使用的是针对丹麦语（丹麦）的排序约定。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If your primary purpose in comparing strings is to determine whether they are equal, you should call the <ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果你在比较字符串的主要用途是确定它们是否相等，则应调用<ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Typically, you should use <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> to perform an ordinal comparison.</source>
          <target state="translated">通常情况下，应使用<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>要执行序号比较。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method is intended primarily to sort strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph>方法主要用于对字符串进行排序。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String search methods, such as <ph id="ph1">&lt;xref:System.String.StartsWith%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, also can perform culture-sensitive or ordinal string comparisons.</source>
          <target state="translated">字符串搜索方法，如<ph id="ph1">&lt;xref:System.String.StartsWith%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>，还可以执行区分区域性的或序号字符串比较。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示使用的序号和区分区域性的比较之间的差异<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A culture-sensitive search in which the current culture is English (United States) considers the substring "oe" to match the ligature "œ".</source>
          <target state="translated">在其中当前区域性为英语 （美国） 区分区域性的搜索会将子字符串"oe"以匹配连字"œ"。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> and finds a match at the beginning of the string.</source>
          <target state="translated">因为软连字符 (U + 00AD) 是零宽度字符，则搜索将该软连字符视为等效于<ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>和找到的匹配项在字符串的开头。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An ordinal search, on the other hand, does not find a match in either case.</source>
          <target state="translated">序号搜索，另一方面，找不到匹配项在任一情况下。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Searching Strings</source>
          <target state="translated">搜索字符串</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String search methods, such as <ph id="ph1">&lt;xref:System.String.StartsWith%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.</source>
          <target state="translated">字符串搜索方法，如<ph id="ph1">&lt;xref:System.String.StartsWith%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>，还可以执行区分区域性的还是指定字符串中找到的序号字符串比较，以确定是否可以使用的字符或子字符串。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The search methods in the <ph id="ph1">&lt;xref:System.String&gt;</ph> class that search for an individual character, such as the <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> method, or one of a set of characters,   such as the <ph id="ph3">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, all perform an ordinal search.</source>
          <target state="translated">中的搜索方法<ph id="ph1">&lt;xref:System.String&gt;</ph>搜索单个字符，如类<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法或一组字符，如<ph id="ph3">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法中，所有执行序号搜索。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To perform a culture-sensitive search for a character, you must call a <ph id="ph1">&lt;xref:System.Globalization.CompareInfo&gt;</ph> method such as <ph id="ph2">&lt;xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要执行区分区域性的搜索的字符，必须调用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo&gt;</ph>如方法<ph id="ph2">&lt;xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.</source>
          <target state="translated">请注意，可非常不同的搜索的字符使用序号比较与区分区域性的比较结果。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, a search for a precomposed Unicode character such as the ligature "Æ" (U+00C6) might match any occurrence of its components in the correct sequence, such as "AE" (U+041U+0045), depending on the culture.</source>
          <target state="translated">例如，如连字"Æ"预先撰写的 Unicode 字符 (U + 00 C 6) 的搜索可能匹配其组件在正确的顺序，如"遍历"中的任何匹配项 （U + 041U + 0045） 上，根据区域性。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the difference between the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph> methods when searching for an individual character.</source>
          <target state="translated">下面的示例演示之间的差异<ph id="ph1">&lt;xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType&gt;</ph>方法时搜索的单个字符。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The ligature "æ" (U+00E6) is found in the string "aerial" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.</source>
          <target state="translated">连字"æ"(U + 00E6) 是在字符串中找到"空中"时使用 EN-US 区域性的约定，但不是在使用 DA-DK 区域性的约定时或在执行序号比较时。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>On the other hand, <ph id="ph1">&lt;xref:System.String&gt;</ph> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>.</source>
          <target state="translated">另一方面，<ph id="ph1">&lt;xref:System.String&gt;</ph>类搜索字符串，而不是一个字符执行区分区域性的搜索，如果搜索选项未显式指定类型的参数的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The sole exception is <ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>, which performs an ordinal search.</source>
          <target state="translated">唯一的例外情况是<ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>，这将执行序号搜索。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Testing for equality</source>
          <target state="translated">相等性测试</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method to determine the relationship of two strings in the sort order.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph>方法来确定两个字符串在排序顺序中的关系。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Typically, this is a culture-sensitive operation.</source>
          <target state="translated">通常，这是区分区域性的操作。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In contrast, call the <ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph> method to test for equality.</source>
          <target state="translated">与此相反，调用<ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph>方法来测试相等性。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.</source>
          <target state="translated">相等性测试通常比较用户输入与某些已知的字符串，如有效的用户名、 密码或文件系统路径，因为它通常是一个序号操作。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It is possible to test for equality by calling the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method and determining whether the return value is zero.</source>
          <target state="translated">可以通过调用测试相等性<ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph>方法，并确定返回的值是否为零。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, this practice is not recommended.</source>
          <target state="translated">但是，不建议这样做。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To determine whether two strings are equal, you should call one of the overloads of the <ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要确定两个字符串是否相等，应调用的重载之一<ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The preferred overload to call is either the instance <ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph> method or the static <ph id="ph2">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, because both methods include a <ph id="ph3">&lt;xref:System.StringComparison?displayProperty=nameWithType&gt;</ph> parameter that explicitly specifies the type of comparison.</source>
          <target state="translated">若要调用的首选的重载是任一实例<ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph>方法或静态<ph id="ph2">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>方法，因为这两种方法包括<ph id="ph3">&lt;xref:System.StringComparison?displayProperty=nameWithType&gt;</ph>显式指定的比较类型的参数。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.</source>
          <target state="translated">下面的示例演示执行区分区域性的比较相等时是执行序号一个应改为使用的危险。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In this case, the intent of the code is to prohibit file system access from URLs that begin with "FILE://" or "file://" by performing a case-insensitive comparison of the beginning of a URL with the string "FILE://".</source>
          <target state="translated">在这种情况下，代码的目的是禁止在通过执行不区分大小写比较的字符串"FILE://"带的 URL 开头的"FILE://"或"file://"开头的 Url 的文件系统访问权限。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with "file://", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase "i" is "İ" instead of "I".</source>
          <target state="translated">但是，如果在"file://"开头的 URL 上使用土耳其语 （土耳其） 区域性执行区分区域性的比较，则相等性比较将失败，因为土耳其语的大写形式小写"i"是"i"而不是"I"。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>As a result, file system access is inadvertently permitted.</source>
          <target state="translated">因此，文件系统访问无意中允许使用。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.</source>
          <target state="translated">另一方面，如果执行序号比较，则相等性比较成功，并将拒绝文件系统访问。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Normalization</source>
          <target state="translated">标准化</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Some Unicode characters have multiple representations.</source>
          <target state="translated">某些 Unicode 字符具有多个表示形式。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, any of the following code points can represent the letter "ắ":</source>
          <target state="translated">例如，下面的代码点的任何可表示字母"ắ":</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>U+1EAF</source>
          <target state="translated">U + 1EAF</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>U+0103 U+0301</source>
          <target state="translated">U+0103 U+0301</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>U+0061 U+0306 U+0301</source>
          <target state="translated">U+0061 U+0306 U+0301</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Multiple representations for a single character complicate searching, sorting, matching, and other string operations.</source>
          <target state="translated">搜索、 排序、 匹配和其他字符串操作，使变得复杂的单个字符的多种表示形式。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.</source>
          <target state="translated">Unicode 标准定义了一个过程调用返回一个二进制表示形式为其等效的二进制表示形式的任何 Unicode 字符的规范化。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Normalization can use several algorithms, called normalization forms, that follow different rules.</source>
          <target state="translated">规范化可以使用几种算法，调用规范化窗体，遵循不同的规则。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The .NET Framework supports Unicode normalization forms C, D, KC, and KD.</source>
          <target state="translated">.NET Framework 支持 C、 D、 KC 和 KD 的 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.</source>
          <target state="translated">当已为同一范式标准化字符串时，它们可以通过使用序号比较进行比较。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <ph id="ph1">&lt;xref:System.Char&gt;</ph> objects in each string.</source>
          <target state="translated">序号比较是相应的 Unicode 标量值的二进制比较<ph id="ph1">&lt;xref:System.Char&gt;</ph>每个字符串中的对象。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> class includes a number of methods that can perform an ordinal comparison, including the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String&gt;</ph>类包括多种方法可以执行序号比较，其中包括：</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Any overload of the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.String.Equals%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.String.StartsWith%2A&gt;</ph>,  <ph id="ph4">&lt;xref:System.String.EndsWith%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.String.IndexOf%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> methods that includes a <ph id="ph7">&lt;xref:System.StringComparison&gt;</ph> parameter.</source>
          <target state="translated">任何重载<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.String.Equals%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.String.StartsWith%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.String.EndsWith%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.String.IndexOf%2A&gt;</ph>，和<ph id="ph6">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>方法包括<ph id="ph7">&lt;xref:System.StringComparison&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The method performs an ordinal comparison if you supply a value of <ph id="ph1">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for this parameter.</source>
          <target state="translated">如果提供的值，该方法执行序号比较<ph id="ph1">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph>为此参数。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph> method.</source>
          <target state="translated">重载<ph id="ph1">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Methods that use ordinal comparison by default, such as <ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.String.Replace%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.String.Split%2A&gt;</ph>.</source>
          <target state="translated">默认情况下，如使用序号比较的方法<ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.String.Replace%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.String.Split%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Methods that search for a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value or for the elements in a <ph id="ph2">&lt;xref:System.Char&gt;</ph> array in a string instance.</source>
          <target state="translated">搜索的方法<ph id="ph1">&lt;xref:System.Char&gt;</ph>值或中的元素<ph id="ph2">&lt;xref:System.Char&gt;</ph>的字符串实例的数组。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Such methods include <ph id="ph1">&lt;xref:System.String.IndexOf%28System.Char%29&gt;</ph> and <ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>.</source>
          <target state="translated">此类方法包括<ph id="ph1">&lt;xref:System.String.IndexOf%28System.Char%29&gt;</ph>和<ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can determine whether a string is normalized to normalization form C by calling the <ph id="ph1">&lt;xref:System.String.IsNormalized?displayProperty=nameWithType&gt;</ph> method, or you can call the <ph id="ph2">&lt;xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType&gt;</ph> method to determine whether a string is normalized to a specified normalization form.</source>
          <target state="translated">你可以确定一个字符串，指示是否被规范化为范式 C 通过调用<ph id="ph1">&lt;xref:System.String.IsNormalized?displayProperty=nameWithType&gt;</ph>方法，或者可以调用<ph id="ph2">&lt;xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType&gt;</ph>方法来确定是否将一个字符串规范化为指定的范式。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can also call the <ph id="ph1">&lt;xref:System.String.Normalize?displayProperty=nameWithType&gt;</ph> method to convert a string to normalization form C, or you can call the <ph id="ph2">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType&gt;</ph> method to convert a string to a specified normalization form.</source>
          <target state="translated">你还可以调用<ph id="ph1">&lt;xref:System.String.Normalize?displayProperty=nameWithType&gt;</ph>方法将字符串转换为范式 C，也可以调用<ph id="ph2">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType&gt;</ph>方法将字符串转换为指定的范式。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For step-by-step information about normalizing and comparing strings, see the <ph id="ph1">&lt;xref:System.String.Normalize&gt;</ph> and <ph id="ph2">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29&gt;</ph> methods.</source>
          <target state="translated">有关规范化和比较字符串的分步信息，请参阅<ph id="ph1">&lt;xref:System.String.Normalize&gt;</ph>和<ph id="ph2">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following simple example illustrates string normalization.</source>
          <target state="translated">以下简单示例演示了字符串标准化。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It defines the letter "ố" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.</source>
          <target state="translated">它在三个不同的字符串，三个不同的方式定义的字母"ố"，并使用序号比较相等性，从而确定每个字符串与从其他两个字符串。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.</source>
          <target state="translated">它然后将每个字符串转换为支持的规范化窗体，并再次执行序号比较每个字符串，指定的范式。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In each case, the second test for equality shows that the strings are equal.</source>
          <target state="translated">在每种情况下，第二个相等性测试显示的字符串相等。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information about normalization and normalization forms, see <ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>, as well as <bpt id="p1">[</bpt>Unicode Standard Annex #15: Unicode Normalization Forms<ept id="p1">](https://unicode.org/reports/tr15/)</ept> and the <bpt id="p2">[</bpt>Normalization FAQ<ept id="p2">](https://www.unicode.org/faq/normalization.html)</ept> on the unicode.org website.</source>
          <target state="translated">有关规范化和规范化窗体的详细信息，请参阅<ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>，以及<bpt id="p1">[</bpt>Unicode 标准附录 #15: Unicode 范式<ept id="p1">](https://unicode.org/reports/tr15/)</ept>和<bpt id="p2">[</bpt>规范化常见问题<ept id="p2">](https://www.unicode.org/faq/normalization.html)</ept>上unicode.org 网站。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String operations by category</source>
          <target state="translated">按类别列出的字符串操作</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String&gt;</ph>类提供成员用于比较字符串、 测试字符串是否相等，查找字符或字符串，修改字符串，提取字符串的子字符串，字符串组合，格式化值，复制字符串，并规范化字符串中子字符串。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Comparing strings</source>
          <target state="translated">比较字符串</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can compare strings to determine their relative position in the sort order by using the following <ph id="ph1">&lt;xref:System.String&gt;</ph> methods:</source>
          <target state="translated">你可以比较字符串以确定二者在排序顺序中的相对位置通过使用以下<ph id="ph1">&lt;xref:System.String&gt;</ph>方法：</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> returns an integer that indicates the relationship of one string to a second string in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> 返回一个整数，指示一个字符串与第二个字符串在排序顺序中的关系。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph> 返回一个整数，指示一个字符串与基于其码位比较第二个字符串的关系。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> 返回一个整数，指示当前的字符串实例，为第二个字符串在排序顺序中的关系。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.CompareTo%28System.String%29&gt;</ph> method provides the <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> and <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> implementations for the <ph id="ph4">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.CompareTo%28System.String%29&gt;</ph>方法提供<ph id="ph2">&lt;xref:System.IComparable&gt;</ph>和<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>实现<ph id="ph4">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Testing strings for equality</source>
          <target state="translated">测试相等的字符串</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You call the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method to determine whether two strings are equal.</source>
          <target state="translated">你调用<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法来确定两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The instance <ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> and the static <ph id="ph2">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.</source>
          <target state="translated">实例<ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>和静态<ph id="ph2">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph>重载，你可以指定比较是否区分区域性的或序号，以及是否被视为或忽略大小写。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.</source>
          <target state="translated">大多数测试相等是序号，并确定为系统资源 （如文件系统对象） 的访问权限的相等性比较应始终为序号。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Finding characters in a string</source>
          <target state="translated">在字符串中查找字符</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> class includes two kinds of search methods:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String&gt;</ph>类包括两种类型的搜索方法：</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Methods that return a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to indicate whether a particular substring is present in a string instance.</source>
          <target state="translated">方法返回<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>值以指示特定的子字符串是否存在的字符串实例。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>These include the <ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.String.EndsWith%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.String.StartsWith%2A&gt;</ph> methods.</source>
          <target state="translated">其中包括<ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.String.EndsWith%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.String.StartsWith%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Methods that indicate the starting position of a substring in a string instance.</source>
          <target state="translated">指示子字符串的字符串实例的起始位置的方法。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>These include the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph> methods.</source>
          <target state="translated">其中包括<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.</source>
          <target state="translated">如果你想要搜索特定的模式，而不是特定的子字符串的字符串，你应使用正则表达式。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Framework Regular Expressions<ept id="p1">](~/docs/standard/base-types/regular-expressions.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅 <bpt id="p1">[</bpt>.NET Framework 正则表达式<ept id="p1">](~/docs/standard/base-types/regular-expressions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Modifying a string</source>
          <target state="translated">修改字符串</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> class includes the following methods that appear to modify the value of a string:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String&gt;</ph>类包括以下方法看起来要修改字符串的值：</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Insert%2A&gt;</ph> inserts a string into the current <ph id="ph2">&lt;xref:System.String&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Insert%2A&gt;</ph> 将字符串插入到当前<ph id="ph2">&lt;xref:System.String&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph> inserts one or more occurrences of a specified character at the beginning of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph> 在字符串的开头插入指定字符的一个或多个匹配的项。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph> inserts one or more occurrences of a specified character at the end of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph> 在字符串的末尾插入指定字符的一个或多个匹配的项。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Remove%2A&gt;</ph> deletes a substring from the current <ph id="ph2">&lt;xref:System.String&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Remove%2A&gt;</ph> 删除从当前的子字符串<ph id="ph2">&lt;xref:System.String&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> replaces a substring with another substring in the current <ph id="ph2">&lt;xref:System.String&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> 子字符串替换为另一个子字符串在当前<ph id="ph2">&lt;xref:System.String&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.ToLower%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> convert all the characters in a string to lowercase.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToLower%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>将字符串中的所有字符都转换为小写。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.ToUpper%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> convert all the characters in a string to uppercase.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToUpper%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>将字符串中的所有字符都转换为大写。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> removes all occurrences of a character from the beginning and end of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> 从的开头和结尾的字符串中删除所有出现的字符。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.TrimEnd%2A&gt;</ph> removes all occurrences of a character from the end of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.TrimEnd%2A&gt;</ph> 从字符串末尾中删除所有出现的字符。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> removes all occurrences of a character from the beginning of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> 从字符串开头中删除所有出现的字符。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All string modification methods return a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">所有字符串修改方法都返回一个新<ph id="ph1">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>They don't modify the value of the current instance.</source>
          <target state="translated">它们无需修改的当前实例的值。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Extracting substrings from a string</source>
          <target state="translated">从字符串提取子字符串</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> method separates a single string into multiple strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>方法将单个字符串拆分为多个字符串。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.</source>
          <target state="translated">该方法的重载，可以指定多个分隔符，若要确定该方法提取的子字符串的最大数目，并以确定是否在返回的字符串包含空字符串 （发生这种情况相邻分隔符时）。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Combining strings</source>
          <target state="translated">组合字符串</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following <ph id="ph1">&lt;xref:System.String&gt;</ph> methods can be used for string concatenation:</source>
          <target state="translated">以下<ph id="ph1">&lt;xref:System.String&gt;</ph>方法可以用于字符串串联：</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> combines one or more substrings into a single string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> 将合并为一个字符串的一个或多个子字符串。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Join%2A&gt;</ph> concatenates one or more substrings into a single element and adds a separator between each substring.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Join%2A&gt;</ph> 连接到单个元素的一个或多个子字符串，并添加每个子字符串之间的分隔符。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Formatting values</source>
          <target state="translated">格式化值</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>方法使用复合格式设置功能来将字符串中的一个或多个占位符替换为某些对象或值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method is often used to do the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法通常用于执行以下操作：</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To embed the string representation of a numeric value in a string.</source>
          <target state="translated">若要在字符串中嵌入的字符串表示形式的数字值。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To embed the string representation of a date and time value in a string.</source>
          <target state="translated">若要在字符串中嵌入的字符串表示形式的日期和时间值。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To embed the string representation of an enumeration value in a string.</source>
          <target state="translated">若要在字符串中嵌入的字符串表示形式的枚举值。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To embed the string representation of some object that supports the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface in a string.</source>
          <target state="translated">若要嵌入的字符串表示形式支持某些对象<ph id="ph1">&lt;xref:System.IFormattable&gt;</ph>字符串中的接口。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To right-justify or left-justify a substring in a field within a larger string.</source>
          <target state="translated">若要从右对齐或左对齐较大字符串中的字段中的子字符串。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For detailed information about formatting operations and examples, see the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.</source>
          <target state="translated">有关格式设置操作和示例的详细信息，请参阅<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>重载摘要。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Copying a string</source>
          <target state="translated">复制字符串</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can call the following <ph id="ph1">&lt;xref:System.String&gt;</ph> methods to make a copy of a string:</source>
          <target state="translated">你可以通过调用以下<ph id="ph1">&lt;xref:System.String&gt;</ph>方法，以便进行的字符串的副本：</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Clone%2A&gt;</ph> returns a reference to an existing <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Clone%2A&gt;</ph> 返回到一个现有的引用<ph id="ph2">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph> creates a copy of an existing string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph> 创建现有字符串的副本。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.CopyTo%2A&gt;</ph> copies a portion of a string to a character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.CopyTo%2A&gt;</ph> 将一个字符串的一部分复制到的字符数组。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Normalizing a string</source>
          <target state="translated">规范化字符串</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In Unicode, a single character can have multiple code points.</source>
          <target state="translated">以 unicode 格式，单个字符可以具有多个码位。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Normalization converts these equivalent characters into the same binary representation.</source>
          <target state="translated">规范化将相同的二进制表示形式转换为这些等效字符。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=nameWithType&gt;</ph> method performs the normalization, and the <ph id="ph2">&lt;xref:System.String.IsNormalized%2A?displayProperty=nameWithType&gt;</ph> method determines whether a string is normalized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=nameWithType&gt;</ph>方法执行标准化，和<ph id="ph2">&lt;xref:System.String.IsNormalized%2A?displayProperty=nameWithType&gt;</ph>方法确定是否对字符串进行规范化。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information and an example, see the <bpt id="p1">[</bpt>Normalization<ept id="p1">](#Normalization)</ept> section earlier in this topic.</source>
          <target state="translated">有关详细信息及示例，请参阅<bpt id="p1">[</bpt>规范化<ept id="p1">](#Normalization)</ept>本主题前面的部分。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In this section:</source>
          <target state="translated">本节内容：</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Overloaded constructor syntax<ept id="p1">](#Syntax)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>重载构造函数语法<ept id="p1">](#Syntax)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Parameters<ept id="p1">](#Params)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>参数<ept id="p1">](#Params)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](#Exceptions)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>异常<ept id="p1">](#Exceptions)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Which method do I call?<ept id="p1">](#Tasks)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>请勿调用的方法？<ept id="p1">](#Tasks)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Creating strings<ept id="p1">](#Creating_Strings)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>创建字符串<ept id="p1">](#Creating_Strings)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Handling repetitive strings<ept id="p1">](#Repetitive)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>处理重复字符串<ept id="p1">](#Repetitive)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Examples of instantiating strings:</source>
          <target state="translated">实例化的字符串的示例：</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Using string assignment<ept id="p1">](#Ctor1_Example)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用字符串分配<ept id="p1">](#Ctor1_Example)</ept></target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Using a character array<ept id="p1">](#Ctor2_Example)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用的字符数组<ept id="p1">](#Ctor2_Example)</ept></target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Using a portion of a character array and repeating a single character<ept id="p1">](#Ctor3_Example)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用的字符数组的一部分并重复单个字符<ept id="p1">](#Ctor3_Example)</ept></target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Using a pointer to a character array<ept id="p1">](#Ctor4_Example)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用指向字符数组的指针<ept id="p1">](#Ctor4_Example)</ept></target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Using  a pointer and a range of an array<ept id="p1">](#Ctor5_Example)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用为指针，数组的范围<ept id="p1">](#Ctor5_Example)</ept></target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Using a pointer to a signed byte array<ept id="p1">](#Ctor6_Example)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用指向有符号的字节数组的指针<ept id="p1">](#Ctor6_Example)</ept></target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Version information<ept id="p1">](#Versions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>版本信息<ept id="p1">](#Versions)</ept></target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Overloaded constructor syntax</source>
          <target state="translated">重载构造函数语法</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String constructors fall into two categories: those without pointer parameters, and those with pointer parameters.</source>
          <target state="translated">字符串构造函数分为两类： 如果没有指针参数，以及那些使用指针参数。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The constructors that use pointers are not CLS-compliant.</source>
          <target state="translated">使用指针的构造函数不符合 CLS。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In addition, Visual Basic does not support the use of pointers, and C# requires code that uses pointers to run in an unsafe context.</source>
          <target state="translated">此外，Visual Basic 不支持使用指针，并且 C# 需要使用指针在不安全的上下文中运行的代码。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see <bpt id="p1">[</bpt>unsafe<ept id="p1">](~/docs/csharp/language-reference/keywords/unsafe.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅 <bpt id="p1">[</bpt>unsafe<ept id="p1">](~/docs/csharp/language-reference/keywords/unsafe.md)</ept>。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For additional guidance on choosing an overload, see <bpt id="p1">[</bpt>Which method do I call?<ept id="p1">](#Tasks)</ept></source>
          <target state="translated">选择重载方法的其他指南，请参阅<bpt id="p1">[</bpt>请勿调用的方法？<ept id="p1">](#Tasks)</ept></target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Initializes the new instance to the value indicated by an array of Unicode characters.</source>
          <target state="translated">初始化为由 Unicode 字符数组指示的值的新实例。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This constructor copies Unicode characters(<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor2_Example)</ept>).</source>
          <target state="translated">此构造函数将 Unicode 字符复制 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor2_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Initializes the new instance to the value indicated by an array of Unicode characters, a starting character position within that array, and a length (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor3_Example)</ept>).</source>
          <target state="translated">初始化指示由一组 Unicode 字符，该数组和一个长度内的起始字符位置的值的新实例 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor3_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Initializes the new instance to the value indicated by a specified Unicode character repeated a specified number of times (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor3_Example)</ept>).</source>
          <target state="translated">初始化由指定的 Unicode 字符指示的值的新实例重复指定的次数 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor3_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">**</bpt>(Not CLS-compliant)<ept id="p1">**</ept> Initializes the new instance to the value indicated by a pointer to an array of Unicode characters that is terminated by a null character (U+0000 or '\0').</source>
          <target state="translated"><bpt id="p1">**</bpt>(不符合 cls 的)<ept id="p1">**</ept>初始化为由指向终止 null 字符的 Unicode 字符的数组的指针指示的值的新实例 (U + 0000 或 \0')。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor4_Example)</ept>).</source>
          <target state="translated">(<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor4_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Permission: <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>, requires full trust for the immediate caller.</source>
          <target state="translated">权限： <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>，需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">**</bpt>(Not CLS-compliant)<ept id="p1">**</ept> Initializes the new instance to the value indicated by a pointer to an array of Unicode characters, a starting character position within that array, and a length.</source>
          <target state="translated"><bpt id="p1">**</bpt>(不符合 cls 的)<ept id="p1">**</ept>初始化为由指向 Unicode 字符、 该数组和一个长度内的起始字符位置的数组的指针指示的值的新实例。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The constructor copies the Unicode characters from <ph id="ph1">`value`</ph> starting at index <ph id="ph2">`startIndex`</ph> and ending at index <ph id="ph3">`startIndex`</ph><ph id="ph4"> + </ph><ph id="ph5">`length`</ph> – 1 (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor5_Example)</ept>).</source>
          <target state="translated">构造函数将从的 Unicode 字符复制<ph id="ph1">`value`</ph>索引处开始<ph id="ph2">`startIndex`</ph>索引在结束<ph id="ph3">`startIndex`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`length`</ph> – 1 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor5_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Permission: <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>, requires full trust for the immediate caller.</source>
          <target state="translated">权限： <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>，需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">**</bpt>(Not CLS-compliant)<ept id="p1">**</ept> Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers.</source>
          <target state="translated"><bpt id="p1">**</bpt>(不符合 cls 的)<ept id="p1">**</ept>初始化为由指向 8 位有符号整数的数组的指针指示的值的新实例。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">假定数组表示使用当前的系统代码页编码的字符串 (即，指定的编码<ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The constructor processes characters from <ph id="ph1">`value`</ph> starting from the location specified by the pointer until a null character (0x00) is reached (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor6_Example)</ept>).</source>
          <target state="translated">构造函数处理字符，从<ph id="ph1">`value`</ph>开始从指定的指针，直到达到 null 字符 (0x00) 的位置 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor6_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Permission: <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>, requires full trust for the immediate caller.</source>
          <target state="translated">权限： <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>，需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">**</bpt>(Not CLS-compliant)<ept id="p1">**</ept> Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</source>
          <target state="translated"><bpt id="p1">**</bpt>(不符合 cls 的)<ept id="p1">**</ept>初始化为由指向 8 位有符号的整数，该数组和一个长度内的起始位置的数组的指针指示的值的新实例。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">假定数组表示使用当前的系统代码页编码的字符串 (即，指定的编码<ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The constructor processes characters from value starting at <ph id="ph1">`startIndex`</ph> and ending at <ph id="ph2">`startIndex`</ph><ph id="ph3"> + </ph><ph id="ph4">`length`</ph> – 1 (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor6_Example)</ept>).</source>
          <target state="translated">构造函数处理字符，从值开始<ph id="ph1">`startIndex`</ph>结束<ph id="ph2">`startIndex`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`length`</ph> – 1 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor6_Example)</ept>)。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Permission: <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>, requires full trust for the immediate caller.</source>
          <target state="translated">权限： <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>，需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">**</bpt>(Not CLS-compliant)<ept id="p1">**</ept> Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object.</source>
          <target state="translated"><bpt id="p1">**</bpt>(不符合 cls 的)<ept id="p1">**</ept>初始化为由指向 8 位有符号整数，长度、 该数组内的起始位置的数组的指针指示的值的新实例和<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Permission: <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>, requires full trust for the immediate caller.</source>
          <target state="translated">权限： <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>，需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Parameters</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here is a complete list of parameters used by <ph id="ph1">&lt;xref:System.String&gt;</ph> constructors that don't include a pointer parameter.</source>
          <target state="translated">下面是使用参数的完整列表<ph id="ph1">&lt;xref:System.String&gt;</ph>不包括指针参数的构造函数。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For the parameters used by each overload, see the overload syntax above.</source>
          <target state="translated">有关使用每个重载的参数，请参阅上面的重载语法。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Parameter</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Type</source>
          <target state="translated">类型</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.Char&gt;</ph>[]</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Char&gt;</ph>[]</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An array of Unicode characters.</source>
          <target state="translated">Unicode 字符的数组。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A Unicode character.</source>
          <target state="translated">一个 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The starting position in <ph id="ph1">`value`</ph> of the first character in the new string.</source>
          <target state="translated">中的起始位置<ph id="ph1">`value`</ph>的新字符串中的第一个字符。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Default value: 0</source>
          <target state="translated">默认值： 0</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The number of characters in <ph id="ph1">`value`</ph> to include in the new string.</source>
          <target state="translated">中的字符数<ph id="ph1">`value`</ph>将包含在新的字符串。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Default value: <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">默认值： <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The number of times the character <ph id="ph1">`c`</ph> is repeated in the new string.</source>
          <target state="translated">次数字符<ph id="ph1">`c`</ph>在新的字符串中重复。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If <ph id="ph1">`count`</ph> is zero, the value of the new object is <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>为零，则新对象的值是<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here is a complete list of parameters used by <ph id="ph1">&lt;xref:System.String&gt;</ph> constructors that include a pointer parameter.</source>
          <target state="translated">下面是使用参数的完整列表<ph id="ph1">&lt;xref:System.String&gt;</ph>包括指针参数的构造函数。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For the parameters used by each overload, see the overload syntax above.</source>
          <target state="translated">有关使用每个重载的参数，请参阅上面的重载语法。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Parameter</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Type</source>
          <target state="translated">类型</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A pointer to a null-terminated array of Unicode characters or an array of 8-bit signed integers.</source>
          <target state="translated">Null 终止的 Unicode 字符数组或的 8 位有符号整数数组的指针。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph> or an empty array, the value of the new string is <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>是<ph id="ph2">`null`</ph>或空数组的新字符串的值为<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The index of the array element that defines the first character in the new string.</source>
          <target state="translated">新的字符串中定义的第一个字符的数组元素的索引。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Default value: 0</source>
          <target state="translated">默认值： 0</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The number of array elements to use to create the new string.</source>
          <target state="translated">要用于创建新的字符串的数组元素的数目。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If length is zero, the constructor creates a string whose value is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果长度为零，构造函数将创建一个字符串，其值<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Default value: <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">默认值： <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>An object that specifies how the <ph id="ph1">`value`</ph> array is encoded.</source>
          <target state="translated">一个对象，指定如何<ph id="ph1">`value`</ph>数组进行编码。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Default value: <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph>, or the system's current ANSI code page</source>
          <target state="translated">默认值： <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph>，或系统的当前 ANSI 代码页</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Exceptions</source>
          <target state="translated">异常</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here's a list of exceptions thrown by constructors that don't include pointer parameters.</source>
          <target state="translated">下面是由不包括指针参数的构造函数引发的异常的列表。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Exception</source>
          <target state="translated">例外</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Thrown by</source>
          <target state="translated">由引发</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 为 <ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`startIndex`</ph>,<ph id="ph2">`length`</ph>, or <ph id="ph3">`count`</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph><ph id="ph2">`length`</ph>，或<ph id="ph3">`count`</ph>小于零。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The sum of <ph id="ph1">`startIndex`</ph> and <ph id="ph2">`length`</ph> is greater than the number of elements in <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 和 <ph id="ph2">`length`</ph> 之和大于 <ph id="ph3">`value`</ph> 中的元素数。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`count`</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">`count`</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here's a list of exceptions thrown by constructors that include pointer parameters.</source>
          <target state="translated">下面是由包括指针参数的构造函数引发的异常的列表。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Exception</source>
          <target state="translated">例外</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Thrown by</source>
          <target state="translated">由引发</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`value`</ph> specifies an array that contains an invalid Unicode character.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 指定包含无效的 Unicode 字符的数组。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`value`</ph> or <ph id="ph2">`value`</ph><ph id="ph3"> + </ph><ph id="ph4">`startIndex`</ph> specifies an address that is less than 64K.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 或<ph id="ph2">`value`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`startIndex`</ph>指定小于 64k 的地址。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A new <ph id="ph1">&lt;xref:System.String&gt;</ph> instance could not be initialized from the <ph id="ph2">`value`</ph> byte array because <ph id="ph3">`value`</ph> does not use the default code page encoding.</source>
          <target state="translated">一个新<ph id="ph1">&lt;xref:System.String&gt;</ph>无法初始化实例，从<ph id="ph2">`value`</ph>字节数组因为<ph id="ph3">`value`</ph>不使用默认代码页编码。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All constructors with pointers.</source>
          <target state="translated">具有使用指针的所有构造函数。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`value`</ph> is null.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 为 null。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The current process does not have read access to all the addressed characters.</source>
          <target state="translated">当前进程不具有对所有通过地址访问的字符的读取访问权限。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`startIndex`</ph> or <ph id="ph2">`length`</ph> is less than zero, <ph id="ph3">`value`</ph><ph id="ph4"> + </ph><ph id="ph5">`startIndex`</ph> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 或 <ph id="ph2">`length`</ph> 小于零，<ph id="ph3">`value`</ph><ph id="ph4"> + </ph><ph id="ph5">`startIndex`</ph> 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The length of the new string is too large to allocate.</source>
          <target state="translated">新字符串的长度为太大，无法分配。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All constructors with pointers.</source>
          <target state="translated">具有使用指针的所有构造函数。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`value`</ph>, or <ph id="ph2">`value`</ph><ph id="ph3"> + </ph><ph id="ph4">`startIndex`</ph><ph id="ph5"> + </ph><ph id="ph6">`length`</ph> – 1, specifies an invalid address.</source>
          <target state="translated"><ph id="ph1">`value`</ph>或<ph id="ph2">`value`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`startIndex`</ph> <ph id="ph5"> + </ph> <ph id="ph6">`length`</ph> – 1，表示指定了无效的地址。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Which method do I call?</source>
          <target state="translated">请勿调用的方法？</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To</source>
          <target state="translated">到</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Call or use</source>
          <target state="translated">调用或使用</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string.</source>
          <target state="translated">创建一个字符串。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Assignment from a string literal or an existing string (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor1_Example)</ept>)</source>
          <target state="translated">从文本字符串或现有字符串的分配 (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor1_Example)</ept>)</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string from an entire character array.</source>
          <target state="translated">创建从整个字符数组的字符串。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph> (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor2_Example)</ept>)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph> (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor2_Example)</ept>)</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Createa string from a portion of a character array.</source>
          <target state="translated">从字符数组的一部分来创建一个字符串。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor3_Example)</ept>)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor3_Example)</ept>)</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string that repeats the same character multiple times.</source>
          <target state="translated">创建重复多次的相同字符的字符串。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29&gt;</ph> (<bpt id="p1">[</bpt>example<ept id="p1">](#Ctor3_Example)</ept>)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29&gt;</ph> (<bpt id="p1">[</bpt>示例<ept id="p1">](#Ctor3_Example)</ept>)</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string from a pointer to a Unicode or wide character array.</source>
          <target state="translated">从指针创建一个字符串，为 Unicode 或宽字符数组。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string from a portion of a Unicode or wide character array by using its pointer.</source>
          <target state="translated">通过使用它的指针，从 Unicode 或宽字符数组的一部分创建字符串。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string from a C++ <ph id="ph1">`char`</ph> array.</source>
          <target state="translated">从 c + + 创建字符串<ph id="ph1">`char`</ph>数组。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph>, <ph id="ph2">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph>, <ph id="ph2">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph></target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a string from ASCII characters.</source>
          <target state="translated">创建从 ASCII 字符的字符串。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Creating strings</source>
          <target state="translated">创建字符串</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The most commonly used technique for creating strings programmatically is simple assignment, as illustrated in <bpt id="p1">[</bpt>this example<ept id="p1">](#Ctor1_Example)</ept>.</source>
          <target state="translated">最常用的技术以编程方式创建字符串为简单赋值，如中所示<bpt id="p1">[</bpt>本例<ept id="p1">](#Ctor1_Example)</ept>。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> class also includes four types of constructor overloads that let you create strings from the following values:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String&gt;</ph>类还进行了四种类型的构造函数重载，使您可以从以下值创建字符串：</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>From a character array (an array of UTF-16-encoded characters).</source>
          <target state="translated">从字符数组 （UTF 16 编码字符的数组）。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can create a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object from the characters in the entire array or a portion of it.</source>
          <target state="translated">你可以创建一个新<ph id="ph1">&lt;xref:System.String&gt;</ph>整个数组或它的一部分中的字符的对象。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph> constructor copies all the characters in the array to the new string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph>构造函数将所有字符数组中都复制到新的字符串。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor copies the characters from index <ph id="ph2">`startIndex`</ph> to index <ph id="ph3">`startIndex`</ph><ph id="ph4"> + </ph><ph id="ph5">`length`</ph> – 1 to the new string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数将的字符复制从索引<ph id="ph2">`startIndex`</ph>到索引<ph id="ph3">`startIndex`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`length`</ph> – 1 到新的字符串。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If <ph id="ph1">`length`</ph> is zero, the value of the new string is <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`length`</ph>为零，新的字符串的值是<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If your code repeatedly instantiates strings that have the same value, you can improve application performance by using an alternate means of creating strings.</source>
          <target state="translated">如果你的代码重复实例化具有相同的值的字符串，您可以通过创建字符串的替代方法来改进应用程序性能。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see <bpt id="p1">[</bpt>Handling repetitive strings<ept id="p1">](#Repetitive)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>处理重复字符串<ept id="p1">](#Repetitive)</ept>。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>From a single character that is duplicated zero, one, or more times, by using the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">从单个字符，它是重复的零，一个，或三次以上，通过使用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If <ph id="ph1">`count`</ph> is zero, the value of the new string is <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>为零，新的字符串的值是<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>From a pointer to a null-terminated character array, by using the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%29&gt;</ph> or <ph id="ph2">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">指向以 null 结尾的字符数组的指针，从通过使用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%29&gt;</ph>或<ph id="ph2">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Either the entire array or a specified range can be used to initialize the string.</source>
          <target state="translated">整个数组或指定的范围可以用于初始化字符串。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The constructor copies a sequence of Unicode characters starting from the specified pointer or from the specified pointer plus <ph id="ph1">`startIndex`</ph> and continuing to the end of the array or for <ph id="ph2">`length`</ph> characters.</source>
          <target state="translated">构造函数将复制从指定的指针或从指定的指针加号启动的 Unicode 字符序列<ph id="ph1">`startIndex`</ph>和直至结尾的数组，或者用于<ph id="ph2">`length`</ph>字符。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If <ph id="ph1">`value`</ph> is a null pointer or <ph id="ph2">`length`</ph> is zero, the constructor creates a string whose value is <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>是 null 指针或<ph id="ph2">`length`</ph>为零，构造函数将创建一个字符串，其值<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the copy operation proceeds to the end of the array and the array is not null-terminated, the constructor behavior is system-dependent.</source>
          <target state="translated">如果复制操作将转到数组的末尾，该阵列不以 null 结尾的构造函数行为与系统相关。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Such a condition might cause an access violation.</source>
          <target state="translated">此类条件可能会导致访问冲突。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the array contains any embedded null characters (U+0000 or '\0') and the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload is called, the string instance contains <ph id="ph2">`length`</ph> characters including any embedded nulls.</source>
          <target state="translated">如果数组包含任何嵌入的 null 字符 (U + 0000 或 \0') 和<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>调用重载，字符串实例包含<ph id="ph2">`length`</ph>字符包括任何嵌入的 null。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">下面的示例演示包括两个 null 字符的 10 个元素的数组的指针传递给时会发生什么情况<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</source>
          <target state="translated">因为该地址为数组的开头，并且数组中的所有元素都被添加到字符串，构造函数实例化具有 10 个字符，包括两个嵌入的 null 的字符串。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>On the other hand, if the same array is passed to the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%29&gt;</ph> constructor, the result is a four-character string that does not include the first null character.</source>
          <target state="translated">另一方面，如果将相同的数组传递给<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%29&gt;</ph>构造函数，结果是不包括第一个空字符的四个字符字符串。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The array must contain Unicode characters.</source>
          <target state="translated">该数组必须包含 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In C++, this means that the character array must be defined either as the managed <ph id="ph1">&lt;xref:System.Char&gt;</ph>[] type or the unmanaged<ph id="ph2">`wchar_t`</ph>[] type.</source>
          <target state="translated">在 c + +，这意味着，字符数组都必须具有定义作为托管<ph id="ph1">&lt;xref:System.Char&gt;</ph>[] 类型或非托管<ph id="ph2">`wchar_t`</ph>[] 类型。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%29&gt;</ph> overload is called and the array is not null-terminated, or if the <ph id="ph2">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload is called and <ph id="ph3">`startIndex`</ph><ph id="ph4"> + </ph><ph id="ph5">`length`</ph>-1 includes a range that it outside the memory allocated for the sequence of characters, the behavior of the constructor is system-dependent, and an access violation may occur.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%29&gt;</ph>调用重载和数组不是 null 终止，或者如果<ph id="ph2">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>调用重载和<ph id="ph3">`startIndex`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`length`</ph>-1 包括为字符序列，它外部内存分配一系列构造函数的行为与系统相关，并可能产生访问冲突。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In addition, on the Intel Itanium processor, calls to the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor may throw a <ph id="ph2">&lt;xref:System.DataMisalignedException&gt;</ph> exception.</source>
          <target state="translated">此外，在 Intel 的 Itanium 处理器上，调用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数可能会引发<ph id="ph2">&lt;xref:System.DataMisalignedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If this occurs, call the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> instead.</source>
          <target state="translated">如果发生这种情况，调用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>相反。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>From a pointer to a signed byte array.</source>
          <target state="translated">从指向带符号的字节数组的指针。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Either the entire array or a specified range can be used to initialize the string.</source>
          <target state="translated">整个数组或指定的范围可以用于初始化字符串。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The sequence of bytes can be interpreted by using the default code page encoding, or an encoding can be specified in the constructor call.</source>
          <target state="translated">可以通过使用默认代码页编码，解释的字节序列，或可以构造函数调用中指定的编码。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the constructor tries to instantiate a string from an entire array that is not null-terminated, or if the range of the array from <ph id="ph1">`value`</ph><ph id="ph2"> + </ph><ph id="ph3">`startIndex`</ph> to <ph id="ph4">`value`</ph><ph id="ph5"> + </ph><ph id="ph6">`startIndex`</ph><ph id="ph7"> + </ph><ph id="ph8">`length`</ph> -1 is outside of the memory allocated for the array, the behavior of this constructor is system-dependent, and an access violation may occur.</source>
          <target state="translated">如果构造函数尝试实例化从整个数组，它不是以 null 结尾的字符串，或者从数组的范围<ph id="ph1">`value`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`startIndex`</ph>到<ph id="ph4">`value`</ph> <ph id="ph5"> + </ph> <ph id="ph6">`startIndex`</ph> <ph id="ph7"> + </ph> <ph id="ph8">`length`</ph> -1 是为数组分配的内存之外，此构造函数的行为与系统相关，并且访问冲突可能会发生。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The three constructors that include a signed byte array as a parameter are designed primarily to convert a C++ <ph id="ph1">`char`</ph> array to a string, as shown in this example:</source>
          <target state="translated">包括作为参数的有符号的字节数组的三个构造函数旨在主要是为了将转换 c + +<ph id="ph1">`char`</ph>数组转换为字符串，如本示例中所示：</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the array contains any null characters ('\0') or bytes whose value is 0 and the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload is called, the string instance contains <ph id="ph2">`length`</ph> characters including any embedded nulls.</source>
          <target state="translated">如果数组包含任何 null 字符 (\0) 或字节其值为 0 和<ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>调用重载，字符串实例包含<ph id="ph2">`length`</ph>字符包括任何嵌入的 null。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">下面的示例演示包括两个 null 字符的 10 个元素的数组的指针传递给时会发生什么情况<ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</source>
          <target state="translated">因为该地址为数组的开头，并且数组中的所有元素都被添加到字符串，构造函数实例化具有 10 个字符，包括两个嵌入的 null 的字符串。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>On the other hand, if the same array is passed to the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph> constructor, the result is a four-character string that does not include the first null character.</source>
          <target state="translated">另一方面，如果将相同的数组传递给<ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph>构造函数，结果是不包括第一个空字符的四个字符字符串。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph> and <ph id="ph2">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructors interpret <ph id="ph3">`value`</ph> by using the default ANSI code page, calling these constructors with identical byte arrays may create strings that have different values on different systems.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph>和<ph id="ph2">&lt;xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数解释<ph id="ph3">`value`</ph>通过使用默认的 ANSI 代码页，调用这些构造函数具有相同的字节数组可能会创建不同的系统具有不同的值的字符串。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Handling repetitive strings</source>
          <target state="translated">处理重复字符串</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Apps that parse or decode streams of text often use the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor or the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to convert sequences of characters into a string.</source>
          <target state="translated">应用程序分析或通常解码的文本流使用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数或<ph id="ph2">&lt;xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>方法将字符序列转换为字符串。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Repeatedly creating new strings with the same value instead of creating and reusing one string wastes memory.</source>
          <target state="translated">重复使用相同的值而不是创建和重复使用一个字符串中创建新的字符串，浪费内存。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you are likely to create the same string value repeatedly by calling the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor, even if you don't know in advance what those identical string values may be, you can use a lookup table instead.</source>
          <target state="translated">如果你很可能重复创建相同的字符串值，通过调用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数，即使你不知道在向前移动这些相同的字符串值可能是，你可以改为使用查找表。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, suppose you read and parse a stream of characters from a file that contains XML tags and attributes.</source>
          <target state="translated">例如，假设你读取并分析从包含 XML 标记和特性的文件的字符流。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>When you parse the stream, you repeatedly encounter certain tokens (that is, sequences of characters that have a symbolic meaning).</source>
          <target state="translated">当你将该流分析时，你重复会遇到某些令牌 （即，有符号的意义的字符序列）。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream.</source>
          <target state="translated">等效于字符串"0"，"1"、"true"和"false"的令牌是可能经常发生在 XML 流中。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Instead of converting each token into a new string, you can create a <ph id="ph1">&lt;xref:System.Xml.NameTable?displayProperty=nameWithType&gt;</ph> object to hold commonly occurring strings.</source>
          <target state="translated">而不是将每个令牌转换为一个新字符串，你可以创建<ph id="ph1">&lt;xref:System.Xml.NameTable?displayProperty=nameWithType&gt;</ph>对象以保存经常出现的字符串。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph> object improves performance, because it retrieves stored strings without allocating temporary memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph>对象提高性能，因为它未分配的临时内存情况下检索存储的字符串。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>When you encounter a token, use the <ph id="ph1">&lt;xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to retrieve the token from the table.</source>
          <target state="translated">当你遇到一个令牌时，则使用<ph id="ph1">&lt;xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>方法来从表中检索令牌。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the token exists, the method returns the corresponding string.</source>
          <target state="translated">如果该标记存在，则方法将返回对应的字符串。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the token does not exist, use the <ph id="ph1">&lt;xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to insert the token into the table and to get the corresponding string.</source>
          <target state="translated">如果该令牌不存在，使用<ph id="ph1">&lt;xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>方法来插入到表的令牌和获取相应的字符串。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example 1: Using string assignment</source>
          <target state="translated">示例 1： 使用字符串分配</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example creates a new string by assigning it a string literal.</source>
          <target state="translated">下面的示例创建一个新字符串，为其分配文本的字符串。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It creates a second string by assigning the value of the first string to it.</source>
          <target state="translated">它通过将第一个字符串的值分配给它创建第二个字符串。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>These are the two most common ways to instantiate a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">这些是实例化一个新的两个最常见方法<ph id="ph1">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example 2: Using a character array</source>
          <target state="translated">示例 2： 使用的字符数组</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object from a character array.</source>
          <target state="translated">下面的示例演示如何创建一个新<ph id="ph1">&lt;xref:System.String&gt;</ph>字符数组中的对象。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example 3: Using a portion of a character array and repeating a single character</source>
          <target state="translated">示例 3： 使用的字符数组的一部分并重复单个字符</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object from a portion of a character array, and how to create a new <ph id="ph2">&lt;xref:System.String&gt;</ph> object that contains multiple occurrences of a single character.</source>
          <target state="translated">下面的示例演示如何创建一个新<ph id="ph1">&lt;xref:System.String&gt;</ph>的字符数组，以及如何创建一个新的部分中的对象<ph id="ph2">&lt;xref:System.String&gt;</ph>包含单个字符的多个匹配项的对象。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example 4: Using a pointer to a character array</source>
          <target state="translated">示例 4： 使用指向字符数组的指针</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object from a pointer to an array of characters.</source>
          <target state="translated">下面的示例演示如何创建一个新<ph id="ph1">&lt;xref:System.String&gt;</ph>从指针指向字符数组的对象。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The C# example must be compiled by using the <ph id="ph1">`/unsafe`</ph> compiler switch.</source>
          <target state="translated">必须通过使用编译的 C# 示例<ph id="ph1">`/unsafe`</ph>编译器开关。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example 5: Instantiating a string from a pointer and a range of an array</source>
          <target state="translated">示例 5： 实例化字符串中为指针，数组的范围</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example examines the elements of a character array for either a period or an exclamation point.</source>
          <target state="translated">下面的示例为一个句点或感叹号检查的字符数组的元素。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If one is found, it instantiates a string from the characters in the array that precede the punctuation symbol.</source>
          <target state="translated">如果找到一个对象，它实例化前标点符号的字符数组中从一个字符串。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If not, it instantiates a string with the entire contents of the array.</source>
          <target state="translated">否则，它实例化一个字符串数组的整个内容。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The C# example must be compiled using the <ph id="ph1">`/unsafe`</ph> compiler switch.</source>
          <target state="translated">必须使用编译的 C# 示例<ph id="ph1">`/unsafe`</ph>编译器开关。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example 6: Instantiating a string from a pointer to a signed byte array</source>
          <target state="translated">示例 6： 实例化一个从指针指向的有符号的字节数组的字符串</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example demonstrates how you can create an instance of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class with the <ph id="ph2">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph> constructor.</source>
          <target state="translated">下面的示例演示如何创建的实例<ph id="ph1">&lt;xref:System.String&gt;</ph>类，该类具有<ph id="ph2">&lt;xref:System.String.%23ctor%28System.SByte%2A%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Version information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET Framework</source>
          <target state="translated">.NET Framework</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All overloads are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</source>
          <target state="translated">中支持所有重载： 4.5、 4、 3.5、 3.0、 2.0、 1.1、 1.0</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET Framework Client Profile</source>
          <target state="translated">.NET Framework Client Profile</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All overloads are supported in: 4, 3.5 SP1</source>
          <target state="translated">中支持所有重载： 4、 3.5 SP1</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Portable Class Library</source>
          <target state="translated">可移植类库</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All overloads without an <ph id="ph1">&lt;xref:System.SByte&gt;</ph><ph id="ph2">`*`</ph> parameter are supported</source>
          <target state="translated">无的所有重载<ph id="ph1">&lt;xref:System.SByte&gt;</ph><ph id="ph2">`*`</ph>支持参数</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>.NET for Windows Store apps</source>
          <target state="translated">用于 Windows 应用商店应用的 .NET</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All overloads without an <ph id="ph1">&lt;xref:System.SByte&gt;</ph><ph id="ph2">`*`</ph> parameter are supported in: Windows 8</source>
          <target state="translated">无的所有重载<ph id="ph1">&lt;xref:System.SByte&gt;</ph><ph id="ph2">`*`</ph>中支持参数： Windows 8</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*)">
          <source>A pointer to a null-terminated array of Unicode characters.</source>
          <target state="translated">指向以 null 终止的 Unicode 字符数组的指针。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by a specified pointer to an array of Unicode characters.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char*)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*)">
          <source>The current process does not have read access to all the addressed characters.</source>
          <target state="translated">当前进程不具有对所有通过地址访问的字符的读取访问权限。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> specifies an array that contains an invalid Unicode character, or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> specifies an address less than 64000.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 指定了包含无效 Unicode 字符的数组，或者 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 指定了小于 64000 的地址。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char*)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[])">
          <source>An array of Unicode characters.</source>
          <target state="translated">Unicode 字符的数组。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by an array of Unicode characters.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由 Unicode 字符数组指示的值。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char[])">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source>A pointer to a null-terminated array of 8-bit signed integers.</source>
          <target state="translated">一个指针，指向以 null 结尾的 8 位带符号整数数组。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source>The integers are interpreted using the current system code page encoding (that is, the encoding specified by <ph id="ph1">&lt;see cref="P:System.Text.Encoding.Default" /&gt;</ph>).</source>
          <target state="translated">使用当前系统代码页编码（即由 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.Default" /&gt;</ph> 指定的编码）来解释整数。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by a pointer to an array of 8-bit signed integers.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由指向 8 位有符号整数数组的指针指示的值。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> could not be initialized using <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, assuming <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is encoded in ANSI.</source>
          <target state="translated">如果 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 采用 ANSI 进行编码，那么无法使用 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 初始化 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source>The length of the new string to initialize, which is determined by the null termination character of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, is too large to allocate.</source>
          <target state="translated">要初始化的新字符串的长度（该长度由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的 null 终止字符确定）太大，无法分配。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> specifies an invalid address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 指定的地址无效。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char,System.Int32)">
          <source>A Unicode character.</source>
          <target state="translated">一个 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char,System.Int32)">
          <source>The number of times <bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept> occurs.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept> 出现的次数。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by a specified Unicode character repeated a specified number of times.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char,System.Int32)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>A pointer to an array of Unicode characters.</source>
          <target state="translated">指向 Unicode 字符数组的指针。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的起始位置。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>The number of characters within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to use.</source>
          <target state="translated">要使用的 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的字符数。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值、该数组内的起始字符位置和一个长度指示的值。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero, <ph id="ph3">&lt;paramref name="value" /&gt;</ph><ph id="ph4"> + </ph><ph id="ph5">&lt;paramref name="startIndex" /&gt;</ph> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 小于零，<ph id="ph3">&lt;paramref name="value" /&gt;</ph><ph id="ph4"> + </ph><ph id="ph5">&lt;paramref name="startIndex" /&gt;</ph> 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> specifies an array that contains an invalid Unicode character, or <ph id="ph2">&lt;paramref name="value" /&gt;</ph><ph id="ph3"> + </ph><ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> specifies an address less than 64000.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 指定的数组包含无效的 Unicode 字符，或 <ph id="ph2">&lt;paramref name="value" /&gt;</ph><ph id="ph3"> + </ph><ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> 指定的地址小于 64000。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>An array of Unicode characters.</source>
          <target state="translated">Unicode 字符的数组。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的起始位置。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to use.</source>
          <target state="translated">要使用的 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的字符数。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the number of elements in <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 和 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 之和大于 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 中的元素数。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>A pointer to an array of 8-bit signed integers.</source>
          <target state="translated">指向 8 位带符号整数数组的指针。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>The integers are interpreted using the current system code page encoding (that is, the encoding specified by <ph id="ph1">&lt;see cref="P:System.Text.Encoding.Default" /&gt;</ph>).</source>
          <target state="translated">使用当前系统代码页编码（即由 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.Default" /&gt;</ph> 指定的编码）来解释整数。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的起始位置。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>The number of characters within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to use.</source>
          <target state="translated">要使用的 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的字符数。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 类的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置和一个长度指示的值。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>The address specified by <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is too large for the current platform; that is, the address calculation overflowed.</source>
          <target state="translated">由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>The length of the new string to initialize is too large to allocate.</source>
          <target state="translated">要初始化的新字符串的长度太大，无法分配。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>The address specified by <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is less than 64K.</source>
          <target state="translated">由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 指定的地址小于 64K。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> could not be initialized using <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, assuming <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is encoded in ANSI.</source>
          <target state="translated">如果 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 采用 ANSI 进行编码，那么无法使用 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 初始化 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="length" /&gt;</ph> collectively specify an invalid address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>、<ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 共同指定的地址无效。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>A pointer to an array of 8-bit signed integers.</source>
          <target state="translated">指向 8 位带符号整数数组的指针。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的起始位置。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>The number of characters within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to use.</source>
          <target state="translated">要使用的 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 内的字符数。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>An object that specifies how the array referenced by <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> is encoded.</source>
          <target state="translated">一个对象，用于指定如何对 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 所引用的数组进行编码。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>enc<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, ANSI encoding is assumed.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>enc<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则假定以 ANSI 编码。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置、长度以及 <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> 对象指示的值。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>For examples and comprehensive usage information about this and other <ph id="ph1">`String`</ph> constructor overloads, see the <ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.</source>
          <target state="translated">有关示例和有关这和其他的全面的使用情况信息<ph id="ph1">`String`</ph>构造函数重载，请参阅<ph id="ph2">&lt;xref:System.String.%23ctor%2A&gt;</ph>摘要构造函数。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>The address specified by <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is too large for the current platform; that is, the address calculation overflowed.</source>
          <target state="translated">由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>The length of the new string to initialize is too large to allocate.</source>
          <target state="translated">要初始化的新字符串的长度太大，无法分配。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>The address specified by <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is less than 64K.</source>
          <target state="translated">由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 指定的地址小于 64K。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> could not be initialized using <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, assuming <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is encoded as specified by <ph id="ph4">&lt;paramref name="enc" /&gt;</ph>.</source>
          <target state="translated">未能使用 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 初始化 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的新实例，假定 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 按照 <ph id="ph4">&lt;paramref name="enc" /&gt;</ph> 的指定进行编码。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="length" /&gt;</ph> collectively specify an invalid address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>、<ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 共同指定的地址无效。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="P:System.String.Chars(System.Int32)">
          <source>A position in the current string.</source>
          <target state="translated">当前的字符串中的位置。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="P:System.String.Chars(System.Int32)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> object at a specified position in the current <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> 对象中位于指定位置的 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>The object at position <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated">位于 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 位置的对象。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>The <ph id="ph1">`index`</ph> parameter is zero-based.</source>
          <target state="translated"><ph id="ph1">`index`</ph>参数是从零开始。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>This property returns the <ph id="ph1">&lt;xref:System.Char&gt;</ph> object at the position specified by the <ph id="ph2">`index`</ph> parameter.</source>
          <target state="translated">此属性返回<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象位于指定位置<ph id="ph2">`index`</ph>参数。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>However, a Unicode character might be represented by more than one <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">但是，可能由多个表示 Unicode 字符<ph id="ph1">&lt;xref:System.Char&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Globalization.StringInfo?displayProperty=nameWithType&gt;</ph> class to work with Unicode characters instead of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Globalization.StringInfo?displayProperty=nameWithType&gt;</ph>类以使用 Unicode 字符而不是<ph id="ph2">&lt;xref:System.Char&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>For more information, see the "Char Objects and Unicode Characters" section in the <ph id="ph1">&lt;xref:System.String&gt;</ph> class overview.</source>
          <target state="translated">有关详细信息，请参阅中的"Char 对象和 Unicode 字符"一节<ph id="ph1">&lt;xref:System.String&gt;</ph>类概述。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>In C#, the <ph id="ph1">&lt;xref:System.String.Chars%2A&gt;</ph> property is an indexer.</source>
          <target state="translated">在 C# 中，<ph id="ph1">&lt;xref:System.String.Chars%2A&gt;</ph>属性是一个索引器。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>In Visual Basic, it is the default property of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">在 Visual Basic 中，它是默认属性<ph id="ph1">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>Each <ph id="ph1">&lt;xref:System.Char&gt;</ph> object in the string can be accessed by using code such as the following.</source>
          <target state="translated">每个<ph id="ph1">&lt;xref:System.Char&gt;</ph>可以使用类似以下的代码访问字符串中的对象。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Chars(System.Int32)">
          <source>The following example demonstrates how you can use this indexer in a routine to validate a string.</source>
          <target state="translated">下面的示例演示如何在例程中使用此索引器来验证字符串。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="P:System.String.Chars(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to the length of this object or less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 大于或等于此对象的长度或小于零。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.String.Clone">
          <source>Returns a reference to this instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">返回对此 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 实例的引用。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.String.Clone">
          <source>This instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Clone">
          <source>The return value is not an independent copy of this instance; it is simply another view of the same data.</source>
          <target state="translated">返回值不是此实例; 的独立副本它是只是另一个视图相同的数据。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Clone">
          <source>Use the <ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.CopyTo%2A&gt;</ph> method to create a separate <ph id="ph3">&lt;xref:System.String&gt;</ph> object with the same value as this instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.CopyTo%2A&gt;</ph>方法来创建一个单独<ph id="ph3">&lt;xref:System.String&gt;</ph>与值与此实例相同的对象。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Clone">
          <source>Because the <ph id="ph1">&lt;xref:System.String.Clone%2A&gt;</ph> method simply returns the existing string instance, there is little reason to call it directly.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String.Clone%2A&gt;</ph>方法只返回现有的字符串实例，存在很少需要直接调用它。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All overloads of the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method return a 32-bit signed integer indicating the lexical relationship between the two comparands.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> 方法的所有重载返回一个 32 位有符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Less than zero</source>
          <target state="translated">小于零</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The first substring precedes the second substring in the sort order.</source>
          <target state="translated">第一个子字符串在排序顺序中位于之前第二个子字符串。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Zero</source>
          <target state="translated">零</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The substrings occur in the same position in the sort order, or <ph id="ph1">`length`</ph> is zero.</source>
          <target state="translated">子字符串在排序顺序中出现的位置相同或 <ph id="ph1">`length`</ph> 为零。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Greater than zero</source>
          <target state="translated">大于零</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The first substring follows the second substring in the sort order.</source>
          <target state="translated">第一个子字符串遵循在排序顺序的第二个子字符串。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Whenever possible, you should call an overload of the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method that includes a <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> parameter.</source>
          <target state="translated">只要有可能，应调用的重载<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>包含方法中，<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>有关使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source>The first string to compare.</source>
          <target state="translated">要比较的第一个字符串。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source>The second string to compare.</source>
          <target state="translated">要比较的第二个字符串。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> occurs in the same position as <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 在排序顺序中出现的位置相同。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</source>
          <target state="translated">比较使用当前区域性获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合被视为单个字符，或大写和小写字符进行比较以特定的方式，可以指定区域性或字符的排序顺序依赖于前的字符或在其后。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The comparison is performed using word sort rules.</source>
          <target state="translated">使用单词排序规则进行比较。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>When comparing strings, you should call the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.</source>
          <target state="translated">比较字符串时，应调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>方法，要求你显式指定该方法使用的字符串比较的类型。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>有关使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The comparison terminates when an inequality is discovered or both strings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个字符串。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串比较结果为一个字符串的末尾相等且另一个字符串包含剩余的字符，然后与其余字符的字符串被视为更高版本。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph> method to compare three sets of strings.</source>
          <target state="translated">下面的示例调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph>方法来比较的字符串的三个组。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>In the following example, the <ph id="ph1">`ReverseStringComparer`</ph> class demonstrates how you can evaluate two strings with the <ph id="ph2">&lt;xref:System.String.Compare%2A&gt;</ph> method.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">`ReverseStringComparer`</ph>类演示如何评估与两个字符串<ph id="ph2">&lt;xref:System.String.Compare%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>For example, if the following code is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</source>
          <target state="translated">例如，如果在上运行下面的代码<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，"动物"与"ani 邮件"（使用软连字符或 U + 00AD） 区分区域性的比较该值指示两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String)">
          <source>To recognize ignorable characters in a string comparison, call the <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /&gt;</ph> method and supply a value of either <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> parameter.</source>
          <target state="translated">若要识别可忽略字符的字符串比较中，调用<ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /&gt;</ph>方法并提供值<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph4">`comparisonType`</ph>参数。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The first string to compare.</source>
          <target state="translated">要比较的第一个字符串。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The second string to compare.</source>
          <target state="translated">要比较的第二个字符串。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during the comparison; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在比较过程中忽略大小写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象（其中忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> occurs in the same position as <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 在排序顺序中出现的位置相同。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</source>
          <target state="translated">比较使用当前区域性获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合被视为单个字符，或大写和小写字符进行比较以特定的方式，可以指定区域性或字符的排序顺序依赖于前的字符或在其后。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The comparison is performed using word sort rules.</source>
          <target state="translated">使用单词排序规则进行比较。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>When comparing strings, you should call the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.</source>
          <target state="translated">比较字符串时，应调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>方法，要求你显式指定该方法使用的字符串比较的类型。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>For more information, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>有关使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The comparison terminates when an inequality is discovered or both strings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个字符串。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串比较结果为一个字符串的末尾相等且另一个字符串包含剩余的字符，然后与其余字符的字符串被视为更高版本。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The following example demonstrates that the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method is equivalent to using <ph id="ph2">&lt;xref:System.String.ToUpper%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.String.ToLower%2A&gt;</ph> when comparing strings.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph>方法相当于使用<ph id="ph2">&lt;xref:System.String.ToUpper%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.String.ToLower%2A&gt;</ph>比较字符串时。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>For example, if the following code is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, a culture-sensitive, case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</source>
          <target state="translated">例如，如果在上运行下面的代码<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，"动物"与"Ani 邮件"（使用软连字符或 U + 00AD） 的区分区域性的、 不区分大小写比较该值指示两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean)">
          <source>To recognize ignorable characters in a string comparison, call the <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /&gt;</ph> method and supply a value of either <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph4">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别可忽略字符的字符串比较中，调用<ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /&gt;</ph>方法并提供值<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph4">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The first string to compare.</source>
          <target state="translated">要比较的第一个字符串。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The second string to compare.</source>
          <target state="translated">要比较的第二个字符串。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules to use in the comparison.</source>
          <target state="translated">一个枚举值，用于指定比较中要使用的规则。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">使用指定的规则比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象，并返回一个整数，指示二者在排序顺序中的相对位置。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> is in the same position as <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 在排序顺序中出现的位置相同。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指示是否比较应使用当前或固定区域性，接受或忽略大小写的比较，或不使用 word （区分区域性） 还是序号 （不区分区域性的） 排序规则。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The comparison terminates when an inequality is discovered or both strings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个字符串。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串的比较结果相等到一个字符串的末尾，并且另一个字符串包含剩余的字符，则认为较大其余字符的字符串。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The following example compares three versions of the letter "I".</source>
          <target state="translated">下面的示例比较三个版本的字母"I"。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</source>
          <target state="translated">区域性、 是否忽略大小写，和是否执行序号比较的选择会影响结果。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;see cref="T:System.StringComparison" /&gt;</ph> is not supported.</source>
          <target state="translated">不支持 <ph id="ph1">&lt;see cref="T:System.StringComparison" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.StringComparison)">
          <source>To recognize ignorable characters in your comparison, supply a value of <ph id="ph1">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，提供的值<ph id="ph1">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph>或<ph id="ph2">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The first string to compare.</source>
          <target state="translated">要比较的第一个字符串。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The second string to compare.</source>
          <target state="translated">要比较的第二个字符串。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during the comparison; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在比较过程中忽略大小写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>An object that supplies culture-specific comparison information.</source>
          <target state="translated">一个对象，提供区域性特定的比较信息。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> occurs in the same position as <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 在排序顺序中出现的位置相同。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The comparison uses the <ph id="ph1">`culture`</ph> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</source>
          <target state="translated">该比较使用<ph id="ph1">`culture`</ph>参数来获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合被视为单个字符，或大写和小写字符进行比较以特定的方式，可以指定区域性或字符的排序顺序依赖于前的字符或在其后。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The comparison is performed using word sort rules.</source>
          <target state="translated">使用单词排序规则进行比较。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The comparison terminates when an inequality is discovered or both strings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个字符串。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串比较结果为一个字符串的末尾相等且另一个字符串包含剩余的字符，然后与其余字符的字符串被视为更高版本。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The following example demonstrates how culture can affect a comparison.</source>
          <target state="translated">下面的示例演示如何区域性可能会影响比较。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>In Czech - Czech Republic culture, "ch" is a single character that is greater than "d".</source>
          <target state="translated">捷克语-捷克共和国区域性，在"频道"是单个字符，大于"d"。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>However, in English - United States culture, "ch" consists of two characters, and "c" is less than "d".</source>
          <target state="translated">但是，在英语-美国区域性"频道"包含的两个字符，并且"c"小于"d"。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>For example, if the following code is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, a case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) using the invariant culture indicates that the two strings are equivalent.</source>
          <target state="translated">例如，如果在上运行下面的代码<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，"动物"与"Ani 邮件"（使用软连字符或 U + 00AD） 的不区分大小写比较使用固定区域性该值指示两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>To recognize ignorable characters in a string comparison, call the <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph> method and supply a value of either <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph4">&lt;paramref name="options" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别可忽略字符的字符串比较中，调用<ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph>方法并提供值<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph4">&lt;paramref name="options" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The first string to compare.</source>
          <target state="translated">要比较的第一个字符串。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The second string to compare.</source>
          <target state="translated">要比较的第二个字符串。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The culture that supplies culture-specific comparison information.</source>
          <target state="translated">提供区域性特定的比较信息的区域性。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Options to use when performing the comparison (such as ignoring case or symbols).</source>
          <target state="translated">要在执行比较时使用的选项（如忽略大小写或符号）。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</source>
          <target state="translated">对两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个字符串在排序顺序中的关系。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>A 32-bit signed integer that indicates the lexical relationship between <ph id="ph1">&lt;paramref name="strA" /&gt;</ph> and <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>, as shown in the following table</source>
          <target state="translated">一个 32 位带符号整数，该整数指示 <ph id="ph1">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph> 之间的词法关系，如下表所示</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> occurs in the same position as <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 在排序顺序中出现的位置相同。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The comparison uses the <ph id="ph1">`culture`</ph> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</source>
          <target state="translated">该比较使用<ph id="ph1">`culture`</ph>参数来获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合视为单个字符、 大写和小写字符进行比较以特定的方式，可以指定特定区域性或字符的排序顺序依赖于字符，前面或后面。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph> method is designed primarily for use in sorting or alphabetizing operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph>方法主要用于排序或按字母顺序排列操作中使用。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</source>
          <target state="translated">其值不应在方法调用的主要用途是确定两个字符串是否等效 （即，当方法调用的目的在于测试返回值为 0） 时使用。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>To determine whether two strings are equivalent, call the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要确定两个字符串是否等效，请调用<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The comparison can be further specified by the <ph id="ph1">`options`</ph> parameter, which consists of one or more members of the <ph id="ph2">&lt;xref:System.Globalization.CompareOptions&gt;</ph> enumeration.</source>
          <target state="translated">可以通过进一步指定比较<ph id="ph1">`options`</ph>参数组成的一个或多个成员<ph id="ph2">&lt;xref:System.Globalization.CompareOptions&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> values have no effect.</source>
          <target state="translated">但是，因为此方法旨在执行区分区域性的字符串比较，<ph id="ph1">&lt;xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>值不起任何作用。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Either or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>By definition, any string, including <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, compares greater than a null reference, and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>，比较结果大于空引用，且两个 null 引用比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The comparison terminates when an inequality is discovered or both strings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个字符串。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串的比较结果相等到一个字符串的末尾，并且另一个字符串包含剩余的字符，则认为较大与其余的字符的字符串。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The following example compares two strings in three different ways: using linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison.</source>
          <target state="translated">下面的示例比较两个字符串三个不同的方式： 使用 EN-US 区域性; 语言比较使用 EN-US 区域性; 语言区分大小写的比较和使用序号比较。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>It illustrates how the three methods of comparison produce three different results.</source>
          <target state="translated">它阐释了如何比较的三个方法生成三个不同的结果。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Globalization.CompareOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Globalization.CompareOptions" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>To recognize ignorable characters in your comparison, supply a value of <ph id="ph1">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph3">&lt;paramref name="options" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，提供的值<ph id="ph1">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph3">&lt;paramref name="options" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The first string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第一个字符串。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The second string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第二个字符串。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The maximum number of characters in the substrings to compare.</source>
          <target state="translated">要比较的子字符串中字符的最大数量。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Compares substrings of two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的子字符串，并返回一个指示二者在排序顺序中的相对位置的整数。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>A 32-bit signed integer indicating the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位有符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之前。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substrings occur in the same position in the sort order, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>子字符串在排序顺序中出现的位置相同或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之后。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The substrings to compare start in <ph id="ph1">`strA`</ph> at <ph id="ph2">`indexA`</ph> and in <ph id="ph3">`strB`</ph> at <ph id="ph4">`indexB`</ph>.</source>
          <target state="translated">要比较的子字符串开始<ph id="ph1">`strA`</ph>在<ph id="ph2">`indexA`</ph>并在<ph id="ph3">`strB`</ph>在<ph id="ph4">`indexB`</ph>。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Both <ph id="ph1">`indexA`</ph> and <ph id="ph2">`indexB`</ph> are zero-based; that is, the first character in <ph id="ph3">`strA`</ph> and <ph id="ph4">`strB`</ph> is at position zero.</source>
          <target state="translated">同时<ph id="ph1">`indexA`</ph>和<ph id="ph2">`indexB`</ph>是否从零开始; 即中的第一个字符<ph id="ph3">`strA`</ph>和<ph id="ph4">`strB`</ph>位置为零。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The length of the first substring is equal to the length of <ph id="ph1">`strA`</ph> minus <ph id="ph2">`indexA`</ph> plus one.</source>
          <target state="translated">第一个子字符串的长度等于的长度<ph id="ph1">`strA`</ph>减<ph id="ph2">`indexA`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The length of the second substring is equal to the length of <ph id="ph1">`strB`</ph> minus <ph id="ph2">`indexB`</ph> plus one.</source>
          <target state="translated">第二个子字符串的长度等于的长度<ph id="ph1">`strB`</ph>减<ph id="ph2">`indexB`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id="ph1">`length`</ph>.</source>
          <target state="translated">要比较的字符数是长度为两个子字符串的较小者和<ph id="ph1">`length`</ph>。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`indexA`</ph>, <ph id="ph2">`indexB`</ph>, and <ph id="ph3">`length`</ph> parameters must be nonnegative.</source>
          <target state="translated"><ph id="ph1">`indexA`</ph>， <ph id="ph2">`indexB`</ph>，和<ph id="ph3">`length`</ph>参数必须为非负数。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</source>
          <target state="translated">比较使用当前区域性获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合被视为单个字符，或大写和小写字符进行比较以特定的方式，可以指定区域性或字符的排序顺序依赖于前的字符或在其后。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The comparison is performed using word sort rules.</source>
          <target state="translated">使用单词排序规则进行比较。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>When comparing strings, you should call the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.</source>
          <target state="translated">比较字符串时，应调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph>方法，要求你显式指定该方法使用的字符串比较的类型。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>有关使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The comparison terminates when an inequality is discovered or both substrings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个子字符串。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串比较结果为一个字符串的末尾相等且另一个字符串包含剩余的字符，然后与其余字符的字符串被视为更高版本。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The following example compares two substrings.</source>
          <target state="translated">下面的示例比较这两个子字符串。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>, <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>、<ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Either <ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> or <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="length" /&gt;</ph> is greater than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，并且 <ph id="ph4">&lt;paramref name="length" /&gt;</ph> 大于零。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /&gt;</ph> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /&gt;</ph>方法执行语言性的或区分区域性的比较时不考虑这些字符。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>To recognize ignorable characters in your comparison, call the <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method and supply a value of <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph4">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，调用<ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法提供的一个值<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph4">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The first string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The second string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The maximum number of characters in the substrings to compare.</source>
          <target state="translated">要比较的子字符串中字符的最大数量。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during the comparison; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在比较过程中忽略大小写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>Compares substrings of two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的子字符串（忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之前。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substrings occur in the same position in the sort order, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>子字符串在排序顺序中出现的位置相同或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之后。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The substrings to compare start in <ph id="ph1">`strA`</ph> at <ph id="ph2">`indexA`</ph>, and in <ph id="ph3">`strB`</ph> at <ph id="ph4">`indexB`</ph>.</source>
          <target state="translated">要比较的子字符串开始<ph id="ph1">`strA`</ph>在<ph id="ph2">`indexA`</ph>，然后在<ph id="ph3">`strB`</ph>在<ph id="ph4">`indexB`</ph>。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>Both <ph id="ph1">`indexA`</ph> and <ph id="ph2">`indexB`</ph> are zero-based; that is, the first character in <ph id="ph3">`strA`</ph> and <ph id="ph4">`strB`</ph> is at position zero.</source>
          <target state="translated">同时<ph id="ph1">`indexA`</ph>和<ph id="ph2">`indexB`</ph>是否从零开始; 即中的第一个字符<ph id="ph3">`strA`</ph>和<ph id="ph4">`strB`</ph>位置为零。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The length of the first substring is equal to the length of <ph id="ph1">`strA`</ph> minus <ph id="ph2">`indexA`</ph> plus one.</source>
          <target state="translated">第一个子字符串的长度等于的长度<ph id="ph1">`strA`</ph>减<ph id="ph2">`indexA`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The length of the second substring is equal to the length of <ph id="ph1">`strB`</ph> minus <ph id="ph2">`indexB`</ph> plus one.</source>
          <target state="translated">第二个子字符串的长度等于的长度<ph id="ph1">`strB`</ph>减<ph id="ph2">`indexB`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id="ph1">`length`</ph>.</source>
          <target state="translated">要比较的字符数是长度为两个子字符串的较小者和<ph id="ph1">`length`</ph>。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`indexA`</ph>, <ph id="ph2">`indexB`</ph>, and <ph id="ph3">`length`</ph> parameters must be nonnegative.</source>
          <target state="translated"><ph id="ph1">`indexA`</ph>， <ph id="ph2">`indexB`</ph>，和<ph id="ph3">`length`</ph>参数必须为非负数。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</source>
          <target state="translated">比较使用当前区域性获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合被视为单个字符，或大写和小写字符进行比较以特定的方式，可以指定区域性或字符的排序顺序依赖于前的字符或在其后。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The comparison is performed using word sort rules.</source>
          <target state="translated">使用单词排序规则进行比较。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>When comparing strings, you should call the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.</source>
          <target state="translated">比较字符串时，应调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph>方法，要求你显式指定该方法使用的字符串比较的类型。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>For more information, see <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>有关使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The comparison terminates when an inequality is discovered or both substrings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个子字符串。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串比较结果为一个字符串的末尾相等且另一个字符串包含剩余的字符，然后与其余字符的字符串被视为更高版本。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The path name needs to be compared in an invariant manner.</source>
          <target state="translated">路径名称必须以固定方式进行比较。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The correct code to do this is as follows.</source>
          <target state="translated">正确的代码以执行此操作是，如下所示。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The following example performs two comparisons of two substrings that only differ in case.</source>
          <target state="translated">下面的示例在情况下执行两次比较，区别仅在于这两个子字符串。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The first comparison ignores case and the second comparison considers case.</source>
          <target state="translated">第一个比较不区分大小写和第二个比较考虑大小写。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>, <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>、<ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>Either <ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> or <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="length" /&gt;</ph> is greater than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，并且 <ph id="ph4">&lt;paramref name="length" /&gt;</ph> 大于零。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /&gt;</ph> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /&gt;</ph>方法执行语言性的或区分区域性的比较时不考虑这些字符。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
          <source>To recognize ignorable characters in your comparison, call the <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method and supply a value of <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph4">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，调用<ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法提供的一个值<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph4">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The first string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The second string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The maximum number of characters in the substrings to compare.</source>
          <target state="translated">要比较的子字符串中字符的最大数量。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules to use in the comparison.</source>
          <target state="translated">一个枚举值，用于指定比较中要使用的规则。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Compares substrings of two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">使用指定的规则比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之前。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substrings occur in the same position in the sort order, or the <ph id="ph3">&lt;paramref name="length" /&gt;</ph> parameter is zero.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>子字符串在排序顺序中出现的位置相同或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 参数为零。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follllows the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之后。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The substrings to compare start in <ph id="ph1">`strA`</ph> at <ph id="ph2">`indexA`</ph> and in <ph id="ph3">`strB`</ph> at <ph id="ph4">`indexB`</ph>.</source>
          <target state="translated">要比较的子字符串开始<ph id="ph1">`strA`</ph>在<ph id="ph2">`indexA`</ph>并在<ph id="ph3">`strB`</ph>在<ph id="ph4">`indexB`</ph>。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Both <ph id="ph1">`indexA`</ph> and <ph id="ph2">`indexB`</ph> are zero-based; that is, the first character in <ph id="ph3">`strA`</ph> and <ph id="ph4">`strB`</ph> is at position zero, not position one.</source>
          <target state="translated">同时<ph id="ph1">`indexA`</ph>和<ph id="ph2">`indexB`</ph>是否从零开始; 即中的第一个字符<ph id="ph3">`strA`</ph>和<ph id="ph4">`strB`</ph>是在位置零、 定位一个。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The length of the first substring is equal to the length of <ph id="ph1">`strA`</ph> minus <ph id="ph2">`indexA`</ph> plus one.</source>
          <target state="translated">第一个子字符串的长度等于的长度<ph id="ph1">`strA`</ph>减<ph id="ph2">`indexA`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The length of the second substring is equal to the length of <ph id="ph1">`strB`</ph> minus <ph id="ph2">`indexB`</ph> plus one.</source>
          <target state="translated">第二个子字符串的长度等于的长度<ph id="ph1">`strB`</ph>减<ph id="ph2">`indexB`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id="ph1">`length`</ph>.</source>
          <target state="translated">要比较的字符数是长度为两个子字符串的较小者和<ph id="ph1">`length`</ph>。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`indexA`</ph>, <ph id="ph2">`indexB`</ph>, and <ph id="ph3">`length`</ph> parameters must be nonnegative.</source>
          <target state="translated"><ph id="ph1">`indexA`</ph>， <ph id="ph2">`indexB`</ph>，和<ph id="ph3">`length`</ph>参数必须为非负数。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指示是否比较应使用当前或固定区域性，接受或忽略大小写的比较，或不使用 word （区分区域性） 还是序号 （不区分区域性的） 排序规则。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The comparison terminates when an inequality is discovered or both substrings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个子字符串。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串的比较结果相等到一个字符串的末尾，并且另一个字符串包含剩余的字符，则认为较大其余字符的字符串。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The following example compares two substrings.</source>
          <target state="translated">下面的示例比较这两个子字符串。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>, <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>、<ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Either <ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> or <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="length" /&gt;</ph> is greater than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，并且 <ph id="ph4">&lt;paramref name="length" /&gt;</ph> 大于零。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法执行语言性的或区分区域性的比较时不考虑这些字符。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>To recognize ignorable characters in your comparison, supply a value of <ph id="ph1">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，提供的值<ph id="ph1">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph>或<ph id="ph2">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The first string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The second string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept> 中子字符串的位置。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The maximum number of characters in the substrings to compare.</source>
          <target state="translated">要比较的子字符串中字符的最大数量。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during the comparison; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在比较过程中忽略大小写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>An object that supplies culture-specific comparison information.</source>
          <target state="translated">一个对象，提供区域性特定的比较信息。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>Compares substrings of two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</source>
          <target state="translated">比较两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>An integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个整数，指示两个比较字之间的词法关系。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之前。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substrings occur in the same position in the sort order, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>子字符串在排序顺序中出现的位置相同或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之后。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The substrings to compare start in <ph id="ph1">`strA`</ph> at <ph id="ph2">`indexA`</ph>, and in <ph id="ph3">`strB`</ph> at <ph id="ph4">`indexB`</ph>.</source>
          <target state="translated">要比较的子字符串开始<ph id="ph1">`strA`</ph>在<ph id="ph2">`indexA`</ph>，然后在<ph id="ph3">`strB`</ph>在<ph id="ph4">`indexB`</ph>。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>Both <ph id="ph1">`indexA`</ph> and <ph id="ph2">`indexB`</ph> are zero-based; that is, the first character in <ph id="ph3">`strA`</ph> and <ph id="ph4">`strB`</ph> is at position zero, not position one.</source>
          <target state="translated">同时<ph id="ph1">`indexA`</ph>和<ph id="ph2">`indexB`</ph>是否从零开始; 即中的第一个字符<ph id="ph3">`strA`</ph>和<ph id="ph4">`strB`</ph>是在位置零、 定位一个。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The length of the first substring is equal to the length of <ph id="ph1">`strA`</ph> minus <ph id="ph2">`indexA`</ph> plus one.</source>
          <target state="translated">第一个子字符串的长度等于的长度<ph id="ph1">`strA`</ph>减<ph id="ph2">`indexA`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The length of the second substring is equal to the length of <ph id="ph1">`strB`</ph> minus <ph id="ph2">`indexB`</ph> plus one.</source>
          <target state="translated">第二个子字符串的长度等于的长度<ph id="ph1">`strB`</ph>减<ph id="ph2">`indexB`</ph>加一。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id="ph1">`length`</ph>.</source>
          <target state="translated">要比较的字符数是长度为两个子字符串的较小者和<ph id="ph1">`length`</ph>。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">`indexA`</ph>, <ph id="ph2">`indexB`</ph>, and <ph id="ph3">`length`</ph> parameters must be nonnegative.</source>
          <target state="translated"><ph id="ph1">`indexA`</ph>， <ph id="ph2">`indexB`</ph>，和<ph id="ph3">`length`</ph>参数必须为非负数。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The comparison uses the <ph id="ph1">`culture`</ph> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</source>
          <target state="translated">该比较使用<ph id="ph1">`culture`</ph>参数来获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合被视为单个字符，或大写和小写字符进行比较以特定的方式，可以指定区域性或字符的排序顺序依赖于前的字符或在其后。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The comparison is performed using word sort rules.</source>
          <target state="translated">使用单词排序规则进行比较。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>One or both comparands can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">一个或两个比较字可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括空字符串 ("")，比较大于空的引用;和两个 null 引用的比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The comparison terminates when an inequality is discovered or both substrings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个子字符串。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串比较结果为一个字符串的末尾相等且另一个字符串包含剩余的字符，然后与其余字符的字符串被视为更高版本。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>Unexpected results can occur when comparisons are affected by culture-specific casing rules.</source>
          <target state="translated">当比较受区域性特定的大小写规则时，可能出现意外的结果。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</source>
          <target state="translated">例如，在土耳其语，下面的示例将生成错误结果因为土耳其语中的文件系统不使用的字母"i"的语言的大小写规则"文件"中。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>Compare the path name to "file" using an ordinal comparison.</source>
          <target state="translated">比较路径名称为"file"使用序号比较。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The correct code to do this is as follows:</source>
          <target state="translated">正确的代码以执行此操作是，如下所示：</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The following example compares two substrings using different cultures and ignoring the case of the substrings.</source>
          <target state="translated">下面的示例将使用不同的区域性和忽略子字符串的大小写的这两个子字符串进行比较。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The choice of culture affects how the letter "I" is compared.</source>
          <target state="translated">区域性的选择会影响字母"I"的方式进行比较。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>, <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>、<ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>Either <ph id="ph1">&lt;paramref name="strA" /&gt;</ph> or <ph id="ph2">&lt;paramref name="strB" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="length" /&gt;</ph> is greater than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="strA" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，并且 <ph id="ph4">&lt;paramref name="length" /&gt;</ph> 大于零。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /&gt;</ph> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /&gt;</ph>方法执行语言性的或区分区域性的比较时不考虑这些字符。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
          <source>To recognize ignorable characters in your comparison, call the <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph> method and supply a value of <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph4">&lt;paramref name="options" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，调用<ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph>方法提供的一个值<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph4">&lt;paramref name="options" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The first string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The starting position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept> 中子字符串开始的位置。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The second string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The starting position of the substring within <bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept> 中子字符串开始的位置。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The maximum number of characters in the substrings to compare.</source>
          <target state="translated">要比较的子字符串中字符的最大数量。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>An object that supplies culture-specific comparison information.</source>
          <target state="translated">一个对象，提供区域性特定的比较信息。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Options to use when performing the comparison (such as ignoring case or symbols).</source>
          <target state="translated">要在执行比较时使用的选项（如忽略大小写或符号）。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Compares substrings of two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</source>
          <target state="translated">对两个指定 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的子字符串进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个子字符串在排序顺序中的关系。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>An integer that indicates the lexical relationship between the two substrings, as shown in the following table.</source>
          <target state="translated">一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> precedes the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之前。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substrings occur in the same position in the sort order, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>子字符串在排序顺序中出现的位置相同或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> follows the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串在排序顺序中位于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串之后。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The substrings to compare start in <ph id="ph1">`strA`</ph> at position <ph id="ph2">`indexA`</ph> and in <ph id="ph3">`strB`</ph> at position <ph id="ph4">`indexB`</ph>.</source>
          <target state="translated">要比较的子字符串开始<ph id="ph1">`strA`</ph>位于<ph id="ph2">`indexA`</ph>并在<ph id="ph3">`strB`</ph>位于<ph id="ph4">`indexB`</ph>。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The length of the first substring is the length of <ph id="ph1">`strA`</ph> minus <ph id="ph2">`indexA`</ph>.</source>
          <target state="translated">第一个子字符串的长度是长度<ph id="ph1">`strA`</ph>减<ph id="ph2">`indexA`</ph>。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The length of the second substring is the length of <ph id="ph1">`strB`</ph> minus <ph id="ph2">`indexB`</ph>.</source>
          <target state="translated">第二个子字符串的长度是长度<ph id="ph1">`strB`</ph>减<ph id="ph2">`indexB`</ph>。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id="ph1">`length`</ph>.</source>
          <target state="translated">要比较的字符数是长度为两个子字符串的较小者和<ph id="ph1">`length`</ph>。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The <ph id="ph1">`indexA`</ph>, <ph id="ph2">`indexB`</ph>, and <ph id="ph3">`length`</ph> parameters must be nonnegative.</source>
          <target state="translated"><ph id="ph1">`indexA`</ph>， <ph id="ph2">`indexB`</ph>，和<ph id="ph3">`length`</ph>参数必须为非负数。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The comparison uses the <ph id="ph1">`culture`</ph> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</source>
          <target state="translated">该比较使用<ph id="ph1">`culture`</ph>参数来获取特定于区域性的信息，如大小写规则和每个字符的字母顺序。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</source>
          <target state="translated">例如，某些字符的组合视为单个字符、 大写和小写字符进行比较以特定的方式，可以指定特定区域性或字符的排序顺序依赖于字符，前面或后面。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph> method is designed primarily for use in sorting or alphabetizing operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph>方法主要用于排序或按字母顺序排列操作中使用。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</source>
          <target state="translated">其值不应在方法调用的主要用途是确定这两个子字符串是否相等 （即，当方法调用的目的在于测试返回值为 0） 时使用。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>To determine whether two strings are equivalent, call the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要确定两个字符串是否等效，请调用<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>One or both of <ph id="ph1">`strA`</ph> and <ph id="ph2">`strB`</ph> can be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">一个或两个<ph id="ph1">`strA`</ph>和<ph id="ph2">`strB`</ph>可以是<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>By definition, any string, including <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, compares greater than a null reference, and two null references compare equal to each other.</source>
          <target state="translated">根据定义，任意字符串，包括<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>，比较结果大于空引用，且两个 null 引用比较结果为彼此相等。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The comparison can be further specified by the <ph id="ph1">`options`</ph> parameter, which consists of one or more members of the <ph id="ph2">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">可以通过进一步指定比较<ph id="ph1">`options`</ph>参数组成的一个或多个成员<ph id="ph2">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> values have no effect.</source>
          <target state="translated">但是，因为此方法旨在执行区分区域性的字符串比较，<ph id="ph1">&lt;xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>值不起任何作用。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The comparison terminates when an inequality is discovered or both substrings have been compared.</source>
          <target state="translated">比较终止时发现不相等或已经比较了两个子字符串。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</source>
          <target state="translated">但是，如果两个字符串的比较结果相等到一个字符串的末尾，并且另一个字符串包含剩余的字符，则认为较大与其余的字符的字符串。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The return value is the result of the last comparison performed.</source>
          <target state="translated">返回值是执行的最后一个比较的结果。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph> method to compare the last names of two people.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph>方法来比较两名人员的最后一个名称。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>It then lists them in alphabetical order.</source>
          <target state="translated">它随后会列出它们按字母顺序。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Globalization.CompareOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Globalization.CompareOptions" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strA" /&gt;</ph><ph id="ph3">&lt;see langword=".Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strA" /&gt;</ph><ph id="ph3">&lt;see langword=".Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="strB" /&gt;</ph><ph id="ph3">&lt;see langword=".Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexB" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph><ph id="ph3">&lt;see langword=".Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>, <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>、<ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Either <ph id="ph1">&lt;paramref name="strA" /&gt;</ph> or <ph id="ph2">&lt;paramref name="strB" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="length" /&gt;</ph> is greater than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="strA" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="strB" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，并且 <ph id="ph4">&lt;paramref name="length" /&gt;</ph> 大于零。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /&gt;</ph>方法执行语言性的或区分区域性的比较时不考虑这些字符。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
          <source>To recognize ignorable characters in your comparison, supply a value of <ph id="ph1">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph> for the <ph id="ph3">&lt;paramref name="options" /&gt;</ph> parameter.</source>
          <target state="translated">若要识别在您比较可忽略字符，提供的值<ph id="ph1">&lt;see cref="F:System.Globalization.CompareOptions.Ordinal" /&gt;</ph>或<ph id="ph2">&lt;see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /&gt;</ph>为<ph id="ph3">&lt;paramref name="options" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects by evaluating the numeric values of the corresponding <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> objects in each string.</source>
          <target state="translated">通过计算每个字符串中相应 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的数值来比较两个 <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>The first string to compare.</source>
          <target state="translated">要比较的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>The second string to compare.</source>
          <target state="translated">要比较的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>Compares two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects by evaluating the numeric values of the corresponding <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> objects in each string.</source>
          <target state="translated">通过计算每个字符串中相应 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的数值来比较两个指定的 <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>An integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个整数，指示两个比较字之间的词法关系。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> is less than <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 小于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> and <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> are equal.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 与 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 相等。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> is greater than <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 大于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>This method performs a case-sensitive comparison using ordinal sort rules.</source>
          <target state="translated">此方法执行区分大小写的比较使用序号排序规则。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>To perform a case-insensitive comparison using ordinal sort rules, call the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method with the <ph id="ph2">`comparisonType`</ph> argument set to <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要执行不区分大小写的比较使用序号排序规则，调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>方法替换<ph id="ph2">`comparisonType`</ph>参数设置为<ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29&gt;</ph> is a static method, <ph id="ph2">`strA`</ph> and <ph id="ph3">`strB`</ph> can be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29&gt;</ph>是静态方法，<ph id="ph2">`strA`</ph>和<ph id="ph3">`strB`</ph>可以是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>If both values are <ph id="ph1">`null`</ph>, the method returns 0 (zero), which indicates that <ph id="ph2">`strA`</ph> and <ph id="ph3">`strB`</ph> are equal.</source>
          <target state="translated">如果两个值都<ph id="ph1">`null`</ph>，该方法返回 0 （零），这指示<ph id="ph2">`strA`</ph>和<ph id="ph3">`strB`</ph>是否相等。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>If only one of the values is <ph id="ph1">`null`</ph>, the method considers the non-null value to be greater.</source>
          <target state="translated">如果只有一个值是<ph id="ph1">`null`</ph>，该方法考虑晚的非 null 值。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.String)">
          <source>The following example performs and ordinal comparison of two strings that only differ in case.</source>
          <target state="translated">下面的示例执行和序号比较两个字符串仅在大小写不同。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The first string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The starting index of the substring in <bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strA<ept id="p1">&lt;/c&gt;</ept> 中子字符串的起始索引。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The second string to use in the comparison.</source>
          <target state="translated">要在比较中使用的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The starting index of the substring in <bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>strB<ept id="p1">&lt;/c&gt;</ept> 中子字符串的起始索引。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The maximum number of characters in the substrings to compare.</source>
          <target state="translated">要比较的子字符串中字符的最大数量。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Compares substrings of two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects by evaluating the numeric values of the corresponding <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> objects in each substring.</source>
          <target state="translated">通过计算每个子字符串中相应 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的数值来比较两个指定的 <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> 对象的子字符串。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</source>
          <target state="translated">一个 32 位带符号整数，指示两个比较数之间的词法关系。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> is less than the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串小于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.中的子字符串。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substrings are equal, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>子字符串相等，或者 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The substring in <ph id="ph3">&lt;paramref name="strA" /&gt;</ph> is greater than the substring in <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="strA" /&gt;</ph> 中的子字符串大于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph> 中的子字符串。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`indexA`</ph>, <ph id="ph2">`indexB`</ph>, and <ph id="ph3">`length`</ph> parameters must be nonnegative.</source>
          <target state="translated"><ph id="ph1">`indexA`</ph>， <ph id="ph2">`indexB`</ph>，和<ph id="ph3">`length`</ph>参数必须为非负数。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>The number of characters compared is the lesser of the length of <ph id="ph1">`strA`</ph> less <ph id="ph2">`indexA`</ph>, the length of <ph id="ph3">`strB`</ph> less <ph id="ph4">`indexB`</ph>, and <ph id="ph5">`length`</ph>.</source>
          <target state="translated">比较的字符数是长度的较小者<ph id="ph1">`strA`</ph>较少<ph id="ph2">`indexA`</ph>的长度<ph id="ph3">`strB`</ph>较少<ph id="ph4">`indexB`</ph>，和<ph id="ph5">`length`</ph>。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>This method performs a case-sensitive comparison using ordinal sort rules.</source>
          <target state="translated">此方法执行区分大小写的比较使用序号排序规则。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>To perform a case-insensitive comparison using ordinal sort rules, call the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph> method with the <ph id="ph2">`comparisonType`</ph> argument set to <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要执行不区分大小写的比较使用序号排序规则，调用<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph>方法替换<ph id="ph2">`comparisonType`</ph>参数设置为<ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>Because <ph id="ph1">&lt;xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29&gt;</ph> is a static method, <ph id="ph2">`strA`</ph> and <ph id="ph3">`strB`</ph> can be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29&gt;</ph>是静态方法，<ph id="ph2">`strA`</ph>和<ph id="ph3">`strB`</ph>可以是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>If both values are <ph id="ph1">`null`</ph>, the method returns 0 (zero), which indicates that <ph id="ph2">`strA`</ph> and <ph id="ph3">`strB`</ph> are equal.</source>
          <target state="translated">如果两个值都<ph id="ph1">`null`</ph>，该方法返回 0 （零），这指示<ph id="ph2">`strA`</ph>和<ph id="ph3">`strB`</ph>是否相等。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>If only one of the values is <ph id="ph1">`null`</ph>, the method considers the non-null value to be greater.</source>
          <target state="translated">如果只有一个值是<ph id="ph1">`null`</ph>，该方法考虑晚的非 null 值。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>This following example demonstrates that <ph id="ph1">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.String.Compare%2A&gt;</ph> use different sort orders.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.String.Compare%2A&gt;</ph>使用不同的排序顺序。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="strA" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="indexA" /&gt;</ph> is greater than <ph id="ph4">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph5">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="strA" /&gt;</ph> 不为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，且 <ph id="ph3">&lt;paramref name="indexA" /&gt;</ph> 大于 <ph id="ph4">&lt;paramref name="strA" /&gt;</ph>.<ph id="ph5">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="strB" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="indexB" /&gt;</ph> is greater than <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph5">&lt;see cref="P:System.String.Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="strB" /&gt;</ph> 不为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，且 <ph id="ph3">&lt;paramref name="indexB" /&gt;</ph> 大于 <ph id="ph4">&lt;paramref name="strB" /&gt;</ph>.<ph id="ph5">&lt;see cref="P:System.String.Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>, <ph id="ph2">&lt;paramref name="indexB" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="indexA" /&gt;</ph>、<ph id="ph2">&lt;paramref name="indexB" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="length" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Compares this instance with a specified object or <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">将此实例与指定对象或 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 进行比较，并返回一个整数，该整数指示此实例在排序顺序中是位于指定对象或 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 之前、之后还是与其出现在同一位置。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Both overloads of the <ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> method perform culture-sensitive and case-sensitive comparison.</source>
          <target state="translated">这两个重载<ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph>方法执行区分区域性且区分大小写的比较。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You cannot use this method to perform culture-insensitive or ordinal comparisons.</source>
          <target state="translated">此方法不能用于执行不区分区域性的或序号比较。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For code clarity, we recommend that you avoid the <ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> method and call the <ph id="ph2">&lt;xref:System.String.Compare%2A&gt;</ph> method instead.</source>
          <target state="translated">有关代码的清楚起见，我们建议你避免<ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph>方法并且调用<ph id="ph2">&lt;xref:System.String.Compare%2A&gt;</ph>方法相反。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source>An object that evaluates to a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">一个对象，其计算结果为 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source>Compares this instance with a specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">将此实例与指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 进行比较，并指示此实例在排序顺序中是位于指定的 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> 之前、之后还是与其出现在同一位置。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter.</source>
          <target state="translated">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数之前、之后还是与其出现在同一位置。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance has the same position in the sort order as <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例在排序顺序中的位置与 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 相同。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">`value`</ph> must be a <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 必须是<ph id="ph2">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> method was designed primarily for use in sorting or alphabetizing operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph>方法主要适用排序或按字母顺序排列操作中使用。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</source>
          <target state="translated">它不应在方法调用的主要用途是确定两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>To determine whether two strings are equivalent, call the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要确定两个字符串是否等效，请调用<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>For more information about the behavior of this method, see the Remarks section of the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">此方法的行为的详细信息，请参阅备注部分的<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> method with an <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph>方法替换<ph id="ph2">&lt;xref:System.Object&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>Because it attempts to compare a <ph id="ph1">&lt;xref:System.String&gt;</ph> instance to a <ph id="ph2">`TestClass`</ph> object, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">因为它尝试比较<ph id="ph1">&lt;xref:System.String&gt;</ph>到实例<ph id="ph2">`TestClass`</ph>对象，该方法将引发<ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.CompareTo(System.Object)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.CompareTo(System.Object)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>For example, if the following code is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</source>
          <target state="translated">例如，如果在上运行下面的代码<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，"动物"与"ani 邮件"（使用软连字符或 U + 00AD） 的比较该值指示两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.Object)">
          <source>To recognize ignorable characters in a string comparison, call the <ph id="ph1">&lt;see cref="M:System.String.CompareOrdinal(System.String,System.String)" /&gt;</ph> method.</source>
          <target state="translated">若要识别可忽略字符的字符串比较中，调用<ph id="ph1">&lt;see cref="M:System.String.CompareOrdinal(System.String,System.String)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source>The string to compare with this instance.</source>
          <target state="translated">要与此实例进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source>Compares this instance with a specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</source>
          <target state="translated">将此实例与指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象进行比较，并指示此实例在排序顺序中是位于指定的字符串之前、之后还是与其出现在同一位置。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <ph id="ph1">&lt;paramref name="strB" /&gt;</ph> parameter.</source>
          <target state="translated">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <ph id="ph1">&lt;paramref name="strB" /&gt;</ph> 参数之前、之后还是与其出现在同一位置。</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 小于零</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="strB" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance has the same position in the sort order as <ph id="ph3">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例在排序顺序中的位置与 <ph id="ph3">&lt;paramref name="strB" /&gt;</ph> 相同。</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大于零</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="strB" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="strB" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:System.String.CompareTo(System.String)">
          <source><ph id="ph1">&lt;paramref name="strB" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="strB" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>For more information about word, string, and ordinal sorts, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> method was designed primarily for use in sorting or alphabetizing operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph>方法主要适用排序或按字母顺序排列操作中使用。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</source>
          <target state="translated">它不应在方法调用的主要用途是确定两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>To determine whether two strings are equivalent, call the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要确定两个字符串是否等效，请调用<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>For more information about the behavior of this method, see the Remarks section of the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph> method.</source>
          <target state="translated">此方法的行为的详细信息，请参阅备注部分的<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> interface and performs slightly better than the <ph id="ph2">&lt;xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType&gt;</ph> method, because it does not have to determine whether the <ph id="ph3">`strB`</ph> argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <ph id="ph4">&lt;xref:System.Object&gt;</ph> to a <ph id="ph5">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">此方法实现<ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph>接口，并且执行效果略好于<ph id="ph2">&lt;xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法，因为它没有以确定是否<ph id="ph3">`strB`</ph>自变量是可变的值类型，必须进行装箱，也不需要强制转换其从参数<ph id="ph4">&lt;xref:System.Object&gt;</ph>到<ph id="ph5">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph> method to compare the current string instance with another string.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.CompareTo%2A&gt;</ph>方法来比较当前字符串实例与另一个字符串。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</source>
          <target state="translated">下面的示例演示针对多个值和引用类型的 CompareTo 方法的泛型和非泛型版本。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>Character sets include ignorable characters.</source>
          <target state="translated">字符集包括可忽略字符。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>The <ph id="ph1">&lt;see cref="M:System.String.CompareTo(System.String)" /&gt;</ph> method does not consider such characters when it performs a culture-sensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.String.CompareTo(System.String)" /&gt;</ph>方法执行区分区域性的比较时不考虑此类字符。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>For example, if the following code is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</source>
          <target state="translated">例如，如果在上运行下面的代码<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，"动物"与"ani 邮件"（使用软连字符或 U + 00AD） 的比较该值指示两个字符串是否相等。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CompareTo(System.String)">
          <source>To recognize ignorable characters in a string comparison, call the <ph id="ph1">&lt;see cref="M:System.String.CompareOrdinal(System.String,System.String)" /&gt;</ph> method.</source>
          <target state="translated">若要识别可忽略字符的字符串比较中，调用<ph id="ph1">&lt;see cref="M:System.String.CompareOrdinal(System.String,System.String)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Concatenates one or more instances of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>, or the <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> representations of the values of one or more instances of <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">连接 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的一个或多个实例，或 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 的一个或多个实例的值的 <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph> 表示形式。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>A collection object that implements <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and whose generic type argument is <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">一个集合对象，该对象实现 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，且其泛型类型参数为 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>Concatenates the members of a constructed <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> collection of type <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">串联类型为 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 构造集合的成员。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>The concatenated strings in <ph id="ph1">&lt;paramref name="values" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="values" /&gt;</ph> is an empty <ph id="ph4">&lt;see langword="IEnumerable(Of String)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 中的串联字符串；如果 <ph id="ph3">&lt;paramref name="values" /&gt;</ph> 为空 <ph id="ph4">&lt;see langword="IEnumerable(Of String)" /&gt;</ph>，则为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>The method concatenates each object in <ph id="ph1">`values`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法连接中的每个对象<ph id="ph1">`values`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>To specify a delimiter between each member of <ph id="ph1">`values`</ph>, call the <ph id="ph2">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method.</source>
          <target state="translated">若要指定的每个成员之间的分隔符<ph id="ph1">`values`</ph>，调用<ph id="ph2">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>An <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null element in <ph id="ph2">`values`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>字符串代替中的任意 null 元素<ph id="ph2">`values`</ph>。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>If <ph id="ph1">`values`</ph> is an empty <ph id="ph2">`IEnumerable(Of String)`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`values`</ph>是一个空<ph id="ph2">`IEnumerable(Of String)`</ph>，该方法返回<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>If <ph id="ph1">`values`</ph> is <ph id="ph2">`null`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> exception.</source>
          <target state="translated">如果<ph id="ph1">`values`</ph>是<ph id="ph2">`null`</ph>，该方法将引发<ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> is a convenience method that lets you concatenate each element in an <ph id="ph2">`IEnumerable(Of String)`</ph> collection without first converting the elements to a string array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> 是可以串联中的每个元素的便捷方法<ph id="ph2">`IEnumerable(Of String)`</ph>而无需事先将元素转换为字符串数组的集合。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>It is particularly useful with Language-Integrated Query (LINQ) query expressions.</source>
          <target state="translated">它是使用语言集成查询 (LINQ) 查询表达式特别有用。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>The following example passes a <ph id="ph1">`List(Of String)`</ph> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</source>
          <target state="translated">下面的示例传入<ph id="ph1">`List(Of String)`</ph>对象，其中包含为 lambda 表达式选择等于或大于特定字母 （即，在示例中，"M"） 的字母的字母大写或小写字母。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>The <ph id="ph1">`IEnumerable(Of String)`</ph> collection that is returned by the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph> method is passed to the <ph id="ph3">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method to display the result as a single string.</source>
          <target state="translated"><ph id="ph1">`IEnumerable(Of String)`</ph>返回的集合<ph id="ph2">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph>方法传递给<ph id="ph3">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph>方法来作为单个字符串中显示结果。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</source>
          <target state="translated">下面的示例使用选筛的埃拉托色尼斯算法来计算小于或等于 100 的质数。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source>It assigns the result to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object of type <ph id="ph2">&lt;xref:System.String&gt;</ph>, which it then passes to the <ph id="ph3">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method.</source>
          <target state="translated">它将结果赋给<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类型的对象<ph id="ph2">&lt;xref:System.String&gt;</ph>，然后将其传递到<ph id="ph3">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object)">
          <source>The object to represent, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要表示的对象，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object)">
          <source>Creates the string  representation of a specified object.</source>
          <target state="translated">创建指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object)">
          <source>The string representation of the value of <ph id="ph1">&lt;paramref name="arg0" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="arg0" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arg0" /&gt;</ph> 的值的字符串表示形式，如果 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> 为 <ph id="ph3">&lt;paramref name="arg0" /&gt;</ph>，则为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.String.Concat%28System.Object%29&gt;</ph> method represents <ph id="ph2">`arg0`</ph> as a string by calling its parameterless <ph id="ph3">`ToString`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Concat%28System.Object%29&gt;</ph>方法表示<ph id="ph2">`arg0`</ph>通过调用其无参数的字符串作为<ph id="ph3">`ToString`</ph>方法。</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object[])">
          <source>An object array that contains the elements to concatenate.</source>
          <target state="translated">一个对象数组，其中包含要连接的元素。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object[])">
          <source>Concatenates the string representations of the elements in a specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> array.</source>
          <target state="translated">连接指定 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 数组中的元素的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object[])">
          <source>The concatenated string representations of the values of the elements in <ph id="ph1">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="args" /&gt;</ph> 中元素的值的串联字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object[])">
          <source>The method concatenates each object in <ph id="ph1">`args`</ph> by calling the parameterless <ph id="ph2">`ToString`</ph> method of that object; it does not add any delimiters.</source>
          <target state="translated">该方法连接中的每个对象<ph id="ph1">`args`</ph>通过调用的无参数<ph id="ph2">`ToString`</ph>方法的对象; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object[])">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> is used in place of any null object in the array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> 用于替换数组中的任何 null 对象。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object[])">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method with an <ph id="ph2">&lt;xref:System.Object&gt;</ph> array.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法替换<ph id="ph2">&lt;xref:System.Object&gt;</ph>数组。</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object[])">
          <source><ph id="ph1">&lt;paramref name="args" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="args" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object[])">
          <source>Out of memory.</source>
          <target state="translated">内存不足。</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object[])">
          <source>This method is not called by C++ code.</source>
          <target state="translated">此方法不由 c + + 代码调用。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object[])">
          <source>The C++ compiler resolves calls to <ph id="ph1">&lt;see cref="Overload:System.String.Concat" /&gt;</ph> that have four or more object parameters as a call to <ph id="ph2">&lt;see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>.</source>
          <target state="translated">C + + 编译器将解析对调用<ph id="ph1">&lt;see cref="Overload:System.String.Concat" /&gt;</ph>与调用具有四个或多个对象参数<ph id="ph2">&lt;see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String[])">
          <source>An array of string instances.</source>
          <target state="translated">字符串实例的数组。</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String[])">
          <source>Concatenates the elements of a specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> array.</source>
          <target state="translated">连接指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 数组的元素。</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String[])">
          <source>The concatenated elements of <ph id="ph1">&lt;paramref name="values" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 的串联元素。</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String[])">
          <source>The method concatenates each object in <ph id="ph1">`values`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法连接中的每个对象<ph id="ph1">`values`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String[])">
          <source>An <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null object in the array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>字符串代替数组中的任何 null 对象。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String[])">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method with a <ph id="ph2">&lt;xref:System.String&gt;</ph> array.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法替换<ph id="ph2">&lt;xref:System.String&gt;</ph>数组。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String[])">
          <source>Out of memory.</source>
          <target state="translated">内存不足。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>The first object to concatenate.</source>
          <target state="translated">要连接的第一个对象。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>The second object to concatenate.</source>
          <target state="translated">要连接的第二个对象。</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>Concatenates the string representations of two specified objects.</source>
          <target state="translated">连接两个指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>The concatenated string representations of the values of <ph id="ph1">&lt;paramref name="arg0" /&gt;</ph> and <ph id="ph2">&lt;paramref name="arg1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arg0" /&gt;</ph> 和 <ph id="ph2">&lt;paramref name="arg1" /&gt;</ph> 的值的串联字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>The method concatenates <ph id="ph1">`arg0`</ph> and <ph id="ph2">`arg1`</ph> by calling the parameterless <ph id="ph3">`ToString`</ph> method of <ph id="ph4">`arg0`</ph> and <ph id="ph5">`arg1`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法将连接在一起<ph id="ph1">`arg0`</ph>和<ph id="ph2">`arg1`</ph>通过调用的无参数<ph id="ph3">`ToString`</ph>方法<ph id="ph4">`arg0`</ph>和<ph id="ph5">`arg1`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> is used in place of any null argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> 用于替换 null 的任何自变量。</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</source>
          <target state="translated">如果自变量是一个数组引用，该方法将一个字符串，表示该数组，而不是其成员 (例如，"System.String[]") 连接在一起。</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String)">
          <source>The first string to concatenate.</source>
          <target state="translated">要串联的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String)">
          <source>The second string to concatenate.</source>
          <target state="translated">要串联的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String)">
          <source>Concatenates two specified instances of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">连接 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的两个指定实例。</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String)">
          <source>The concatenation of <ph id="ph1">&lt;paramref name="str0" /&gt;</ph> and <ph id="ph2">&lt;paramref name="str1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str0" /&gt;</ph> 和 <ph id="ph2">&lt;paramref name="str1" /&gt;</ph> 的串联。</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String)">
          <source>The method concatenates <ph id="ph1">`str0`</ph> and <ph id="ph2">`str1`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法将连接在一起<ph id="ph1">`str0`</ph>和<ph id="ph2">`str1`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String)">
          <source>You can also use your language's string concatenation operator, such as <ph id="ph1">`+`</ph> in C#, or <ph id="ph2">`&amp;`</ph> and <ph id="ph3">`+`</ph> in Visual Basic)</source>
          <target state="translated">你还可以使用你的语言的字符串串联运算符，如<ph id="ph1">`+`</ph>在 C# 中，或<ph id="ph2">`&amp;`</ph>和<ph id="ph3">`+`</ph>在 Visual Basic 中)</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String)">
          <source>, to concatenate strings.</source>
          <target state="translated">将字符串串联。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String)">
          <source>An <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>字符串代替任何空的参数。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String)">
          <source>The following example concatenates a person's first, middle, and last name.</source>
          <target state="translated">下面的示例连接个人的第一个、 中间名和姓氏。</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>The first object to concatenate.</source>
          <target state="translated">要连接的第一个对象。</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>The second object to concatenate.</source>
          <target state="translated">要连接的第二个对象。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>The third object to concatenate.</source>
          <target state="translated">要连接的第三个对象。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>Concatenates the string representations of three specified objects.</source>
          <target state="translated">连接三个指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>The concatenated string representations of the values of <ph id="ph1">&lt;paramref name="arg0" /&gt;</ph>, <ph id="ph2">&lt;paramref name="arg1" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="arg2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arg0" /&gt;</ph>、<ph id="ph2">&lt;paramref name="arg1" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="arg2" /&gt;</ph> 的值的串联字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>The method concatenates <ph id="ph1">`arg0`</ph>, <ph id="ph2">`arg1`</ph>, and <ph id="ph3">`arg2`</ph> by calling the parameterless <ph id="ph4">`ToString`</ph> method of each object; it does not add any delimiters.</source>
          <target state="translated">该方法将连接在一起<ph id="ph1">`arg0`</ph>， <ph id="ph2">`arg1`</ph>，和<ph id="ph3">`arg2`</ph>通过调用的无参数<ph id="ph4">`ToString`</ph>方法的每个对象; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> is used in place of any null argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> 用于替换 null 的任何自变量。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>The first string to concatenate.</source>
          <target state="translated">要串联的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>The second string to concatenate.</source>
          <target state="translated">要串联的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>The third string to concatenate.</source>
          <target state="translated">要比较的第三个字符串。</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>Concatenates three specified instances of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">连接 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的三个指定实例。</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>The concatenation of <ph id="ph1">&lt;paramref name="str0" /&gt;</ph>, <ph id="ph2">&lt;paramref name="str1" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="str2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str0" /&gt;</ph>、<ph id="ph2">&lt;paramref name="str1" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="str2" /&gt;</ph> 的串联。</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>The method concatenates <ph id="ph1">`str0`</ph>, <ph id="ph2">`str1`</ph>, and <ph id="ph3">`str2`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法将连接在一起<ph id="ph1">`str0`</ph>， <ph id="ph2">`str1`</ph>，和<ph id="ph3">`str2`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>You can also use your language's string concatenation operator, such as <ph id="ph1">`+`</ph> in C#, or <ph id="ph2">`&amp;`</ph> and <ph id="ph3">`+`</ph> in Visual Basic)</source>
          <target state="translated">你还可以使用你的语言的字符串串联运算符，如<ph id="ph1">`+`</ph>在 C# 中，或<ph id="ph2">`&amp;`</ph>和<ph id="ph3">`+`</ph>在 Visual Basic 中)</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>, to concatenate strings.</source>
          <target state="translated">将字符串串联。</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>An <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>字符串代替任何空的参数。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method to concatenate three strings and displays the result.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法要连接三个字符串，并显示结果。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The first object to concatenate.</source>
          <target state="translated">要连接的第一个对象。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The second object to concatenate.</source>
          <target state="translated">要连接的第二个对象。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The third object to concatenate.</source>
          <target state="translated">要连接的第三个对象。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The fourth object to concatenate.</source>
          <target state="translated">要连接的第四个对象。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</source>
          <target state="translated">将四个指定对象的字符串表示形式与可选变量长度参数列表中指定的任何对象串联起来。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The concatenated string representation of each value in the parameter list.</source>
          <target state="translated">参数列表中的每个值的连接字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">此 API 不兼容 CLS。</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">符合 CLS 的替代方法是 <ph id="ph1">&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The C# and Visual Basic compilers automatically resolve a call to this method as a call to <ph id="ph1">&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">C# 和 Visual Basic 编译器自动解决调用此方法与调用<ph id="ph1">&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The method concatenates each object in the parameter list by calling its parameterless <ph id="ph1">`ToString`</ph> method; it does not add any delimiters.</source>
          <target state="translated">该方法通过调用其无参数连接参数列表中的每个对象<ph id="ph1">`ToString`</ph>方法; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> is used in place of any null argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> 用于替换 null 的任何自变量。</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The last parameter of the  <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method is an optional comma-delimited list of one or more additional objects to concatenate.</source>
          <target state="translated">最后一个参数<ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph>方法是可选的一个或多个要串联的其他对象以逗号分隔列表。</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph> method to concatenate a list of variable parameters.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph>要连接的变量参数列表的方法。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>In this case, the method is called with nine parameters.</source>
          <target state="translated">在这种情况下，九个参数被调用该方法。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>This method is marked with the <ph id="ph1">&lt;see langword="vararg" /&gt;</ph> keyword, which means that it supports a variable number of parameters.</source>
          <target state="translated">此方法将标有<ph id="ph1">&lt;see langword="vararg" /&gt;</ph>关键字，这意味着它支持可变数目的参数。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</source>
          <target state="translated">可以从 Visual c + +，调用方法，但不是能从 C# 或 Visual Basic 代码调用。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
          <source>The C# and Visual Basic compilers resolve calls to <ph id="ph1">&lt;see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /&gt;</ph> as calls to <ph id="ph2">&lt;see cref="M:System.String.Concat(System.Object[])" /&gt;</ph>.</source>
          <target state="translated">C# 和 Visual Basic 编译器解决调用<ph id="ph1">&lt;see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>一样调用<ph id="ph2">&lt;see cref="M:System.String.Concat(System.Object[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The first string to concatenate.</source>
          <target state="translated">要串联的第一个字符串。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The second string to concatenate.</source>
          <target state="translated">要串联的第二个字符串。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The third string to concatenate.</source>
          <target state="translated">要比较的第三个字符串。</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The fourth string to concatenate.</source>
          <target state="translated">要比较的第四个字符串。</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>Concatenates four specified instances of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">连接 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的四个指定实例。</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The concatenation of <ph id="ph1">&lt;paramref name="str0" /&gt;</ph>, <ph id="ph2">&lt;paramref name="str1" /&gt;</ph>, <ph id="ph3">&lt;paramref name="str2" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="str3" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str0" /&gt;</ph>、<ph id="ph2">&lt;paramref name="str1" /&gt;</ph>、<ph id="ph3">&lt;paramref name="str2" /&gt;</ph> 和 <ph id="ph4">&lt;paramref name="str3" /&gt;</ph> 的串联。</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The method concatenates <ph id="ph1">`str0`</ph>, <ph id="ph2">`str1`</ph>, <ph id="ph3">`str2`</ph>, and <ph id="ph4">`str3`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法将连接在一起<ph id="ph1">`str0`</ph>， <ph id="ph2">`str1`</ph>， <ph id="ph3">`str2`</ph>，和<ph id="ph4">`str3`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>You can also use your language's string concatenation operator, such as <ph id="ph1">`+`</ph> in C#, or <ph id="ph2">`&amp;`</ph> and <ph id="ph3">`+`</ph> in Visual Basic)</source>
          <target state="translated">你还可以使用你的语言的字符串串联运算符，如<ph id="ph1">`+`</ph>在 C# 中，或<ph id="ph2">`&amp;`</ph>和<ph id="ph3">`+`</ph>在 Visual Basic 中)</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>, to concatenate strings.</source>
          <target state="translated">将字符串串联。</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>An <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null object in the array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>字符串代替数组中的任何 null 对象。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them.</source>
          <target state="translated">下面的示例定义的四个字母单词数组，并将其单个字母到字符串数组存储以便混排它们。</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat(System.String,System.String,System.String,System.String)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph> method to reassemble the scrambled words.</source>
          <target state="translated">然后，它调用<ph id="ph1">&lt;xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph>方法来重新组合打乱的单词。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the members of <bpt id="p1">&lt;c&gt;</bpt>values<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">成员的类型<bpt id="p1">&lt;c&gt;</bpt>值<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A collection object that implements the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> interface.</source>
          <target state="translated">一个实现 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 接口的集合对象。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates the members of an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> implementation.</source>
          <target state="translated">串联 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 实现的成员。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The concatenated members in <ph id="ph1">&lt;paramref name="values" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 中的串联成员。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The method concatenates each object in <ph id="ph1">`values`</ph>; it does not add any delimiters.</source>
          <target state="translated">该方法连接中的每个对象<ph id="ph1">`values`</ph>; 它不会添加任何分隔符。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>字符串代替任何空的参数。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> is a convenience method that lets you concatenate each element in an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection without first converting the elements to strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> 是可以串联中的每个元素的便捷方法<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>而无需事先将元素转换为字符串的集合。</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.</source>
          <target state="translated">如示例所示，它是使用语言集成查询 (LINQ) 查询表达式特别有用。</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The string representation of each object in the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection is derived by calling that object's <ph id="ph2">`ToString`</ph> method.</source>
          <target state="translated">字符串表示形式中每个对象<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>通过调用该对象的派生集合<ph id="ph2">`ToString`</ph>方法。</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following example defines a very simple <ph id="ph1">`Animal`</ph> class that contains the name of an animal and the order to which it belongs.</source>
          <target state="translated">下面的示例定义一个非常简单<ph id="ph1">`Animal`</ph>类，其中包含的填充动物和它所属于的顺序的名称。</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>It then defines a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object to contain a number of <ph id="ph2">`Animal`</ph> objects.</source>
          <target state="translated">然后，它定义<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>对象，以包含大量的<ph id="ph2">`Animal`</ph>对象。</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph> extension method is called to extract the <ph id="ph2">`Animal`</ph> objects whose <ph id="ph3">`Order`</ph> property equals "Rodent".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph>调用扩展方法来提取<ph id="ph2">`Animal`</ph>对象其<ph id="ph3">`Order`</ph>属性等于"Rodent"。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The result is passed to the <ph id="ph1">&lt;xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method and displayed to the console.</source>
          <target state="translated">结果传递到<ph id="ph1">&lt;xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法并向控制台显示。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" uid="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.String.Contains(System.String)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.String.Contains(System.String)">
          <source>Returns a value indicating whether a specified substring occurs within this string.</source>
          <target state="translated">返回一个值，该值指示指定的子串是否出现在此字符串中。</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.String.Contains(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter occurs within this string, or if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is the empty string (""); otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数出现在此字符串中，或者 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 为空字符串 ("")，则为 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</source>
          <target state="translated">此方法执行序号 （区分大小写和不区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>The search begins at the first character position of this string and continues through the last character position.</source>
          <target state="translated">搜索此字符串的第一个字符位置开始，并持续到最后的字符位置。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method.</source>
          <target state="translated">确定字符串是否包含指定的子字符串，通过使用序号比较 （如区分区域性的比较或不区分大小写的序号比较） 以外，你可以创建的自定义方法。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>The following example illustrates one such approach.</source>
          <target state="translated">下面的示例演示一个此类方法。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>It defines a <ph id="ph1">&lt;xref:System.String&gt;</ph> extension method  that includes a <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</source>
          <target state="translated">它定义<ph id="ph1">&lt;xref:System.String&gt;</ph>包括的扩展方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>参数，表明使用指定的窗体的字符串比较时，一个字符串是否包含子字符串。</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>The following example then calls the <ph id="ph1">`Contains`</ph> extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.</source>
          <target state="translated">下面的示例然后调用<ph id="ph1">`Contains`</ph>扩展方法来确定使用序号比较和不区分大小写的序号比较时是否在字符串中找到子字符串。</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>If you are interested in the position of the substring <ph id="ph1">`value`</ph> in the current instance, you can call the <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to get the starting position of its first occurrence, or you can call the <ph id="ph3">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method to get the starting position of its last occurrence.</source>
          <target state="translated">如果你感兴趣的子字符串的位置<ph id="ph1">`value`</ph>在当前实例中，你可以调用<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法以获取其第一个匹配项，或你的起始位置可以调用<ph id="ph3">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>方法以获取的起始位置其最后一个匹配项。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>The example includes a call to the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method if a substring is found in a string instance.</source>
          <target state="translated">该示例包括调用<ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph>方法，如果在字符串实例中找到子字符串。</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>The following example determines whether the string "fox" is a substring of a familiar quotation.</source>
          <target state="translated">下面的示例确定字符串"fox"是否熟悉引号的子字符串。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Contains(System.String)">
          <source>If "fox" is found in the string, it also displays its starting position.</source>
          <target state="translated">如果字符串中找到"fox"，它还显示它的起始位置。</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" uid="M:System.String.Contains(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.String.Copy(System.String)">
          <source>The string to copy.</source>
          <target state="translated">要复制的字符串。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.String.Copy(System.String)">
          <source>Creates a new instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> with the same value as a specified <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">创建一个与指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 具有相同值的 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" uid="M:System.String.Copy(System.String)">
          <source>A new string with the same value as <ph id="ph1">&lt;paramref name="str" /&gt;</ph>.</source>
          <target state="translated">值与 <ph id="ph1">&lt;paramref name="str" /&gt;</ph> 相同的新字符串。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Copy(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.String&gt;</ph> object that has the same value as the original string but represents a different object reference.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph>方法返回<ph id="ph2">&lt;xref:System.String&gt;</ph>具有相同的值的原始字符串，但表示不同的对象引用的对象。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Copy(System.String)">
          <source>It differs from an assignment operation, which assigns an existing string reference to an additional object variable.</source>
          <target state="translated">它不同于赋值运算，最后分配给其他对象变量的现有字符串引用。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Copy(System.String)">
          <source>The example illustrates the difference.</source>
          <target state="translated">该示例演示了差异。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Copy(System.String)">
          <source>The following example creates two string objects with different values.</source>
          <target state="translated">下面的示例创建两个字符串对象使用不同的值。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Copy(System.String)">
          <source>When it calls the <ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph> method to assign the first value to the second string, the output indicates that the strings represent different object references although their values are now equal.</source>
          <target state="translated">当它调用<ph id="ph1">&lt;xref:System.String.Copy%2A&gt;</ph>方法将第一个值分配给第二个字符串的输出将指示的字符串表示不同的对象引用，但其值现在是否相等。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Copy(System.String)">
          <source>On the other hand, when the first string is assigned to the second string, the two strings have identical values because they represent the same object reference.</source>
          <target state="translated">另一方面，如果第一个字符串分配给第二个字符串中，两个字符串具有相同的值，因为它们表示相同的对象引用。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.String.Copy(System.String)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>The index of the first character in this instance to copy.</source>
          <target state="translated">要复制的此实例中第一个字符的索引。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>An array of Unicode characters to which characters in this instance are copied.</source>
          <target state="translated">此实例中的字符所复制到的 Unicode 字符数组。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>The index in <bpt id="p1">&lt;c&gt;</bpt>destination<ept id="p1">&lt;/c&gt;</ept> at which the copy operation begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>destination<ept id="p1">&lt;/c&gt;</ept> 中的索引，在此处开始复制操作。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>The number of characters in this instance to copy to <bpt id="p1">&lt;c&gt;</bpt>destination<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">此实例中要复制到 <bpt id="p1">&lt;c&gt;</bpt>destination<ept id="p1">&lt;/c&gt;</ept> 的字符数。</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</source>
          <target state="translated">将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>This method copies <ph id="ph1">`count`</ph> characters from the <ph id="ph2">`sourceIndex`</ph> position of this instance to the <ph id="ph3">`destinationIndex`</ph> position of <ph id="ph4">`destination`</ph> character array.</source>
          <target state="translated">此方法会复制<ph id="ph1">`count`</ph>字符从<ph id="ph2">`sourceIndex`</ph>位置的此实例与<ph id="ph3">`destinationIndex`</ph>位置<ph id="ph4">`destination`</ph>字符数组。</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>This method does not resize the <ph id="ph1">`destination`</ph> character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated">此方法不调整大小，<ph id="ph1">`destination`</ph>字符数组; 它必须具有足够数量的元素可容纳复制的字符或该方法将引发<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">`sourceIndex`</ph> and <ph id="ph2">`destinationIndex`</ph> are zero-based.</source>
          <target state="translated"><ph id="ph1">`sourceIndex`</ph> 和<ph id="ph2">`destinationIndex`</ph>是从零开始。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.CopyTo%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="sourceIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="destinationIndex" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="count" /&gt;</ph> is negative</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceIndex" /&gt;</ph>、<ph id="ph2">&lt;paramref name="destinationIndex" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="count" /&gt;</ph> 为负</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="sourceIndex" /&gt;</ph> does not identify a position in the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceIndex" /&gt;</ph> 不标识当前实例中的位置。</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destinationIndex" /&gt;</ph> does not identify a valid index in the <ph id="ph2">&lt;paramref name="destination" /&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destinationIndex" /&gt;</ph> 不标识 <ph id="ph2">&lt;paramref name="destination" /&gt;</ph> 数组中的有效索引。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the length of the substring from <ph id="ph2">&lt;paramref name="sourceIndex" /&gt;</ph> to the end of this instance</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于从 <ph id="ph2">&lt;paramref name="sourceIndex" /&gt;</ph> 到此实例末尾的子字符串的长度</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" uid="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the length of the subarray from <ph id="ph2">&lt;paramref name="destinationIndex" /&gt;</ph> to the end of the <ph id="ph3">&lt;paramref name="destination" /&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于从 <ph id="ph2">&lt;paramref name="destinationIndex" /&gt;</ph> 到 <ph id="ph3">&lt;paramref name="destination" /&gt;</ph> 数组末尾的子数组的长度。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" uid="F:System.String.Empty">
          <source>Represents the empty string.</source>
          <target state="translated">表示空字符串。</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="F:System.String.Empty">
          <source>This field is read-only.</source>
          <target state="translated">此字段为只读。</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.String.Empty">
          <source>The value of this field is the zero-length string, "".</source>
          <target state="translated">此字段的值是零长度字符串，""。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.String.Empty">
          <source>In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.</source>
          <target state="translated">在应用程序代码中，此字段是最常用于在分配中初始化为空字符串的字符串变量。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.String.Empty">
          <source>To test whether the value of a string is either <ph id="ph1">`null`</ph> or <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, use the <ph id="ph3">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method.</source>
          <target state="translated">若要测试的字符串值是否是<ph id="ph1">`null`</ph>或<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>，使用<ph id="ph3">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Determines whether the end of this string instance matches a specified string.</source>
          <target state="translated">确定此字符串实例的结尾是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String)">
          <source>The string to compare to the substring at the end of this instance.</source>
          <target state="translated">要与此实例末尾的子字符串进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String)">
          <source>Determines whether the end of this string instance matches the specified string.</source>
          <target state="translated">确定此字符串实例的结尾是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> matches the end of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 与此实例的末尾匹配，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>This method compares <ph id="ph1">`value`</ph> to the substring at the end of this instance that is the same length as <ph id="ph2">`value`</ph>, and returns an indication whether they are equal.</source>
          <target state="translated">此方法比较<ph id="ph1">`value`</ph>到位于相同的长度，作为此实例末尾的子字符串<ph id="ph2">`value`</ph>，并返回指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>To be equal, <ph id="ph1">`value`</ph> must be a reference to this same instance or match the end of this instance.</source>
          <target state="translated">若要相等，<ph id="ph1">`value`</ph>必须对此同一实例的引用或与此实例的末尾匹配。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>The following example indicates whether each string in an array ends with a period (".").</source>
          <target state="translated">下面的示例指示数组中的每个字符串是否以句点结尾 ("。")。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>The following example defines a <ph id="ph1">`StripEndTags`</ph> method that uses the <ph id="ph2">&lt;xref:System.String.EndsWith%28System.String%29&gt;</ph> method to remove HTML end tags from the end of a line.</source>
          <target state="translated">下面的示例定义<ph id="ph1">`StripEndTags`</ph>使用方法<ph id="ph2">&lt;xref:System.String.EndsWith%28System.String%29&gt;</ph>方法以移除行尾的 HTML 结束标记。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>Note that the  <ph id="ph1">`StripEndTags`</ph> method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.</source>
          <target state="translated">请注意，<ph id="ph1">`StripEndTags`</ph>方法调用以递归方式来确保删除多个行末尾的 HTML 结束标记。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String)">
          <source>To determine whether a string ends with a particular substring by using the string comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要确定是否字符串通过使用当前区域性的字符串比较规则与特定的子字符串结尾，调用<ph id="ph1">&lt;see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>The string to compare to the substring at the end of this instance.</source>
          <target state="translated">要与此实例末尾的子字符串进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>One of the enumeration values that determines how this string and <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> are compared.</source>
          <target state="translated">枚举值之一，用于确定如何比较此字符串与 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</source>
          <target state="translated">确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter matches the end of this string; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此字符串的末尾与 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 参数匹配，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>The <ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph> method compares the <ph id="ph2">`value`</ph> parameter to the substring at the end of this string and returns a value that indicates whether they are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph>方法进行比较<ph id="ph2">`value`</ph>参数与此字符串的末尾处的子字符串并返回一个值，指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>To be equal, <ph id="ph1">`value`</ph> must be a reference to this same string, must be the empty string (""), or must match the end of this string.</source>
          <target state="translated">若要相等，<ph id="ph1">`value`</ph>必须对此相同的字符串的引用，必须为空字符串 ("")，或必须与此字符串的末尾匹配。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>The type of comparison performed by the <ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph> method depends on the value of the <ph id="ph2">`comparisonType`</ph> parameter.</source>
          <target state="translated">执行比较的类型<ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph>方法取决于值<ph id="ph2">`comparisonType`</ph>参数。</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>The following example determines whether a string ends with a particular substring.</source>
          <target state="translated">下面的示例确定字符串是否以特定的子字符串结尾。</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source>The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</source>
          <target state="translated">区域性、 是否忽略大小写，和是否执行序号比较的选择会影响结果。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The string to compare to the substring at the end of this instance.</source>
          <target state="translated">要与此实例末尾的子字符串进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during the comparison; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在比较过程中忽略大小写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Cultural information that determines how this instance and <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> are compared.</source>
          <target state="translated">确定如何对此实例与 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 进行比较的区域性信息。</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current culture is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用当前区域性。</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Determines whether the end of this string instance matches the specified string when compared using the specified culture.</source>
          <target state="translated">确定在使用指定的区域性进行比较时此字符串实例的结尾是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter matches the end of this string; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此字符串的末尾与 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 参数匹配，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>This method compares the <ph id="ph1">`value`</ph> parameter to the substring at the end of this string that is the same length as <ph id="ph2">`value`</ph>, and returns a value that indicates whether they are equal.</source>
          <target state="translated">此方法比较<ph id="ph1">`value`</ph>参数是相同的长度，作为此字符串的末尾处的子字符串<ph id="ph2">`value`</ph>，并返回一个值，指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>To be equal, <ph id="ph1">`value`</ph> must be a reference to this same instance or match the end of this string.</source>
          <target state="translated">若要相等，<ph id="ph1">`value`</ph>必须对此同一实例的引用或与此字符串的末尾匹配。</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>This method performs a word (culture-sensitive) comparison using the specified casing and culture.</source>
          <target state="translated">此方法执行使用指定的大小写和区域性的单词 （区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The following example determines whether a string occurs at the end of another string.</source>
          <target state="translated">下面的示例确定一个字符串是否出现在另一个字符串的末尾。</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph>几次使用区分大小写、 区分大小写和影响搜索的结果的不同区域性调用方法。</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects have the same value.</source>
          <target state="translated">确定两个 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.Object)">
          <source>The string to compare to this instance.</source>
          <target state="translated">要与此实例进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.Object)">
          <source>Determines whether this instance and a specified object, which must also be a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object, have the same value.</source>
          <target state="translated">确定此实例是否与指定的对象（也必须是 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象）具有相同的值。</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> and its value is the same as this instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> 并且它的值与此实例相同，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.Object)">
          <source>If <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，则此方法返回 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.Object)">
          <source>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</source>
          <target state="translated">此方法执行序号 （区分大小写和不区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.Object)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String)">
          <source>The string to compare to this instance.</source>
          <target state="translated">要与此实例进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String)">
          <source>Determines whether this instance and another specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object have the same value.</source>
          <target state="translated">确定此实例是否与另一个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象具有相同的值。</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is the same as the value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数的值与此实例的值相同，则为 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，则此方法返回 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String)">
          <source>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</source>
          <target state="translated">此方法执行序号 （区分大小写和不区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.It compares the title-cased word "File" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069).</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。它将等效的 word、 其小写等效项，其大写等效项，与包含拉丁文小写字母无点 I word 标题大小写形式 word"File"进行比较 (U + 0131) 而不是拉丁文小写字母 I (U + 0069)。</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String)">
          <source>Because the <ph id="ph1">&lt;xref:System.String.Equals%28System.String%29&gt;</ph> method performs an ordinal comparison, only the comparison with an identical word returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String.Equals%28System.String%29&gt;</ph>方法执行序号比较，仅包含相同的单词比较返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String)">
          <source>The first string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第一个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String)">
          <source>The second string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第二个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects have the same value.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="a" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="b" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="a" /&gt;</ph> 的值相同，则为 <ph id="ph3">&lt;paramref name="b" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String)">
          <source>If both <ph id="ph1">&lt;paramref name="a" /&gt;</ph> and <ph id="ph2">&lt;paramref name="b" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="a" /&gt;</ph> 和 <ph id="ph2">&lt;paramref name="b" /&gt;</ph> 均为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，此方法将返回 <ph id="ph4">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.String)">
          <source>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</source>
          <target state="translated">此方法执行序号 （区分大小写和不区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.String)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>The string to compare to this instance.</source>
          <target state="translated">要与此实例进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>One of the enumeration values that specifies how the strings will be compared.</source>
          <target state="translated">枚举值之一，用于指定如何比较字符串。</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>Determines whether this string and a specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object have the same value.</source>
          <target state="translated">确定此字符串是否与另一个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象具有相同的值。</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>A parameter specifies the culture, case, and sort rules used in the comparison.</source>
          <target state="translated">参数指定区域性、大小写以及比较所用的排序规则。</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is the same as this string; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数的值与此字符串相同，则为 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指示是否比较应使用当前或固定区域性，接受或忽略所比较的两个字符串的大小写或不使用 word 或序号排序规则。</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>The following example creates a string array that consists of an uppercase "I", a lowercase "i", and a dotless "ı".</source>
          <target state="translated">下面的示例创建一个字符串数组，包含大写字符"I"、 一个小写"i"和无点为"ı"。</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph> method to compare them by using each possible <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration value.</source>
          <target state="translated">然后，它调用<ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph>方法来比较它们通过使用每个可能的<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举值。</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>The following example compares four sets of words by using each member of the <ph id="ph1">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">下面的示例使用的每个成员比较的单词的四个集<ph id="ph1">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</source>
          <target state="translated">比较使用英语 （美国） 和 Sami （上部瑞典） 区域性的约定。</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source>Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</source>
          <target state="translated">请注意，字符串"encyclopædia"和"百科全书"都视为等效 EN-US 区域性中但不是在 Sami （北瑞典） 区域性。</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>The first string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第一个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>The second string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第二个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the comparison.</source>
          <target state="translated">枚举值之一，用于指定比较的规则。</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> objects have the same value.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>A parameter specifies the culture, case, and sort rules used in the comparison.</source>
          <target state="translated">参数指定区域性、大小写以及比较所用的排序规则。</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> parameter is equal to the value of the <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameter; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数的值与 <ph id="ph2">&lt;paramref name="a" /&gt;</ph> 参数的值相同，则为 <ph id="ph3">&lt;paramref name="b" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指示是否比较应使用当前或固定区域性，接受或忽略所比较的两个字符串的大小写或不使用 word 或序号排序规则。</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>The following example compares four sets of words by using each member of the <ph id="ph1">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">下面的示例使用的每个成员比较的单词的四个集<ph id="ph1">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</source>
          <target state="translated">比较使用英语 （美国） 和 Sami （上部瑞典） 区域性的约定。</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source>Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</source>
          <target state="translated">请注意，字符串"encyclopædia"和"百科全书"都视为等效 EN-US 区域性中但不是在 Sami （北瑞典） 区域性。</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.String.Equals(System.String,System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Converts the value of objects to strings based on the formats specified and inserts them into another string.</source>
          <target state="translated">将对象的值转换为基于指定格式的字符串，并将其插入到另一个字符串。</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>If you are new to the <ph id="ph1">`String.Format`</ph> method, see the <bpt id="p1">[</bpt>Get started with the String.Format method<ept id="p1">](#Starting)</ept> section for a quick overview.</source>
          <target state="translated">如果不熟悉 <ph id="ph1">`String.Format`</ph> 方法，请参阅 <bpt id="p1">[</bpt>String.Format 方法入门<ept id="p1">](#Starting)</ept>一节来进行快速了解。</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>See the <bpt id="p1">[</bpt>Remarks<ept id="p1">](#remarks-top)</ept> section for general documentation for the <ph id="ph1">`String.Format`</ph> method.</source>
          <target state="translated">有关 <ph id="ph1">`String.Format`</ph> 方法的常规文档，请参阅<bpt id="p1">[</bpt>备注<ept id="p1">](#remarks-top)</ept>部分。</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In this section:</source>
          <target state="translated">本节内容：</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Get started with the String.Format method<ept id="p1">](#Starting)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Format 方法入门<ept id="p1">](#Starting)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Which method do I call?<ept id="p1">](#FTaskList)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>请勿调用的方法？<ept id="p1">](#FTaskList)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Format method in brief<ept id="p1">](#Format_Brief)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Format 方法概述<ept id="p1">](#Format_Brief)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The Format item<ept id="p1">](#FormatItem)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>格式项<ept id="p1">](#FormatItem)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>How arguments are formatted<ept id="p1">](#HowFormatted)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>如何格式化参数<ept id="p1">](#HowFormatted)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Format items that have the same index<ept id="p1">](#SameIndex)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>具有相同的索引的格式项<ept id="p1">](#SameIndex)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Formatting and culture<ept id="p1">](#Format_Culture)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>格式和区域性<ept id="p1">](#Format_Culture)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Custom formatting operations<ept id="p1">](#Format_Custom)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义格式设置操作<ept id="p1">](#Format_Custom)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>String.Format Q &amp; A<ept id="p1">](#QA)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Format 问答<ept id="p1">](#QA)</ept></target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Get started with the String.Format method</source>
          <target state="translated">String.Format 方法入门</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Use <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> if you need to insert the value of an object, variable, or expression into another string.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>如果你需要将对象、 变量或表达式的值插入到另一个字符串。</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, you can insert the value of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value into a string to display it to the user as a single string:</source>
          <target state="translated">例如，可以插入的值<ph id="ph1">&lt;xref:System.Decimal&gt;</ph>值转换为要显示给用户作为单个字符串的字符串：</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>And you can control that value's formatting:</source>
          <target state="translated">你可以控制该值的格式设置：</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Besides formatting, you can also control alignment and spacing.</source>
          <target state="translated">除了格式设置，还可以控制对齐方式和间距。</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Inserting a string</source>
          <target state="translated">将一个字符串插入</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> starts with a format string, followed by one or more objects or expressions that will be converted to strings and inserted at a specified place in the format string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> 开头后跟一个或多个对象或表达式将转换为字符串和格式字符串中指定位置处插入一个格式字符串。</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example:</source>
          <target state="translated">例如:</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">`{0}`</ph> in the format string is a format item.</source>
          <target state="translated"><ph id="ph1">`{0}`</ph>格式字符串为格式项。</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">`0`</ph> is the index of the object whose string value will be inserted at that position.</source>
          <target state="translated"><ph id="ph1">`0`</ph> 是将该位置处插入其字符串值的索引。</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(Indexes start at 0.) If the object to be inserted is not a string, its <ph id="ph1">`ToString`</ph> method is called to convert it to one before inserting it in the result string.</source>
          <target state="translated">（索引从 0 开始。）如果要插入的对象不是一个字符串，其<ph id="ph1">`ToString`</ph>调用方法以将其转换为一个才能将其插入在结果字符串中。</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here's another example that uses two format items and two objects in the object list:</source>
          <target state="translated">下面是在对象列表中使用两个格式项和两个对象的另一个示例：</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can have as many format items and as many objects in the object list as you want, as long as the index of every format item has a matching object in the object list.</source>
          <target state="translated">你可以有任意多个格式项，并且作为你的对象列表中的任意多个对象想，只要每个格式项的索引对象列表中具有匹配的对象。</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You also don't have to worry about which overload you call; the compiler will select the appropriate one for you.</source>
          <target state="translated">你也不必担心有关的重载，你调用;编译器将选择为你是适合的选项。</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Controlling formatting</source>
          <target state="translated">控制格式设置</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can follow the index in a format item with a format string to control how an object is formatted.</source>
          <target state="translated">你可以按照使用格式字符串来控制如何格式化对象的格式项中的索引。</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, <ph id="ph1">`{0:d}`</ph> applies the "d" format string to the first object in the object list.</source>
          <target state="translated">例如，<ph id="ph1">`{0:d}`</ph>适用于在对象列表中的第一个对象的"d"格式字符串。</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here is an example with a single object and two format items:</source>
          <target state="translated">此处是包含单个对象的一个示例和两个格式项：</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A number of types support format strings, including all numeric types (both <bpt id="p1">[</bpt>standard<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>custom<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept> format strings), all dates and times (both <bpt id="p3">[</bpt>standard<ept id="p3">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p4">[</bpt>custom<ept id="p4">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept> format strings) and time intervals (both <bpt id="p5">[</bpt>standard<ept id="p5">](~/docs/standard/base-types/standard-timespan-format-strings.md)</ept> and <bpt id="p6">[</bpt>custom<ept id="p6">](~/docs/standard/base-types/custom-timespan-format-strings.md)</ept> format strings), all enumeration types <bpt id="p7">[</bpt>enumeration types<ept id="p7">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>, and <bpt id="p8">[</bpt>GUIDs<ept id="p8">](https://msdn.microsoft.com/library/97af8hh4.aspx)</ept>.</source>
          <target state="translated">类型支持的数字格式字符串，包括所有数值类型 (同时<bpt id="p1">[</bpt>标准<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>格式字符串)，所有日期和时间 (同时<bpt id="p3">[</bpt>标准<ept id="p3">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>和<bpt id="p4">[</bpt>自定义<ept id="p4">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>格式字符串) 和时间间隔 (同时<bpt id="p5">[</bpt>标准<ept id="p5">](~/docs/standard/base-types/standard-timespan-format-strings.md)</ept>和<bpt id="p6">[</bpt>自定义<ept id="p6">](~/docs/standard/base-types/custom-timespan-format-strings.md)</ept>格式字符串)，所有枚举类型<bpt id="p7">[</bpt>枚举类型<ept id="p7">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>，和<bpt id="p8">[</bpt>Guid<ept id="p8">](https://msdn.microsoft.com/library/97af8hh4.aspx)</ept>。</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can also add support for format strings to your own types.</source>
          <target state="translated">你还可以向自己的类型添加支持的格式字符串。</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Controlling spacing</source>
          <target state="translated">控制间距</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can define the width of the string that is inserted into the result string by using syntax such as <ph id="ph1">`{0,12}`</ph>, which inserts a 12-character string.</source>
          <target state="translated">你可以定义通过使用以下语法插入到结果字符串的字符串的宽度<ph id="ph1">`{0,12}`</ph>，用于插入 12 个字符的字符串。</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In this case, the string representation of the first object is right-aligned in the 12-character field.</source>
          <target state="translated">在这种情况下，第一个对象的字符串表示为右对齐在 12 个字符字段中。</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(If the string representation of the first object is more than 12 characters in length, though, the preferred field width is ignored, and the entire string is inserted into the result string.)</source>
          <target state="translated">（如果的长度超过 12 个字符的字符串表示形式的第一个对象，不过，首选的字段宽度将被忽略，并且整个字符串插入到结果字符串。）</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example defines a 6-character field to hold the string "Year" and some year strings, as well as an 15-character field to hold the string "Population" and some population data.</source>
          <target state="translated">下面的示例定义一个 6 字符字段以保存字符串"Year"和某些年字符串，以及 15 个字符字段以保存"填充"的字符串和某些填充数据。</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Note that the characters are right-aligned in the field.</source>
          <target state="translated">请注意，这些字符右对齐的字段中。</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Controlling alignment</source>
          <target state="translated">控制对齐方式</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By default, strings are right-aligned within their field if you specify a field width.</source>
          <target state="translated">默认情况下，字符串是右对齐，其字段中如果指定字段宽度。</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To left-align strings in a field, you preface the field width with a negative sign, such as <ph id="ph1">`{0,-12}`</ph> to define a 12-character right-aligned field.</source>
          <target state="translated">若要左对齐字符串字段中的，你作为开头的字段宽度带一个负号，如<ph id="ph1">`{0,-12}`</ph>定义 12 个字符右对齐字段。</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example is similar to the previous one, except that it left-aligns both labels and data.</source>
          <target state="translated">下面的示例类似于前一个，但在于它左对齐标签和数据。</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> makes use of the composite formatting feature.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> 使用复合格式设置功能。</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Which method do I call?</source>
          <target state="translated">请勿调用的方法？</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To</source>
          <target state="translated">到</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Call</source>
          <target state="translated">Call</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Format one or more objects by using the conventions of the current culture.</source>
          <target state="translated">使用当前区域性的约定来格式化一个或多个对象。</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Except for the overloads that include a <ph id="ph1">`provider`</ph> parameter, the remaining <ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph> overloads include a <ph id="ph3">&lt;xref:System.String&gt;</ph> parameter followed by one or more object parameters.</source>
          <target state="translated">包括的重载除外<ph id="ph1">`provider`</ph>参数，剩余<ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph>重载包括<ph id="ph3">&lt;xref:System.String&gt;</ph>参数跟一个或多个对象参数。</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because of this, you don't have to determine which <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> overload you intend to call.</source>
          <target state="translated">因此，你无需确定哪些<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>你想要调用的重载。</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Your language compiler selects the appropriate overload from among the overloads that don't have a <ph id="ph1">`provider`</ph> parameter, based on your argument list.</source>
          <target state="translated">您的语言编译器选择适当的重载中没有重载进行<ph id="ph1">`provider`</ph>参数，根据你的自变量列表。</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, if your argument list has five arguments, the compiler calls the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> method.</source>
          <target state="translated">例如，如果自变量列表中包含五个参数，编译器将调用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Format one or more objects by using the conventions of a specific culture.</source>
          <target state="translated">使用特定区域性的约定来格式化一个或多个对象。</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> overload that begins with a <ph id="ph2">`provider`</ph> parameter is followed by a <ph id="ph3">&lt;xref:System.String&gt;</ph> parameter and one or more object parameters.</source>
          <target state="translated">每个<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>开头的重载<ph id="ph2">`provider`</ph>参数跟<ph id="ph3">&lt;xref:System.String&gt;</ph>参数和一个或多个对象参数。</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because of this, you don't have to determine which specific <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> overload you intend to call.</source>
          <target state="translated">因此，你无需确定哪个特定<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>你想要调用的重载。</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Your language compiler selects the appropriate overload from among the overloads that have a <ph id="ph1">`provider`</ph> parameter, based on your argument list.</source>
          <target state="translated">您的语言编译器选择适当的重载中具有的重载进行<ph id="ph1">`provider`</ph>参数，根据你的自变量列表。</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, if your argument list has five arguments, the compiler calls the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph> method.</source>
          <target state="translated">例如，如果自变量列表中包含五个参数，编译器将调用<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Perform a custom formatting operation either with an <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation or an <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> implementation.</source>
          <target state="translated">执行自定义格式设置操作使用<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>实现或<ph id="ph2">&lt;xref:System.IFormattable&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Any of the four overloads with a <ph id="ph1">`provider`</ph> parameter.</source>
          <target state="translated">任何具有四个重载<ph id="ph1">`provider`</ph>参数。</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The compiler selects the appropriate overload from among the overloads that have a <ph id="ph1">`provider`</ph> parameter, based on your argument list.</source>
          <target state="translated">编译器选择适当的重载中具有的重载进行<ph id="ph1">`provider`</ph>参数，根据你的自变量列表。</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The Format method in brief</source>
          <target state="translated">Format 方法概述</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each overload of the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to include zero-based indexed placeholders, called <bpt id="p2">*</bpt>format items<ept id="p2">*</ept>, in a composite format string.</source>
          <target state="translated">每个重载<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>以包括从零开始索引的占位符称为<bpt id="p2">*</bpt>格式化项<ept id="p2">*</ept>，复合格式字符串中。</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>At run time, each format item is replaced with the string representation of the corresponding argument in a parameter list.</source>
          <target state="translated">在运行时，每个格式项替换的字符串表示形式参数列表中的相应自变量。</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the value of the argument is <ph id="ph1">`null`</ph>, the format item is replaced with <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果自变量的值是<ph id="ph1">`null`</ph>，格式项替换<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the following call to the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph> method includes a format string with three format items, <ph id="ph2">{0}</ph>, <ph id="ph3">{1}</ph>, and <ph id="ph4">{2}</ph>, and an argument list with three items.</source>
          <target state="translated">例如，以下调用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph>方法包括三个格式项的格式字符串<ph id="ph2">{0}</ph>， <ph id="ph3">{1}</ph>，和<ph id="ph4">{2}</ph>，以及有三个项的自变量列表。</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The format item</source>
          <target state="translated">格式项</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A format item has this syntax:</source>
          <target state="translated">格式项具有此语法：</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Brackets denote optional elements.</source>
          <target state="translated">括号表示可选元素。</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The opening and closing braces are required.</source>
          <target state="translated">括号和右大括号是必需的。</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(To include a literal opening or closing brace in the format string, see the <bpt id="p1">[</bpt>Escaping Braces<ept id="p1">](~/docs/standard/base-types/composite-formatting.md#escaping-braces)</ept> section in the <bpt id="p2">[</bpt>Composite Formatting<ept id="p2">](~/docs/standard/base-types/composite-formatting.md)</ept> article.)</source>
          <target state="translated">(包括文本左或右大括号中的格式字符串，请参阅<bpt id="p1">[</bpt>转义大括号<ept id="p1">](~/docs/standard/base-types/composite-formatting.md#escaping-braces)</ept>主题中<bpt id="p2">[</bpt>复合格式设置<ept id="p2">](~/docs/standard/base-types/composite-formatting.md)</ept>文章。)</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, a format item to format a currency value might appear like this:</source>
          <target state="translated">例如，若要设置格式的货币值的格式项可能会出现如下：</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A format item has the following elements:</source>
          <target state="translated">格式项具有以下元素：</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>index<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The zero-based index of the argument whose string representation is to be included at this position in the string.</source>
          <target state="translated">字符串表示形式，则为参数的从零开始索引包含在字符串中的此位置。</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If this argument is <ph id="ph1">`null`</ph>, an empty string will be included at this position in the string.</source>
          <target state="translated">如果此参数为<ph id="ph1">`null`</ph>，将字符串中的此位置包含一个空字符串。</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">*</bpt>alignment<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>对齐方式<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Optional.</source>
          <target state="translated">可选。</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A signed integer that indicates the total length of the field into which the argument is inserted and whether it is right-aligned (a positive integer) or left-aligned (a negative integer).</source>
          <target state="translated">一个带符号的整数，指示将它插入自变量以及它是右对齐 （正整数） 还是左对齐 （负整数） 到字段的总长度。</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you omit <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept>, the string representation of the corresponding argument is inserted in a field with no leading or trailing spaces.</source>
          <target state="translated">如果省略<bpt id="p1">*</bpt>对齐<ept id="p1">*</ept>，在具有任何前导空格或尾随空格的字段中插入的字符串表示形式相应的自变量。</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the value of <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> is less than the length of the argument to be inserted, <bpt id="p2">*</bpt>alignment<ept id="p2">*</ept> is ignored and the length of the string representation of the argument is used as the field width.</source>
          <target state="translated">如果的值<bpt id="p1">*</bpt>对齐方式<ept id="p1">*</ept>小于参数要插入的长度<bpt id="p2">*</bpt>对齐方式<ept id="p2">*</ept>将被忽略，并且长度的字符串表示形式自变量用作字段宽度。</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Optional.</source>
          <target state="translated">可选。</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A string that specifies the format of the corresponding argument's result string.</source>
          <target state="translated">一个字符串，指定相应的自变量的结果字符串的格式。</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you omit <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept>, the corresponding argument's parameterless <ph id="ph1">`ToString`</ph> method is called to produce its string representation.</source>
          <target state="translated">如果省略<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept>，相应的自变量的无参数<ph id="ph1">`ToString`</ph>调用方法来生成其字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you specify <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept>, the argument referenced by the format item must implement the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">如果指定<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept>，格式项引用该参数必须实现<ph id="ph1">&lt;xref:System.IFormattable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Types that support format strings include:</source>
          <target state="translated">支持格式字符串的类型包括：</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All integral and floating-point types.</source>
          <target state="translated">整型和浮点型的所有类型。</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(See <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义数字格式字符串<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.DateTime&gt;</ph> 和 <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(See <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>标准日期和时间格式字符串<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义日期和时间格式字符串<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All enumeration types.</source>
          <target state="translated">所有枚举类型。</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(See <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>枚举格式字符串<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(See <bpt id="p1">[</bpt>Standard TimeSpan Format Strings<ept id="p1">](~/docs/standard/base-types/standard-timespan-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom TimeSpan Format Strings<ept id="p2">](~/docs/standard/base-types/custom-timespan-format-strings.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>标准 TimeSpan 格式字符串<ept id="p1">](~/docs/standard/base-types/standard-timespan-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义 TimeSpan 格式字符串<ept id="p2">](~/docs/standard/base-types/custom-timespan-format-strings.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>GUIDs.</source>
          <target state="translated">GUID。</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>(See the <ph id="ph1">&lt;xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph> method.)</source>
          <target state="translated">(请参阅<ph id="ph1">&lt;xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph>方法。)</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, note that any custom type can implement <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> or extend an existing type's <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> implementation.</source>
          <target state="translated">但请注意任何自定义类型可以实现<ph id="ph1">&lt;xref:System.IFormattable&gt;</ph>或扩展现有类型的<ph id="ph2">&lt;xref:System.IFormattable&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses the <ph id="ph1">`alignment`</ph> and <ph id="ph2">`formatString`</ph> arguments to produce formatted output.</source>
          <target state="translated">下面的示例使用<ph id="ph1">`alignment`</ph>和<ph id="ph2">`formatString`</ph>自变量才能生成格式化的输出。</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>How arguments are formatted</source>
          <target state="translated">如何格式化参数</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Format items are processed sequentially from the beginning of the string.</source>
          <target state="translated">格式项按顺序处理从该字符串的开头。</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Each format item has an index that corresponds to an object in the method's argument list.</source>
          <target state="translated">每个格式项都有对应于一个对象，该方法的自变量列表中的索引。</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method retrieves the argument and derives its string representation as follows:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法检索自变量和派生其字符串表示形式，如下所示：</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the argument is <ph id="ph1">`null`</ph>, the method inserts <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> into the result string.</source>
          <target state="translated">如果参数是<ph id="ph1">`null`</ph>，则该方法插入<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>到结果字符串。</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You don't have to be concerned with handling a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> for null arguments.</source>
          <target state="translated">您不必牵涉处理<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>null 自变量。</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you call the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph> overload and the <ph id="ph2">`provider`</ph> object's <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> implementation returns a non-null <ph id="ph4">&lt;xref:System.ICustomFormatter&gt;</ph> implementation, the argument is passed to its <ph id="ph5">&lt;xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果调用<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph>重载和<ph id="ph2">`provider`</ph>对象的<ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph>实现返回非 null<ph id="ph4">&lt;xref:System.ICustomFormatter&gt;</ph>实现中，自变量传递给其<ph id="ph5">&lt;xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the format item includes a <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> argument, it is passed as the first argument to the method.</source>
          <target state="translated">如果格式项包含<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept>自变量，它作为第一个参数传递给方法。</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation is available and produces a non-null string, that string is returned as the string representation of the argument; otherwise, the next step executes.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>实现可用，并产生一个非 null 字符串，字符串的字符串表示形式自变量作为返回; 否则，执行下一步的步骤。</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the argument implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, its <ph id="ph2">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation is called.</source>
          <target state="translated">如果参数实现<ph id="ph1">&lt;xref:System.IFormattable&gt;</ph>接口，其<ph id="ph2">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph>调用实现。</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The argument's parameterless <ph id="ph1">`ToString`</ph> method, which either overrides or inherits from a base class implementation, is called.</source>
          <target state="translated">自变量的无参数<ph id="ph1">`ToString`</ph>调用方法，重写，或者继承自的基类实现，该方法。</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For an example that intercepts calls to the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method and allows you to see what information the <ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph> method passes to a formatting method for each format item in a composite format string, see <bpt id="p1">[</bpt>Example: An intercept provider and Roman numeral formatter<ept id="p1">](#Format7_Example)</ept>.</source>
          <target state="translated">有关示例，截获对的调用<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>方法，你可以查看哪些信息和<ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph>方法传递到格式设置方法，以每个格式项在复合格式字符串中，请参阅<bpt id="p1">[</bpt>示例： 截距提供程序和罗马数字格式化程序<ept id="p1">](#Format7_Example)</ept>。</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information, see the <bpt id="p1">[</bpt>Processing Order<ept id="p1">](~/docs/standard/base-types/composite-formatting.md##processing-order)</ept> section in the <bpt id="p2">[</bpt>Composite Formatting<ept id="p2">](~/docs/standard/base-types/composite-formatting.md)</ept> article.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>处理顺序<ept id="p1">](~/docs/standard/base-types/composite-formatting.md##processing-order)</ept>主题中<bpt id="p2">[</bpt>复合格式设置<ept id="p2">](~/docs/standard/base-types/composite-formatting.md)</ept>文章。</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Format items that have the same index</source>
          <target state="translated">具有相同的索引的格式项</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method throws a <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> exception if the index of an index item is greater than or equal to the number of arguments in the argument list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法抛出异常<ph id="ph2">&lt;xref:System.FormatException&gt;</ph>异常索引项的索引是否大于或等于自变量列表中的参数的数目。</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, <ph id="ph1">`format`</ph> can include more format items than there are arguments, as long as multiple format items have the same index.</source>
          <target state="translated">但是，<ph id="ph1">`format`</ph>可以包括多个格式项不是有自变量，只要多个格式项都具有相同的索引。</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In the call to the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%29&gt;</ph> method in following example, the argument list has a single argument, but the format string includes two format items: one displays the decimal value of a number, and the other displays its hexadecimal value.</source>
          <target state="translated">在调用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%29&gt;</ph>在以下示例中，自变量列表的方法具有单个参数，但该格式字符串包含两个格式项： 一个显示的一个数字，十进制值，另一个显示其十六进制值。</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Formatting and culture</source>
          <target state="translated">格式和区域性</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Generally, objects in the argument list are converted to their string representations by using the conventions of the current culture, which is returned by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">通常，对象自变量列表中的将转换为其字符串表示形式返回使用当前区域性的约定<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can control this behavior by calling one of the overloads of <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> that includes a <ph id="ph2">`provider`</ph> parameter.</source>
          <target state="translated">您可以通过调用的重载之一来控制此行为<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>包括<ph id="ph2">`provider`</ph>参数。</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies custom and culture-specific formatting information that is used to moderate the formatting process.</source>
          <target state="translated"><ph id="ph1">`provider`</ph>参数是<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>实现，提供用于中等格式的自定义和区域性特定格式设置信息处理。</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface has a single member, <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>, which is responsible for returning the object that provides formatting information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>接口具有一个成员， <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>，即负责返回提供的格式设置信息的对象。</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The .NET Framework has three <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementations that provide culture-specific formatting:</source>
          <target state="translated">.NET Framework 具有三个<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>提供区域性特定格式设置的实现：</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A&gt;</ph> method returns a culture-specific <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for formatting numeric values and a culture-specific <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object for formatting date and time values.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A&gt;</ph>方法返回特定于区域性的<ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>设置数字值和区域性特定格式的对象<ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>格式化日期和时间值的对象。</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>, which is used for culture-specific formatting of date and time values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>它用于特定于区域性的格式设置的日期和时间值。</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A&gt;</ph> method returns itself.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A&gt;</ph>方法返回它自身。</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>, which is used for culture-specific formatting of numeric values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>它用于区域性特定格式的数字值。</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> property returns itself.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph>属性返回它自身。</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Custom formatting operations</source>
          <target state="translated">自定义格式设置操作</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can also call the any of the overloads of the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method that have a <ph id="ph2">`provider`</ph> parameter of type <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> to perform custom formatting operations.</source>
          <target state="translated">你还可以调用的重载任意<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>具有方法<ph id="ph2">`provider`</ph>类型的参数<ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>执行自定义格式设置操作。</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, you could format an integer as an identification number or as a telephone number.</source>
          <target state="translated">例如，您无法设置整数格式作为一个标识号或电话号码。</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To perform custom formatting, your <ph id="ph1">`provider`</ph> argument must implement both the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> and <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> interfaces.</source>
          <target state="translated">若要执行自定义格式设置，你<ph id="ph1">`provider`</ph>自变量必须同时实现<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>和<ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>When the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method is passed an <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation as the <ph id="ph3">`provider`</ph> argument, the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method calls its   <ph id="ph5">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> implementation and requests an object of type <ph id="ph6">&lt;xref:System.ICustomFormatter&gt;</ph>.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法传递<ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph>实现作为<ph id="ph3">`provider`</ph>自变量，<ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph>方法调用其<ph id="ph5">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph>实现请求的类型的对象和<ph id="ph6">&lt;xref:System.ICustomFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It then calls the returned <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> object's <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method to format each format item in the composite string passed to it.</source>
          <target state="translated">然后，它调用返回<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>对象的<ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph>方法来设置格式复合字符串中的每个格式项传递给它。</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more information about providing custom formatting solutions, see <bpt id="p1">[</bpt>How to: Define and Use Custom Numeric Format Providers<ept id="p1">](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md)</ept> and <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>.</source>
          <target state="translated">有关提供自定义格式设置解决方案的详细信息，请参阅<bpt id="p1">[</bpt>如何： 定义和使用自定义数值格式提供程序<ept id="p1">](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md)</ept>和<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For an example that converts integers to formatted custom numbers, see <bpt id="p1">[</bpt>Example: A custom formatting operation<ept id="p1">](#Format6_Example)</ept>.</source>
          <target state="translated">将整数转换为格式化自定义数字示例，请参阅<bpt id="p1">[</bpt>示例： 自定义格式设置操作<ept id="p1">](#Format6_Example)</ept>。</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For an example that converts unsigned bytes to Roman numerals, see <bpt id="p1">[</bpt>Example: An intercept provider and Roman numeral formatter<ept id="p1">](#Format7_Example)</ept>.</source>
          <target state="translated">将无符号的字节转换为罗马数字示例，请参阅<bpt id="p1">[</bpt>示例： 截距提供程序和罗马数字格式化程序<ept id="p1">](#Format7_Example)</ept>。</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example: A custom formatting operation</source>
          <target state="translated">示例： 自定义的格式设置操作</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This example defines a format provider that formats an integer value as a customer account number in the form x-xxxxx-xx.</source>
          <target state="translated">此示例定义一个整数值的格式设置为窗体 x xxxxx xx 的客户帐户数字的格式提供。</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Example: An intercept provider and Roman numeral formatter</source>
          <target state="translated">示例： 截距提供程序和罗马数字格式化程序</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This example defines a custom format provider that implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interfaces to do two things:</source>
          <target state="translated">此示例定义一个自定义格式提供程序实现<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>和<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>接口，以便执行两项操作：</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It displays the parameters passed to its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">它显示的参数传递给其<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This enables us to see what parameters the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph> method is passing to the custom formatting implementation for each object that it tries to format.</source>
          <target state="translated">这使我们能够查看哪些参数<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph>方法传递到每个对象，它将尝试设置格式的自定义格式设置实现。</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This can be useful when you're debugging your application.</source>
          <target state="translated">调试你的应用程序时，这很有用。</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the object to be formatted is an unsigned byte value that is to be formatted by using the "R" standard format string, the custom formatter formats the numeric value as a Roman numeral.</source>
          <target state="translated">如果要设置格式的对象是一个无符号的字节值，是要通过使用"R"标准格式字符串设置格式，自定义格式化程序设置为罗马数字格式的数字值。</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String.Format Q &amp; A</source>
          <target state="translated">String.Format 问答</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Why do you recommend string interpolation over calls to the <ph id="ph1">`String.Format`</ph> method?</source>
          <target state="translated">为什么您建议字符串内插对的调用<ph id="ph1">`String.Format`</ph>方法？</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>String interpolation is:</source>
          <target state="translated">字符串内插是：</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>More flexible.</source>
          <target state="translated">更灵活。</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It can be used in any string without requiring a call to a method that supports composite formatting.</source>
          <target state="translated">它可在任何字符串，而无需对支持复合格式设置方法的调用。</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Otherwise, you have to call the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method or another method that supports composite formatting, such as <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">否则，你必须调用<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法或支持复合格式设置，如的另一种方法<ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>More readable.</source>
          <target state="translated">更具可读性。</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the expression to insert into a string appears in the interpolated expression rather than in a argument list, interpolated strings are far easier to code and to read.</source>
          <target state="translated">因为要将插入到字符串的表达式相比内, 插表达式中显示，而不是在自变量列表，相比内, 插的字符串在代码并读取容易得多。</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because of their greater readability, interpolated strings can replace not only calls to composite format methods, but they can also be used in string concatenation operations to produce more concise, clearer code.</source>
          <target state="translated">由于其更好的可读性内, 插的字符串可以替换不仅对复合格式方法的调用，但它们还可在字符串串联操作来生成更简洁、 更清晰的代码。</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A comparison of the following two code examples illustrates the superiority of interpolated strings over string concatenation and calls to composite formatting methods.</source>
          <target state="translated">比较以下两个代码示例演示相比内, 插字符串的优越性通过字符串串联和对复合格式设置方法的调用。</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The use of multiple string concatenation operations in the following example produces verbose and hard-to-read code.</source>
          <target state="translated">下面的示例中的多个字符串串联操作的使用会导致详细和硬读取代码。</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>In contrast, the use of interpolated strings in the following example produce much clearer, more concise code than the string concatenation statement and the call to the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method in the previous example.</source>
          <target state="translated">与此相反，使用的内插字符串在下面的示例生成比字符串串联语句和调用的得更清晰、 更简洁代码<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>上一示例中的方法。</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Where can I find a list of the predefined format strings that can be used with format items?</source>
          <target state="translated">在哪里可以找到可与格式项使用的预定义的格式字符串的列表？</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For all integral and floating-point types, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">有关整型和浮点型的所有类型，请参阅<bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义数字格式字符串<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">日期和时间值，请参阅<bpt id="p1">[</bpt>标准日期和时间格式字符串<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义日期和时间格式字符串<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">枚举值，请参阅<bpt id="p1">[</bpt>枚举格式字符串<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> values, see  <bpt id="p1">[</bpt>Standard TimeSpan Format Strings<ept id="p1">](~/docs/standard/base-types/standard-timespan-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom TimeSpan Format Strings<ept id="p2">](~/docs/standard/base-types/custom-timespan-format-strings.md)</ept>.</source>
          <target state="translated">有关<ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>值，请参阅<bpt id="p1">[</bpt>标准 TimeSpan 格式字符串<ept id="p1">](~/docs/standard/base-types/standard-timespan-format-strings.md)</ept>和<bpt id="p2">[</bpt>自定义 TimeSpan 格式字符串<ept id="p2">](~/docs/standard/base-types/custom-timespan-format-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For <ph id="ph1">&lt;xref:System.Guid&gt;</ph> values, see the Remarks section of the <ph id="ph2">&lt;xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph> reference page.</source>
          <target state="translated">有关<ph id="ph1">&lt;xref:System.Guid&gt;</ph>值，请参阅备注部分的<ph id="ph2">&lt;xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph>引用页。</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>How do I control the alignment of the result strings that replace format items?</source>
          <target state="translated">如何控制替换格式项的结果字符串的对齐方式？</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The general syntax of a format item is:</source>
          <target state="translated">格式项的常规语法是：</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>where <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> is a signed integer that defines the field width.</source>
          <target state="translated">其中<bpt id="p1">*</bpt>对齐<ept id="p1">*</ept>是一个有符号的整数，它定义的字段宽度。</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If this value is negative, text in the field is left-aligned.</source>
          <target state="translated">如果此值为负，则字段中的文本是左对齐。</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If it is positive, text is right-aligned.</source>
          <target state="translated">如果它为正，文本为右对齐。</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>How do I control the number of digits after the decimal separator?</source>
          <target state="translated">如何在小数点分隔符后控制的位数</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>All <bpt id="p1">[</bpt>standard numeric format strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> except "D" (which is used with integers only), "G", "R", and "X" allow a precision specifier that defines the number of decimal digits in the result string.</source>
          <target state="translated">所有<bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>except"D"（它们使用仅包含整数）、"G"、"R"和"X"允许在结果字符串中定义的十进制位数的精度说明符。</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses standard numeric format strings to control the number of decimal digits in the result string.</source>
          <target state="translated">下面的示例使用标准数字格式字符串来控制结果字符串中的十进制数字个数。</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you're using a <bpt id="p1">[</bpt>custom numeric format string<ept id="p1">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>, use the "0" format specifier to control the number of decimal digits in the result string, as the following example shows.</source>
          <target state="translated">如果你使用<bpt id="p1">[</bpt>自定义数字格式字符串<ept id="p1">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>，使用"0"格式说明符来控制在结果字符串中，如以下示例所示的十进制数字个数。</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>How do I control the number of integral digits?</source>
          <target state="translated">如何控制的整数位数？</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>By default, formatting operations only display non-zero integral digits.</source>
          <target state="translated">默认情况下，格式设置操作将仅显示非零整数位。</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you are formatting integers, you can use a precision specifier with the "D" and "X" standard format strings to control the number of digits.</source>
          <target state="translated">如果你要设置格式的整数，可以使用精度说明符"D"与"X"标准格式字符串来控制的数字位数。</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can pad an integer or floating-point number with leading zeros to produce a result string with a specified number of integral digits by using the "0" <bpt id="p1">[</bpt>custom numeric format specifier<ept id="p1">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>, as the following example shows.</source>
          <target state="translated">要通过使用"0"来生成具有指定数字的整数位数的结果字符串的整数或带前导零的浮点数可以填充<bpt id="p1">[</bpt>自定义数字格式说明符<ept id="p1">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>，如下面的示例所示。</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>How many items can I include in the format list?</source>
          <target state="translated">在格式列表中可以包括多少项？</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>There is no practical limit.</source>
          <target state="translated">没有实际限制。</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The second parameter of the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph> method is tagged with the <ph id="ph2">&lt;xref:System.ParamArrayAttribute&gt;</ph> attribute, which allows you to include either a delimited list or an object array as your format list.</source>
          <target state="translated">第二个参数<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph>方法标记有<ph id="ph2">&lt;xref:System.ParamArrayAttribute&gt;</ph>属性，它允许你将包含的分隔的列表或格式列表作为一个对象数组。</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>How do I include literal braces ("{" and "}") in the result string?</source>
          <target state="translated">如何包含文本的大括号 ("{"和"}") 在结果字符串中？</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, how do you prevent the following method call from throwing a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> exception?</source>
          <target state="translated">例如，如何防止从引发下面的方法调用<ph id="ph1">&lt;xref:System.FormatException&gt;</ph>异常？</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A single opening or closing brace is always interpreted as the beginning or end of a format item.</source>
          <target state="translated">单个的开张或右大括号始终解释为的开头或格式项的末尾。</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>To be interpreted literally, it must be escaped.</source>
          <target state="translated">若要按原义解释，它必须进行转义。</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You escape a brace by adding another brace ("{{" and "}}" instead of "{" and "}"), as in the following method call:</source>
          <target state="translated">通过添加另一个大括号转义大括号 ("{{"和"}}"而不是"{"和"}")，如下所示的以下方法调用：</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>However, even escaped braces are easily misinterpreted.</source>
          <target state="translated">但是，即使转义大括号是轻松 misinterpreted。</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>We recommend that you include braces in the format list and use format items to insert them in the result string, as the following example shows.</source>
          <target state="translated">我们建议你在格式列表中包含大括号和格式项用于将它们插在结果字符串中，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Why does my call to the String.Format method throw a FormatException?</source>
          <target state="translated">为什么我调用 String.Format 方法会引发 FormatException？</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The most common cause of the exception is that the index of a format item doesn't correspond to an object in the format list.</source>
          <target state="translated">异常的最常见原因是，不会与格式列表中的对象相对应的格式项的索引。</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Usually this indicates that you've misnumbered the indexes of format items or you've forgotten to include an object in the format list.</source>
          <target state="translated">通常，这表示已 misnumbered 格式项的索引，或您忘记了在格式列表中包含的对象。</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Attempting to include an unescaped left or right brace character also throws a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">尝试将非转义左或向右大括号字符也将引发<ph id="ph1">&lt;xref:System.FormatException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Occasionally, the exception is the result of a typo; for example, a typical mistake is to mistype "[" (the left bracket) instead of "{" (the left brace).</source>
          <target state="translated">有时，例外情况是拼写错误; 结果例如，典型的错误是错误地键入"["（左的括号） 而不是"{"（左大括号）。</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If the Format(System.IFormatProvider,System.String,System.Object[]) method supports parameter arrays, why does my code throw an exception when I use an array?</source>
          <target state="translated">如果 Format(System.IFormatProvider,System.String,System.Object[]) 方法支持参数数组，为什么我的代码引发异常时使用数组？</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the following code throws a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> exception:</source>
          <target state="translated">例如，下面的代码引发<ph id="ph1">&lt;xref:System.FormatException&gt;</ph>异常：</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is a problem of compiler overload resolution.</source>
          <target state="translated">这是编译器重载解析出现问题。</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because the compiler cannot convert an array of integers to an object array, it treats the integer array as a single argument, so it calls the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">因为编译器不能将整数的数组转换为一个对象数组，它将整数的数组视为单个参数，因此，它调用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The exception is thrown because there are four format items but only a single item in the format list.</source>
          <target state="translated">将引发异常，因为有四个格式项，但仅格式列表中的单个项。</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> method.</source>
          <target state="translated">由于既不 Visual Basic 和 C# 可以将一个整数数组转换为一个对象数组，你必须执行转换，然后再调自己<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example provides one implementation.</source>
          <target state="translated">下面的示例提供一个实现。</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Numerous examples that call the <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method are interspersed through the <bpt id="p1">[</bpt>Remarks<ept id="p1">](#remarks)</ept> section of this article.</source>
          <target state="translated">调用的大量示例<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>方法交织通过<bpt id="p1">[</bpt>备注<ept id="p1">](#remarks)</ept>部分中的所述。</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can also download a complete set of <ph id="ph1">`String.Format`</ph> examples, which are included a <bpt id="p1">[</bpt>.NET Core 2.0 project for C#<ept id="p1">](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/String.Format.zip)</ept> and a <bpt id="p2">[</bpt>.NET Core 2.0 project for Visual Basic<ept id="p2">](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/String.Format.zip)</ept>, from the <bpt id="p3">[</bpt>dotnet/docs GitHub repository<ept id="p3">](https://github.com/dotnet/docs)</ept>.</source>
          <target state="translated">你也可以下载一组完整的<ph id="ph1">`String.Format`</ph>示例，包括<bpt id="p1">[</bpt>对于 C#.NET 核心 2.0 项目<ept id="p1">](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/String.Format.zip)</ept>和<bpt id="p2">[</bpt>适用于 Visual Basic.NET 核心 2.0 项目<ept id="p2">](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/String.Format.zip)</ept>，从<bpt id="p3">[</bpt>dotnet/文档GitHub 存储库<ept id="p3">](https://github.com/dotnet/docs)</ept>。</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following are some of the examples included in the article:</source>
          <target state="translated">以下是一些文章中包含的示例：</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Create a format string</source>
          <target state="translated">创建一个格式字符串</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Inserting a string<ept id="p1">](#inserting-a-string)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>将一个字符串插入<ept id="p1">](#inserting-a-string)</ept></target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>The format item<ept id="p1">](#the-format-item)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>格式项<ept id="p1">](#the-format-item)</ept></target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Format items that have the same index<ept id="p1">](#format-items-that-have-the-same-index)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>具有相同的索引的格式项<ept id="p1">](#format-items-that-have-the-same-index)</ept></target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Control formatted output</source>
          <target state="translated">控制格式化的输出</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Controlling formatting<ept id="p1">](#controlling-formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>控制格式设置<ept id="p1">](#controlling-formatting)</ept></target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Controlling spacing<ept id="p1">](#controlling-spacing)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>控制间距<ept id="p1">](#controlling-spacing)</ept></target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Controlling alignment<ept id="p1">](#controlling-alignment)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>控制对齐方式<ept id="p1">](#controlling-alignment)</ept></target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Controlling the number of integral digits<ept id="p1">](#how-do-i-control-the-number-of-integral-digits)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>控制整数位数的数<ept id="p1">](#how-do-i-control-the-number-of-integral-digits)</ept></target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Controlling the number of digits after the decimal separator<ept id="p1">](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>控制小数分隔符后的位数<ept id="p1">](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)</ept></target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Including literal braces in a result string<ept id="p1">](#braces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>在结果字符串中包含文本的大括号<ept id="p1">](#braces)</ept></target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Make format strings culture-sensitive</source>
          <target state="translated">生成区分区域性的格式字符串</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting<ept id="p1">](#culture-sensitive-formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>区分区域性的格式设置<ept id="p1">](#culture-sensitive-formatting)</ept></target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Customize the formatting operation</source>
          <target state="translated">自定义格式设置操作</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>A custom formatting operation<ept id="p1">](#example-a-custom-formatting-operation)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义格式设置操作<ept id="p1">](#example-a-custom-formatting-operation)</ept></target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><bpt id="p1">[</bpt>An intercept provider and Roman numeral formatter<ept id="p1">](#example-an-intercept-provider-and-roman-numeral-formatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>截距提供程序和罗马数字格式化程序<ept id="p1">](#example-an-intercept-provider-and-roman-numeral-formatter)</ept></target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>The object to format.</source>
          <target state="translated">要设置格式的对象。</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>Replaces one or more format items in a string with the string representation of a specified object.</source>
          <target state="translated">将字符串中的一个或多个格式项替换为指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which any format items are replaced by the string representation of <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中的任何格式项均替换为 <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert the value of an expression to its string representation and to embed that representation in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将表达式的值转换为其字符串表示形式并将字符串中嵌入该表示形式。</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object)">
          <source>Example: Formatting a single argument</source>
          <target state="translated">示例： 格式设置的单个自变量</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%29&gt;</ph> method to embed an individual's age in the middle of a string.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%29&gt;</ph>方法将字符串中间的一个人的年龄。</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>The format item in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 中的格式项无效。</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object)">
          <source>The index of a format item is not zero.</source>
          <target state="translated">格式项的索引不为零。</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source>An object array that contains zero or more objects to format.</source>
          <target state="translated">一个对象数组，其中包含零个或多个要设置格式的对象。</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</source>
          <target state="translated">将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which the format items have been replaced by the string representation of the corresponding objects in <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中格式项已替换为 <ph id="ph2">&lt;paramref name="args" /&gt;</ph> 中相应对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert the value of four or more expressions to their string representations and to embed those representations in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将四个或多个表达式的值转换为其字符串表示形式并将字符串中嵌入这些表示形式。</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>Since the <ph id="ph1">`args`</ph> parameter is marked with the <ph id="ph2">&lt;xref:System.ParamArrayAttribute?displayProperty=nameWithType&gt;</ph> attribute, you can pass the objects to the method as individual arguments or as an <ph id="ph3">&lt;xref:System.Object&gt;</ph> array.</source>
          <target state="translated">由于<ph id="ph1">`args`</ph>参数标记为<ph id="ph2">&lt;xref:System.ParamArrayAttribute?displayProperty=nameWithType&gt;</ph>属性中，你可以将对象传递给该方法为各个自变量或<ph id="ph3">&lt;xref:System.Object&gt;</ph>数组。</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>Example: Formatting more than three arguments</source>
          <target state="translated">示例： 格式设置多个三个自变量</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>This example creates a string that contains data on the high and low temperature on a particular date.</source>
          <target state="translated">此示例创建一个字符串，包含在特定日期的最高价和最温度上的数据。</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>The composite format string has five format items in the C# example and six in the Visual Basic example.</source>
          <target state="translated">复合格式字符串，并且在 C# 示例中的五个格式项六个 in Visual Basic 示例。</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>Two of the format items define the width of their corresponding value's string representation, and the first format item also includes a standard date and time format string.</source>
          <target state="translated">两个格式项定义其对应的值的字符串表示形式的宽度和第一个格式项还包括标准日期和时间格式字符串。</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object[])">
          <source>You can also pass the objects to be formatted as an array rather than a an argument list.</source>
          <target state="translated">你还可以传递要格式化为数组的对象而不是自变量列表。</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> or <ph id="ph2">&lt;paramref name="args" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="args" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object[])">
          <source>The index of a format item is less than zero, or greater than or equal to the length of the <ph id="ph1">&lt;paramref name="args" /&gt;</ph> array.</source>
          <target state="translated">格式项的索引小于零或大于等于 <ph id="ph1">&lt;paramref name="args" /&gt;</ph> 数组的长度。</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">一个提供区域性特定的格式设置信息的对象。</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>The object to format.</source>
          <target state="translated">要设置格式的对象。</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>Replaces the format item or items in a specified string with the string representation of the corresponding object.</source>
          <target state="translated">将指定字符串中的一个或多个格式项替换为对应对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">参数提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which the format item or items have been replaced by the string representation of <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中的一个或多个格式项已替换为 <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert the value of an expression to its string representation and to embed that representation in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将表达式的值转换为其字符串表示形式并将字符串中嵌入该表示形式。</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</source>
          <target state="translated">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>The method converts <ph id="ph1">`arg0`</ph> to its string representation by calling its <bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept> method or, if the object's corresponding format item includes a format string, by calling its <bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept> method.</source>
          <target state="translated">方法将转换<ph id="ph1">`arg0`</ph>为其字符串表示形式，通过调用其<bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept>方法，或者，如果相应对象的格式项包含一个格式字符串，通过调用其<bpt id="p2">**</bpt>ToString (字符串，IFormatProvider）<ept id="p2">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>If these methods don't exist, it calls the object's parameterless <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method.</source>
          <target state="translated">如果这些方法不存在，则会调用对象的无参数<bpt id="p1">**</bpt>ToString<ept id="p1">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
          <source>The index of a format item is not zero.</source>
          <target state="translated">格式项的索引不为零。</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">一个提供区域性特定的格式设置信息的对象。</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>An object array that contains zero or more objects to format.</source>
          <target state="translated">一个对象数组，其中包含零个或多个要设置格式的对象。</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>Replaces the format items in a string with the string representations of corresponding objects in a specified array.</source>
          <target state="translated">将字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">参数提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which the format items have been replaced by the string representation of the corresponding objects in <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中格式项已替换为 <ph id="ph2">&lt;paramref name="args" /&gt;</ph> 中相应对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert four or more expressions to their string representations and to embed those representations in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将四个或多个表达式转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</source>
          <target state="translated">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>The method converts each <ph id="ph1">&lt;xref:System.Object&gt;</ph> argument to its string representation by calling its <bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept> method or, if the object's corresponding format item includes a format string, by calling its <bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept> method.</source>
          <target state="translated">该方法将每个<ph id="ph1">&lt;xref:System.Object&gt;</ph>自变量为其字符串表示形式，通过调用其<bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept>方法，或者，如果相应对象的格式项包含一个格式字符串，通过调用其<bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>If these methods don't exist, it calls the object's parameterless <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method.</source>
          <target state="translated">如果这些方法不存在，则会调用对象的无参数<bpt id="p1">**</bpt>ToString<ept id="p1">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>Example: Culture-sensitive formatting</source>
          <target state="translated">示例： 区分区域性的格式设置</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>This example uses the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph> method to display the string representation of some date and time values and numeric values by using several different cultures.</source>
          <target state="translated">此示例使用<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29&gt;</ph>方法以通过使用几种不同区域性中显示的字符串表示形式某些日期和时间值和数值。</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> or <ph id="ph2">&lt;paramref name="args" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="args" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
          <source>The index of a format item is less than zero, or greater than or equal to the length of the <ph id="ph1">&lt;paramref name="args" /&gt;</ph> array.</source>
          <target state="translated">格式项的索引小于零或大于等于 <ph id="ph1">&lt;paramref name="args" /&gt;</ph> 数组的长度。</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>The first object to format.</source>
          <target state="translated">要设置格式的第一个对象。</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>The second object to format.</source>
          <target state="translated">要设置格式的第二个对象。</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>Replaces the format items in a string with the string representation of two specified objects.</source>
          <target state="translated">将字符串中的格式项替换为两个指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which format items are replaced by the string representations of <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph> and <ph id="ph3">&lt;paramref name="arg1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中的格式项替换为 <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="arg1" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert the value of two expressions to their string representations and to embed those representations in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将两个表达式的值转换为其字符串表示形式并将字符串中嵌入这些表示形式。</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>Example: Formatting two arguments</source>
          <target state="translated">示例： 两个自变量格式设置</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>This example uses the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29&gt;</ph> method to display time and temperature data stored in a generic <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> object.</source>
          <target state="translated">此示例使用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29&gt;</ph>方法以显示时间和温度数据存储在一个泛型<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>Note that the format string has three format items, although there are only two objects to format.</source>
          <target state="translated">请注意，格式字符串将有三个格式项，尽管有只有两个要格式化的对象。</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.</source>
          <target state="translated">这是因为在列表中 （日期和时间值） 的第一个对象由两个格式项： 第一个格式项目将显示时间和第二个显示的日期。</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object)">
          <source>The index of a format item is not zero or one.</source>
          <target state="translated">格式项的索引不为零或一。</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">一个提供区域性特定的格式设置信息的对象。</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>The first object to format.</source>
          <target state="translated">要设置格式的第一个对象。</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>The second object to format.</source>
          <target state="translated">要设置格式的第二个对象。</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>Replaces the format items in a string with the string representation of two specified objects.</source>
          <target state="translated">将字符串中的格式项替换为两个指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">参数提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which format items are replaced by the string representations of <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph> and <ph id="ph3">&lt;paramref name="arg1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中的格式项替换为 <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="arg1" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert two expressions to their string representations and to embed those representations in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将两个表达式转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</source>
          <target state="translated">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>The method converts each <ph id="ph1">&lt;xref:System.Object&gt;</ph> argument to its string representation by calling its <bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept> method or, if the object's corresponding format item includes a format string, by calling its <bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept> method.</source>
          <target state="translated">该方法将每个<ph id="ph1">&lt;xref:System.Object&gt;</ph>自变量为其字符串表示形式，通过调用其<bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept>方法，或者，如果相应对象的格式项包含一个格式字符串，通过调用其<bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>If these methods don't exist, it calls the object's parameterless <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method.</source>
          <target state="translated">如果这些方法不存在，则会调用对象的无参数<bpt id="p1">**</bpt>ToString<ept id="p1">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
          <source>The index of a format item is not zero or one.</source>
          <target state="translated">格式项的索引不为零或一。</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>The first object to format.</source>
          <target state="translated">要设置格式的第一个对象。</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>The second object to format.</source>
          <target state="translated">要设置格式的第二个对象。</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>The third object to format.</source>
          <target state="translated">要设置格式的第三个对象。</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>Replaces the format items in a string with the string representation of three specified objects.</source>
          <target state="translated">将字符串中的格式项替换为三个指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which the format items have been replaced by the string representations of <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph>, <ph id="ph3">&lt;paramref name="arg1" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="arg2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中的格式项已替换为 <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph>、<ph id="ph3">&lt;paramref name="arg1" /&gt;</ph> 和 <ph id="ph4">&lt;paramref name="arg2" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert the value of three expressions to their string representations and to embed those representations in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将三个表达式的值转换为其字符串表示形式并将字符串中嵌入这些表示形式。</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>Example: Formatting three arguments</source>
          <target state="translated">示例： 格式设置三个自变量</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>This example uses the <ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph> method to create a string that illustrates the result of a Boolean <ph id="ph2">`And`</ph> operation with two integer values.</source>
          <target state="translated">此示例使用<ph id="ph1">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph>方法来创建的字符串，演示了一个布尔值的结果<ph id="ph2">`And`</ph>具有两个整数值的操作。</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>Note that the format string includes six format items, but the method has only three items in its parameter list, because each item is formatted in two different ways.</source>
          <target state="translated">请注意，格式字符串包括六个格式项，但该方法具有在其参数列表中，只有三个项，因为每个项格式化两个不同的方式。</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
          <source>The index of a format item is less than zero, or greater than two.</source>
          <target state="translated">格式项的索引小于零，或者大于二。</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">一个提供区域性特定的格式设置信息的对象。</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>A <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式字符串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>The first object to format.</source>
          <target state="translated">要设置格式的第一个对象。</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>The second object to format.</source>
          <target state="translated">要设置格式的第二个对象。</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>The third object to format.</source>
          <target state="translated">要设置格式的第三个对象。</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>Replaces the format items in a string with the string representation of three specified objects.</source>
          <target state="translated">将字符串中的格式项替换为三个指定对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>An parameter supplies culture-specific formatting information.</source>
          <target state="translated">参数提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>A copy of <ph id="ph1">&lt;paramref name="format" /&gt;</ph> in which the format items have been replaced by the string representations of <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph>, <ph id="ph3">&lt;paramref name="arg1" /&gt;</ph>, and <ph id="ph4">&lt;paramref name="arg2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 的副本，其中的格式项已替换为 <ph id="ph2">&lt;paramref name="arg0" /&gt;</ph>、<ph id="ph3">&lt;paramref name="arg1" /&gt;</ph> 和 <ph id="ph4">&lt;paramref name="arg2" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> to convert three expressions to their string representations and to embed those representations in a string.</source>
          <target state="translated">此方法使用<bpt id="p1">[</bpt>复合格式设置功能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>将三个表达式转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</source>
          <target state="translated">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>The method converts each <ph id="ph1">&lt;xref:System.Object&gt;</ph> argument to its string representation by calling its <bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept> method or, if the object's corresponding format item includes a format string, by calling its <bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept> method.</source>
          <target state="translated">该方法将每个<ph id="ph1">&lt;xref:System.Object&gt;</ph>自变量为其字符串表示形式，通过调用其<bpt id="p1">**</bpt>ToString(IFormatProvider)<ept id="p1">**</ept>方法，或者，如果相应对象的格式项包含一个格式字符串，通过调用其<bpt id="p2">**</bpt>ToString(String,IFormatProvider)<ept id="p2">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>If these methods don't exist, it calls the object's parameterless <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method.</source>
          <target state="translated">如果这些方法不存在，则会调用对象的无参数<bpt id="p1">**</bpt>ToString<ept id="p1">**</ept>方法。</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" uid="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
          <source>The index of a format item is less than zero, or greater than two.</source>
          <target state="translated">格式项的索引小于零，或者大于二。</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" uid="M:System.String.GetEnumerator">
          <source>Retrieves an object that can iterate through the individual characters in this string.</source>
          <target state="translated">检索一个可以循环访问此字符串中的每个字符的对象。</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" uid="M:System.String.GetEnumerator">
          <source>An enumerator object.</source>
          <target state="translated">枚举器对象。</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetEnumerator">
          <source>Rather than calling the <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method to retrieve a <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).</source>
          <target state="translated">而不是调用<ph id="ph1">&lt;xref:System.String.GetEnumerator%2A&gt;</ph>方法来检索<ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>对象，然后使用将枚举一个字符串，则应改用所用语言的迭代构造 (在 C# 中，在 C + + /cli CLR，并在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetEnumerator">
          <source><bpt id="p1">[</bpt>foreach<ept id="p1">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept> in C#,                  <bpt id="p2">[</bpt>for each<ept id="p2">](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79)</ept> in C++/CLR, and                  <bpt id="p3">[</bpt>For Each<ept id="p3">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> in Visual Basic).</source>
          <target state="translated"><bpt id="p1">[</bpt>foreach<ept id="p1">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept>在 C# 中，<bpt id="p2">[</bpt>每个<ept id="p2">](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79)</ept>在 C + + /cli CLR，和<bpt id="p3">[</bpt>每个<ept id="p3">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetEnumerator">
          <source>This method enables you to iterate the individual characters in a string.</source>
          <target state="translated">此方法可以循环访问字符串中的每个字符。</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetEnumerator">
          <source>For example, the Visual Basic <ph id="ph1">`For Each`</ph> and C# <ph id="ph2">`foreach`</ph> statements invoke this method to return a <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> object that can provide read-only access to the characters in this string instance.</source>
          <target state="translated">例如，Visual Basic<ph id="ph1">`For Each`</ph>和 C#<ph id="ph2">`foreach`</ph>语句调用此方法以返回<ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph>可以提供对此字符串实例中的字符的只读访问的对象。</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetEnumerator">
          <source>The following example iterates the characters in several strings and displays information about their individual characters.</source>
          <target state="translated">下面的示例循环中多个字符串的字符，并显示其各个字符有关的信息。</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetEnumerator">
          <source>It uses the language iteration construct rather than a call to the <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">它使用的语言迭代构造而不是调用<ph id="ph1">&lt;xref:System.String.GetEnumerator%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.String.GetHashCode">
          <source>Returns the hash code for this string.</source>
          <target state="translated">返回该字符串的哈希代码。</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.String.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位有符号整数哈希代码。</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>The behavior of <ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph> is dependent on its implementation, which might change from one version of the common language runtime to another.</source>
          <target state="translated">行为<ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph>依赖于其实现中，这可能从一个版本的公共语言运行时更改到另一个。</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>A reason why this might happen is to improve the performance of <ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph>.</source>
          <target state="translated">这种情况的原因是提高的性能<ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>If two string objects are equal, the <ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph> method returns identical values.</source>
          <target state="translated">如果两个字符串对象是否相等，<ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph>方法返回相同的值。</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>However, there is not a unique hash code value for each unique string value.</source>
          <target state="translated">但是，有不为每个唯一字符串值是唯一的哈希代码值。</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Different strings can return the same hash code.</source>
          <target state="translated">不同的字符串可以返回相同的哈希代码。</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>The hash code itself is not guaranteed to be stable.</source>
          <target state="translated">哈希代码本身不被保证保持不变。</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework.</source>
          <target state="translated">跨版本的.NET Framework 和跨平台 （例如 32 位和 64 位） 的单个版本的.NET framework，可以与不同相同字符串的哈希代码。</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>In some cases, they can even differ by application domain.</source>
          <target state="translated">在某些情况下，它们可以甚至不同由应用程序域。</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>This implies two subsequent runs of the same program may return different hash codes.</source>
          <target state="translated">这意味着两个后续运行相同的程序可能会返回不同的哈希代码。</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</source>
          <target state="translated">因此，哈希代码应永远不会使用在其中创建了它们，应用程序域之外客户应永远不会使用作为集合中的键字段，并应永远不会保留它们。</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Finally, don't use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</source>
          <target state="translated">最后，不要将使用而不是返回的加密哈希函数，如果你需要加密型强哈希值的哈希代码。</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>For cryptographic hashes, use a class derived from the <ph id="ph1">&lt;xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">对于加密哈希，使用派生自的类<ph id="ph1">&lt;xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>For more information about hash codes, see <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关哈希代码的详细信息，请参阅<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>In desktop apps, you can use the             <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>UseRandomizedStringHashAlgorithm&gt; element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept> to generate unique hash codes on a per application domain basis.</source>
          <target state="translated">在桌面应用，你可以使用<bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>UseRandomizedStringHashAlgorithm &gt; 元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>上生成唯一哈希代码按应用程序域。</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</source>
          <target state="translated">这可以减少冲突数量，并改进的插入和使用哈希表查找的总体性能。</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>The following example shows how to use the                <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>UseRandomizedStringHashAlgorithm&gt; element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
          <target state="translated">下面的示例演示如何使用<bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>UseRandomizedStringHashAlgorithm &gt; 元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>It defines a  to generate unique hash codes on a per application domain basis.</source>
          <target state="translated">它定义为在生成唯一哈希代码按应用程序域。</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</source>
          <target state="translated">这可以减少冲突数量，并改进的插入和使用哈希表查找的总体性能。</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>The following example shows how to use the .</source>
          <target state="translated">下面的示例演示如何使用。</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>It defines a <ph id="ph1">`DisplayString`</ph> class that includes a private string constant, <ph id="ph2">`s`</ph>, whose value is "This is a string."</source>
          <target state="translated">它定义<ph id="ph1">`DisplayString`</ph>类，包含私有字符串常量， <ph id="ph2">`s`</ph>，其值是"这是一个字符串。"</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>It also includes a <ph id="ph1">`ShowStringHashCode`</ph> method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</source>
          <target state="translated">它还包括显示字符串值及其哈希代码的 <ph id="ph1">`ShowStringHashCode`</ph> 方法以及该方法在其中执行的应用程序域的名称。</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>When you run the example without supplying a configuration file, it displays output similar to the following.</source>
          <target state="translated">当您在未提供配置文件的情况下运行该示例时，它会显示类似下面的输出。</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Note that the hash codes for the string are identical in the two application domains.</source>
          <target state="translated">请注意，字符串的散列码在两个应用程序域中是相同的。</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.</source>
          <target state="translated">但是，如果将以下配置文件添加到示例目录，然后运行该示例，则同一个字符串的哈希代码将通过应用程序域进行区分。</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>When the configuration file is present, the example displays the following output:</source>
          <target state="translated">存在配置文件时，示例会显示以下输出：</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.</source>
          <target state="translated">哈希代码用于插入和有效地从哈希表中检索键控的对象。</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>However, hash codes don't uniquely identify strings.</source>
          <target state="translated">但是，哈希代码不唯一地标识字符串。</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.</source>
          <target state="translated">相同的字符串具有相等的哈希代码，但公共语言运行时还可以为不同的字符串分配相同的哈希代码。</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain.</source>
          <target state="translated">此外，哈希代码而异的.NET framework 的版本、 中的单个版本平台以及应用程序域。</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</source>
          <target state="translated">因此，不应序列化，或保留哈希代码值，也不应使用它们作为哈希表或字典中的键。</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>For additional information about the use of hash codes and the <ph id="ph1">`GetHashCode`</ph> method, see <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关使用哈希代码的其他信息和<ph id="ph1">`GetHashCode`</ph>方法，请参阅<ph id="ph2">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph> method using various input strings.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.GetHashCode%2A&gt;</ph>方法使用各种输入字符串。</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>The value returned by <ph id="ph1">&lt;see cref="M:System.String.GetHashCode" /&gt;</ph> is platform-dependent.</source>
          <target state="translated">返回的值<ph id="ph1">&lt;see cref="M:System.String.GetHashCode" /&gt;</ph>是与平台相关。</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>It differs on the 32-bit and 64-bit versions of the .NET Framework.</source>
          <target state="translated">它不同于.NET Framework 的 32 位和 64 位版本不同。</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetHashCode">
          <source>It also can differ between versions of the .NET Framework.</source>
          <target state="translated">它还可以与不同，.NET Framework 各版本之间。</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" uid="M:System.String.GetTypeCode">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> for class <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">返回类 <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" uid="M:System.String.GetTypeCode">
          <source>The enumerated constant, <ph id="ph1">&lt;see cref="F:System.TypeCode.String" /&gt;</ph>.</source>
          <target state="translated">枚举常数 <ph id="ph1">&lt;see cref="F:System.TypeCode.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.GetTypeCode">
          <source>The following example displays the <ph id="ph1">&lt;xref:System.TypeCode&gt;</ph> enumerated constant for the <ph id="ph2">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">下面的示例显示<ph id="ph1">&lt;xref:System.TypeCode&gt;</ph>枚举的常量<ph id="ph2">&lt;xref:System.String&gt;</ph>类型。</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance.</source>
          <target state="translated">报告指定 Unicode 字符或字符串在此实例中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>The method returns -1 if the character or string is not found in this instance.</source>
          <target state="translated">如果未在此实例中找到该字符或字符串，则此方法返回 -1。</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char)">
          <source>A Unicode character to seek.</source>
          <target state="translated">要查找的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char)">
          <source>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</source>
          <target state="translated">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that character is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的索引位置；如果未找到，则为 -1。</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char)">
          <source>The following example demonstrates how you can search a <ph id="ph1">&lt;xref:System.String&gt;</ph> for a character using the <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示如何搜索<ph id="ph1">&lt;xref:System.String&gt;</ph>字符使用<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String)">
          <source>Reports the zero-based index of the first occurrence of the specified string in this instance.</source>
          <target state="translated">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的索引位置；如果未找到该字符串，则为 -1。</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is 0.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 0。</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性的） 搜索。</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>The search begins at the first character position of this instance and continues until the last character position.</source>
          <target state="translated">搜索此实例的第一个字符位置开始，将继续，直到最后一个字符位置。</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>In a culture-sensitive search, if <ph id="ph1">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索中，如果 <ph id="ph1">`value`</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>If <ph id="ph1">`value`</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph>方法始终返回 0 （零），以指示当前实例的开头，找到匹配项。</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph>方法用于在两个字符串中找到三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>Only one of the strings contains a soft hyphen.</source>
          <target state="translated">只有一个字符串包含软连字符。</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在每个情况下，因为软连字符是一个可忽略字符，因此结果是相同就像该软连字符不包含在<ph id="ph2">`value`</ph>。</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</source>
          <target state="translated">当搜索时软连字符，该方法将返回 0 （零），以指示它已在该字符串的开头找到了匹配项。</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>The following example searches for the "n" in "animal".</source>
          <target state="translated">下面的示例中搜索"动物"中的"n"。</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>Because string indexes begin at zero rather than one, the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method indicates that the "n" is at position 1.</source>
          <target state="translated">因为字符串索引开始，以零，而不是一个<ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph>方法指示的"n"是否在位置 1。</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to determine the starting position of an animal name in a sentence.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法来确定动物的名称的句子中的起始位置。</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>It then uses this position to insert an adjective that describes the animal into the sentence.</source>
          <target state="translated">它然后使用此位置插入一个句子描述动物的形容词。</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String)">
          <source>To find the first index of a substring within a string instance by using the comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">`comparisonType`</ph> parameter.</source>
          <target state="translated">若要查找的字符串实例内的子字符串的第一个索引通过使用当前区域性的比较规则，请调用<ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">`comparisonType`</ph>参数。</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>A Unicode character to seek.</source>
          <target state="translated">要查找的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</source>
          <target state="translated">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>The search starts at a specified character position.</source>
          <target state="translated">该搜索从指定字符位置开始。</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> from the start of the string if that character is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符，则为从字符串的起始位置开始的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 从零开始的索引位置；否则为 -1。</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>Index numbering starts from 0.</source>
          <target state="translated">索引号从 0 开始。</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 参数可以介于 0 到字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>If <ph id="ph1">`startIndex`</ph> equals the length of the string instance, the method returns -1.</source>
          <target state="translated">如果<ph id="ph1">`startIndex`</ph>等于字符串实例的长度，则该方法返回-1。</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>The search ranges from <ph id="ph1">`startIndex`</ph> to the end of the string.</source>
          <target state="translated">搜索范围为从<ph id="ph1">`startIndex`</ph>到字符串的末尾。</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than 0 (zero) or greater than the length of the string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于字符串的长度。</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>Reports the zero-based index of the first occurrence of the specified string in this instance.</source>
          <target state="translated">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The search starts at a specified character position.</source>
          <target state="translated">该搜索从指定字符位置开始。</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> from the start of the current instance if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的索引位置；否则为 -1。</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>Index numbering starts from 0.</source>
          <target state="translated">索引号从 0 开始。</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 参数可以介于 0 到字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>If <ph id="ph1">`startIndex`</ph> equals the length of the string instance, the method returns -1.</source>
          <target state="translated">如果<ph id="ph1">`startIndex`</ph>等于字符串实例的长度，则该方法返回-1。</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性的） 搜索。</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The search begins at the <ph id="ph1">`startIndex`</ph> character position of this instance and continues until the last character position.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>字符的此实例的位置，并将继续，直到最后一个字符位置。</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>In a culture-sensitive search, if <ph id="ph1">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索中，如果 <ph id="ph1">`value`</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method always returns <ph id="ph3">`startIndex`</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29&gt;</ph>方法始终返回<ph id="ph3">`startIndex`</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29&gt;</ph>方法用于查找软连字符 (U + 00AD) 后跟"m"两个字符串中的位置。</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>Only one of the strings contains the required substring.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引。</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</source>
          <target state="translated">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>The following example searches for all occurrences of a specified string within a target string.</source>
          <target state="translated">下面的示例搜索指定字符串在目标字符串的所有匹配项。</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than 0 (zero) or greater than the length of this string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于此字符串的长度。</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32)">
          <source>To find the first index of a substring that occurs after a particular character position by using the comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">`comparisonType`</ph> parameter.</source>
          <target state="translated">若要使用当前区域性的比较规则，将出现一个子字符串的第一个索引查找后的特定字符位置上，请调用<ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">`comparisonType`</ph>参数。</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the search.</source>
          <target state="translated">指定搜索规则的枚举值之一。</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>Reports the zero-based index of the first occurrence of the specified string in the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">报告指定的字符串在当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>A parameter specifies the type of search to use for the specified string.</source>
          <target state="translated">一个参数指定要用于指定字符串的搜索类型。</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>The index position of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数的索引位置；如果未找到该字符串，则为 -1。</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is 0.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 0。</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter specifies to search for the <ph id="ph2">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指定要搜索<ph id="ph2">`value`</ph>参数使用当前或固定区域性、 使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>The following exampledemonstrates three overloads of the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method that find the first occurrence of a string within another string using different values of the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">以下 exampledemonstrates 三个重载的<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>查找中使用的不同值的另一个字符串的字符串的第一个匹配项的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>In a culture-sensitive search (that is, if <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>), if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索 (即，如果 <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>) 中，如果 <ph id="ph4">&lt;paramref name="value" /&gt;</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /&gt;</ph> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;paramref name="value" /&gt;</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /&gt;</ph>方法始终返回 0 （零），以指示当前实例的开头，找到匹配项。</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>In the following example, the <ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /&gt;</ph> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /&gt;</ph>方法用于在两个字符串中找到三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>Only one of the strings contains a soft hyphen.</source>
          <target state="translated">只有一个字符串包含软连字符。</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，因为软连字符是一个可忽略字符，则区分区域性的搜索返回的相同值，它将返回如果软连字符中不包含搜索字符串。</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.StringComparison)">
          <source>An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</source>
          <target state="translated">序号搜索，但是，已成功在一个字符串中查找软连字符，并报告其不存在从第二个字符串。</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>A Unicode character to seek.</source>
          <target state="translated">要查找的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>Reports the zero-based index of the first occurrence of the specified character in this instance.</source>
          <target state="translated">报告指定字符在此实例中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The search starts at a specified character position and examines a specified number of character positions.</source>
          <target state="translated">搜索从指定字符位置开始，并检查指定数量的字符位置。</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> from the start of the string if that character is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符，则为从字符串的起始位置开始的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 从零开始的索引位置；否则为 -1。</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The search begins at <ph id="ph1">`startIndex`</ph> and continues to <ph id="ph2">`startIndex`</ph><ph id="ph3"> + </ph><ph id="ph4">`count`</ph> -1.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>，而且以后继续<ph id="ph2">`startIndex`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`count`</ph> -1。</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The character at <ph id="ph1">`startIndex`</ph><ph id="ph2"> + </ph><ph id="ph3">`count`</ph> is not included in the search.</source>
          <target state="translated">处的字符<ph id="ph1">`startIndex`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`count`</ph>不包括在搜索中。</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>Index numbering starts from 0 (zero).</source>
          <target state="translated">索引号从 0 （零） 开始。</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 参数可以介于 0 到字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> or <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than the length of this string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 大于此字符串的长度。</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the length of this string minus <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于此字符串的长度减 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>Reports the zero-based index of the first occurrence of the specified string in this instance.</source>
          <target state="translated">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The search starts at a specified character position and examines a specified number of character positions.</source>
          <target state="translated">搜索从指定字符位置开始，并检查指定数量的字符位置。</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> from the start of the current instance if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的索引位置；否则为 -1。</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>Index numbering starts from 0 (zero).</source>
          <target state="translated">索引号从 0 （零） 开始。</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 参数可以介于 0 到字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性的） 搜索。</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The search begins at <ph id="ph1">`startIndex`</ph> and continues to <ph id="ph2">`startIndex`</ph><ph id="ph3"> + </ph><ph id="ph4">`count`</ph> -1.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>，而且以后继续<ph id="ph2">`startIndex`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`count`</ph> -1。</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The character at <ph id="ph1">`startIndex`</ph><ph id="ph2"> + </ph><ph id="ph3">`count`</ph> is not included in the search.</source>
          <target state="translated">处的字符<ph id="ph1">`startIndex`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`count`</ph>不包括在搜索中。</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>In a culture-sensitive search, if <ph id="ph1">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索中，如果 <ph id="ph1">`value`</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method always returns <ph id="ph3">`startIndex`</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>方法始终返回<ph id="ph3">`startIndex`</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>方法用于查找软连字符 (U + 00AD) 后跟"m"中第三到两个字符串中的第六个字符位置开始的位置。</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>Only one of the strings contains the required substring.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引执行区分区域性的比较时。</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</source>
          <target state="translated">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>The following example finds the index of all occurrences of the string "he" within a substring of another string.</source>
          <target state="translated">下面的示例查找字符串的所有匹配项的索引"he"的另一个字符串的子字符串中。</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>Note that the number of characters to be searched must be recalculated for each search iteration.</source>
          <target state="translated">请注意，要搜索的字符数必须为每个搜索迭代重新计算。</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> or <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than the length of this string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 大于此字符串的长度。</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the length of this string minus <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于此字符串的长度减 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
          <source>To use the comparison rules of the current culture to perform this operation, call the <ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">`comparisonType`</ph> parameter.</source>
          <target state="translated">若要使用当前区域性的比较规则执行此操作，请调用<ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">`comparisonType`</ph>参数。</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the search.</source>
          <target state="translated">指定搜索规则的枚举值之一。</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Reports the zero-based index of the first occurrence of the specified string in the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">报告指定的字符串在当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Parameters specify the starting search position in the current string and the type of search to use for the specified string.</source>
          <target state="translated">参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The zero-based index position of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter from the start of the current instance if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数索引位置；否则为 -1。</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Index numbering starts from 0.</source>
          <target state="translated">索引号从 0 开始。</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 参数可以介于 0 到字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">`startIndex`</ph> equals the length of the string instance, the method returns -1.</source>
          <target state="translated">如果<ph id="ph1">`startIndex`</ph>等于字符串实例的长度，则该方法返回-1。</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter specifies to search for the <ph id="ph2">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指定要搜索<ph id="ph2">`value`</ph>参数使用当前或固定区域性、 使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The following exampledemonstrates three overloads of the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method that find the first occurrence of a string within another string using different values of the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">以下 exampledemonstrates 三个重载的<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>查找中使用的不同值的另一个字符串的字符串的第一个匹配项的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than 0 (zero) or greater than the length of this string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于此字符串的长度。</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>In a culture-sensitive search (that is, if <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>), if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索 (即，如果 <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>) 中，如果 <ph id="ph4">&lt;paramref name="value" /&gt;</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph> method always returns <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">&lt;paramref name="value" /&gt;</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph>方法始终返回<ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>In the following example, the <ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph>方法用于查找软连字符 (U + 00AD) 后跟"m"从两个字符串中的第三个字符位置开始的位置。</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Only one of the strings contains the required substring.If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引执行区分区域性的比较时。</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</source>
          <target state="translated">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</source>
          <target state="translated">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the search.</source>
          <target state="translated">指定搜索规则的枚举值之一。</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Reports the zero-based index of the first occurrence of the specified string in the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">报告指定的字符串在当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中的第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</source>
          <target state="translated">参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The zero-based index position of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter from the start of the current instance if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数索引位置；否则为 -1。</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Index numbering starts from 0 (zero).</source>
          <target state="translated">索引号从 0 （零） 开始。</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph> 参数可以介于 0 到字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The search begins at <ph id="ph1">`startIndex`</ph> and continues to <ph id="ph2">`startIndex`</ph><ph id="ph3"> + </ph><ph id="ph4">`count`</ph> -1.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>，而且以后继续<ph id="ph2">`startIndex`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`count`</ph> -1。</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The character at <ph id="ph1">`startIndex`</ph><ph id="ph2"> + </ph><ph id="ph3">`count`</ph> is not included in the search.</source>
          <target state="translated">处的字符<ph id="ph1">`startIndex`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`count`</ph>不包括在搜索中。</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter specifies to search for the <ph id="ph2">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指定要搜索<ph id="ph2">`value`</ph>参数使用当前或固定区域性、 使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The following exampledemonstrates three overloads of the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method that find the first occurrence of a string within another string using different values of the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">以下 exampledemonstrates 三个重载的<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>查找中使用的不同值的另一个字符串的字符串的第一个匹配项的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> or <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than the length of this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 大于此实例的长度。</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the length of this string minus <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于此字符串的长度减 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>In a culture-sensitive search (that is, if <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>), if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索 (即，如果 <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>) 中，如果 <ph id="ph4">&lt;paramref name="value" /&gt;</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method always returns <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">&lt;paramref name="value" /&gt;</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法始终返回<ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>In the following example, the <ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法用于查找软连字符 (U + 00AD) 后跟"m"中第三到两个字符串中的第六个字符位置开始的位置。</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Only one of the strings contains the required substring.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引执行区分区域性的比较时。</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>When it performs an ordinal comparison, however, it finds the substring only in the first string.</source>
          <target state="translated">当它执行序号比较时，但是，它会查找子字符串仅在第一个字符串中。</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</source>
          <target state="translated">请注意，对于第一个字符串，包含软连字符后跟"m"，该方法无法返回该软连字符的索引，但执行区分区域性的比较时，而是返回"m"的索引。</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</source>
          <target state="translated">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</source>
          <target state="translated">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的索引。</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>The method returns -1 if the characters in the array are not found in this instance.</source>
          <target state="translated">如果未在此实例中找到数组中的字符，则此方法返回 -1。</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>A Unicode character array containing one or more characters to seek.</source>
          <target state="translated">Unicode 字符数组，包含一个或多个要查找的字符。</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</source>
          <target state="translated">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>The zero-based index position of the first occurrence in this instance where any character in <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> was found; -1 if no character in <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> was found.</source>
          <target state="translated">在此实例中第一次找到 <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 中的任意字符的索引位置（从零开始）；如果未找到 <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> 中的字符，则为 -1。</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>The search for <ph id="ph1">`anyOf`</ph> is case-sensitive.</source>
          <target state="translated">搜索<ph id="ph1">`anyOf`</ph>区分大小写。</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>If <ph id="ph1">`anyOf`</ph> is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</source>
          <target state="translated">如果<ph id="ph1">`anyOf`</ph>为空数组，该字符串的开头匹配方法找到 （即，位于索引零）。</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[])">
          <source>The following example finds the first vowel in a string.</source>
          <target state="translated">下面的示例查找字符串中的第一个元音标记。</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[])">
          <source><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>A Unicode character array containing one or more characters to seek.</source>
          <target state="translated">Unicode 字符数组，包含一个或多个要查找的字符。</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</source>
          <target state="translated">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The search starts at a specified character position.</source>
          <target state="translated">该搜索从指定字符位置开始。</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The zero-based index position of the first occurrence in this instance where any character in <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> was found; -1 if no character in <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> was found.</source>
          <target state="translated">在此实例中第一次找到 <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 中的任意字符的索引位置（从零开始）；如果未找到 <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> 中的字符，则为 -1。</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to one less than the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph>参数可以介于 0 到字符串实例的长度减一。</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The search ranges from <ph id="ph1">`startIndex`</ph> to the end of the string.</source>
          <target state="translated">搜索范围为从<ph id="ph1">`startIndex`</ph>到字符串的末尾。</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The search for <ph id="ph1">`anyOf`</ph> is case-sensitive.</source>
          <target state="translated">搜索<ph id="ph1">`anyOf`</ph>区分大小写。</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>The following example finds the index of the occurrence of any character of the string "is" within a substring of another string.</source>
          <target state="translated">下面的示例查找任何字符的字符串匹配项的索引"is"的另一个字符串的子字符串中。</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than the number of characters in this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 大于此实例中的字符数。</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>A Unicode character array containing one or more characters to seek.</source>
          <target state="translated">Unicode 字符数组，包含一个或多个要查找的字符。</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</source>
          <target state="translated">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search starts at a specified character position and examines a specified number of character positions.</source>
          <target state="translated">搜索从指定字符位置开始，并检查指定数量的字符位置。</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The zero-based index position of the first occurrence in this instance where any character in <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> was found; -1 if no character in <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> was found.</source>
          <target state="translated">在此实例中第一次找到 <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 中的任意字符的索引位置（从零开始）；如果未找到 <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> 中的字符，则为 -1。</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search begins at <ph id="ph1">`startIndex`</ph> and continues to <ph id="ph2">`startIndex`</ph><ph id="ph3"> + </ph><ph id="ph4">`count`</ph> -1.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>，而且以后继续<ph id="ph2">`startIndex`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`count`</ph> -1。</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The character at <ph id="ph1">`startIndex`</ph><ph id="ph2"> + </ph><ph id="ph3">`count`</ph> is not included in the search.</source>
          <target state="translated">处的字符<ph id="ph1">`startIndex`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`count`</ph>不包括在搜索中。</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter can range from 0 to one less than the length of the string instance.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph>参数可以介于 0 到字符串实例的长度减一。</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search for <ph id="ph1">`anyOf`</ph> is case-sensitive.</source>
          <target state="translated">搜索<ph id="ph1">`anyOf`</ph>区分大小写。</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The following example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</source>
          <target state="translated">下面的示例查找另一个字符串的子字符串中的任何字符的字符串"帮助"中的匹配项的索引。</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> or <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is greater than the number of characters in this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 大于此实例中的字符数。</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>The zero-based index position of the insertion.</source>
          <target state="translated">插入的从零开始的索引位置。</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>The string to insert.</source>
          <target state="translated">要插入的字符串。</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>Returns a new string in which a specified string is inserted at a specified index position in this instance.</source>
          <target state="translated">返回一个新的字符串，在此实例中的指定的索引位置插入指定的字符串。</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>A new string that is equivalent to this instance, but with <ph id="ph1">&lt;paramref name="value" /&gt;</ph> inserted at position <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">与此实例等效的一个新字符串，但在该字符串的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 位置处插入了 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>If <ph id="ph1">`startIndex`</ph> is equal to the length of this instance, <ph id="ph2">`value`</ph> is appended to the end of this instance.</source>
          <target state="translated">如果<ph id="ph1">`startIndex`</ph>是否等于此实例的长度<ph id="ph2">`value`</ph>追加到此实例的末尾。</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>Instead, it returns a new string in which <ph id="ph1">`value`</ph> is inserted into the current instance.</source>
          <target state="translated">相反，它将返回一个新字符串，在其中<ph id="ph1">`value`</ph>插入到当前实例。</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>For example, the return value of <ph id="ph1">`"abc".Insert(2, "XYZ")`</ph> is "abXYZc".</source>
          <target state="translated">例如，返回值的<ph id="ph1">`"abc".Insert(2, "XYZ")`</ph>是"abXYZc"。</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>The following example inserts a space character in the fourth character position (the character at index 3) of a string.</source>
          <target state="translated">下面的示例在一个字符串的第四个字符位置 （索引 3 处的字符） 中插入一个空格字符。</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>The following console application prompts the users to enter one or more adjectives to describe two animals.</source>
          <target state="translated">以下控制台应用程序会提示用户输入一个或多个用于描述两个动物的形容词。</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Insert(System.Int32,System.String)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.String.Insert%2A&gt;</ph> method to insert the text entered by the user into a string.</source>
          <target state="translated">然后，它调用<ph id="ph1">&lt;xref:System.String.Insert%2A&gt;</ph>方法插入到字符串由用户输入的文本。</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" uid="M:System.String.Insert(System.Int32,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.String.Insert(System.Int32,System.String)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is negative or greater than the length of this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 为负，或大于此实例的长度。</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.String.Intern(System.String)">
          <source>A string to search for in the intern pool.</source>
          <target state="translated">要在暂存池中搜索的字符串。</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.String.Intern(System.String)">
          <source>Retrieves the system's reference to the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">检索系统对指定 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的引用。</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.String.Intern(System.String)">
          <source>The system's reference to <ph id="ph1">&lt;paramref name="str" /&gt;</ph>, if it is interned; otherwise, a new reference to a string with the value of <ph id="ph2">&lt;paramref name="str" /&gt;</ph>.</source>
          <target state="translated">如果暂存了 <ph id="ph1">&lt;paramref name="str" /&gt;</ph>，则返回系统对其的引用；否则返回对值为 <ph id="ph2">&lt;paramref name="str" /&gt;</ph> 的字符串的新引用。</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.</source>
          <target state="translated">公共语言运行时维护名为暂存池中，包含对每个声明，或在程序中以编程方式创建的唯一字符串的单个引用的表，从而节约字符串存储区。</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Consequently, an instance of a literal string with a particular value only exists once in the system.</source>
          <target state="translated">因此，具有特定值的文本字符串的实例仅一次系统中存在。</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</source>
          <target state="translated">例如，如果将相同的文本字符串分配给几个变量，则运行时检索对文字字符串的相同引用从暂存池中，并将其分配给每个变量。</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph> method uses the intern pool to search for a string equal to the value of <ph id="ph2">`str`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph>方法使用暂存池中搜索的值相等的字符串<ph id="ph2">`str`</ph>。</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>If such a string exists, its reference in the intern pool is returned.</source>
          <target state="translated">如果存在这样的字符串，则返回它在暂存池中的引用。</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>If the string does not exist, a reference to <ph id="ph1">`str`</ph> is added to the intern pool, then that reference is returned.</source>
          <target state="translated">如果字符串不存在，对引用<ph id="ph1">`str`</ph>添加到暂存池中，则返回该引用。</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>In the following example, the string s1, which has a value of "MyTest", is already interned because it is a literal in the program.</source>
          <target state="translated">在下面的示例中，具有值为"MyTest"，字符串 s1 已经留用，因为它是在程序中的文本。</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph> class generates a new string object that has the same value as s1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph>类生成一个新的字符串对象，具有 s1 相同的值。</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>A reference to that string is assigned to s2.</source>
          <target state="translated">该字符串的引用分配给 s2。</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph> method searches for a string that has the same value as s2.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph>具有相同的值为 s2 的字符串方法搜索。</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Because such a string exists, the method returns the same reference that is assigned to s1.</source>
          <target state="translated">由于存在这样的字符串，该方法将返回分配给 s1 中的同一个引用。</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>That reference is then assigned to s3.</source>
          <target state="translated">然后，该引用被分配给 s3。</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.</source>
          <target state="translated">由于它们引用不同的对象; 因此，引用 s1 和 s2 比较不相等引用 s1 和 s3，比较结果相等，这是因为它们引用的相同的字符串。</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Compare this method to the <ph id="ph1">&lt;xref:System.String.IsInterned%2A&gt;</ph> method.</source>
          <target state="translated">将此方法<ph id="ph1">&lt;xref:System.String.IsInterned%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Version Considerations</source>
          <target state="translated">版本注意事项</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.String.Intern%2A&gt;</ph> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]</ph>、<ph id="ph2">&lt;xref:System.String.Intern%2A&gt;</ph>方法恢复到其行为在.NET Framework 1.0 和 1.1 中的关于暂留空字符串。</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>In the following example, the variable <ph id="ph1">`str1`</ph> is assigned a reference to <ph id="ph2">&lt;xref:System.String.Empty&gt;</ph>, and the variable <ph id="ph3">`str2`</ph> is assigned the reference to <ph id="ph4">&lt;xref:System.String.Empty&gt;</ph> that is returned by calling the <ph id="ph5">&lt;xref:System.String.Intern%2A&gt;</ph> method after converting a <ph id="ph6">&lt;xref:System.Text.StringBuilder&gt;</ph> object whose value is <ph id="ph7">&lt;xref:System.String.Empty&gt;</ph> to a string.</source>
          <target state="translated">在下面的示例中，变量<ph id="ph1">`str1`</ph>分配到的引用<ph id="ph2">&lt;xref:System.String.Empty&gt;</ph>，而变量<ph id="ph3">`str2`</ph>分配到的引用<ph id="ph4">&lt;xref:System.String.Empty&gt;</ph>返回通过调用<ph id="ph5">&lt;xref:System.String.Intern%2A&gt;</ph>方法将转换后的<ph id="ph6">&lt;xref:System.Text.StringBuilder&gt;</ph>对象，其值是<ph id="ph7">&lt;xref:System.String.Empty&gt;</ph>为字符串。</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Then the references contained in <ph id="ph1">`str1`</ph> and <ph id="ph2">`str2`</ph> are compared for equality.</source>
          <target state="translated">然后中包含的参考<ph id="ph1">`str1`</ph>和<ph id="ph2">`str2`</ph>会比较相等性。</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph>, <ph id="ph2">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph>, and <ph id="ph3">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>, <ph id="ph4">`str1`</ph> and <ph id="ph5">`str2`</ph> are equal.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph>， <ph id="ph2">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph>，和<ph id="ph3">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>，<ph id="ph4">`str1`</ph>和<ph id="ph5">`str2`</ph>是否相等。</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)]</ph>, <ph id="ph3">`str1`</ph> and <ph id="ph4">`str2`</ph> are not equal.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>和<ph id="ph2">[!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)]</ph>，<ph id="ph3">`str1`</ph>和<ph id="ph4">`str2`</ph>是否不相等。</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Performance Considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.</source>
          <target state="translated">如果你尝试减少的内存总量你的应用程序分配，请记住，暂留字符串还具有两个不需要的负面影响。</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>First, the memory allocated for interned <ph id="ph1">&lt;xref:System.String&gt;</ph> objects is not likely be released until the common language runtime (CLR) terminates.</source>
          <target state="translated">首先，内存分配的暂留<ph id="ph1">&lt;xref:System.String&gt;</ph>对象之前，不可能将释放公共语言运行时 (CLR) 终止。</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The reason is that the CLR's reference to the interned <ph id="ph1">&lt;xref:System.String&gt;</ph> object can persist after your application, or even your application domain, terminates.</source>
          <target state="translated">原因在于对暂存的 CLR 的引用<ph id="ph1">&lt;xref:System.String&gt;</ph>对象可以保留在你的应用程序或甚至是你的应用程序域后，终止。</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Second, to intern a string, you must first create the string.</source>
          <target state="translated">其次，要留用字符串，必须首先创建字符串。</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The memory used by the <ph id="ph1">&lt;xref:System.String&gt;</ph> object must still be allocated, even though the memory will eventually be garbage collected.</source>
          <target state="translated">使用的内存<ph id="ph1">&lt;xref:System.String&gt;</ph>必须仍然分配对象，即使内存最终将进行垃圾回收。</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The .NET Framework version 2.0 introduces the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType&gt;</ph> enumeration member.</source>
          <target state="translated">.NET Framework 2.0 版引入了<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType&gt;</ph>枚举成员。</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning&gt;</ph> member marks an assembly as not requiring string-literal interning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning&gt;</ph>成员标记为不需要字符串暂留的程序集。</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>You can apply <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning&gt;</ph> to an assembly using the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute&gt;</ph> attribute.</source>
          <target state="translated">你可以将应用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning&gt;</ph>使用程序集<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>Also, when you use the <bpt id="p1">[</bpt>Ngen.exe (Native Image Generator)<ept id="p1">](~/docs/framework/tools/ngen-exe-native-image-generator.md)</ept> to compile an assembly in advance of run time, strings are not interned across modules.</source>
          <target state="translated">此外，当使用<bpt id="p1">[</bpt>Ngen.exe （本机映像生成器）<ept id="p1">](~/docs/framework/tools/ngen-exe-native-image-generator.md)</ept>若要编译的程序集之前运行时，会不暂留字符串多个模块。</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Intern(System.String)">
          <source>The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</source>
          <target state="translated">下面的示例使用三个字符串相等的值以确定是否可以使用新创建的字符串和留用的字符串相等。</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="M:System.String.Intern(System.String)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" uid="M:System.String.IsInterned(System.String)">
          <source>The string to search for in the intern pool.</source>
          <target state="translated">要在暂存池中搜索的字符串。</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.String.IsInterned(System.String)">
          <source>Retrieves a reference to a specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">检索对指定 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的引用。</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.String.IsInterned(System.String)">
          <source>A reference to <ph id="ph1">&lt;paramref name="str" /&gt;</ph> if it is in the common language runtime intern pool; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="str" /&gt;</ph> 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <ph id="ph1">&lt;xref:System.String&gt;</ph> you add programmatically by calling the <ph id="ph2">&lt;xref:System.String.Intern%2A&gt;</ph> method.</source>
          <target state="translated">公共语言运行时自动维护名为暂存池中，其中包含声明在一个程序，以及任何唯一的实例的每个唯一的文字字符串常量的单个实例的表<ph id="ph1">&lt;xref:System.String&gt;</ph>以编程方式添加通过调用<ph id="ph2">&lt;xref:System.String.Intern%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>The intern pool conserves string storage.</source>
          <target state="translated">暂存池中，从而节约字符串存储区。</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <ph id="ph1">&lt;xref:System.String&gt;</ph> that have identical values.</source>
          <target state="translated">如果将文本字符串常量分配给几个变量，设置每个变量为引用的同一暂存池中，而不是引用的几个不同实例中常数<ph id="ph1">&lt;xref:System.String&gt;</ph>具有相同的值。</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>This method looks up <ph id="ph1">`str`</ph> in the intern pool.</source>
          <target state="translated">此方法查找<ph id="ph1">`str`</ph>在暂存池中。</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>If <ph id="ph1">`str`</ph> has already been interned, a reference to that instance is returned; otherwise, <ph id="ph2">`null`</ph> is returned.</source>
          <target state="translated">如果<ph id="ph1">`str`</ph>已经过暂留，则对该实例的引用是返回; 否则为<ph id="ph2">`null`</ph>返回。</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>Compare this method to the <ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph> method.</source>
          <target state="translated">将此方法<ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>This method does not return a Boolean value.</source>
          <target state="translated">此方法不返回一个布尔值。</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.</source>
          <target state="translated">如果因为你希望一个布尔值，该值指示是否暂存特定字符串调用方法，你可以使用类似以下的代码。</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the <bpt id="p1">[</bpt>Ngen.exe (Native Image Generator)<ept id="p1">](~/docs/framework/tools/ngen-exe-native-image-generator.md)</ept> to install an assembly to the native image cache on a local computer.</source>
          <target state="translated">从.NET Framework 2.0 版开始，你可以重写的暂存池中使用当你使用<bpt id="p1">[</bpt>Ngen.exe （本机映像生成器）<ept id="p1">](~/docs/framework/tools/ngen-exe-native-image-generator.md)</ept>将程序集安装到本地计算机上的本机映像缓存。</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>For more information, see Performance Considerations in the Remarks section for the <ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph> property.</source>
          <target state="translated">有关详细信息，请参阅备注部分中的性能注意事项<ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsInterned(System.String)">
          <source>The following example demonstrates that literal strings are interned automatically by the compiler.</source>
          <target state="translated">下面的示例演示文字字符串自动由编译器留用的过程。</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" uid="M:System.String.IsInterned(System.String)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Indicates whether this string is in a particular Unicode normalization form.</source>
          <target state="translated">指示此字符串是否符合特定的 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized">
          <source>Indicates whether this string is in Unicode normalization form C.</source>
          <target state="translated">指示此字符串是否符合 Unicode 范式 C。</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this string is in normalization form C; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此字符串符合范式 C，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</source>
          <target state="translated">某些 Unicode 字符具有多个等效二进制表示形式包含集组合在一起的和/或复合 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</source>
          <target state="translated">搜索、 排序、 匹配和其他操作将增加复杂性存在单个字符的多个表示形式。</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</source>
          <target state="translated">Unicode 标准定义了一个过程调用返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化。</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</source>
          <target state="translated">可以使用几种算法，称为范式，遵循不同的规则，执行规范化。</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>The .NET Framework currently supports normalization forms C, D, KC, and KD.</source>
          <target state="translated">.NET Framework 当前支持 C、 D、 KC 和 KD 的规范化窗体。</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>For a description of supported Unicode normalization forms, see <ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关受支持的 Unicode 范式的说明，请参阅<ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>The following example determines whether a string is successfully normalized to various normalization forms.</source>
          <target state="translated">下面的示例确定一个字符串是否成功规范化为各种范式。</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized">
          <source>The current instance contains invalid Unicode characters.</source>
          <target state="translated">当前实例包含无效的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> as soon as it encounters the first non-normalized character in a string.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>方法返回<ph id="ph2">&lt;see langword="false" /&gt;</ph>只要它遇到第一个非规范化字符串中的字符。</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized">
          <source>Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph> method will throw an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> although <ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> returns <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph>方法会引发<ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>尽管<ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>返回<ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>A Unicode normalization form.</source>
          <target state="translated">一个 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>Indicates whether this string is in the specified Unicode normalization form.</source>
          <target state="translated">指示此字符串是否符合指定的 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this string is in the normalization form specified by the <ph id="ph2">&lt;paramref name="normalizationForm" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此字符串符合由 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数指定的范式，则为 <ph id="ph2">&lt;paramref name="normalizationForm" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</source>
          <target state="translated">某些 Unicode 字符具有多个等效二进制表示形式包含集组合在一起的和/或复合 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</source>
          <target state="translated">搜索、 排序、 匹配和其他操作将增加复杂性存在单个字符的多个表示形式。</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</source>
          <target state="translated">Unicode 标准定义了一个过程调用返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化。</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</source>
          <target state="translated">可以使用几种算法，称为范式，遵循不同的规则，执行规范化。</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>The .NET Framework currently supports normalization forms C, D, KC, and KD.</source>
          <target state="translated">.NET Framework 当前支持 C、 D、 KC 和 KD 的规范化窗体。</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>For a description of supported Unicode normalization forms, see <ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关受支持的 Unicode 范式的说明，请参阅<ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.IsNormalized%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.String.Normalize%2A&gt;</ph> methods.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.IsNormalized%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.String.Normalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>The current instance contains invalid Unicode characters.</source>
          <target state="translated">当前实例包含无效的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> as soon as it encounters the first non-normalized character in a string.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>方法返回<ph id="ph2">&lt;see langword="false" /&gt;</ph>只要它遇到第一个非规范化字符串中的字符。</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNormalized(System.Text.NormalizationForm)">
          <source>Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph> method will throw an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> although <ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> returns <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph>方法会引发<ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>尽管<ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>返回<ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>The string to test.</source>
          <target state="translated">要测试的字符串。</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>Indicates whether the specified string is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or an <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> string.</source>
          <target state="translated">指示指定的字符串是 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 还是 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> 字符串。</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty string (""); otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 参数为 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 或空字符串 ("")，则为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source><ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> is a convenience method that enables you to simultaneously test whether a <ph id="ph2">&lt;xref:System.String&gt;</ph> is <ph id="ph3">`null`</ph> or its value is <ph id="ph4">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> 是一种便利方法，可用于同时测试是否<ph id="ph2">&lt;xref:System.String&gt;</ph>是<ph id="ph3">`null`</ph>或其值为<ph id="ph4">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>It is equivalent to the following code:</source>
          <target state="translated">它等效于以下代码：</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>You can use the <ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> method to test whether a string is <ph id="ph2">`null`</ph>, its value is <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>,  or it consists only of white-space characters.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph>方法来测试字符串是否为<ph id="ph2">`null`</ph>，其值是<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>，或者它仅由空白字符组成。</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>What is a null string?</source>
          <target state="translated">什么是一个 null 字符串？</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>A string is <ph id="ph1">`null`</ph> if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of <ph id="ph2">`null`</ph>.</source>
          <target state="translated">一个字符串是否为<ph id="ph1">`null`</ph>如果它不已分配的值 （以 c + + 和 Visual Basic） 或显式已分配的值<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>Although the <bpt id="p1">[</bpt>composite formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>.</source>
          <target state="translated">尽管<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>功能可以正常处理 null 字符串，如以下示例所示，如果其成员引发尝试调用一个<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>What is an empty string?</source>
          <target state="translated">空字符串是什么？</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>A string is empty if it  is explicitly assigned an empty string ("") or <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">一个字符串为空，如果它显式分配一个空字符串 ("") 或<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>An empty string has a <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> of 0.</source>
          <target state="translated">空字符串具有<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>为 0。</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>The following example creates an empty string and displays its value and its length.</source>
          <target state="translated">下面的示例创建一个空字符串，并显示其值和其长度。</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrEmpty(System.String)">
          <source>The following example examines three strings and determines whether each string has a value, is an empty string, or is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">下面的示例检查三个字符串，并确定每个字符串是否具有一个值，为空字符串，或者是否<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source>The string to test.</source>
          <target state="translated">要测试的字符串。</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source>Indicates whether a specified string is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, empty, or consists only of white-space characters.</source>
          <target state="translated">指示指定的字符串是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>、空还是仅由空白字符组成。</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>, or if <ph id="ph5">&lt;paramref name="value" /&gt;</ph> consists exclusively of white-space characters.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数为 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，或者如果 <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph> 仅由空白字符组成，则为 <ph id="ph5">&lt;paramref name="value" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source><ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> is a convenience method that is similar to the following  code, except that it offers superior performance:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> 是具有类似于下面的代码，只不过它提供优越性能的便捷方法：</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source>White-space characters are defined by the Unicode standard.</source>
          <target state="translated">由 Unicode 标准定义空白字符。</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> method interprets any character that returns a value of <ph id="ph2">`true`</ph> when it is passed to the <ph id="ph3">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method as a white-space character.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph>方法将返回的值的任何字符解释<ph id="ph2">`true`</ph>时传递给<ph id="ph3">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>空白字符的形式的方法。</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.IsNullOrWhiteSpace(System.String)">
          <source>The following example creates a string array, and then passes each element of the array to the <ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例创建一个字符串数组，并随后将传递到的数组的每个元素<ph id="ph1">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Concatenates the elements of a specified array or the members of a collection, using the specified separator between each element or member.</source>
          <target state="translated">连接指定数组的元素或集合的成员，在每个元素或成员之间使用指定的分隔符。</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>The string to use as a separator.<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> is included in the returned string only if <bpt id="p2">&lt;c&gt;</bpt>values<ept id="p2">&lt;/c&gt;</ept> has more than one element.</source>
          <target state="translated">要用作分隔符的字符串。只有在 <bpt id="p2">&lt;c&gt;</bpt>values<ept id="p2">&lt;/c&gt;</ept> 具有多个元素时，<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> 才包括在返回的字符串中。</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>A collection that contains the strings to concatenate.</source>
          <target state="translated">一个包含要串联的字符串的集合。</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>Concatenates the members of a constructed <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> collection of type <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>, using the specified separator between each member.</source>
          <target state="translated">串联类型为 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 构造集合的成员，其中在每个成员之间使用指定的分隔符。</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>A string that consists of the members of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> delimited by the <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> string.</source>
          <target state="translated">一个由 <ph id="ph1">&lt;paramref name="values" /&gt;</ph> 的成员组成的字符串，这些成员以 <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> 字符串分隔。</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>If <ph id="ph1">&lt;paramref name="values" /&gt;</ph> has no members, the method returns <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="values" /&gt;</ph> 没有成员，则该方法返回 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>If <ph id="ph1">`separator`</ph> is <ph id="ph2">`null`</ph>, an empty string (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used instead.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>是<ph id="ph2">`null`</ph>，空字符串 (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) 改为使用。</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>If any member of <ph id="ph1">`values`</ph> is <ph id="ph2">`null`</ph>, an empty string is used instead.</source>
          <target state="translated">如果任何成员的<ph id="ph1">`values`</ph>是<ph id="ph2">`null`</ph>，改为使用一个空字符串。</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> is a convenience method that lets you concatenate each element in an <ph id="ph2">`IEnumerable(Of String)`</ph> collection without first converting the elements to a string array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> 是可以串联中的每个元素的便捷方法<ph id="ph2">`IEnumerable(Of String)`</ph>而无需事先将元素转换为字符串数组的集合。</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>It is particularly useful with Language-Integrated Query (LINQ) query expressions.</source>
          <target state="translated">它是使用语言集成查询 (LINQ) 查询表达式特别有用。</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>The following example passes a <ph id="ph1">`List(Of String)`</ph> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</source>
          <target state="translated">下面的示例传入<ph id="ph1">`List(Of String)`</ph>对象，其中包含为 lambda 表达式选择等于或大于特定字母 （即，在示例中，"M"） 的字母的字母大写或小写字母。</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>The <ph id="ph1">`IEnumerable(Of String)`</ph> collection returned by the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph> method is passed to the <ph id="ph3">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method to display the result as a single string.</source>
          <target state="translated"><ph id="ph1">`IEnumerable(Of String)`</ph>返回集合<ph id="ph2">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph>方法传递给<ph id="ph3">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph>方法来作为单个字符串中显示结果。</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</source>
          <target state="translated">下面的示例使用选筛的埃拉托色尼斯算法来计算小于或等于 100 的质数。</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source>It assigns the result to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object of type <ph id="ph2">&lt;xref:System.String&gt;</ph>, which it then passes to the <ph id="ph3">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method.</source>
          <target state="translated">它将结果赋给<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类型的对象<ph id="ph2">&lt;xref:System.String&gt;</ph>，然后将其传递到<ph id="ph3">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source>The string to use as a separator.</source>
          <target state="translated">要用作分隔符的字符串。</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source><bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> is included in the returned string only if <bpt id="p2">&lt;c&gt;</bpt>values<ept id="p2">&lt;/c&gt;</ept> has more than one element.</source>
          <target state="translated">只有在 <bpt id="p2">&lt;c&gt;</bpt>values<ept id="p2">&lt;/c&gt;</ept> 具有多个元素时，<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> 才包括在返回的字符串中。</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source>An array that contains the elements to concatenate.</source>
          <target state="translated">一个数组，其中包含要连接的元素。</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source>Concatenates the elements of an object array, using the specified separator between each element.</source>
          <target state="translated">串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source>A string that consists of the elements of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> delimited by the <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> string.</source>
          <target state="translated">一个由 <ph id="ph1">&lt;paramref name="values" /&gt;</ph> 的元素组成的字符串，这些元素以 <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> 字符串分隔。</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source>If <ph id="ph1">&lt;paramref name="values" /&gt;</ph> is an empty array, the method returns <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为空数组，该方法将返回 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>If <ph id="ph1">`separator`</ph> is <ph id="ph2">`null`</ph> or if any element of <ph id="ph3">`values`</ph> other than the first element is <ph id="ph4">`null`</ph>, an empty string (<ph id="ph5">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used instead.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>是<ph id="ph2">`null`</ph>或如果的任何元素<ph id="ph3">`values`</ph>以外的第一个元素是<ph id="ph4">`null`</ph>，空字符串 (<ph id="ph5">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) 改为使用。</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>See the Notes for Callers section if the first element of <ph id="ph1">`values`</ph> is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果看到调用方部分的说明的第一个元素<ph id="ph1">`values`</ph>是<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source><ph id="ph1">&lt;xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> 是可以无需显式将其元素转换为字符串串联对象数组中的每个元素的便捷方法。</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>The string representation of each object in the array is derived by calling that object's <ph id="ph1">`ToString`</ph> method.</source>
          <target state="translated">通过调用该对象派生的字符串表示形式数组中每个对象<ph id="ph1">`ToString`</ph>方法。</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</source>
          <target state="translated">下面的示例使用选筛的埃拉托色尼斯算法来计算小于或等于 100 的质数。</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>It assigns the result to a integer array, which it then passes to the <ph id="ph1">&lt;xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> method.</source>
          <target state="translated">它将结果赋给整数数组，然后将其传递到<ph id="ph1">&lt;xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>If the first element of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the <ph id="ph3">&lt;see cref="M:System.String.Join(System.String,System.Object[])" /&gt;</ph> method does not concatenate the elements in <ph id="ph4">&lt;paramref name="values" /&gt;</ph> but instead returns <ph id="ph5">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果第一个元素的<ph id="ph1">&lt;paramref name="values" /&gt;</ph>是<ph id="ph2">&lt;see langword="null" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.String.Join(System.String,System.Object[])" /&gt;</ph>方法不串联中的元素<ph id="ph4">&lt;paramref name="values" /&gt;</ph>而是返回<ph id="ph5">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>A number of workarounds for this issue are available.</source>
          <target state="translated">有多种解决此问题的方法都是可用的。</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.Object[])">
          <source>The easiest is to assign a value of <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> to the first element of the array, as the following example shows.</source>
          <target state="translated">最简单的方法是将的值分配<ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>数组的第一个元素，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source>The string to use as a separator.</source>
          <target state="translated">要用作分隔符的字符串。</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source><bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> is included in the returned string only if <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept> has more than one element.</source>
          <target state="translated">只有在 <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept> 具有多个元素时，<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> 才包括在返回的字符串中。</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source>An array that contains the elements to concatenate.</source>
          <target state="translated">一个数组，其中包含要连接的元素。</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source>Concatenates all the elements of a string array, using the specified separator between each element.</source>
          <target state="translated">串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source>A string that consists of the elements in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> delimited by the <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> string.</source>
          <target state="translated">一个由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 中的元素组成的字符串，这些元素以 <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> 字符串分隔。</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an empty array, the method returns <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为空数组，该方法将返回 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[])">
          <source>For example, if <ph id="ph1">`separator`</ph> is ", " and the elements of <ph id="ph2">`value`</ph> are "apple", "orange", "grape", and "pear", <ph id="ph3">`Join(separator, value)`</ph> returns "apple, orange, grape, pear".</source>
          <target state="translated">例如，如果<ph id="ph1">`separator`</ph>是"，"和的元素<ph id="ph2">`value`</ph>是"apple"、"橙色"、"grape"和"pear"<ph id="ph3">`Join(separator, value)`</ph>返回"apple、 橙色、 grape、 pear"。</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[])">
          <source>If <ph id="ph1">`separator`</ph> is <ph id="ph2">`null`</ph>, an empty string (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used instead.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>是<ph id="ph2">`null`</ph>，空字符串 (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) 改为使用。</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[])">
          <source>If any element in <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, an empty string is used instead.</source>
          <target state="translated">如果中的任意元素<ph id="ph1">`value`</ph>是<ph id="ph2">`null`</ph>，改为使用一个空字符串。</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[])">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Join%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Join%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>The string to use as a separator.</source>
          <target state="translated">要用作分隔符的字符串。</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> is included in the returned string only if <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept> has more than one element.</source>
          <target state="translated">只有在 <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept> 具有多个元素时，<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> 才包括在返回的字符串中。</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>An array that contains the elements to concatenate.</source>
          <target state="translated">一个数组，其中包含要连接的元素。</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>The first element in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to use.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 中要使用的第一个元素。</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to use.</source>
          <target state="translated">要使用的 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 的元素数。</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>Concatenates the specified elements of a string array, using the specified separator between each element.</source>
          <target state="translated">串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>A string that consists of the strings in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> delimited by the <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> string.</source>
          <target state="translated">由 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 中的字符串组成的字符串，这些字符串以 <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> 字符串分隔。</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is zero, <ph id="ph3">&lt;paramref name="value" /&gt;</ph> has no elements, or <ph id="ph4">&lt;paramref name="separator" /&gt;</ph> and all the elements of <ph id="ph5">&lt;paramref name="value" /&gt;</ph> are <ph id="ph6">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> 为零，<ph id="ph2">&lt;paramref name="count" /&gt;</ph> 没有元素，或 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 以及 <ph id="ph4">&lt;paramref name="separator" /&gt;</ph> 的全部元素均为 <ph id="ph5">&lt;paramref name="value" /&gt;</ph>，则为 <ph id="ph6">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>For example, if <ph id="ph1">`separator`</ph> is ", " and the elements of <ph id="ph2">`value`</ph> are "apple", "orange", "grape", and "pear", <ph id="ph3">`Join(separator, value, 1, 2)`</ph> returns "orange, grape".</source>
          <target state="translated">例如，如果<ph id="ph1">`separator`</ph>是"，"和的元素<ph id="ph2">`value`</ph>是"apple"、"橙色"、"grape"和"pear"<ph id="ph3">`Join(separator, value, 1, 2)`</ph>返回"橙色，grape"。</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>If <ph id="ph1">`separator`</ph> is <ph id="ph2">`null`</ph>, an empty string (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used instead.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>是<ph id="ph2">`null`</ph>，空字符串 (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) 改为使用。</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>If any element in <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, an empty string is used instead.</source>
          <target state="translated">如果中的任意元素<ph id="ph1">`value`</ph>是<ph id="ph2">`null`</ph>，改为使用一个空字符串。</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>The following example concatenates two elements from an array of names of fruit.</source>
          <target state="translated">下面的示例连接水果的生长名称的数组中的两个元素。</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than the number of elements in <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 加上 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 大于 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 中的元素数。</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" uid="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
          <source>Out of memory.</source>
          <target state="translated">内存不足。</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the members of <bpt id="p1">&lt;c&gt;</bpt>values<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">成员的类型<bpt id="p1">&lt;c&gt;</bpt>值<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>The string to use as a separator.<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> is included in the returned string only if <bpt id="p2">&lt;c&gt;</bpt>values<ept id="p2">&lt;/c&gt;</ept> has more than one element.</source>
          <target state="translated">要用作分隔符的字符串。只有在 <bpt id="p2">&lt;c&gt;</bpt>values<ept id="p2">&lt;/c&gt;</ept> 具有多个元素时，<bpt id="p1">&lt;c&gt;</bpt>separator<ept id="p1">&lt;/c&gt;</ept> 才包括在返回的字符串中。</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>A collection that contains the objects to concatenate.</source>
          <target state="translated">一个包含要串联的对象的集合。</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates the members of a collection, using the specified separator between each member.</source>
          <target state="translated">串联集合的成员，其中在每个成员之间使用指定的分隔符。</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>A string that consists of the members of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> delimited by the <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> string.</source>
          <target state="translated">一个由 <ph id="ph1">&lt;paramref name="values" /&gt;</ph> 的成员组成的字符串，这些成员以 <ph id="ph2">&lt;paramref name="separator" /&gt;</ph> 字符串分隔。</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">&lt;paramref name="values" /&gt;</ph> has no members, the method returns <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="values" /&gt;</ph> 没有成员，则该方法返回 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`separator`</ph> is <ph id="ph2">`null`</ph>, an empty string (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used instead.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>是<ph id="ph2">`null`</ph>，空字符串 (<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) 改为使用。</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>If any member of <ph id="ph1">`values`</ph> is <ph id="ph2">`null`</ph>, an empty string is used instead.</source>
          <target state="translated">如果任何成员的<ph id="ph1">`values`</ph>是<ph id="ph2">`null`</ph>，改为使用一个空字符串。</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> is a convenience method that lets you concatenate each member of an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection without first converting them to strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> 是可以串联的每个成员的便捷方法<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>而无需事先将它们转换为字符串的集合。</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>The string representation of each object in the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection is derived by calling that object's <ph id="ph2">`ToString`</ph> method.</source>
          <target state="translated">字符串表示形式中每个对象<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>通过调用该对象的派生集合<ph id="ph2">`ToString`</ph>方法。</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>This method is particular useful with Language-Integrated Query (LINQ) query expressions.</source>
          <target state="translated">此方法是特定语言集成查询 (LINQ) 查询表达式有用。</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>For example, the following code defines a very simple <ph id="ph1">`Animal`</ph> class that contains the name of an animal and the order to which it belongs.</source>
          <target state="translated">例如，下面的代码定义一个非常简单<ph id="ph1">`Animal`</ph>类，其中包含的填充动物和它所属于的顺序的名称。</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>It then defines a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object that contains a number of <ph id="ph2">`Animal`</ph> objects.</source>
          <target state="translated">然后，它定义<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>对象，其中包含大量的<ph id="ph2">`Animal`</ph>对象。</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph> extension method is called to extract the <ph id="ph2">`Animal`</ph> objects whose <ph id="ph3">`Order`</ph> property equals "Rodent".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType&gt;</ph>调用扩展方法来提取<ph id="ph2">`Animal`</ph>对象其<ph id="ph3">`Order`</ph>属性等于"Rodent"。</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>The result is passed to the <ph id="ph1">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method.</source>
          <target state="translated">结果传递到<ph id="ph1">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</source>
          <target state="translated">下面的示例使用选筛的埃拉托色尼斯算法来计算小于或等于 100 的质数。</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source>It assigns the result to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object of type integer, which it then passes to the <ph id="ph2">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method.</source>
          <target state="translated">它将结果赋给<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>对象的整数类型，然后将其传递到<ph id="ph2">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" uid="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.</source>
          <target state="translated">报告指定 Unicode 字符或字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>The method returns -1 if the character or string is not found in this instance.</source>
          <target state="translated">如果未在此实例中找到该字符或字符串，则此方法返回 -1。</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char)">
          <source>The Unicode character to seek.</source>
          <target state="translated">要查找的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char)">
          <source>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</source>
          <target state="translated">报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that character is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的索引位置；如果未找到，则为 -1。</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either <ph id="ph1">`value`</ph> is found or the first character position has been examined.</source>
          <target state="translated">此方法开始搜索此实例的最后一个字符位置和其后面直到开头<ph id="ph1">`value`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>The search is case-sensitive.</source>
          <target state="translated">搜索不区分大小写。</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>The following example defines an <ph id="ph1">`ExtractFilename`</ph> method that uses the <ph id="ph2">&lt;xref:System.String.LastIndexOf%28System.Char%29&gt;</ph> method to find the last directory separator character in a string and to extract the string's file name.</source>
          <target state="translated">下面的示例定义<ph id="ph1">`ExtractFilename`</ph>使用方法<ph id="ph2">&lt;xref:System.String.LastIndexOf%28System.Char%29&gt;</ph>方法以查找在字符串的最后一个目录分隔符字符并将提取的字符串的文件名。</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char)">
          <source>If the file exists, the method returns the file name without its path.</source>
          <target state="translated">如果该文件存在，该方法将返回不包含路径的文件名称。</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String)">
          <source>Reports the zero-based index position of the last occurrence of a specified string within this instance.</source>
          <target state="translated">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String)">
          <source>The zero-based starting index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is the last index position in this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为此实例中的最后一个索引位置。</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>The search begins at the last character position of this instance and proceeds backward toward the beginning until either <ph id="ph1">`value`</ph> is found or the first character position has been examined.</source>
          <target state="translated">搜索此实例的最后一个字符位置开始和其后面直到开头<ph id="ph1">`value`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性的） 搜索。</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>In a culture-sensitive search, if <ph id="ph1">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索中，如果 <ph id="ph1">`value`</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>If <ph id="ph1">`value`</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;xref:System.String.LastIndexOf%28System.String%29&gt;</ph> method always returns <ph id="ph3">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph> – 1, which represents the last index position in the current instance.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;xref:System.String.LastIndexOf%28System.String%29&gt;</ph>方法始终返回<ph id="ph3">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph>– 1，表示当前实例中的最后一个索引位置。</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.String.LastIndexOf%28System.String%29&gt;</ph> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.String.LastIndexOf%28System.String%29&gt;</ph>方法用于在两个字符串中找到三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>Only one of the strings contains a soft hyphen.</source>
          <target state="translated">只有一个字符串包含软连字符。</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在每个情况下，因为软连字符是一个可忽略字符，因此结果是相同就像该软连字符不包含在<ph id="ph2">`value`</ph>。</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>When searching for a soft hyphen only, the method returns 6 and 5.</source>
          <target state="translated">当搜索时软连字符，该方法将返回 6 和 5。</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>These values correspond to the index of the last character in the two strings.</source>
          <target state="translated">这些值对应于两个字符串中的最后一个字符的索引。</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>The following example removes opening and closing HTML tags from a string if the tags begin and end the string.</source>
          <target state="translated">下面的示例删除开始标记与结束的字符串，如果标记开始和结束位置的字符串的 HTML 标记。</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>If a string ends with a closing bracket character ("&gt;"), the example uses the <ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method to locate the start of the end tag.</source>
          <target state="translated">如果字符串结尾右括号字符 ("&gt;")，该示例使用<ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>方法来查找结束标记的开头。</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String)">
          <source>To find the last index of a substring within a string instance by using the comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要查找的字符串实例内的子字符串的最后一个索引通过使用当前区域性的比较规则，请调用<ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The Unicode character to seek.</source>
          <target state="translated">要查找的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The starting position of the search.</source>
          <target state="translated">搜索的起始位置。</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</source>
          <target state="translated">报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string.</source>
          <target state="translated">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that character is found, or -1 if it is not found or if the current instance equals <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果找到该字符，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.This method begins searching at the <ph id="ph2">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning of the current instance until either <ph id="ph3">`value`</ph> is found or the first character position has been examined.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1.此方法开始搜索，在<ph id="ph2">`startIndex`</ph>字符位置的此实例和沿反向向前直到当前实例的开头<ph id="ph3">`value`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>For example, if <ph id="ph1">`startIndex`</ph> is <ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches every character from the last character in the string to the beginning.</source>
          <target state="translated">例如，如果<ph id="ph1">`startIndex`</ph>是<ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph>-1，方法搜索到开头的字符串中的最后一个字符从每个字符。</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The search is case-sensitive.</source>
          <target state="translated">搜索不区分大小写。</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.</source>
          <target state="translated">下面的示例查找在字符串中，到字符串的开头使用从字符串的末尾出现的所有字符的索引。</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than or equal to the length of this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于等于当前实例的长度。</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>Reports the zero-based index position of the last occurrence of a specified string within this instance.</source>
          <target state="translated">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string.</source>
          <target state="translated">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The zero-based starting index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that string is found, or -1 if it is not found or if the current instance equals <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is the smaller of <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> and the last index position in this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 和此实例中的最后一个索引位置中的较小者。</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The search begins at the <ph id="ph1">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either <ph id="ph2">`value`</ph> is found or the first character position has been examined.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>字符位置的此实例和沿反向直到开头<ph id="ph2">`value`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>For example, if <ph id="ph1">`startIndex`</ph> is <ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches every character from the last character in the string to the beginning.</source>
          <target state="translated">例如，如果<ph id="ph1">`startIndex`</ph>是<ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph>-1，方法搜索到开头的字符串中的最后一个字符从每个字符。</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性的） 搜索。</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>In a culture-sensitive search, if <ph id="ph1">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索中，如果 <ph id="ph1">`value`</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method always returns <ph id="ph3">`startIndex`</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29&gt;</ph>方法始终返回<ph id="ph3">`startIndex`</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29&gt;</ph>方法用于查找子字符串，包含软连字符 (U + 00AD) 并且之前或在字符串中包含的最后一个"m"。</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n".</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，因为软连字符后的搜索字符串中将被忽略，调用方法来查找子字符串，包含软连字符和"m"在字符串内，返回"m"的位置而调用此查询以查找 substring，它包含软连字符和"n"返回"n"的位置。</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>When the search string contains only the soft hyphen, the method returns the index of the "m", which represents the value of <ph id="ph1">`startIndex`</ph>.</source>
          <target state="translated">当搜索字符串中包含仅软连字符时，方法会返回"m"，它表示的值的索引<ph id="ph1">`startIndex`</ph>。</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.</source>
          <target state="translated">下面的示例查找字符串的所有匹配项的索引，在目标字符串中，从目标字符串的末尾使用到目标字符串的开头。</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of the current instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于当前实例的长度。</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>The current instance equals <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is less than -1 or greater than zero.</source>
          <target state="translated">当前实例等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 小于-1 或大于零。</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32)">
          <source>To find the index of a substring that precedes a particular character position by using the comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要查找特定的字符位置之前通过使用当前区域性的比较规则的子字符串的索引，请调用<ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the search.</source>
          <target state="translated">指定搜索规则的枚举值之一。</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>Reports the zero-based index of the last occurrence of a specified string within the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">报告指定字符串在当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中最后一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>A parameter specifies the type of search to use for the specified string.</source>
          <target state="translated">一个参数指定要用于指定字符串的搜索类型。</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>The zero-based starting index position of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter if that string is found, or -1 if it is not.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is the last index position in this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为此实例中的最后一个索引位置。</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter specifies to search for the <ph id="ph2">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指定要搜索<ph id="ph2">`value`</ph>参数使用当前或固定区域性、 使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>The search begins at the last character position of this instance and proceeds backward toward the beginning until either <ph id="ph1">`value`</ph> is found or the first character position has been examined.</source>
          <target state="translated">搜索此实例的最后一个字符位置开始和其后面直到开头<ph id="ph1">`value`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>The following exampledemonstrates three overloads of the <ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method that find the last occurrence of a string within another string using different values of the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">以下 exampledemonstrates 三个重载的<ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>查找中使用的不同值的另一个字符串的字符串的最后一个匹配项的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>In a culture-sensitive search (that is, if <ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>), if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索 (即，如果 <ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>) 中，如果 <ph id="ph4">&lt;paramref name="value" /&gt;</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /&gt;</ph> method always returns <ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph> – 1, which represents the last index position in the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;paramref name="value" /&gt;</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /&gt;</ph>方法始终返回<ph id="ph3">&lt;see cref="P:System.String.Length" /&gt;</ph>– 1，表示当前实例中的最后一个索引位置。</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>In the following example, the <ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /&gt;</ph> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /&gt;</ph>方法用于在两个字符串中找到三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>Only one of the strings contains a soft hyphen.</source>
          <target state="translated">只有一个字符串包含软连字符。</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，因为软连字符是一个可忽略字符，则区分区域性的搜索返回的相同值，它将返回如果软连字符中不包含搜索字符串。</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.StringComparison)">
          <source>An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</source>
          <target state="translated">序号搜索，但是，已成功在一个字符串中查找软连字符，并报告其不存在从第二个字符串。</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The Unicode character to seek.</source>
          <target state="translated">要查找的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The starting position of the search.</source>
          <target state="translated">搜索的起始位置。</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.</source>
          <target state="translated">报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</source>
          <target state="translated">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The zero-based index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that character is found, or -1 if it is not found or if the current instance equals <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果找到该字符，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>This method begins searching at the <ph id="ph1">`startIndex`</ph> character position and proceeds backward toward the beginning of this instance until either <ph id="ph2">`value`</ph> is found or <ph id="ph3">`count`</ph> character positions have been examined.</source>
          <target state="translated">此方法开始搜索，在<ph id="ph1">`startIndex`</ph>字符位置和沿反向向前直到此实例的开头<ph id="ph2">`value`</ph>找到或<ph id="ph3">`count`</ph>检查了字符位置。</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>For example, if <ph id="ph1">`startIndex`</ph> is <ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches backward <ph id="ph3">`count`</ph> characters from the last character in the string.</source>
          <target state="translated">例如，如果<ph id="ph1">`startIndex`</ph>是<ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph>-1，则方法会向后搜索<ph id="ph3">`count`</ph>从字符串中的最后一个字符的字符。</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The search is case-sensitive.</source>
          <target state="translated">搜索不区分大小写。</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.</source>
          <target state="translated">下面的示例查找中的子字符串，到的子字符串开始工作所在的子字符串的末尾出现的所有字符的索引。</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than or equal to the length of this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于等于当前实例的长度。</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;paramref name="count" /&gt;</ph> + 1 is less than zero.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;paramref name="count" /&gt;</ph> + 1 小于零。</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>Reports the zero-based index position of the last occurrence of a specified string within this instance.</source>
          <target state="translated">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</source>
          <target state="translated">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The zero-based starting index position of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if that string is found, or -1 if it is not found or if the current instance equals <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is the smaller of <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> and the last index position in this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 和此实例中的最后一个索引位置中的较小者。</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The search begins at the <ph id="ph1">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either <ph id="ph2">`value`</ph> is found or <ph id="ph3">`count`</ph> character positions have been examined.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>字符位置的此实例和沿反向直到开头<ph id="ph2">`value`</ph>找到或<ph id="ph3">`count`</ph>检查了字符位置。</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>For example, if <ph id="ph1">`startIndex`</ph> is <ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches backward <ph id="ph3">`count`</ph> characters from the last character in the string.</source>
          <target state="translated">例如，如果<ph id="ph1">`startIndex`</ph>是<ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph>-1，则方法会向后搜索<ph id="ph3">`count`</ph>从字符串中的最后一个字符的字符。</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性的） 搜索。</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>In a culture-sensitive search, if <ph id="ph1">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索中，如果 <ph id="ph1">`value`</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method always returns <ph id="ph3">`startIndex`</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>方法始终返回<ph id="ph3">`startIndex`</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final "m" of two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>方法用于查找在前两个字符串的最后"m"的两个字符的软连字符 (U + 00AD) 的位置。</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>Only one of the strings contains the required substring.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引执行区分区域性的比较时。</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</source>
          <target state="translated">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.</source>
          <target state="translated">下面的示例查找到的子字符串开头使用从字符串末尾的子字符串中出现的所有字符串的索引。</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is greater than the length of this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 大于此实例的长度。</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;paramref name="count" /&gt;</ph>+ 1 specifies a position that is not within this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;paramref name="count" /&gt;</ph> + 1 指定不在此实例内的位置。</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The current instance equals <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> and <ph id="ph2">&lt;paramref name="start" /&gt;</ph> is less than -1 or greater than zero.</source>
          <target state="translated">当前实例等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> 并且 <ph id="ph2">&lt;paramref name="start" /&gt;</ph> 小于 -1 或大于零。</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>The current instance equals <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than 1.</source>
          <target state="translated">当前实例等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> 并且 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 大于 1。</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
          <source>To perform this operation by using the comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要使用当前区域性的比较规则执行此操作，调用<ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the search.</source>
          <target state="translated">指定搜索规则的枚举值之一。</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Reports the zero-based index of the last occurrence of a specified string within the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">报告指定字符串在当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中最后一个匹配项的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string.</source>
          <target state="translated">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>A parameter specifies the type of comparison to perform when searching for the specified string.</source>
          <target state="translated">一个参数指定要执行搜索指定字符串的比较类型。</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The zero-based starting index position of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter if that string is found, or -1 if it is not found or if the current instance equals <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is the smaller of <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> and the last index position in this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 和此实例中的最后一个索引位置中的较小者。</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The search begins at the <ph id="ph1">`startIndex`</ph> character position and proceeds backward until either <ph id="ph2">`value`</ph> is found or the first character position has been examined.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>字符位置和沿反向直到<ph id="ph2">`value`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>For example, if <ph id="ph1">`startIndex`</ph> is <ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches every character from the last character in the string to the beginning.</source>
          <target state="translated">例如，如果<ph id="ph1">`startIndex`</ph>是<ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph>-1，方法搜索到开头的字符串中的最后一个字符从每个字符。</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter specifies to search for the <ph id="ph2">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指定要搜索<ph id="ph2">`value`</ph>参数使用当前或固定区域性、 使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The following exampledemonstrates three overloads of the <ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method that find the last occurrence of a string within another string using different values of the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">以下 exampledemonstrates 三个重载的<ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>查找中使用的不同值的另一个字符串的字符串的最后一个匹配项的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of the current instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于当前实例的长度。</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The current instance equals <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is less than -1 or greater than zero.</source>
          <target state="translated">当前实例等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 小于-1 或大于零。</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>In a culture-sensitive search (that is, if <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>), if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索 (即，如果 <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>) 中，如果 <ph id="ph4">&lt;paramref name="value" /&gt;</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph> method always returns <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">&lt;paramref name="value" /&gt;</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph>方法始终返回<ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>In the following example, the <ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /&gt;</ph>方法用于查找软连字符 (U + 00AD) 后跟"m"，两个字符串中的最后"m"开头的位置。</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Only one of the strings contains the required substring.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引执行区分区域性的比较时。</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</source>
          <target state="translated">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
          <source>The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</source>
          <target state="translated">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The string to seek.</source>
          <target state="translated">要搜寻的字符串。</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>One of the enumeration values that specifies the rules for the search.</source>
          <target state="translated">指定搜索规则的枚举值之一。</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Reports the zero-based index position of the last occurrence of a specified string within this instance.</source>
          <target state="translated">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.</source>
          <target state="translated">搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>A parameter specifies the type of comparison to perform when searching for the specified string.</source>
          <target state="translated">一个参数指定要执行搜索指定字符串的比较类型。</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The zero-based starting index position of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter if that string is found, or -1 if it is not found or if the current instance equals <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">如果找到该字符串，则为 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, the return value is the smaller of <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> and the last index position in this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则返回值为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 和此实例中的最后一个索引位置中的较小者。</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>That is, the first character in the string is at index zero and the last is at <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> - 1.</source>
          <target state="translated">即，位于索引零的字符串中的第一个字符和最后一个位于<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>-1。</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The search begins at the <ph id="ph1">`startIndex`</ph> character position and proceeds backward until either <ph id="ph2">`value`</ph> is found or <ph id="ph3">`count`</ph> character positions have been examined.</source>
          <target state="translated">在开始执行搜索<ph id="ph1">`startIndex`</ph>字符位置和沿反向直到<ph id="ph2">`value`</ph>找到或<ph id="ph3">`count`</ph>检查了字符位置。</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>For example, if <ph id="ph1">`startIndex`</ph> is <ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches backward <ph id="ph3">`count`</ph> characters from the last character in the string.</source>
          <target state="translated">例如，如果<ph id="ph1">`startIndex`</ph>是<ph id="ph2">&lt;xref:System.String.Length%2A&gt;</ph>-1，则方法会向后搜索<ph id="ph3">`count`</ph>从字符串中的最后一个字符的字符。</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The <ph id="ph1">`comparisonType`</ph> parameter specifies to search for the <ph id="ph2">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</source>
          <target state="translated"><ph id="ph1">`comparisonType`</ph>参数指定要搜索<ph id="ph2">`value`</ph>参数使用当前或固定区域性、 使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The following exampledemonstrates three overloads of the <ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method that find the last occurrence of a string within another string using different values of the <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
          <target state="translated">以下 exampledemonstrates 三个重载的<ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>查找中使用的不同值的另一个字符串的字符串的最后一个匹配项的方法<ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> is greater than the length of this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 大于此实例的长度。</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> + 1 - <ph id="ph3">&lt;paramref name="count" /&gt;</ph> specifies a position that is not within this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> + 1 - <ph id="ph3">&lt;paramref name="count" /&gt;</ph> 指定不在此实例内的位置。</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The current instance equals <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> and <ph id="ph2">&lt;paramref name="start" /&gt;</ph> is less than -1 or greater than zero.</source>
          <target state="translated">当前实例等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> 并且 <ph id="ph2">&lt;paramref name="start" /&gt;</ph> 小于 -1 或大于零。</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The current instance equals <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than 1.</source>
          <target state="translated">当前实例等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> 并且 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 大于 1。</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</source>
          <target state="translated">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>In a culture-sensitive search (that is, if <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>), if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> contains an ignorable character, the result is equivalent to searching with that character removed.</source>
          <target state="translated">在区分区域性的搜索 (即，如果 <ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.StringComparison.Ordinal" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.StringComparison.OrdinalIgnoreCase" /&gt;</ph>) 中，如果 <ph id="ph4">&lt;paramref name="value" /&gt;</ph> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> consists only of one or more ignorable characters, the <ph id="ph2">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method always returns <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>, which is the character position at which the search begins.</source>
          <target state="translated">如果<ph id="ph1">&lt;paramref name="value" /&gt;</ph>仅由一个或多个可忽略字符，组成<ph id="ph2">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法始终返回<ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>，即开始执行搜索的字符位置。</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>In the following example, the <ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /&gt;</ph>方法用于在两个字符串中查找跟"m"，在所有软连字符 (U + 00AD) 的位置，但之前的最后"m"的第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Only one of the strings contains the required substring.</source>
          <target state="translated">只有一个字符串包含必需的子字符串。</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>If the example is run on the <ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</source>
          <target state="translated">如果在上运行该示例<ph id="ph1">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph>或更高版本，在这两种情况下，因为软连字符是一个可忽略字符，该方法返回的字符串中的"m"的索引执行区分区域性的比较时。</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>When it performs an ordinal comparison, however, it finds the substring only in the first string.</source>
          <target state="translated">当它执行序号比较时，但是，它会查找子字符串仅在第一个字符串中。</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</source>
          <target state="translated">请注意，对于第一个字符串，包含软连字符后跟"m"，该方法无法返回该软连字符的索引，但执行区分区域性的比较时，而是返回"m"的索引。</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
          <source>The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</source>
          <target state="translated">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</source>
          <target state="translated">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>The method returns -1 if the characters in the array are not found in this instance.</source>
          <target state="translated">如果未在此实例中找到数组中的字符，则此方法返回 -1。</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>A Unicode character array containing one or more characters to seek.</source>
          <target state="translated">Unicode 字符数组，包含一个或多个要查找的字符。</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</source>
          <target state="translated">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>The index position of the last occurrence in this instance where any character in <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> was found; -1 if no character in <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> was found.</source>
          <target state="translated">最后一次在此实例中找到 <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 中的任意字符的索引位置；如果未找到 <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> 中的字符，则为 -1。</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in <ph id="ph1">`anyOf`</ph> is found or the first character position has been examined.</source>
          <target state="translated">此方法开始搜索此实例的最后一个字符位置和其后面直到中的字符开头<ph id="ph1">`anyOf`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>The search is case-sensitive.</source>
          <target state="translated">搜索不区分大小写。</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source>The following example finds the index of the last occurrence of any character in the string "is" within another string.</source>
          <target state="translated">下面的示例查找的任意字符在字符串中的最后一个匹配项的索引"is"另一个字符串。</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[])">
          <source><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>A Unicode character array containing one or more characters to seek.</source>
          <target state="translated">Unicode 字符数组，包含一个或多个要查找的字符。</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</source>
          <target state="translated">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string.</source>
          <target state="translated">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The index position of the last occurrence in this instance where any character in <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> was found; -1 if no character in <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> was found or if the current instance equals <ph id="ph3">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">最后一次在此实例中找到 <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 中的任意字符的索引位置；如果未找到 <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> 中的字符或者当前实例等于<ph id="ph3">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>This method begins searching at the <ph id="ph1">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either a character in <ph id="ph2">`anyOf`</ph> is found or the first character position has been examined.</source>
          <target state="translated">此方法开始搜索，在<ph id="ph1">`startIndex`</ph>字符位置的此实例和沿反向直到中的字符开头<ph id="ph2">`anyOf`</ph>找到或已检查完第一个字符位置。</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The search is case-sensitive.</source>
          <target state="translated">搜索不区分大小写。</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The following example finds the index of the last occurrence of any character in the string "is" within a substring of another string.</source>
          <target state="translated">下面的示例查找的任意字符在字符串中的最后一个匹配项的索引"is"的另一个字符串的子字符串中。</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> specifies a position that is not within this instance.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 指定不在此实例内的位置。</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>A Unicode character array containing one or more characters to seek.</source>
          <target state="translated">Unicode 字符数组，包含一个或多个要查找的字符。</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search starting position.</source>
          <target state="translated">搜索起始位置。</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search proceeds from <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> toward the beginning of this instance.</source>
          <target state="translated">从 <bpt id="p1">&lt;c&gt;</bpt>startIndex<ept id="p1">&lt;/c&gt;</ept> 开始搜索，一直到此实例的开头处。</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The number of character positions to examine.</source>
          <target state="translated">要检查的字符位置数。</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</source>
          <target state="translated">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</source>
          <target state="translated">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The index position of the last occurrence in this instance where any character in <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> was found; -1 if no character in <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> was found or if the current instance equals <ph id="ph3">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">最后一次在此实例中找到 <ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 中的任意字符的索引位置；如果未找到 <ph id="ph2">&lt;paramref name="anyOf" /&gt;</ph> 中的字符或者当前实例等于<ph id="ph3">&lt;see cref="F:System.String.Empty" /&gt;</ph>，则为 -1。</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>Index numbering starts from zero.</source>
          <target state="translated">索引号从零开始。</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>This method begins searching at the <ph id="ph1">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either a character in <ph id="ph2">`anyOf`</ph> is found or <ph id="ph3">`count`</ph> character positions have been examined.</source>
          <target state="translated">此方法开始搜索，在<ph id="ph1">`startIndex`</ph>字符位置的此实例和沿反向直到中的字符开头<ph id="ph2">`anyOf`</ph>找到或<ph id="ph3">`count`</ph>检查了字符位置。</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The search is case-sensitive.</source>
          <target state="translated">搜索不区分大小写。</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</source>
          <target state="translated">此方法执行序号 （不区分区域性的） 搜索，其中一个字符被视为等效于另一个字符仅当其 Unicode 标量值都是相同。</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>To perform a culture-sensitive search, use the <ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</source>
          <target state="translated">若要执行区分区域性的搜索，使用<ph id="ph1">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>方法，其中表示一个复合的字符，例如连字"Æ"(U + 00 C 6) 的 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如"遍历"(U + 0041、 U + 0045)，则根据区域性。</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The following example finds the index of the last occurrence of any character in the string "aid" within a substring of another string.</source>
          <target state="translated">下面的示例查找另一个字符串的子字符串中的任意字符在字符串"帮助"中的最后一个匹配项的索引。</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="anyOf" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> or <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is negative.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" uid="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
          <source>The current instance does not equal <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>, and <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> minus <ph id="ph3">&lt;paramref name="count" /&gt;</ph> + 1 is less than zero.</source>
          <target state="translated">当前实例不等于 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>，并且 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 减去 <ph id="ph3">&lt;paramref name="count" /&gt;</ph> 再加 1 小于零。</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" uid="P:System.String.Length">
          <source>Gets the number of characters in the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中的字符数。</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>The number of characters in the current string.</source>
          <target state="translated">当前字符串中字符的数量。</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>The <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> property returns the number of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects in this instance, not the number of Unicode characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>属性返回的数目<ph id="ph2">&lt;xref:System.Char&gt;</ph>此实例中的对象，而非 Unicode 字符的数量。</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>The reason is that a Unicode character might be represented by more than one <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">原因是可能的多个表示 Unicode 字符<ph id="ph1">&lt;xref:System.Char&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>Use the <ph id="ph1">&lt;xref:System.Globalization.StringInfo?displayProperty=nameWithType&gt;</ph> class to work with each Unicode character instead of each <ph id="ph2">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Globalization.StringInfo?displayProperty=nameWithType&gt;</ph>类以使用每个 Unicode 字符而不是每个<ph id="ph2">&lt;xref:System.Char&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>In some languages, such as C and C++, a null character indicates the end of a string.</source>
          <target state="translated">在某些语言，如 C 和 c + +，null 字符指示一个字符串的末尾。</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>In the .NET Framework, a null character can be embedded in a string.</source>
          <target state="translated">在.NET Framework 中，可以在字符串中嵌入 null 字符。</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>When a string includes one or more null characters, they are included in the length of the total string.</source>
          <target state="translated">当一个字符串包含一个或多个 null 字符时，它们包括在字符串的总长度。</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>For example, in the following string, the substrings "abc" and "def" are separated by a null character.</source>
          <target state="translated">例如，在下面的字符串中，"abc"和"def"分隔的 null 字符的子字符串。</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>The <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>属性返回 7，指示它包括六个字母的字符以及 null 字符。</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.String.Length">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> property.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a new string whose binary representation is in a particular Unicode normalization form.</source>
          <target state="translated">返回一个新字符串，其二进制表示形式符合特定的 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" uid="M:System.String.Normalize">
          <source>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</source>
          <target state="translated">返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合 Unicode 范式 C。</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" uid="M:System.String.Normalize">
          <source>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</source>
          <target state="translated">一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式 C。</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</source>
          <target state="translated">某些 Unicode 字符具有多个等效二进制表示形式包含集组合在一起的和/或复合 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>For example, any of the following code points can represent the letter "ắ":</source>
          <target state="translated">例如，下面的代码点的任何可表示字母"ắ":</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>U+1EAF</source>
          <target state="translated">U + 1EAF</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>U+0103 U+0301</source>
          <target state="translated">U+0103 U+0301</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>U+0061 U+0306 U+0301</source>
          <target state="translated">U+0061 U+0306 U+0301</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</source>
          <target state="translated">搜索、 排序、 匹配和其他操作将增加复杂性存在单个字符的多个表示形式。</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</source>
          <target state="translated">Unicode 标准定义了一个过程调用返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化。</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</source>
          <target state="translated">可以使用几种算法，称为范式，遵循不同的规则，执行规范化。</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.</source>
          <target state="translated">.NET Framework 支持四种范式 （C、 D、 KC 和 KD） 定义的 Unicode 标准。当两个字符串以相同的标准化形式表示时，通过使用来比较序号比较。</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>To normalize and compare two strings, do the following:</source>
          <target state="translated">若要进行规范化，并比较两个字符串，执行以下操作：</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>Obtain the strings to be compared from an input source, such as a file or a user input device.</source>
          <target state="translated">获取要从输入源，如文件或单一用户输入的设备进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>Call the <ph id="ph1">&lt;xref:System.String.Normalize&gt;</ph> method to normalize the strings to normalization form C.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.String.Normalize&gt;</ph>方法以将字符串规范化为范式 c。</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>To compare two strings, call a method that supports ordinal string comparison, such as the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, and supply a value of <ph id="ph2">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> as the <ph id="ph4">&lt;xref:System.StringComparison&gt;</ph> argument.</source>
          <target state="translated">若要比较两个字符串，调用方法，支持的序号字符串比较，如<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>方法，提供的一个值<ph id="ph2">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>作为<ph id="ph4">&lt;xref:System.StringComparison&gt;</ph>自变量。</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>To sort an array of normalized strings, pass a <ph id="ph1">`comparer`</ph> value of <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType&gt;</ph> to an appropriate overload of <ph id="ph4">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要排序的规范化字符串数组，请将传递<ph id="ph1">`comparer`</ph>值<ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType&gt;</ph>的相应重载<ph id="ph4">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>Emit the strings in the sorted output based on the order indicated by the previous step.</source>
          <target state="translated">发出基于上一步所述的顺序排序输出中的字符串。</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>For a description of supported Unicode normalization forms, see <ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关受支持的 Unicode 范式的说明，请参阅<ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</source>
          <target state="translated">下面的示例将每个规范化这四种形式的字符串，确认字符串已规范化为指定的范式，则列出规范化字符串中的码位。</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" uid="M:System.String.Normalize">
          <source>The current instance contains invalid Unicode characters.</source>
          <target state="translated">当前实例包含无效的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> as soon as it encounters the first non-normalized character in a string.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>方法返回<ph id="ph2">&lt;see langword="false" /&gt;</ph>只要它遇到第一个非规范化字符串中的字符。</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize">
          <source>Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph> method will throw an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> although <ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> returns <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph>方法会引发<ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>尽管<ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>返回<ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>A Unicode normalization form.</source>
          <target state="translated">一个 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</source>
          <target state="translated">返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合指定的 Unicode 范式。</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <ph id="ph1">&lt;paramref name="normalizationForm" /&gt;</ph> parameter.</source>
          <target state="translated">一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合由 <ph id="ph1">&lt;paramref name="normalizationForm" /&gt;</ph> 参数指定的范式。</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</source>
          <target state="translated">某些 Unicode 字符具有多个等效二进制表示形式包含集组合在一起的和/或复合 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</source>
          <target state="translated">搜索、 排序、 匹配和其他操作将增加复杂性存在单个字符的多个表示形式。</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</source>
          <target state="translated">Unicode 标准定义了一个过程调用返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化。</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</source>
          <target state="translated">可以使用几种算法，称为范式，遵循不同的规则，执行规范化。</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</source>
          <target state="translated">.NET Framework 支持四种范式 （C、 D、 KC 和 KD） 定义的 Unicode 标准。当两个字符串以相同的标准化形式表示时，它们可以通过使用序号比较进行比较。</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>To normalize and compare two strings, do the following:</source>
          <target state="translated">若要进行规范化，并比较两个字符串，执行以下操作：</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Obtain the strings to be compared from an input source, such as a file or a user input device.</source>
          <target state="translated">获取要从输入源，如文件或单一用户输入的设备进行比较的字符串。</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Call the <ph id="ph1">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29&gt;</ph> method to normalize the strings to a specified normalization form.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29&gt;</ph>方法以将字符串规范化为指定的范式。</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>To compare two strings, call a method that supports ordinal string comparison, such as the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, and supply a value of <ph id="ph2">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> as the <ph id="ph4">&lt;xref:System.StringComparison&gt;</ph> argument.</source>
          <target state="translated">若要比较两个字符串，调用方法，支持的序号字符串比较，如<ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph>方法，提供的一个值<ph id="ph2">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>作为<ph id="ph4">&lt;xref:System.StringComparison&gt;</ph>自变量。</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>To sort an array of normalized strings, pass a <ph id="ph1">`comparer`</ph> value of <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType&gt;</ph> to an appropriate overload of <ph id="ph4">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要排序的规范化字符串数组，请将传递<ph id="ph1">`comparer`</ph>值<ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType&gt;</ph>的相应重载<ph id="ph4">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Emit the strings in the sorted output based on the order indicated by the previous step.</source>
          <target state="translated">发出基于上一步所述的顺序排序输出中的字符串。</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>For a description of supported Unicode normalization forms, see <ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关受支持的 Unicode 范式的说明，请参阅<ph id="ph1">&lt;xref:System.Text.NormalizationForm?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</source>
          <target state="translated">下面的示例将每个规范化这四种形式的字符串，确认字符串已规范化为指定的范式，则列出规范化字符串中的码位。</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>The current instance contains invalid Unicode characters.</source>
          <target state="translated">当前实例包含无效的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> as soon as it encounters the first non-normalized character in a string.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>方法返回<ph id="ph2">&lt;see langword="false" /&gt;</ph>只要它遇到第一个非规范化字符串中的字符。</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Normalize(System.Text.NormalizationForm)">
          <source>Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph> method may throw an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> although <ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph> returns <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<ph id="ph1">&lt;see cref="Overload:System.String.Normalize" /&gt;</ph>方法可能会引发<ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>尽管<ph id="ph3">&lt;see cref="Overload:System.String.IsNormalized" /&gt;</ph>返回<ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>The first string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第一个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>The second string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第二个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>Determines whether two specified strings have the same value.</source>
          <target state="translated">确定两个指定的字符串是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" uid="M:System.String.op_Equality(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="a" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="b" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="a" /&gt;</ph> 的值相同，则为 <ph id="ph3">&lt;paramref name="b" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.op_Equality%2A&gt;</ph> method defines the operation of the equality operator for the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.op_Equality%2A&gt;</ph>方法定义的相等运算符的运算<ph id="ph2">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>It enables code such as that shown in the Example section.</source>
          <target state="translated">这样，如示例部分中所示的代码。</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>The operator, in turn, calls the static <ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.String%29&gt;</ph> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.</source>
          <target state="translated">运算符，反过来，调用静态<ph id="ph1">&lt;xref:System.String.Equals%28System.String%2CSystem.String%29&gt;</ph>方法，用于执行序号 （区分大小写和不区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>The Visual Basic compiler does not resolve the equality operator as a call to the <ph id="ph1">&lt;xref:System.String.op_Equality%2A&gt;</ph> method.</source>
          <target state="translated">Visual Basic 编译器不能解决相等运算符与调用<ph id="ph1">&lt;xref:System.String.op_Equality%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>Instead, the equality operator wraps a call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">相反，相等运算符包装对的调用<ph id="ph1">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Equality(System.String,System.String)">
          <source>The following example demonstrates the equality operator.</source>
          <target state="translated">下面的示例演示相等运算符。</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>The first string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第一个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>The second string to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要比较的第二个字符串，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>Determines whether two specified strings have different values.</source>
          <target state="translated">确定两个指定的字符串是否具有不同的值。</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="a" /&gt;</ph> is different from the value of <ph id="ph3">&lt;paramref name="b" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="a" /&gt;</ph> 的值不同，则为 <ph id="ph3">&lt;paramref name="b" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.op_Inequality%2A&gt;</ph>方法定义的不相等运算符的运算<ph id="ph2">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>It enables code such as that shown in the Examples section.</source>
          <target state="translated">这样，如示例部分中所示的代码。</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.op_Inequality%2A&gt;</ph> operator in turn calls the static <ph id="ph2">&lt;xref:System.String.Equals%28System.String%2CSystem.String%29&gt;</ph> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.op_Inequality%2A&gt;</ph>运算符反过来调用静态<ph id="ph2">&lt;xref:System.String.Equals%28System.String%2CSystem.String%29&gt;</ph>方法，用于执行序号 （区分大小写和不区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>The Visual Basic compiler does not resolve the inequality operator as a call to the <ph id="ph1">&lt;xref:System.String.op_Inequality%2A&gt;</ph> method.</source>
          <target state="translated">Visual Basic 编译器不能解决不等运算符与调用<ph id="ph1">&lt;xref:System.String.op_Inequality%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>Instead, the inequality operator wraps a call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">相反，不等运算符包装对的调用<ph id="ph1">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.op_Inequality(System.String,System.String)">
          <source>The following example demonstrates the inequality operator.</source>
          <target state="translated">下面的示例演示不等运算符。</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a new string of a specified length in which the beginning of the current string is padded with spaces or with a specified Unicode character.</source>
          <target state="translated">返回一个指定长度的新字符串，其中在当前字符串的开头填充空格或指定的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32)">
          <source>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</source>
          <target state="translated">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32)">
          <source>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</source>
          <target state="translated">返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32)">
          <source>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph>.</source>
          <target state="translated">与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的空格，使长度达到 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32)">
          <source>However, if <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than the length of this instance, the method returns a reference to the existing instance.</source>
          <target state="translated">但是，如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于此实例的长度，则此方法返回对现有实例的引用。</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is equal to the length of this instance, the method returns a new string that is identical to this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32)">
          <source>A Unicode space is defined as hexadecimal 0x0020.</source>
          <target state="translated">Unicode 空间被定义为十六进制 0x0020。</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.String.PadLeft%28System.Int32%29&gt;</ph> method pads the beginning of the returned string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.PadLeft%28System.Int32%29&gt;</ph>方法来填充返回的字符串的开头。</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32)">
          <source>This means that, when used with right-to-left languages, it pads the right portion of the string.</source>
          <target state="translated">这意味着，当用于右到左的语言，它将填充字符串的右侧部分。</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph>方法来填充当前实例与空白字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32)">
          <source>Instead, it returns a new string that is padded with leading white space so that its total length is <ph id="ph1">`totalWidth`</ph> characters.</source>
          <target state="translated">相反，它将返回一个新字符串，则用前导空白字符填充，以便其总长度<ph id="ph1">`totalWidth`</ph>字符。</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</source>
          <target state="translated">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>A Unicode padding character.</source>
          <target state="translated">Unicode 填充字符。</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</source>
          <target state="translated">返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <ph id="ph1">&lt;paramref name="paddingChar" /&gt;</ph> characters as needed to create a length of <ph id="ph2">&lt;paramref name="totalWidth" /&gt;</ph>.</source>
          <target state="translated">与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <ph id="ph1">&lt;paramref name="paddingChar" /&gt;</ph> 字符，使长度达到 <ph id="ph2">&lt;paramref name="totalWidth" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>However, if <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than the length of this instance, the method returns a reference to the existing instance.</source>
          <target state="translated">但是，如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于此实例的长度，则此方法返回对现有实例的引用。</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>If <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is equal to the length of this instance, the method returns a new string that is identical to this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29&gt;</ph> method pads the beginning of the returned string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29&gt;</ph>方法来填充返回的字符串的开头。</target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>This means that, when used with right-to-left languages, it pads the right portion of the string.</source>
          <target state="translated">这意味着，当用于右到左的语言，它将填充字符串的右侧部分。</target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>If the <ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph>方法来填充当前实例与空白字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>Instead, it returns a new string that is padded with leading <ph id="ph1">`paddingChar`</ph> characters so that its total length is <ph id="ph2">`totalWidth`</ph> characters.</source>
          <target state="translated">相反，它将返回一个新字符串，则用前导填充<ph id="ph1">`paddingChar`</ph>字符，以便其总长度<ph id="ph2">`totalWidth`</ph>字符。</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.PadLeft%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" uid="M:System.String.PadLeft(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a new string of a specified length in which the end of the current string is padded with spaces or with a specified Unicode character.</source>
          <target state="translated">返回一个指定长度的新字符串，其中在当前字符串的结尾填充空格或指定的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32)">
          <source>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</source>
          <target state="translated">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32)">
          <source>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</source>
          <target state="translated">返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32)">
          <source>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph>.</source>
          <target state="translated">与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32)">
          <source>However, if <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than the length of this instance, the method returns a reference to the existing instance.</source>
          <target state="translated">但是，如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于此实例的长度，则此方法返回对现有实例的引用。</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is equal to the length of this instance, the method returns a new string that is identical to this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32)">
          <source>A Unicode space is defined as hexadecimal 0x0020.</source>
          <target state="translated">Unicode 空间被定义为十六进制 0x0020。</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.String.PadRight%28System.Int32%29&gt;</ph> method pads the end of the returned string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.PadRight%28System.Int32%29&gt;</ph>方法来填充返回的字符串的末尾。</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32)">
          <source>This means that, when used with right-to-left languages, it pads the left portion of the string.</source>
          <target state="translated">这意味着，当用于右到左的语言，它将填充字符串的左侧的部分。</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph>方法来填充当前实例与空白字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32)">
          <source>Instead, it returns a new string that is padded with trailing white space so that its total length is <ph id="ph1">`totalWidth`</ph> characters.</source>
          <target state="translated">相反，它将返回一个新字符串，则用尾随空格填充，以便其总长度<ph id="ph1">`totalWidth`</ph>字符。</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</source>
          <target state="translated">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>A Unicode padding character.</source>
          <target state="translated">Unicode 填充字符。</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</source>
          <target state="translated">返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <ph id="ph1">&lt;paramref name="paddingChar" /&gt;</ph> characters as needed to create a length of <ph id="ph2">&lt;paramref name="totalWidth" /&gt;</ph>.</source>
          <target state="translated">与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <ph id="ph1">&lt;paramref name="paddingChar" /&gt;</ph> 字符，使长度达到 <ph id="ph2">&lt;paramref name="totalWidth" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>However, if <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than the length of this instance, the method returns a reference to the existing instance.</source>
          <target state="translated">但是，如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于此实例的长度，则此方法返回对现有实例的引用。</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>If <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is equal to the length of this instance, the method returns a new string that is identical to this instance.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.String.PadRight%28System.Int32%2CSystem.Char%29&gt;</ph> method pads the end of the returned string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.PadRight%28System.Int32%2CSystem.Char%29&gt;</ph>方法来填充返回的字符串的末尾。</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>This means that, when used with right-to-left languages, it pads the left portion of the string.</source>
          <target state="translated">这意味着，当用于右到左的语言，它将填充字符串的左侧的部分。</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>If the <ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph>方法来填充当前实例与空白字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>Instead, it returns a new string that is padded with trailing <ph id="ph1">`paddingChar`</ph> characters so that its total length is <ph id="ph2">`totalWidth`</ph> characters.</source>
          <target state="translated">相反，它将返回一个新字符串，则用尾随填充<ph id="ph1">`paddingChar`</ph>字符，以便其总长度<ph id="ph2">`totalWidth`</ph>字符。</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.PadRight%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" uid="M:System.String.PadRight(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="totalWidth" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a new string in which a specified number of characters from the current string are deleted.</source>
          <target state="translated">返回一个新字符串，它相当于从当前字符串删除了指定数量的字符。</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32)">
          <source>The zero-based position to begin deleting characters.</source>
          <target state="translated">开始删除字符的从零开始的位置。</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32)">
          <source>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</source>
          <target state="translated">返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32)">
          <source>A new string that is equivalent to this string except for the removed characters.</source>
          <target state="translated">一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, strings are zero-based.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>，字符串都是从零开始。</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>The value of the <ph id="ph1">`startIndex`</ph> parameter can range from zero to one less than the length of the string instance.</source>
          <target state="translated">值<ph id="ph1">`startIndex`</ph>参数可以介于 0 到减 1 所得字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>Instead, it returns a new string in which all characters from position <ph id="ph1">`startIndex`</ph> to the end of the original string have been removed.</source>
          <target state="translated">相反，它返回一个新字符串中的所有字符从位置<ph id="ph1">`startIndex`</ph>到原始字符串的末尾已被删除。</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.Remove%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.Remove%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>The next-to-last case removes all text starting from the specified index through the end of the string.</source>
          <target state="translated">下一步至最后一种情况下删除从通过字符串末尾的指定索引开始的所有文本。</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32)">
          <source>The last case removes three characters starting from the specified index.</source>
          <target state="translated">最后一种情况中删除从指定索引开始的三个字符。</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> specifies a position that is not within this string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 指定的位置不在此字符串内。</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>The zero-based position to begin deleting characters.</source>
          <target state="translated">开始删除字符的从零开始的位置。</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>The number of characters to delete.</source>
          <target state="translated">要删除的字符数。</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</source>
          <target state="translated">返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>A new string that is equivalent to this instance except for the removed characters.</source>
          <target state="translated">一个新字符串，除所删除的字符之外，该字符串与此实例等效。</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, strings are zero-based.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>，字符串都是从零开始。</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">`startIndex`</ph> parameter can range from zero to one less than the length of the string instance.</source>
          <target state="translated">值<ph id="ph1">`startIndex`</ph>参数可以介于 0 到减 1 所得字符串实例的长度。</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>Instead, it returns a new string in which the number of characters specified by the <ph id="ph1">`count`</ph> parameter have been removed.</source>
          <target state="translated">相反，它将返回一个新字符串，其中由指定的字符数<ph id="ph1">`count`</ph>已删除参数。</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>The characters are removed at the position specified by <ph id="ph1">`startIndex`</ph>.</source>
          <target state="translated">在指定的位置删除字符<ph id="ph1">`startIndex`</ph>。</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>The following example demonstrates how you can remove the middle name from a complete name.</source>
          <target state="translated">下面的示例演示如何从完整的姓名删除中间名。</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>Either <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" uid="M:System.String.Remove(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> specify a position outside this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 加 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 之和指定一个此实例外的位置。</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a new string in which all occurrences of a specified Unicode character or <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> in the current string are replaced with another specified Unicode character or <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">返回一个新字符串，其中已将当前字符串中的指定 Unicode 字符或 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的所有匹配项替换为其他指定的 Unicode 字符或 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>The Unicode character to be replaced.</source>
          <target state="translated">要替换的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>The Unicode character to replace all occurrences of <bpt id="p1">&lt;c&gt;</bpt>oldChar<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要替换出现的所有 <bpt id="p1">&lt;c&gt;</bpt>oldChar<ept id="p1">&lt;/c&gt;</ept> 的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</source>
          <target state="translated">返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>A string that is equivalent to this instance except that all instances of <ph id="ph1">&lt;paramref name="oldChar" /&gt;</ph> are replaced with <ph id="ph2">&lt;paramref name="newChar" /&gt;</ph>.</source>
          <target state="translated">等效于此实例（除了 <ph id="ph1">&lt;paramref name="oldChar" /&gt;</ph> 的所有实例都已替换为 <ph id="ph2">&lt;paramref name="newChar" /&gt;</ph> 外）的字符串。</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>If <ph id="ph1">&lt;paramref name="oldChar" /&gt;</ph> is not found in the current instance, the method returns the current instance unchanged.</source>
          <target state="translated">如果在当前实例中找不到 <ph id="ph1">&lt;paramref name="oldChar" /&gt;</ph>，此方法返回未更改的当前实例。</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <ph id="ph1">`oldChar`</ph>.</source>
          <target state="translated">此方法执行序号 （区分大小写和不区分区域性的） 搜索以查找<ph id="ph1">`oldChar`</ph>。</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>Instead, it returns a new string in which all occurrences of <ph id="ph1">`oldChar`</ph> are replaced by <ph id="ph2">`newChar`</ph>.</source>
          <target state="translated">相反，它将返回一个新字符串的所有匹配项<ph id="ph1">`oldChar`</ph>替换为<ph id="ph2">`newChar`</ph>。</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>Because this method returns the modified string, you can chain together successive calls to the <ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> method to perform multiple replacements on the original string.</source>
          <target state="translated">因为此方法将返回修改后的字符串，你可以链接在一起对连续调用<ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph>方法来执行多个替换对原始字符串。</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>Method calls are executed from left to right.</source>
          <target state="translated">方法调用执行从左到右。</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>The following example provides an illustration.</source>
          <target state="translated">下面的示例进行了这方面的演示。</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.Char,System.Char)">
          <source>The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</source>
          <target state="translated">下面的示例创建的以逗号分隔值列表，只需替换一系列数字之间的空白的逗号。</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source>The string to be replaced.</source>
          <target state="translated">要替换的字符串。</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source>The string to replace all occurrences of <bpt id="p1">&lt;c&gt;</bpt>oldValue<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要替换 <bpt id="p1">&lt;c&gt;</bpt>oldValue<ept id="p1">&lt;/c&gt;</ept> 的所有匹配项的字符串。</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</source>
          <target state="translated">返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source>A string that is equivalent to the current string except that all instances of <ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> are replaced with <ph id="ph2">&lt;paramref name="newValue" /&gt;</ph>.</source>
          <target state="translated">等效于当前字符串（除了 <ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> 的所有实例都已替换为 <ph id="ph2">&lt;paramref name="newValue" /&gt;</ph> 外）的字符串。</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source>If <ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> is not found in the current instance, the method returns the current instance unchanged.</source>
          <target state="translated">如果在当前实例中找不到 <ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph>，此方法返回未更改的当前实例。</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>If <ph id="ph1">`newValue`</ph> is <ph id="ph2">`null`</ph>, all occurrences of <ph id="ph3">`oldValue`</ph> are removed.</source>
          <target state="translated">如果<ph id="ph1">`newValue`</ph>是<ph id="ph2">`null`</ph>，出现的所有<ph id="ph3">`oldValue`</ph>会删除。</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>Instead, it returns a new string in which all occurrences of <ph id="ph1">`oldValue`</ph> are replaced by <ph id="ph2">`newValue`</ph>.</source>
          <target state="translated">相反，它将返回一个新字符串的所有匹配项<ph id="ph1">`oldValue`</ph>替换为<ph id="ph2">`newValue`</ph>。</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <ph id="ph1">`oldValue`</ph>.</source>
          <target state="translated">此方法执行序号 （区分大小写和不区分区域性的） 搜索以查找<ph id="ph1">`oldValue`</ph>。</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>Because this method returns the modified string, you can chain together successive calls to the <ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> method to perform multiple replacements on the original string.</source>
          <target state="translated">因为此方法将返回修改后的字符串，你可以链接在一起对连续调用<ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph>方法来执行多个替换对原始字符串。</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>Method calls are executed from left to right.</source>
          <target state="translated">方法调用执行从左到右。</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>The following example provides an illustration.</source>
          <target state="translated">下面的示例进行了这方面的演示。</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Replace(System.String,System.String)">
          <source>The following example demonstrates how you can use the <ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> method to correct a spelling error.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph>方法更正拼写错误。</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" uid="M:System.String.Replace(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> is the empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="oldValue" /&gt;</ph> 为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</source>
          <target state="translated">返回的字符串数组包含此实例中的子字符串（由指定字符串或 Unicode 字符数组的元素分隔）。</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> is used to break a delimited string into substrings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> 用于为多个子字符串中断分隔的字符串。</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can use either a character array to specify zero, one, or multiple delimiting characters (the <ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method), or you can use a character array to specify zero, one, or multiple delimiting strings.</source>
          <target state="translated">可以使用任一字符数组可指定零行、 一行或多个分隔字符 (<ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>方法)，或者可以使用的字符数组来指定零个、 一个或多个分隔字符串。</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Overloads of the <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method allow you to limit the number of substrings returned by the method (the <ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29&gt;</ph> method), to determine whether empty strings are included in the returned substrings (the <ph id="ph3">&lt;xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29&gt;</ph> and <ph id="ph4">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29&gt;</ph> methods, or to do both (the <ph id="ph5">&lt;xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29&gt;</ph> and <ph id="ph6">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29&gt;</ph> methods).</source>
          <target state="translated">重载的<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法允许你限制由该方法返回的子字符串的数目 (<ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29&gt;</ph>方法)，以确定是否返回子字符串中包含空字符串 (<ph id="ph3">&lt;xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29&gt;</ph>和<ph id="ph4">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29&gt;</ph>方法，或若要实现这两种 (<ph id="ph5">&lt;xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29&gt;</ph>和<ph id="ph6">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29&gt;</ph>方法)。</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For more detailed information on the <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method, as well as for examples that call each overload, see the documentation for the individual overloads of <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息上<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法，如很好地与调用的示例中，每个重载，请参阅的文档的各个重载<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method is not always the best way to break a delimited string into substrings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法并不总是中断为多个子字符串分隔的字符串的最佳方式。</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</source>
          <target state="translated">如果你不想要提取所有的子字符串的分隔的字符串，或者如果你想要分析基于模式而不是一组分隔符字符的字符串，请考虑以下替代方法。</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Regular expressions</source>
          <target state="translated">正则表达式</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</source>
          <target state="translated">如果您的字符串符合的固定模式，可以使用正则表达式提取和处理它们的元素。</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, if strings take the form "<bpt id="p1">*</bpt>number<ept id="p1">*</ept> <bpt id="p2">*</bpt>operand<ept id="p2">*</ept> <bpt id="p3">*</bpt>number<ept id="p3">*</ept>" you can use a <bpt id="p4">[</bpt>regular expression<ept id="p4">](~/docs/standard/base-types/regular-expressions.md)</ept> to extract and handle the string's elements.</source>
          <target state="translated">例如，如果字符串采用以下形式"<bpt id="p1">*</bpt>数<ept id="p1">*</ept><bpt id="p2">*</bpt>操作数<ept id="p2">*</ept><bpt id="p3">*</bpt>数<ept id="p3">*</ept>"可以使用<bpt id="p4">[</bpt>正则表达式<ept id="p4">](~/docs/standard/base-types/regular-expressions.md)</ept>提取和处理字符串的元素。</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Here's an example:</source>
          <target state="translated">以下是一个示例：</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The regular expression pattern <ph id="ph1">`(\d+)\s+([-+*/])\s+(\d+)`</ph> is defined like this:</source>
          <target state="translated">正则表达式模式<ph id="ph1">`(\d+)\s+([-+*/])\s+(\d+)`</ph>定义如下：</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match one or more decimal digits.</source>
          <target state="translated">匹配一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match one or more whitespace characters.</source>
          <target state="translated">匹配一个或多个空格字符。</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match an arithmetic operator sign (+, -, *, or /).</source>
          <target state="translated">匹配一个算术运算符符号 (+、-，*，或 /)。</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match one or more whitespace characters.</source>
          <target state="translated">匹配一个或多个空格字符。</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match one or more decimal digits.</source>
          <target state="translated">匹配一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is the third capturing group.</source>
          <target state="translated">这是第三个捕获组。</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</source>
          <target state="translated">正则表达式还可用于从基于一种模式，而不是一组固定的字符的字符串提取子字符串。</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is a common scenario when either of these conditions occurs:</source>
          <target state="translated">这些条件之一发生时，这是一种常见方案：</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>One or more of the delimiter characters does not always serve as a delimiter in the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance.</source>
          <target state="translated">一个或多个分隔符字符不始终用作分隔符中<ph id="ph1">&lt;xref:System.String&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The sequence and number of delimiter characters is variable or unknown.</source>
          <target state="translated">序列和分隔符字符的数量是变量或未知。</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method cannot be used to split the following string, because the number of <ph id="ph2">`\n`</ph> (in C#) or <ph id="ph3">`vbCrLf`</ph> (in Visual Basic) characters is variable, and they don't always serve as delimiters.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法无法用于拆分以下字符串，因为数<ph id="ph2">`\n`</ph>（在 C# 中) 或<ph id="ph3">`vbCrLf`</ph>（在 Visual Basic) 字符是变量，并且始终不用作分隔符。</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>A regular expression can split this string easily, as the following example shows.</source>
          <target state="translated">正则表达式可以轻松地，如以下示例所示拆分此字符串。</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The regular expression pattern <ph id="ph1">`\[([^\[\]]+)\]`</ph> is defined like this:</source>
          <target state="translated">正则表达式模式<ph id="ph1">`\[([^\[\]]+)\]`</ph>定义如下：</target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match an opening bracket.</source>
          <target state="translated">匹配左括号。</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match any character that is not an opening or a closing bracket one or more times.</source>
          <target state="translated">匹配任何字符都不大括号或右括号一个或多个时间。</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match a closing bracket.</source>
          <target state="translated">匹配右括号。</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph> method is almost identical to <ph id="ph2">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph>方法是几乎与<ph id="ph2">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>，只不过它将拆分基于正则表达式模式而不是固定的字符集的字符串。</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>For example, the following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</source>
          <target state="translated">例如，下面的示例使用<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph>方法包含由连字符和其他字符的各种组合分隔的子字符串将字符串拆分。</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The regular expression pattern <ph id="ph1">`\s-\s?[+*]?\s?-\s`</ph> is defined like this:</source>
          <target state="translated">正则表达式模式<ph id="ph1">`\s-\s?[+*]?\s?-\s`</ph>定义如下：</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match a whitespace character followed by a hyphen.</source>
          <target state="translated">匹配连字符后跟一个空白字符。</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match zero or one whitespace character.</source>
          <target state="translated">匹配零个或一个空白字符。</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match zero or one occurrence of either the + or * character.</source>
          <target state="translated">匹配零个或一个匹配项的 + 或 * 字符。</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match zero or one whitespace character.</source>
          <target state="translated">匹配零个或一个空白字符。</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Match a hyphen followed by a whitespace character.</source>
          <target state="translated">匹配连字符后跟空白字符。</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>Search methods and the Substring method</source>
          <target state="translated">搜索方法和 Substring 方法</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</source>
          <target state="translated">如果你不感兴趣所有字符串中子字符串，你可能希望使用一个返回匹配的开始的索引的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>You can then call the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to extract the substring that you want.</source>
          <target state="translated">然后，你可以调用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法以提取所需的子字符串。</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The string comparison methods include:</source>
          <target state="translated">字符串比较方法包括：</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>它返回的字符串实例的字符或字符串的第一个匹配项的从零开始索引。</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>它返回的字符数组中的任意字符的第一个匹配项的当前的字符串实例中的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>它返回的字符串实例的字符或字符串的最后一个匹配项的从零开始索引。</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source><ph id="ph1">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph>它返回的字符数组中的任意字符的最后一个匹配项的当前的字符串实例中的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to find the periods in a string.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法以查找在字符串的时间段。</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.String">
          <source>It then uses the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to return full sentences.</source>
          <target state="translated">然后，它使用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法以返回完整的句子。</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[])">
          <source>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[])">
          <source>Splits a string into substrings that are based on the characters in an array.</source>
          <target state="translated">基于数组中的字符将字符串拆分为多个子字符串。</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[])">
          <source>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <ph id="ph1">&lt;paramref name="separator" /&gt;</ph>.</source>
          <target state="translated">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <ph id="ph1">&lt;paramref name="separator" /&gt;</ph> 中的一个或多个字符分隔。</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[])">
          <source>For more information, see the Remarks section.</source>
          <target state="translated">有关详细信息，请参阅“备注”部分。</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>When a string is delimited by a known set of characters, you can use the <ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method to separate it into substrings.</source>
          <target state="translated">当字符串分隔的一组已知的字符时，你可以使用<ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>方法将其单独放入子字符串。</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>For other ways to extract substrings from a string, see the <bpt id="p1">[</bpt>Alternatives to String.Split<ept id="p1">](#Alternatives)</ept> section.</source>
          <target state="translated">从字符串提取子字符串的其他方法，请参阅<bpt id="p1">[</bpt>String.Split 的替代方法<ept id="p1">](#Alternatives)</ept>部分。</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Return value details</source>
          <target state="translated">返回值的详细信息</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Delimiter characters are not included in the elements of the returned array.</source>
          <target state="translated">返回的数组的元素中不包含分隔符字符。</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>For example, if the separator array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</source>
          <target state="translated">例如，如果分隔符数组包含字符"-"和当前的字符串实例的值是"aa bb cc"，该方法返回一个数组，包含三个元素:"aa"、"bb"和"抄送"。</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If this instance does not contain any of the characters in <ph id="ph1">`separator`</ph>, the returned array consists of a single element that contains this instance.</source>
          <target state="translated">如果此实例不包含任何中的字符<ph id="ph1">`separator`</ph>，返回的数组包含一个包含此实例的单个元素。</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Each element of <ph id="ph1">`separator`</ph> defines a separate delimiter character.</source>
          <target state="translated">每个元素<ph id="ph1">`separator`</ph>定义单独的分隔符字符。</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated">如果两个分隔符相邻，或者开头或的此实例的末尾找到分隔符，则返回的数组中的相应元素包含<ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Here are some examples:</source>
          <target state="translated">下面是一些可能的恶意活动：</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>String value</source>
          <target state="translated">字符串值</target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Separator</source>
          <target state="translated">Separator</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Returned array</source>
          <target state="translated">返回的数组</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"42, 12, 19"</source>
          <target state="translated">"42, 12, 19"</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>new Char[] {',', ' '} (C#)</source>
          <target state="translated">新 Char [] {'，'，' '} (C#)</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Char() = {","c, " "c}) (Visual Basic)</source>
          <target state="translated">Char （) = {"、"c，""c}) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>{"42", "", "12", "", "19"}</source>
          <target state="translated">{"42", "", "12", "", "19"}</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"42..12..19"</source>
          <target state="translated">"42..12..19"</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>new Char[] {'.'}</source>
          <target state="translated">新 Char [] {'。 '}</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>(C#)</source>
          <target state="translated">(C#)</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Char() = {"."c} (Visual Basic)</source>
          <target state="translated">Char （) = {"。"c} (Visual Basic)</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>{"42", "", "12", "", "19"}</source>
          <target state="translated">{"42", "", "12", "", "19"}</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"Banana"</source>
          <target state="translated">"香蕉"</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>new Char[] {'.'}</source>
          <target state="translated">新 Char [] {'。 '}</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>(C#)</source>
          <target state="translated">(C#)</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Char() = {"."c} (Visual Basic)</source>
          <target state="translated">Char （) = {"。"c} (Visual Basic)</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>{"Banana"}</source>
          <target state="translated">{"香蕉"}</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"Darb\nSmarba" (C#)</source>
          <target state="translated">"Darb\nSmarba"(C#)</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"Darb" &amp; vbLf &amp; "Smarba" (Visual Basic)</source>
          <target state="translated">"Darb"（vbLf)"Smarba"(Visual Basic)</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>new Char[] <ph id="ph1">{}</ph> (C#)</source>
          <target state="translated">新 Char [] <ph id="ph1">{}</ph> (C#)</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Char() = <ph id="ph1">{}</ph> (Visual Basic)</source>
          <target state="translated">Char （) = <ph id="ph1">{}</ph> (Visual Basic)</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>{"Darb", "Smarba"}</source>
          <target state="translated">{"Darb"，"Smarba"}</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"Darb\nSmarba" (C#)</source>
          <target state="translated">"Darb\nSmarba"(C#)</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>"Darb" &amp; vbLf &amp; "Smarba" (Visual Basic)</source>
          <target state="translated">"Darb"（vbLf)"Smarba"(Visual Basic)</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>null (C#)</source>
          <target state="translated">null (C#)</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Nothing (Visual Basic)</source>
          <target state="translated">Nothing (Visual Basic)</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>{"Darb", "Smarba"}</source>
          <target state="translated">{"Darb"，"Smarba"}</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The separator array</source>
          <target state="translated">分隔符数组</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Each element of separator defines a separate delimiter that consists of a single character.</source>
          <target state="translated">分隔符的每个元素定义包含单个字符的单独分隔符。</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If the <ph id="ph1">`separator`</ph> argument is <ph id="ph2">`null`</ph> or contains no characters, the method treats white-space characters as the delimiters.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>自变量是<ph id="ph2">`null`</ph>或不包含任何字符，该方法将空格视为分隔符。</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>White-space characters are defined by the Unicode standard; they return <ph id="ph1">`true`</ph> if they are passed to the <ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">由 Unicode 标准; 定义空白字符它们返回<ph id="ph1">`true`</ph>如果它们传递给<ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>String.Split(Char[]) and compiler overload resolution</source>
          <target state="translated">String.Split(Char[]) 和编译器重载决策</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Although the single parameter for this overload of <ph id="ph1">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> is a character array, you can call it with a single character, as the following example shows.</source>
          <target state="translated">尽管的此重载的单个参数<ph id="ph1">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>为字符数组，你可以调用它与单个字符，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Because the <ph id="ph1">`separator`</ph> parameter is decorated  with the <ph id="ph2">&lt;xref:System.ParamArrayAttribute&gt;</ph> attribute, compilers will interpret a single character as a single-element character array.</source>
          <target state="translated">因为<ph id="ph1">`separator`</ph>参数用修饰<ph id="ph2">&lt;xref:System.ParamArrayAttribute&gt;</ph>属性，编译器将解释单个字符作为单个元素字符数组。</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This is not the case for other <ph id="ph1">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> overloads that include a <ph id="ph2">`separator`</ph> parameter; you must explicitly pass these overloads a character array as the <ph id="ph3">`separator`</ph> argument.</source>
          <target state="translated">这不是其他用例<ph id="ph1">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>重载，以包括<ph id="ph2">`separator`</ph>参数，则必须显式传递这些重载为字符数组<ph id="ph3">`separator`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Comparison details</source>
          <target state="translated">比较详细信息</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the characters in the <ph id="ph2">`separator`</ph> array, and returns those substrings as elements of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>方法提取由一个或多个中的字符分隔此字符串中子字符串<ph id="ph2">`separator`</ph>数组中，然后将这些子字符串作为数组的元素返回。</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>方法执行使用区分大小写的序号排序规则的比较，从而查找分隔符。</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>For more information about word, string, and ordinal sorts, see the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Alternatives to String.Split</source>
          <target state="translated">String.Split 的替代方法</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method is not always the best way to break a delimited string into substrings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法并不总是中断为多个子字符串分隔的字符串的最佳方式。</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</source>
          <target state="translated">如果你不想要提取所有的子字符串的分隔的字符串，或者如果你想要分析基于模式而不是一组分隔符字符的字符串，请考虑以下替代方法。</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Regular expressions</source>
          <target state="translated">正则表达式</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</source>
          <target state="translated">如果您的字符串符合的固定模式，可以使用正则表达式提取和处理它们的元素。</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>For example, if strings take the form "<bpt id="p1">*</bpt>number<ept id="p1">*</ept> <bpt id="p2">*</bpt>operand<ept id="p2">*</ept> <bpt id="p3">*</bpt>number<ept id="p3">*</ept>" you can use a <bpt id="p4">[</bpt>regular expression<ept id="p4">](~/docs/standard/base-types/regular-expressions.md)</ept> to extract and handle the string's elements.</source>
          <target state="translated">例如，如果字符串采用以下形式"<bpt id="p1">*</bpt>数<ept id="p1">*</ept><bpt id="p2">*</bpt>操作数<ept id="p2">*</ept><bpt id="p3">*</bpt>数<ept id="p3">*</ept>"可以使用<bpt id="p4">[</bpt>正则表达式<ept id="p4">](~/docs/standard/base-types/regular-expressions.md)</ept>提取和处理字符串的元素。</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Here's an example:</source>
          <target state="translated">以下是一个示例：</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The regular expression pattern <ph id="ph1">`(\d+)\s+([-+*/])\s+(\d+)`</ph> is defined like this:</source>
          <target state="translated">正则表达式模式<ph id="ph1">`(\d+)\s+([-+*/])\s+(\d+)`</ph>定义如下：</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match one or more decimal digits.</source>
          <target state="translated">匹配一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match one or more whitespace characters.</source>
          <target state="translated">匹配一个或多个空格字符。</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match an arithmetic operator sign (+, -, *, or /).</source>
          <target state="translated">匹配一个算术运算符符号 (+、-，*，或 /)。</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match one or more whitespace characters.</source>
          <target state="translated">匹配一个或多个空格字符。</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match one or more decimal digits.</source>
          <target state="translated">匹配一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This is the third capturing group.</source>
          <target state="translated">这是第三个捕获组。</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</source>
          <target state="translated">正则表达式还可用于从基于一种模式，而不是一组固定的字符的字符串提取子字符串。</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This is a common scenario when either of these conditions occurs:</source>
          <target state="translated">这些条件之一发生时，这是一种常见方案：</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>One or more of the delimiter characters does not always serve as a delimiter in the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance.</source>
          <target state="translated">一个或多个分隔符字符不始终用作分隔符中<ph id="ph1">&lt;xref:System.String&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The sequence and number of delimiter characters is variable or unknown.</source>
          <target state="translated">序列和分隔符字符的数量是变量或未知。</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>For example, the <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method cannot be used to split the following string, because the number of <ph id="ph2">`\n`</ph> (in C#) or <ph id="ph3">`vbCrLf`</ph> (in Visual Basic) characters is variable, and they don't always serve as delimiters.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法无法用于拆分以下字符串，因为数<ph id="ph2">`\n`</ph>（在 C# 中) 或<ph id="ph3">`vbCrLf`</ph>（在 Visual Basic) 字符是变量，并且始终不用作分隔符。</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>A regular expression can split this string easily, as the following example shows.</source>
          <target state="translated">正则表达式可以轻松地，如以下示例所示拆分此字符串。</target>       </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The regular expression pattern <ph id="ph1">`\[([^\[\]]+)\]`</ph> is defined like this:</source>
          <target state="translated">正则表达式模式<ph id="ph1">`\[([^\[\]]+)\]`</ph>定义如下：</target>       </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match an opening bracket.</source>
          <target state="translated">匹配左括号。</target>       </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match any character that is not an opening or a closing bracket one or more times.</source>
          <target state="translated">匹配任何字符都不大括号或右括号一个或多个时间。</target>       </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match a closing bracket.</source>
          <target state="translated">匹配右括号。</target>       </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph> method is almost identical to <ph id="ph2">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph>方法是几乎与<ph id="ph2">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph>，只不过它将拆分基于正则表达式模式而不是固定的字符集的字符串。</target>       </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>For example, the following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</source>
          <target state="translated">例如，下面的示例使用<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph>方法包含由连字符和其他字符的各种组合分隔的子字符串将字符串拆分。</target>       </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The regular expression pattern <ph id="ph1">`\s-\s?[+*]?\s?-\s`</ph> is defined like this:</source>
          <target state="translated">正则表达式模式<ph id="ph1">`\s-\s?[+*]?\s?-\s`</ph>定义如下：</target>       </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match a whitespace character followed by a hyphen.</source>
          <target state="translated">匹配连字符后跟一个空白字符。</target>       </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match zero or one whitespace character.</source>
          <target state="translated">匹配零个或一个空白字符。</target>       </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match zero or one occurrence of either the + or * character.</source>
          <target state="translated">匹配零个或一个匹配项的 + 或 * 字符。</target>       </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match zero or one whitespace character.</source>
          <target state="translated">匹配零个或一个空白字符。</target>       </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Match a hyphen followed by a whitespace character.</source>
          <target state="translated">匹配连字符后跟空白字符。</target>       </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Search methods and the Substring method</source>
          <target state="translated">搜索方法和 Substring 方法</target>       </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</source>
          <target state="translated">如果你不感兴趣所有字符串中子字符串，你可能希望使用一个返回匹配的开始的索引的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>You can then call the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to extract the substring that you want.</source>
          <target state="translated">然后，你可以调用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法以提取所需的子字符串。</target>       </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The string comparison methods include:</source>
          <target state="translated">字符串比较方法包括：</target>       </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source><ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>它返回的字符串实例的字符或字符串的第一个匹配项的从零开始索引。</target>       </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source><ph id="ph1">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>它返回的字符数组中的任意字符的第一个匹配项的当前的字符串实例中的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source><ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>它返回的字符串实例的字符或字符串的最后一个匹配项的从零开始索引。</target>       </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source><ph id="ph1">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph>它返回的字符数组中的任意字符的最后一个匹配项的当前的字符串实例中的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to find the periods in a string.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法以查找在字符串的时间段。</target>       </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>It then uses the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to return full sentences.</source>
          <target state="translated">然后，它使用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法以返回完整的句子。</target>       </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Performance Considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each array element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法返回的数组对象分配内存和<ph id="ph2">&lt;xref:System.String&gt;</ph>每个数组元素的对象。</target>       </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method.</source>
          <target state="translated">如果你的应用程序需要最佳性能，或你的应用程序管理内存分配至关重要，请考虑使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>You also have the option of using the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to locate a substring within a string.</source>
          <target state="translated">你还可以选择使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来查找字符串中的子字符串。</target>       </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>To split a string at a separator character, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.</source>
          <target state="translated">若要在分隔符字符将字符串拆分，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找字符串中的分隔符。</target>       </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>To split a string at a separator string, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.</source>
          <target state="translated">若要在分隔符字符串将字符串拆分，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找分隔符字符串的第一个字符。</target>       </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>Then use the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</source>
          <target state="translated">然后使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来确定该第一个字符后面的字符是否为等于其余的字符的分隔符字符串。</target>       </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>In addition, if the same set of characters is used to split strings in multiple <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.</source>
          <target state="translated">此外，如果组相同的字符用于拆分中存在多个字符串<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</target>       </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>This significantly reduces the additional overhead of each method call.</source>
          <target state="translated">从而大幅减少每个方法调用的其他系统开销。</target>       </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters.</source>
          <target state="translated">下面的示例演示如何通过将视为分隔符的空格和标点符号的文本块从提取各个单词。</target>       </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>The character array passed to the <ph id="ph1">`separator`</ph> parameter of the <ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph> method consists of a space character and a tab character, together with some common punctuation symbols.</source>
          <target state="translated">字符数组传递给<ph id="ph1">`separator`</ph>参数<ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法组成一个空格字符和一个 tab 字符，以及一些常用标点符号。</target>       </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> and earlier versions, if the <ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph> method is passed a <ph id="ph3">&lt;paramref name="separator" /&gt;</ph> that is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or contains no characters, the method uses a slightly different set of characters to split the string than the <ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph> method does to trim the string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>和早期版本中，如果<ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph>方法传递<ph id="ph3">&lt;paramref name="separator" /&gt;</ph>即<ph id="ph4">&lt;see langword="null" /&gt;</ph>或不包含任何字符，该方法使用略有不同的一组字符比字符串拆分<ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph>方法执行到修整该字符串。</target>       </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[])">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, both methods use an identical set of Unicode white-space characters.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，这两种方法使用相同的一组 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>The maximum number of substrings to return.</source>
          <target state="translated">要返回的子字符串的最大数量。</target>       </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Splits a string into a maximum number of substrings based on the characters in an array.</source>
          <target state="translated">基于数组中的字符将一个字符串拆分成最大数量的子字符串。</target>       </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>You also specify the maximum number of substrings to return.</source>
          <target state="translated">也可指定要返回的子字符串的最大数量。</target>       </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <ph id="ph1">&lt;paramref name="separator" /&gt;</ph>.</source>
          <target state="translated">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <ph id="ph1">&lt;paramref name="separator" /&gt;</ph> 中的一个或多个字符分隔。</target>       </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>For more information, see the Remarks section.</source>
          <target state="translated">有关详细信息，请参阅“备注”部分。</target>       </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Delimiter characters are not included in the elements of the returned array.</source>
          <target state="translated">返回的数组的元素中不包含分隔符字符。</target>       </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If this instance does not contain any of the characters in <ph id="ph1">`separator`</ph>, the returned array consists of a single element that contains this instance.</source>
          <target state="translated">如果此实例不包含任何中的字符<ph id="ph1">`separator`</ph>，返回的数组包含一个包含此实例的单个元素。</target>       </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is zero, an empty array is returned.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>为零，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If the <ph id="ph1">`separator`</ph> parameter is <ph id="ph2">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>参数是<ph id="ph2">`null`</ph>或不包含任何字符，空白字符都被认为是分隔符。</target>       </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>White-space characters are defined by the Unicode standard and return <ph id="ph1">`true`</ph> if they are passed to the <ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">由 Unicode 标准和返回定义空白字符<ph id="ph1">`true`</ph>如果它们传递给<ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Each element of <ph id="ph1">`separator`</ph> defines a separate delimiter character.</source>
          <target state="translated">每个元素<ph id="ph1">`separator`</ph>定义单独的分隔符字符。</target>       </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated">如果两个分隔符相邻，或者开头或的此实例的末尾找到分隔符，则相应的数组元素包含<ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If there are more than <ph id="ph1">`count`</ph> substrings in this instance, the first <ph id="ph2">`count`</ph> minus 1 substrings are returned in the first <ph id="ph3">`count`</ph> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</source>
          <target state="translated">如果有多个<ph id="ph1">`count`</ph>个子字符串在此情况下，第一个<ph id="ph2">`count`</ph>减去 1 的子字符串将返回在第一个<ph id="ph3">`count`</ph>减 1 个元素的返回值，且其余的字符在此实例中返回的最后一个返回值的元素。</target>       </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>大于数量的子字符串，则返回可用的子字符串和不引发异常。</target>       </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>The following table provides examples.</source>
          <target state="translated">下表提供了示例。</target>       </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>String value</source>
          <target state="translated">字符串值</target>       </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Separator</source>
          <target state="translated">Separator</target>       </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Count</source>
          <target state="translated">计数</target>       </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Returned array</source>
          <target state="translated">返回的数组</target>       </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"42, 12, 19"</source>
          <target state="translated">"42, 12, 19"</target>       </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>new Char[] {',', ' '} (C#)</source>
          <target state="translated">新 Char [] {'，'，' '} (C#)</target>       </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Char() = {","c, " "c} (Visual Basic)</source>
          <target state="translated">Char （) = {"、"c，""c} (Visual Basic)</target>       </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>{"42", " 12, 19"}</source>
          <target state="translated">{"42", " 12, 19"}</target>       </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"42..12..19"</source>
          <target state="translated">"42..12..19"</target>       </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>new Char[] {'.'}</source>
          <target state="translated">新 Char [] {'。 '}</target>       </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>(C#)</source>
          <target state="translated">(C#)</target>       </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Char() = {"."c} (Visual Basic)</source>
          <target state="translated">Char （) = {"。"c} (Visual Basic)</target>       </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>{"42", "", "12", ".19"}</source>
          <target state="translated">{"42", "", "12", ".19"}</target>       </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Banana"</source>
          <target state="translated">"香蕉"</target>       </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>new Char[] {'.'}</source>
          <target state="translated">新 Char [] {'。 '}</target>       </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>(C#)</source>
          <target state="translated">(C#)</target>       </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Char() = {"."c} (Visual Basic)</source>
          <target state="translated">Char （) = {"。"c} (Visual Basic)</target>       </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>{"Banana"}</source>
          <target state="translated">{"香蕉"}</target>       </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb\nSmarba" (C#)</source>
          <target state="translated">"Darb\nSmarba"(C#)</target>       </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb" &amp; vbLf &amp; "Smarba" (Visual Basic)</source>
          <target state="translated">"Darb"（vbLf)"Smarba"(Visual Basic)</target>       </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>new Char[] <ph id="ph1">{}</ph> (C#)</source>
          <target state="translated">新 Char [] <ph id="ph1">{}</ph> (C#)</target>       </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Char() = <ph id="ph1">{}</ph> (Visual Basic)</source>
          <target state="translated">Char （) = <ph id="ph1">{}</ph> (Visual Basic)</target>       </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>{"Darb\nSmarba"} (C#)</source>
          <target state="translated">{"Darb\nSmarba"}(C#)</target>       </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb" &amp; vbLf &amp; "Smarba" (Visual Basic)</source>
          <target state="translated">"Darb"（vbLf)"Smarba"(Visual Basic)</target>       </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb\nSmarba" (C#)</source>
          <target state="translated">"Darb\nSmarba"(C#)</target>       </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb" &amp; vbLf &amp; "Smarba" (Visual Basic)</source>
          <target state="translated">"Darb"（vbLf)"Smarba"(Visual Basic)</target>       </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>new Char[] null (C#)</source>
          <target state="translated">新的 Char [] null (C#)</target>       </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Char() = Nothing</source>
          <target state="translated">Char （) = Nothing</target>       </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>{"Darb", "Smarba"}</source>
          <target state="translated">{"Darb"，"Smarba"}</target>       </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb\nSmarba" (C#)</source>
          <target state="translated">"Darb\nSmarba"(C#)</target>       </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>"Darb" &amp; vbLf &amp; "Smarba" (Visual Basic)</source>
          <target state="translated">"Darb"（vbLf)"Smarba"(Visual Basic)</target>       </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>new Char[] null (C#)</source>
          <target state="translated">新的 Char [] null (C#)</target>       </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Char() = Nothing</source>
          <target state="translated">Char （) = Nothing</target>       </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>100</source>
          <target state="translated">100</target>       </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>{"Darb", "Smarba"}</source>
          <target state="translated">{"Darb"，"Smarba"}</target>       </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Performance Considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each array element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法返回的数组对象分配内存和<ph id="ph2">&lt;xref:System.String&gt;</ph>每个数组元素的对象。</target>       </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.</source>
          <target state="translated">如果你的应用程序需要最佳性能，或你的应用程序管理内存分配至关重要，请考虑使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法，并选择性地<ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph>方法，来查找字符串中的子字符串。</target>       </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If you are splitting a string at a separator character, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找字符串中的分隔符。</target>       </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>If you are splitting a string at a separator string, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符字符串，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找分隔符字符串的第一个字符。</target>       </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>Then use the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</source>
          <target state="translated">然后使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来确定该第一个字符后面的字符是否为等于其余的字符的分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>In addition, if the same set of characters is used to split strings in multiple <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.</source>
          <target state="translated">此外，如果组相同的字符用于拆分中存在多个字符串<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</target>       </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>This significantly reduces the additional overhead of each method call.</source>
          <target state="translated">从而大幅减少每个方法调用的其他系统开销。</target>       </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>The following example demonstrates how <ph id="ph1">`count`</ph> affects the number of strings returned by <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">`count`</ph>会影响返回的字符串的数量<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> and earlier versions, if the <ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph> method is passed a <ph id="ph3">&lt;paramref name="separator" /&gt;</ph> that is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or contains no characters, the method uses a slightly different set of characters to split the string than the <ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph> method does to trim the string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>和早期版本中，如果<ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph>方法传递<ph id="ph3">&lt;paramref name="separator" /&gt;</ph>即<ph id="ph4">&lt;see langword="null" /&gt;</ph>或不包含任何字符，该方法使用略有不同的一组字符比字符串拆分<ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph>方法执行到修整该字符串。</target>       </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, both methods use an identical set of Unicode white-space characters.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，这两种方法使用相同的一组 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph> to omit empty array elements from the array returned; or <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph> to include empty array elements in the array returned.</source>
          <target state="translated">要省略返回的数组中的空数组元素，则为 <ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph>；要包含返回的数组中的空数组元素，则为 <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Splits a string into substrings based on the characters in an array.</source>
          <target state="translated">基于数组中的字符将字符串拆分为多个子字符串。</target>       </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>You can specify whether the substrings include empty array elements.</source>
          <target state="translated">可以指定子字符串是否包含空数组元素。</target>       </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>An array whose elements contain the substrings in this string that are delimited by one or more characters in <ph id="ph1">&lt;paramref name="separator" /&gt;</ph>.</source>
          <target state="translated">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <ph id="ph1">&lt;paramref name="separator" /&gt;</ph> 中的一个或多个字符分隔。</target>       </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>For more information, see the Remarks section.</source>
          <target state="translated">有关详细信息，请参阅“备注”部分。</target>       </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Return value details</source>
          <target state="translated">返回值的详细信息</target>       </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Delimiter characters (the characters in the <ph id="ph1">`separator`</ph> array) are not included in the elements of the returned array.</source>
          <target state="translated">分隔符字符 (中的字符<ph id="ph1">`separator`</ph>数组) 不包括在返回数组的元素。</target>       </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>For example, if the <ph id="ph1">`separator`</ph> array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</source>
          <target state="translated">例如，如果<ph id="ph1">`separator`</ph>数组包含字符"-"和当前的字符串实例的值是"aa bb cc"，该方法返回一个数组，包含三个元素:"aa"、"bb"和"抄送"。</target>       </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If this instance does not contain any of the characters in <ph id="ph1">`separator`</ph>, the returned array consists of a single element that contains this instance.</source>
          <target state="translated">如果此实例不包含任何中的字符<ph id="ph1">`separator`</ph>，返回的数组包含一个包含此实例的单个元素。</target>       </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is <ph id="ph2">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, the method returns an empty array.</source>
          <target state="translated">如果<ph id="ph1">`options`</ph>参数是<ph id="ph2">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph>和此实例的长度为零，该方法返回空数组。</target>       </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Each element of <ph id="ph1">`separator`</ph> defines a separate delimiter that consists of a single character.</source>
          <target state="translated">每个元素<ph id="ph1">`separator`</ph>定义包含单个字符的单独分隔符。</target>       </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`options`</ph> argument is <ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`options`</ph>自变量是<ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>，和两个分隔符是相邻或分隔符找到的开头或末尾此情况下，相应的数组元素都包含<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>For example, if <ph id="ph1">`separator`</ph> includes  two elements, "-" and "<ph id="ph2">\_</ph>", the value of the string instance is "-<ph id="ph3">\_</ph>aa-<ph id="ph4">\_</ph>", and the value of   the <ph id="ph5">`options`</ph> argument is <ph id="ph6">&lt;xref:System.StringSplitOptions.None&gt;</ph>, the method returns a string array with the following five elements:</source>
          <target state="translated">例如，如果<ph id="ph1">`separator`</ph>包括两个元素，"-"和"<ph id="ph2">\_</ph>"，字符串实例的值是"-<ph id="ph3">\_</ph>aa-<ph id="ph4">\_</ph>"，和的值<ph id="ph5">`options`</ph>自变量是<ph id="ph6">&lt;xref:System.StringSplitOptions.None&gt;</ph>，该方法返回的字符串数组下面的五个元素：</target>       </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string that precedes the "-" character at index 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>表示之前的空字符串"-"字符位于索引 0 处。</target>       </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string between the "-" character at index 0 and the "_" character at index 1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>它表示之间的空字符串"-"字符在索引 0 和位于索引 1 处的"_"字符。</target>       </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>"aa",</source>
          <target state="translated">"aa"，</target>       </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string that follows the "_" character at index 4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>它表示后面索引 4 处的"_"字符的空字符串。</target>       </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string that follows the "-" character at index 5.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>它表示后面的空字符串"-"字符索引 5 处。</target>       </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>The separator array</source>
          <target state="translated">分隔符数组</target>       </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`separator`</ph> parameter is <ph id="ph2">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>参数是<ph id="ph2">`null`</ph>或不包含任何字符，空白字符都被认为是分隔符。</target>       </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>White-space characters are defined by the Unicode standard and return <ph id="ph1">`true`</ph> if they are passed to the <ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">由 Unicode 标准和返回定义空白字符<ph id="ph1">`true`</ph>如果它们传递给<ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`separator`</ph> parameter in the call to this method overload is <ph id="ph2">`null`</ph>, compiler overload resolution fails.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>对此方法重载的调用中的参数是<ph id="ph2">`null`</ph>，编译器重载决策失败。</target>       </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>To unambiguously identify the called method, your code must indicate the type of the <ph id="ph1">`null`</ph>.</source>
          <target state="translated">若要明确地标识所调用的方法，你的代码必须指示的一种<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>The following example shows several ways to unambiguously identify this overload.</source>
          <target state="translated">下面的示例演示通过多种方式来明确地标识此重载。</target>       </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Comparison details</source>
          <target state="translated">比较详细信息</target>       </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the characters in the <ph id="ph2">`separator`</ph> parameter, and returns those substrings as elements of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法提取由一个或多个中的字符分隔此字符串中子字符串<ph id="ph2">`separator`</ph>参数，并将这些子字符串作为数组的元素返回。</target>       </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法执行使用区分大小写的序号排序规则的比较，从而查找分隔符。</target>       </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>For more information about word, string, and ordinal sorts, see the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Performance Considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each array element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法返回的数组对象分配内存和<ph id="ph2">&lt;xref:System.String&gt;</ph>每个数组元素的对象。</target>       </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.</source>
          <target state="translated">如果你的应用程序需要最佳性能，或你的应用程序管理内存分配至关重要，请考虑使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法，并选择性地<ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph>方法，来查找字符串中的子字符串。</target>       </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If you are splitting a string at a separator character, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找字符串中的分隔符。</target>       </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>If you are splitting a string at a separator string, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符字符串，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找分隔符字符串的第一个字符。</target>       </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>Then use the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</source>
          <target state="translated">然后使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来确定该第一个字符后面的字符是否为等于其余的字符的分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>In addition, if the same set of characters is used to split strings in multiple <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.</source>
          <target state="translated">此外，如果组相同的字符用于拆分中存在多个字符串<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</target>       </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>This significantly reduces the additional overhead of each method call.</source>
          <target state="translated">从而大幅减少每个方法调用的其他系统开销。</target>       </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.StringSplitOptions&gt;</ph> enumeration to include or exclude substrings generated by the <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.StringSplitOptions&gt;</ph>枚举，以包括或排除子字符串由生成<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not one of the <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> and earlier versions, if the <ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph> method is passed a <ph id="ph3">&lt;paramref name="separator" /&gt;</ph> that is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or contains no characters, the method uses a slightly different set of characters to split the string than the <ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph> method does to trim the string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>和早期版本中，如果<ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph>方法传递<ph id="ph3">&lt;paramref name="separator" /&gt;</ph>即<ph id="ph4">&lt;see langword="null" /&gt;</ph>或不包含任何字符，该方法使用略有不同的一组字符比字符串拆分<ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph>方法执行到修整该字符串。</target>       </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, both methods use an identical set of Unicode white-space characters.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，这两种方法使用相同的一组 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph> to omit empty array elements from the array returned; or <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph> to include empty array elements in the array returned.</source>
          <target state="translated">要省略返回的数组中的空数组元素，则为 <ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph>；要包含返回的数组中的空数组元素，则为 <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Splits a string into substrings based on the strings in an array.</source>
          <target state="translated">基于数组中的字符串将字符串拆分为多个子字符串。</target>       </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>You can specify whether the substrings include empty array elements.</source>
          <target state="translated">可以指定子字符串是否包含空数组元素。</target>       </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>An array whose elements contain the substrings in this string that are delimited by one or more strings in <ph id="ph1">&lt;paramref name="separator" /&gt;</ph>.</source>
          <target state="translated">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <ph id="ph1">&lt;paramref name="separator" /&gt;</ph> 中的一个或多个字符串分隔。</target>       </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>For more information, see the Remarks section.</source>
          <target state="translated">有关详细信息，请参阅“备注”部分。</target>       </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>When a string is delimited by a known set of strings, you can use the <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method to separate it into substrings.</source>
          <target state="translated">当字符串分隔的一组已知的字符串时，你可以使用<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法将其单独放入子字符串。</target>       </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Return value details</source>
          <target state="translated">返回值的详细信息</target>       </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Delimiter strings are not included in the elements of the returned array.</source>
          <target state="translated">返回的数组的元素中不包括分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>For example, if the <ph id="ph1">`separator`</ph> array includes the string "--" and the value of the current string instance is "aa--bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</source>
          <target state="translated">例如，如果<ph id="ph1">`separator`</ph>数组包含字符串"-"和当前的字符串实例的值是"aa-bb 抄送"，该方法返回一个数组，包含三个元素:"aa"、"bb"和"抄送"。</target>       </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If this instance does not contain any of the strings in <ph id="ph1">`separator`</ph>, the returned array consists of a single element that contains this instance.</source>
          <target state="translated">如果此实例不包含任何中的字符串<ph id="ph1">`separator`</ph>，返回的数组包含一个包含此实例的单个元素。</target>       </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is <ph id="ph2">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, the method returns an empty array.</source>
          <target state="translated">如果<ph id="ph1">`options`</ph>参数是<ph id="ph2">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph>和此实例的长度为零，该方法返回空数组。</target>       </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Each element of <ph id="ph1">`separator`</ph> defines a separate delimiter that consists of one or more characters.</source>
          <target state="translated">每个元素<ph id="ph1">`separator`</ph>定义一个或多个字符组成的单独分隔符。</target>       </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`options`</ph> argument is <ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`options`</ph>自变量是<ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>，和两个分隔符是相邻或分隔符找到的开头或末尾此情况下，相应的数组元素都包含<ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>For example, if <ph id="ph1">`separator`</ph> includes  two elements, "-" and "_", the value of the string instance is "-_aa-<ph id="ph2">\_</ph>", and the value of   the <ph id="ph3">`options`</ph> argument is <ph id="ph4">&lt;xref:System.StringSplitOptions.None&gt;</ph>, the method returns a sting array with the following five elements:</source>
          <target state="translated">例如，如果<ph id="ph1">`separator`</ph>包括两个元素，"-"和"_"、 字符串实例的值是"-_aa-<ph id="ph2">\_</ph>"，和的值<ph id="ph3">`options`</ph>自变量是<ph id="ph4">&lt;xref:System.StringSplitOptions.None&gt;</ph>，该方法返回以下五个元素的字符串数组：</target>       </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string that precedes the "-" substring at index 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>表示之前的空字符串"-"位于索引 0 处的子字符串。</target>       </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string between the "-" substring at index 0 and the "_" substring at index 1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>它表示之间的空字符串"-"在索引 0 和位于索引 1 处的"_"子字符串的子字符串。</target>       </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>"aa",</source>
          <target state="translated">"aa"，</target>       </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string that follows the "_" substring at index 4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>它表示后面索引 4 处的"_"子字符串的空字符串。</target>       </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, which represents the empty string that follows the "-" substring at index 5.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>它表示后面的空字符串"-"索引 5 处的子字符串。</target>       </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The separator array</source>
          <target state="translated">分隔符数组</target>       </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If any of the elements in <ph id="ph1">`separator`</ph> consists of multiple characters, the entire substring is considered a delimiter.</source>
          <target state="translated">如果任何中的元素<ph id="ph1">`separator`</ph>包含的多个字符，将整个子字符串被视为分隔符。</target>       </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>For example, if one of the elements in <ph id="ph1">`separator`</ph> is "10", attempting to split the string "This10is10a10string."</source>
          <target state="translated">例如，如果一个中的元素的<ph id="ph1">`separator`</ph>为"10"，以尝试拆分字符串"This10is10a10string。"</target>       </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>returns the following four-element array: { "This", "is", "a", "string."</source>
          <target state="translated">返回以下四个元素的数组: {"This"，"is"，"a"、"字符串。</target>       </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>}.</source>
          <target state="translated">}.</target>       </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`separator`</ph> parameter is <ph id="ph2">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>参数是<ph id="ph2">`null`</ph>或不包含任何字符，空白字符都被认为是分隔符。</target>       </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>White-space characters are defined by the Unicode standard and return <ph id="ph1">`true`</ph> if they are passed to the <ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">由 Unicode 标准和返回定义空白字符<ph id="ph1">`true`</ph>如果它们传递给<ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If the <ph id="ph1">`separator`</ph> parameter in the call to this method overload is <ph id="ph2">`null`</ph>, compiler overload resolution fails.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>对此方法重载的调用中的参数是<ph id="ph2">`null`</ph>，编译器重载决策失败。</target>       </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>To unambiguously identify the called method, your code must indicate the type of the <ph id="ph1">`null`</ph>.</source>
          <target state="translated">若要明确地标识所调用的方法，你的代码必须指示的一种<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The following example shows several ways to unambiguously identify this overload.</source>
          <target state="translated">下面的示例演示通过多种方式来明确地标识此重载。</target>       </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Comparison details</source>
          <target state="translated">比较详细信息</target>       </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the strings in the <ph id="ph2">`separator`</ph> parameter, and returns those substrings as elements of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法提取由一个或多个中的字符串分隔此字符串中子字符串<ph id="ph2">`separator`</ph>参数，并将这些子字符串作为数组的元素返回。</target>       </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法执行使用区分大小写的序号排序规则的比较，从而查找分隔符。</target>       </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>For more information about word, string, and ordinal sorts, see the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method ignores any element of <ph id="ph2">`separator`</ph> whose value is <ph id="ph3">`null`</ph> or the empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法将忽略的任何元素<ph id="ph2">`separator`</ph>其值是<ph id="ph3">`null`</ph>或为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>To avoid ambiguous results when strings in <ph id="ph1">`separator`</ph> have characters in common, the <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in <ph id="ph3">`separator`</ph> that is equal to a delimiter in the instance.</source>
          <target state="translated">若要避免不明确的结果时中的字符串<ph id="ph1">`separator`</ph>具有公共，字符<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>操作进行从头到实例，值的结尾和匹配的第一个元素<ph id="ph3">`separator`</ph>等于中的分隔符实例。</target>       </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The order in which substrings are encountered in the instance takes precedence over the order of elements in <ph id="ph1">`separator`</ph>.</source>
          <target state="translated">在其中子字符串的实例中出现的顺序将优先于中的元素的顺序<ph id="ph1">`separator`</ph>。</target>       </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>For example, consider an instance whose value is "abcdef".</source>
          <target state="translated">例如，考虑其值是"abcdef"的实例。</target>       </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If the first element in <ph id="ph1">`separator`</ph> was "ef" and the second element was "bcde", the result of the split operation would be a string array that contains two elements, "a" and "f".</source>
          <target state="translated">如果中的第一个元素<ph id="ph1">`separator`</ph>为"简称 ef"，第二个元素为"bcde"，拆分操作的结果将是一个字符串数组，包含两个元素，"a"和"f"。</target>       </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>This is because the substring in the instance, "bcde", is encountered and matches an element in <ph id="ph1">`separator`</ph> before the substring "f" is encountered.</source>
          <target state="translated">这是因为在实例中，"bcde"的子字符串遇到和匹配中的某个元素<ph id="ph1">`separator`</ph>遇到的子字符串"f"之前。</target>       </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>However, if the first element of <ph id="ph1">`separator`</ph> was "bcd" and the second element was "bc", the result of the split operation would be a string array that contains two elements, "a" and "ef".</source>
          <target state="translated">但是，如果的第一个元素<ph id="ph1">`separator`</ph>为"bcd"，第二个元素为"bc"，该拆分操作的结果将是一个字符串数组，包含两个元素，"a"和"ef"。</target>       </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>This is because "bcd" is the first delimiter in <ph id="ph1">`separator`</ph> that matches a delimiter in the instance.</source>
          <target state="translated">这是因为"bcd"中的第一个分隔符<ph id="ph1">`separator`</ph>与实例中的分隔符相匹配。</target>       </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be a string array that contains two elements,  "a" and "def".</source>
          <target state="translated">如果已撤消的分隔符的顺序，因此第一个元素为"bc"，并且此第二个元素是"bcd"，结果将是一个字符串数组，包含两个元素，"a"和"def"。</target>       </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Performance considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each array element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法返回的数组对象分配内存和<ph id="ph2">&lt;xref:System.String&gt;</ph>每个数组元素的对象。</target>       </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.</source>
          <target state="translated">如果你的应用程序需要最佳性能，或你的应用程序管理内存分配至关重要，请考虑使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法，并选择性地<ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph>方法，来查找字符串中的子字符串。</target>       </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If you are splitting a string at a separator character, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找字符串中的分隔符。</target>       </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>If you are splitting a string at a separator string, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符字符串，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找分隔符字符串的第一个字符。</target>       </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Then use the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</source>
          <target state="translated">然后使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来确定该第一个字符后面的字符是否为等于其余的字符的分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>In addition, if the same set of characters is used to split strings in multiple <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.</source>
          <target state="translated">此外，如果组相同的字符用于拆分中存在多个字符串<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</target>       </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>This significantly reduces the additional overhead of each method call.</source>
          <target state="translated">从而大幅减少每个方法调用的其他系统开销。</target>       </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The following example illustrates the difference in the arrays returned by calling a string's <ph id="ph1">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType&gt;</ph> method with its <ph id="ph2">`options`</ph> parameter equal to <ph id="ph3">&lt;xref:System.StringSplitOptions.None?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">下面的示例演示返回通过调用的字符串数组中的差异<ph id="ph1">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType&gt;</ph>方法替换其<ph id="ph2">`options`</ph>参数等于<ph id="ph3">&lt;xref:System.StringSplitOptions.None?displayProperty=nameWithType&gt;</ph>和<ph id="ph4">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>The following example defines an array of separators that include punctuation and white-space characters.</source>
          <target state="translated">下面的示例定义包括标点和空白字符的分隔符的数组。</target>       </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Passing this array along with a value of <ph id="ph1">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph> to the <ph id="ph2">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29&gt;</ph> method returns an array that consists of the individual words from the string.</source>
          <target state="translated">传递的值以及此数组<ph id="ph1">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph>到<ph id="ph2">&lt;xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29&gt;</ph>方法返回一个数组，其中包含从字符串的各单词。</target>       </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>Note that the method is called with the <ph id="ph1">`options`</ph> argument set to <ph id="ph2">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请注意，调用该方法<ph id="ph1">`options`</ph>参数设置为<ph id="ph2">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>This prevents the returned array from including <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> values that represent empty substring matches between punctuation marks and white-space characters.</source>
          <target state="translated">这可以防止返回的数组包括<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>表示匹配标点符号和空白字符之间的空的子字符串的值。</target>       </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not one of the <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> and earlier versions, if the <ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph> method is passed a <ph id="ph3">&lt;paramref name="separator" /&gt;</ph> that is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or contains no characters, the method uses a slightly different set of characters to split the string than the <ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph> method does to trim the string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>和早期版本中，如果<ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph>方法传递<ph id="ph3">&lt;paramref name="separator" /&gt;</ph>即<ph id="ph4">&lt;see langword="null" /&gt;</ph>或不包含任何字符，该方法使用略有不同的一组字符比字符串拆分<ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph>方法执行到修整该字符串。</target>       </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, both methods use an identical set of Unicode white-space characters.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，这两种方法使用相同的一组 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>The maximum number of substrings to return.</source>
          <target state="translated">要返回的子字符串的最大数量。</target>       </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph> to omit empty array elements from the array returned; or <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph> to include empty array elements in the array returned.</source>
          <target state="translated">要省略返回的数组中的空数组元素，则为 <ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph>；要包含返回的数组中的空数组元素，则为 <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>Splits a string into a maximum number of substrings based on the characters in an array.</source>
          <target state="translated">基于数组中的字符将一个字符串拆分成最大数量的子字符串。</target>       </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>An array whose elements contain the substrings in this string that are delimited by one or more characters in <ph id="ph1">&lt;paramref name="separator" /&gt;</ph>.</source>
          <target state="translated">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <ph id="ph1">&lt;paramref name="separator" /&gt;</ph> 中的一个或多个字符分隔。</target>       </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>For more information, see the Remarks section.</source>
          <target state="translated">有关详细信息，请参阅“备注”部分。</target>       </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>Delimiter characters are not included in the elements of the returned array.</source>
          <target state="translated">返回的数组的元素中不包含分隔符字符。</target>       </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If this instance does not contain any of the characters in <ph id="ph1">`separator`</ph>, or the <ph id="ph2">`count`</ph> parameter is 1, the returned array consists of a single element that contains this instance.</source>
          <target state="translated">如果此实例不包含任何中的字符<ph id="ph1">`separator`</ph>，或<ph id="ph2">`count`</ph>参数为 1，返回的数组包含一个包含此实例的单个元素。</target>       </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If the <ph id="ph1">`separator`</ph> parameter is <ph id="ph2">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>参数是<ph id="ph2">`null`</ph>或不包含任何字符，空白字符都被认为是分隔符。</target>       </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>White-space characters are defined by the Unicode standard and return <ph id="ph1">`true`</ph> if they are passed to the <ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">由 Unicode 标准和返回定义空白字符<ph id="ph1">`true`</ph>如果它们传递给<ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>However, if the <ph id="ph1">`separator`</ph> parameter in the call to this method overload is <ph id="ph2">`null`</ph>, compiler overload resolution fails.</source>
          <target state="translated">但是，如果<ph id="ph1">`separator`</ph>对此方法重载的调用中的参数是<ph id="ph2">`null`</ph>，编译器重载决策失败。</target>       </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>To unambiguously identify the called method, your code must indicate the type of the null.</source>
          <target state="translated">若要明确地标识所调用的方法，你的代码必须指示 null 的类型。</target>       </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>The following example shows several ways to unambiguously identify this overload.</source>
          <target state="translated">下面的示例演示通过多种方式来明确地标识此重载。</target>       </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If the <ph id="ph1">`count`</ph> parameter is zero, or the <ph id="ph2">`options`</ph> parameter is <ph id="ph3">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, an empty array is returned.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>参数为零，或<ph id="ph2">`options`</ph>参数是<ph id="ph3">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph>和此实例的长度为零，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>Each element of <ph id="ph1">`separator`</ph> defines a separate delimiter character.</source>
          <target state="translated">每个元素<ph id="ph1">`separator`</ph>定义单独的分隔符字符。</target>       </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is <ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id="ph3">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`options`</ph>参数是<ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>，和两个分隔符是相邻或分隔符找到的开头或末尾此情况下，相应的数组元素都包含<ph id="ph3">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If there are more than <ph id="ph1">`count`</ph> substrings in this instance, the first <ph id="ph2">`count`</ph> minus 1 substrings are returned in the first <ph id="ph3">`count`</ph> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</source>
          <target state="translated">如果有多个<ph id="ph1">`count`</ph>个子字符串在此情况下，第一个<ph id="ph2">`count`</ph>减去 1 的子字符串将返回在第一个<ph id="ph3">`count`</ph>减 1 个元素的返回值，且其余的字符在此实例中返回的最后一个返回值的元素。</target>       </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If <ph id="ph1">`count`</ph> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>大于数量的子字符串，则返回可用的子字符串和不引发异常。</target>       </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>Performance Considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each array element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法返回的数组对象分配内存和<ph id="ph2">&lt;xref:System.String&gt;</ph>每个数组元素的对象。</target>       </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.</source>
          <target state="translated">如果你的应用程序需要最佳性能，或你的应用程序管理内存分配至关重要，请考虑使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法，并选择性地<ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph>方法，来查找字符串中的子字符串。</target>       </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If you are splitting a string at a separator character, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找字符串中的分隔符。</target>       </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>If you are splitting a string at a separator string, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符字符串，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找分隔符字符串的第一个字符。</target>       </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>Then use the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</source>
          <target state="translated">然后使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来确定该第一个字符后面的字符是否为等于其余的字符的分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>In addition, if the same set of characters is used to split strings in multiple <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.</source>
          <target state="translated">此外，如果组相同的字符用于拆分中存在多个字符串<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</target>       </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>This significantly reduces the additional overhead of each method call.</source>
          <target state="translated">从而大幅减少每个方法调用的其他系统开销。</target>       </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.StringSplitOptions&gt;</ph> enumeration to include or exclude substrings generated by the <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.StringSplitOptions&gt;</ph>枚举，以包括或排除子字符串由生成<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not one of the <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> and earlier versions, if the <ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph> method is passed a <ph id="ph3">&lt;paramref name="separator" /&gt;</ph> that is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or contains no characters, the method uses a slightly different set of characters to split the string than the <ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph> method does to trim the string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>和早期版本中，如果<ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph>方法传递<ph id="ph3">&lt;paramref name="separator" /&gt;</ph>即<ph id="ph4">&lt;see langword="null" /&gt;</ph>或不包含任何字符，该方法使用略有不同的一组字符比字符串拆分<ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph>方法执行到修整该字符串。</target>       </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, both methods use an identical set of Unicode white-space characters.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，这两种方法使用相同的一组 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The maximum number of substrings to return.</source>
          <target state="translated">要返回的子字符串的最大数量。</target>       </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph> to omit empty array elements from the array returned; or <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph> to include empty array elements in the array returned.</source>
          <target state="translated">要省略返回的数组中的空数组元素，则为 <ph id="ph1">&lt;see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /&gt;</ph>；要包含返回的数组中的空数组元素，则为 <ph id="ph2">&lt;see cref="F:System.StringSplitOptions.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Splits a string into a maximum number of substrings based on the strings in an array.</source>
          <target state="translated">基于数组中的字符串将一个字符串拆分成最大数量的子字符串。</target>       </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>You can specify whether the substrings include empty array elements.</source>
          <target state="translated">可以指定子字符串是否包含空数组元素。</target>       </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>An array whose elements contain the substrings in this string that are delimited by one or more strings in <ph id="ph1">&lt;paramref name="separator" /&gt;</ph>.</source>
          <target state="translated">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <ph id="ph1">&lt;paramref name="separator" /&gt;</ph> 中的一个或多个字符串分隔。</target>       </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>For more information, see the Remarks section.</source>
          <target state="translated">有关详细信息，请参阅“备注”部分。</target>       </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Return value details</source>
          <target state="translated">返回值的详细信息</target>       </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Delimiter strings are not included in the elements of the returned array.</source>
          <target state="translated">返回的数组的元素中不包括分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If this instance does not contain any of the strings in <ph id="ph1">`separator`</ph>, or the <ph id="ph2">`count`</ph> parameter is 1, the returned array consists of a single element that contains this instance.</source>
          <target state="translated">如果此实例不包含任何中的字符串<ph id="ph1">`separator`</ph>，或<ph id="ph2">`count`</ph>参数为 1，返回的数组包含一个包含此实例的单个元素。</target>       </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If the <ph id="ph1">`separator`</ph> parameter is <ph id="ph2">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.</source>
          <target state="translated">如果<ph id="ph1">`separator`</ph>参数是<ph id="ph2">`null`</ph>或不包含任何字符，空白字符都被认为是分隔符。</target>       </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>White-space characters are defined by the Unicode standard and return <ph id="ph1">`true`</ph> if they are passed to the <ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">由 Unicode 标准和返回定义空白字符<ph id="ph1">`true`</ph>如果它们传递给<ph id="ph2">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>However, if the <ph id="ph1">`separator`</ph> parameter in the call to this method overload is <ph id="ph2">`null`</ph>, compiler overload resolution fails.</source>
          <target state="translated">但是，如果<ph id="ph1">`separator`</ph>对此方法重载的调用中的参数是<ph id="ph2">`null`</ph>，编译器重载决策失败。</target>       </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>To unambiguously identify the called method, your code must indicate the type of the <ph id="ph1">`null`</ph>.</source>
          <target state="translated">若要明确地标识所调用的方法，你的代码必须指示的一种<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The following example shows several ways to unambiguously identify this overload.</source>
          <target state="translated">下面的示例演示通过多种方式来明确地标识此重载。</target>       </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If the <ph id="ph1">`count`</ph> parameter is zero, or the <ph id="ph2">`options`</ph> parameter is <ph id="ph3">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, an empty array is returned.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>参数为零，或<ph id="ph2">`options`</ph>参数是<ph id="ph3">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph>和此实例的长度为零，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Each element of <ph id="ph1">`separator`</ph> defines a separate delimiter that consists of one or more characters.</source>
          <target state="translated">每个元素<ph id="ph1">`separator`</ph>定义一个或多个字符组成的单独分隔符。</target>       </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is <ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id="ph3">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`options`</ph>参数是<ph id="ph2">&lt;xref:System.StringSplitOptions.None&gt;</ph>，和两个分隔符是相邻或分隔符找到的开头或末尾此情况下，相应的数组元素都包含<ph id="ph3">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If there are more than <ph id="ph1">`count`</ph> substrings in this instance, the first <ph id="ph2">`count`</ph> minus 1 substrings are returned in the first <ph id="ph3">`count`</ph> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</source>
          <target state="translated">如果有多个<ph id="ph1">`count`</ph>个子字符串在此情况下，第一个<ph id="ph2">`count`</ph>减去 1 的子字符串将返回在第一个<ph id="ph3">`count`</ph>减 1 个元素的返回值，且其余的字符在此实例中返回的最后一个返回值的元素。</target>       </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If <ph id="ph1">`count`</ph> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>大于数量的子字符串，则返回可用的子字符串和不引发异常。</target>       </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The separator array</source>
          <target state="translated">分隔符数组</target>       </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If any of the elements in <ph id="ph1">`separator`</ph> consists of multiple characters, the entire substring is considered a delimiter.</source>
          <target state="translated">如果任何中的元素<ph id="ph1">`separator`</ph>包含的多个字符，将整个子字符串被视为分隔符。</target>       </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>For example, if one of the elements in <ph id="ph1">`separator`</ph> is "10", attempting to split the string "This10is10a10string."</source>
          <target state="translated">例如，如果一个中的元素的<ph id="ph1">`separator`</ph>为"10"，以尝试拆分字符串"This10is10a10string。"</target>       </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>returns this four-element array: { "This", "is", "a", "string."</source>
          <target state="translated">返回此四个元素的数组: {"This"，"is"，"a"、"字符串。</target>       </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>}.</source>
          <target state="translated">}.</target>       </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Comparison details</source>
          <target state="translated">比较详细信息</target>       </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the strings in the <ph id="ph2">`separator`</ph> parameter, and returns those substrings as elements of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法提取由一个或多个中的字符串分隔此字符串中子字符串<ph id="ph2">`separator`</ph>参数，并将这些子字符串作为数组的元素返回。</target>       </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法执行使用区分大小写的序号排序规则的比较，从而查找分隔符。</target>       </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>For more information about word, string, and ordinal sorts, see the <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">有关 word、 字符串和顺序排序的详细信息，请参阅<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method ignores any element of <ph id="ph2">`separator`</ph> whose value is <ph id="ph3">`null`</ph> or the empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法将忽略的任何元素<ph id="ph2">`separator`</ph>其值是<ph id="ph3">`null`</ph>或为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>To avoid ambiguous results when strings in <ph id="ph1">`separator`</ph> have characters in common, the <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph> method proceeds from the beginning to the end of the value of the instance, and matches the first element in <ph id="ph3">`separator`</ph> that is equal to a delimiter in the instance.</source>
          <target state="translated">若要避免不明确的结果时中的字符串<ph id="ph1">`separator`</ph>具有公共，字符<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>方法将从头转到实例的值的末尾，并与匹配的第一个元素<ph id="ph3">`separator`</ph>等于中的分隔符实例。</target>       </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The order in which substrings are encountered in the instance takes precedence over the order of elements in <ph id="ph1">`separator`</ph>.</source>
          <target state="translated">在其中子字符串的实例中出现的顺序将优先于中的元素的顺序<ph id="ph1">`separator`</ph>。</target>       </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>For example, consider an instance whose value is "abcdef".</source>
          <target state="translated">例如，考虑其值是"abcdef"的实例。</target>       </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If the first element in <ph id="ph1">`separator`</ph> was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f".</source>
          <target state="translated">如果中的第一个元素<ph id="ph1">`separator`</ph>为"简称 ef"，第二个元素为"bcde"，该拆分操作的结果将是"a"和"f"。</target>       </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>This is because the substring in the instance, "bcde", is encountered and matches an element in <ph id="ph1">`separator`</ph> before the substring "f" is encountered.</source>
          <target state="translated">这是因为在实例中，"bcde"的子字符串遇到和匹配中的某个元素<ph id="ph1">`separator`</ph>遇到的子字符串"f"之前。</target>       </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>However, if the first element of <ph id="ph1">`separator`</ph> was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef".</source>
          <target state="translated">但是，如果的第一个元素<ph id="ph1">`separator`</ph>为"bcd"，第二个元素为"bc"，该拆分操作的结果将是"a"和"ef"。</target>       </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>This is because "bcd" is the first delimiter in <ph id="ph1">`separator`</ph> that matches a delimiter in the instance.</source>
          <target state="translated">这是因为"bcd"中的第一个分隔符<ph id="ph1">`separator`</ph>与实例中的分隔符相匹配。</target>       </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def".</source>
          <target state="translated">如果已撤消的分隔符的顺序，因此第一个元素为"bc"，并且此第二个元素是"bcd"，结果将是"a"和"def"。</target>       </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Performance considerations</source>
          <target state="translated">性能注意事项</target>       </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id="ph2">&lt;xref:System.String&gt;</ph> object for each array element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法返回的数组对象分配内存和<ph id="ph2">&lt;xref:System.String&gt;</ph>每个数组元素的对象。</target>       </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.</source>
          <target state="translated">如果你的应用程序需要最佳性能，或你的应用程序管理内存分配至关重要，请考虑使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法，并选择性地<ph id="ph3">&lt;xref:System.String.Compare%2A&gt;</ph>方法，来查找字符串中的子字符串。</target>       </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If you are splitting a string at a separator character, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找字符串中的分隔符。</target>       </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>If you are splitting a string at a separator string, use the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.</source>
          <target state="translated">如果你拆分的字符串中的分隔符字符串，使用<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>方法来查找分隔符字符串的第一个字符。</target>       </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>Then use the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</source>
          <target state="translated">然后使用<ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph>方法来确定该第一个字符后面的字符是否为等于其余的字符的分隔符字符串。</target>       </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>In addition, if the same set of characters is used to split strings in multiple <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.</source>
          <target state="translated">此外，如果组相同的字符用于拆分中存在多个字符串<ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</target>       </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>This significantly reduces the additional overhead of each method call.</source>
          <target state="translated">从而大幅减少每个方法调用的其他系统开销。</target>       </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.StringSplitOptions&gt;</ph> enumeration to include or exclude substrings generated by the <ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.StringSplitOptions&gt;</ph>枚举，以包括或排除子字符串由生成<ph id="ph2">&lt;xref:System.String.Split%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not one of the <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringSplitOptions" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> and earlier versions, if the <ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph> method is passed a <ph id="ph3">&lt;paramref name="separator" /&gt;</ph> that is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or contains no characters, the method uses a slightly different set of characters to split the string than the <ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph> method does to trim the string.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>和早期版本中，如果<ph id="ph2">&lt;see cref="M:System.String.Split(System.Char[])" /&gt;</ph>方法传递<ph id="ph3">&lt;paramref name="separator" /&gt;</ph>即<ph id="ph4">&lt;see langword="null" /&gt;</ph>或不包含任何字符，该方法使用略有不同的一组字符比字符串拆分<ph id="ph5">&lt;see cref="M:System.String.Trim(System.Char[])" /&gt;</ph>方法执行到修整该字符串。</target>       </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, both methods use an identical set of Unicode white-space characters.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，这两种方法使用相同的一组 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Determines whether the beginning of this string instance matches a specified string.</source>
          <target state="translated">确定此字符串实例的开头是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String)">
          <source>The string to compare.</source>
          <target state="translated">要比较的字符串。</target>       </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String)">
          <source>Determines whether the beginning of this string instance matches the specified string.</source>
          <target state="translated">确定此字符串实例的开头是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> matches the beginning of this string; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 与此字符串的开头匹配，则为 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>This method compares <ph id="ph1">`value`</ph> to the substring at the beginning of this instance that is the same length as <ph id="ph2">`value`</ph>, and returns an indication whether they are equal.</source>
          <target state="translated">此方法比较<ph id="ph1">`value`</ph>是相同的长度，作为此实例的开头处的子字符串到<ph id="ph2">`value`</ph>，并返回指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>To be equal, <ph id="ph1">`value`</ph> must be an empty string (<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>), must be a reference to this same instance, or must match the beginning of this instance.</source>
          <target state="translated">若要相等，<ph id="ph1">`value`</ph>必须是空字符串 (<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>)，必须是对此同一实例的引用，或者必须匹配此实例的开头。</target>       </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</source>
          <target state="translated">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</target>       </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>The following example defines a <ph id="ph1">`StripStartTags`</ph> method that uses the <ph id="ph2">&lt;xref:System.String.StartsWith%28System.String%29&gt;</ph> method to remove HTML start tags from the beginning of a string.</source>
          <target state="translated">下面的示例定义<ph id="ph1">`StripStartTags`</ph>使用方法<ph id="ph2">&lt;xref:System.String.StartsWith%28System.String%29&gt;</ph>方法移除 HTML 从字符串开头开始标记。</target>       </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>Note that the <ph id="ph1">`StripStartTags`</ph> method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed.</source>
          <target state="translated">请注意，<ph id="ph1">`StripStartTags`</ph>方法调用以递归方式来确保删除在行开头的多个 HTML 开始标记。</target>       </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>The example does not remove HTML tags embedded in a string.</source>
          <target state="translated">该示例不会删除在字符串中嵌入的 HTML 标记。</target>       </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串比较方法。</target>       </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String)">
          <source>To determine whether a string begins with a particular substring by using the string comparison rules of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph> parameter.</source>
          <target state="translated">若要确定是否的符串开头的特定子字符串使用当前区域性的字符串比较规则，请调用<ph id="ph1">&lt;see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="F:System.StringComparison.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="comparisonType" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The string to compare.</source>
          <target state="translated">要比较的字符串。</target>       </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>One of the enumeration values that determines how this string and <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> are compared.</source>
          <target state="translated">枚举值之一，用于确定如何比较此字符串与 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</source>
          <target state="translated">确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this instance begins with <ph id="ph2">&lt;paramref name="value" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此实例以 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 开头，则为 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The <ph id="ph1">&lt;xref:System.String.StartsWith%2A&gt;</ph> method compares the <ph id="ph2">`value`</ph> parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.StartsWith%2A&gt;</ph>方法进行比较<ph id="ph2">`value`</ph>参数与此字符串的开头处的子字符串并返回一个值，指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>To be equal, <ph id="ph1">`value`</ph> must be a reference to this same string, must be the empty string (""), or must match the beginning of this string.</source>
          <target state="translated">若要相等，<ph id="ph1">`value`</ph>必须对此相同的字符串的引用，必须为空字符串 ("")，或者必须与此字符串的开头匹配。</target>       </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The type of comparison performed by the <ph id="ph1">&lt;xref:System.String.StartsWith%2A&gt;</ph> method depends on the value of the <ph id="ph2">`comparisonType`</ph> parameter.</source>
          <target state="translated">执行比较的类型<ph id="ph1">&lt;xref:System.String.StartsWith%2A&gt;</ph>方法取决于值<ph id="ph2">`comparisonType`</ph>参数。</target>       </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The comparison can use the conventions of the current culture (<ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>) or the invariant culture (<ph id="ph3">&lt;xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>), or it can consist of a character-by-character comparison of code points (<ph id="ph5">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id="ph6">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">比较可以使用当前区域性的约定 (<ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>) 或固定区域性 (<ph id="ph3">&lt;xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType&gt;</ph>和<ph id="ph4">&lt;xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>)，或可能包含的逐字符的码位比较 (<ph id="ph5">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>或<ph id="ph6">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The comparison can also be case-sensitive (<ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType&gt;</ph>, or <ph id="ph3">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>), or it can ignore case (<ph id="ph4">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">比较也可以是区分大小写 (<ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType&gt;</ph>，或<ph id="ph3">&lt;xref:System.StringComparison.Ordinal?displayProperty=nameWithType&gt;</ph>)，或者可以忽略大小写 (<ph id="ph4">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>， <ph id="ph5">&lt;xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>， <ph id="ph6">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The following example searches for the string "the" at the beginning of a longer string that begins with the word "The".</source>
          <target state="translated">下面的示例搜索字符串"the"开头的词开头的较长字符串"The"。</target>       </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>As the output from the example shows, a call to the <ph id="ph1">&lt;xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29&gt;</ph> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.</source>
          <target state="translated">如示例所示，对的调用输出<ph id="ph1">&lt;xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29&gt;</ph>执行不区分区域性的但区分大小写的比较的方法无法与此字符串中，匹配时执行区域性-和写-insensitive 比较的调用与字符串匹配。</target>       </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The following example determines whether a string starts with a particular substring.</source>
          <target state="translated">下面的示例确定字符串是否以特定的子字符串开头。</target>       </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>It initializes a two-dimensional string array.</source>
          <target state="translated">它将初始化二维字符串数组。</target>       </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string.</source>
          <target state="translated">第二个维度中的第一个元素包含一个字符串，第二个元素包含要搜索的第一个字符串的开头的字符串。</target>       </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</source>
          <target state="translated">区域性、 是否忽略大小写，和是否执行序号比较的选择会影响结果。</target>       </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source>Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</source>
          <target state="translated">请注意，当字符串实例中包含连字，带有其连续字符的区分区域性的比较成功匹配。</target>       </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.StringComparison)">
          <source><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparisonType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.StringComparison" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The string to compare.</source>
          <target state="translated">要比较的字符串。</target>       </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during the comparison; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在比较过程中忽略大小写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Cultural information that determines how this string and <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> are compared.</source>
          <target state="translated">确定如何对此字符串与 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 进行比较的区域性信息。</target>       </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current culture is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用当前区域性。</target>       </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</source>
          <target state="translated">确定在使用指定的区域性进行比较时此字符串实例的开头是否与指定的字符串匹配。</target>       </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter matches the beginning of this string; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数与此字符串的开头匹配，则为 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>This method compares the <ph id="ph1">`value`</ph> parameter to the substring at the beginning of this string that is the same length as <ph id="ph2">`value`</ph>, and returns a value that indicates whether they are equal.</source>
          <target state="translated">此方法比较<ph id="ph1">`value`</ph>参数是相同的长度，作为此字符串的开头处的子字符串<ph id="ph2">`value`</ph>，并返回一个值，指示它们是否相等。</target>       </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>To be equal, <ph id="ph1">`value`</ph> must be an empty string (<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>), must be a reference to this same instance, or must match the beginning of this instance.</source>
          <target state="translated">若要相等，<ph id="ph1">`value`</ph>必须是空字符串 (<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>)，必须是对此同一实例的引用，或者必须匹配此实例的开头。</target>       </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>This method performs a comparison using the specified casing and culture.</source>
          <target state="translated">此方法执行使用指定的大小写和区域性的比较。</target>       </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The following example determines whether a string occurs at the beginning of another string.</source>
          <target state="translated">下面的示例确定一个字符串是否出现在另一个字符串的开头。</target>       </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.String.StartsWith%2A&gt;</ph> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.StartsWith%2A&gt;</ph>几次使用区分大小写、 区分大小写和影响搜索的结果的不同区域性调用方法。</target>       </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve" uid="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Retrieves a substring from this instance.</source>
          <target state="translated">从此实例检索子字符串。</target>       </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>This member is overloaded.</source>
          <target state="translated">重载此成员。</target>       </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>For complete information about this member, including syntax, usage, and examples, click a name in the overload list.</source>
          <target state="translated">有关此成员的完整信息（包括语法、用法和示例），请单击重载列表中的相应名称。</target>       </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32)">
          <source>The zero-based starting character position of a substring in this instance.</source>
          <target state="translated">此实例中子字符串的起始字符位置（从零开始）。</target>       </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32)">
          <source>Retrieves a substring from this instance.</source>
          <target state="translated">从此实例检索子字符串。</target>       </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32)">
          <source>The substring starts at a specified character position and continues to the end of the string.</source>
          <target state="translated">子字符串在指定的字符位置开始并一直到该字符串的末尾。</target>       </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32)">
          <source>A string that is equivalent to the substring that begins at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> in this instance, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> is equal to the length of this instance.</source>
          <target state="translated">与此实例中在 <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 处开头的子字符串等效的一个字符串；如果 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> 等于此实例的长度，则为 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>You call the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.</source>
          <target state="translated">你调用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法以从指定的字符位置开始且在字符串的结尾结束的字符串中提取子字符串。</target>       </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</source>
          <target state="translated">起始字符位置是从零开始;换而言之，在字符串中的第一个字符位于索引 0，不得索引 1 处。</target>       </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>To extract a substring that begins at a specified character position and ends before to the end of the string, call the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method.</source>
          <target state="translated">若要提取子字符串的指定的字符位置开始和结束之前到字符串的末尾，调用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>Instead, it returns a new string that begins at the <ph id="ph1">`startIndex`</ph> position in the current string.</source>
          <target state="translated">相反，它将返回一个新字符串，开始<ph id="ph1">`startIndex`</ph>当前字符串中的位置。</target>       </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>To extract a substring that begins with a particular character or character sequence, call a method such as  <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> to get the value of <ph id="ph3">`startIndex`</ph>.</source>
          <target state="translated">若要提取特定字符或字符序列开头的子字符串，调用方法如<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>若要获取的值<ph id="ph3">`startIndex`</ph>。</target>       </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The second example illustrates this; it extracts a key value that begins one character position after the "=" character.</source>
          <target state="translated">第二个示例阐释了这一点;它提取一个密钥值，在"="字符之后开始一个字符位置。</target>       </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>If <ph id="ph1">`startIndex`</ph> is equal to zero, the method returns the original string unchanged.</source>
          <target state="translated">如果<ph id="ph1">`startIndex`</ph>等于零，该方法将返回原始字符串保持不变。</target>       </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The following example demonstrates obtaining a substring from a string.</source>
          <target state="translated">下面的示例演示如何获取从字符串的子字符串。</target>       </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to separate key/value pairs that are delimited by an equals ("=") character.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法来分隔由等于分隔的键/值对 （"="） 字符。</target>       </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method is used to get the position of the equals character in the string..</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法用于获取字符串中的等号字符位置...</target>       </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph>方法提取密钥名称。，可从字符串中的第一个字符开始并扩展它的调用返回的字符数<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph> method then extracts the value assigned to the key.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph>方法则会提取分配给键的值。</target>       </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32)">
          <source>It starts at one character position beyond the equals character and extends to the end of the string.</source>
          <target state="translated">它在等号字符之外的一个字符位置开始，并将扩展到字符串的末尾。</target>       </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 小于零或大于此实例的长度。</target>       </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The zero-based starting character position of a substring in this instance.</source>
          <target state="translated">此实例中子字符串的起始字符位置（从零开始）。</target>       </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The number of characters in the substring.</source>
          <target state="translated">子字符串中的字符数。</target>       </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>Retrieves a substring from this instance.</source>
          <target state="translated">从此实例检索子字符串。</target>       </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The substring starts at a specified character position and has a specified length.</source>
          <target state="translated">子字符串从指定的字符位置开始且具有指定的长度。</target>       </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>A string that is equivalent to the substring of length <ph id="ph1">&lt;paramref name="length" /&gt;</ph> that begins at <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> in this instance, or <ph id="ph3">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> is equal to the length of this instance and <ph id="ph5">&lt;paramref name="length" /&gt;</ph> is zero.</source>
          <target state="translated">与此实例中在 <ph id="ph1">&lt;paramref name="length" /&gt;</ph> 处开头、长度为 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 的子字符串等效的一个字符串；如果 <ph id="ph3">&lt;see cref="F:System.String.Empty" /&gt;</ph> 等于此实例的长度且 <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> 为零，则为 <ph id="ph5">&lt;paramref name="length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>You call the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.</source>
          <target state="translated">你调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph>方法以从指定的字符位置开始和结束之前字符串末尾的字符串中提取子字符串。</target>       </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</source>
          <target state="translated">起始字符位置是从零开始;换而言之，在字符串中的第一个字符位于索引 0，不得索引 1 处。</target>       </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>To extract a substring that begins at a specified character position and continues to the end of the string, call the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph> method.</source>
          <target state="translated">若要提取子字符串从指定的字符位置开始并一直到字符串的末尾，调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>Instead, it returns a new string with <ph id="ph1">`length`</ph> characters starting from the <ph id="ph2">`startIndex`</ph> position in the current string.</source>
          <target state="translated">相反，它将返回的新字符串<ph id="ph1">`length`</ph>字符从开始<ph id="ph2">`startIndex`</ph>当前字符串中的位置。</target>       </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The <ph id="ph1">`length`</ph> parameter represents the total number of characters to extract from the current string instance.</source>
          <target state="translated"><ph id="ph1">`length`</ph>参数表示要从当前的字符串实例中提取的字符总数。</target>       </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>This includes the starting character found at index  <ph id="ph1">`startIndex`</ph>.</source>
          <target state="translated">这包括在索引中找到的起始字符<ph id="ph1">`startIndex`</ph>。</target>       </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>In other words, the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method attempts to extract characters from index <ph id="ph2">`startIndex`</ph> to index <ph id="ph3">`startIndex`</ph><ph id="ph4"> + </ph><ph id="ph5">`length`</ph> - 1.</source>
          <target state="translated">换而言之，<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法尝试从索引中提取字符<ph id="ph2">`startIndex`</ph>到索引<ph id="ph3">`startIndex`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`length`</ph> -1。</target>       </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>To extract a substring that begins with a particular character or character sequence, call a method such as  <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> to get the value of <ph id="ph3">`startIndex`</ph>.</source>
          <target state="translated">若要提取特定字符或字符序列开头的子字符串，调用方法如<ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>若要获取的值<ph id="ph3">`startIndex`</ph>。</target>       </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>If the substring extends from <ph id="ph1">`startIndex`</ph> to a specified character sequence, you can call a method such as  <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> to get the index of the ending character or character sequence.</source>
          <target state="translated">如果子字符串从扩展<ph id="ph1">`startIndex`</ph>到指定的字符序列，你可以调用一个方法如<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>若要获取的结束字符或字符序列的索引。</target>       </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>You can then convert that value to an index position in the string as follows:</source>
          <target state="translated">你可以然后将该值转换到字符串中的索引位置，如下所示：</target>       </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>If you've searched for a single character that is to mark the end of the substring, the <ph id="ph1">`length`</ph> parameter equals  <ph id="ph2">`endIndex`</ph><ph id="ph3"> - </ph><ph id="ph4">`startIndex`</ph> + 1, where <ph id="ph5">`endIndex`</ph> is the return value of the <ph id="ph6">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph7">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">如果已为单个字符，是标记的末尾的子字符串，搜索<ph id="ph1">`length`</ph>参数等于<ph id="ph2">`endIndex`</ph> <ph id="ph3"> - </ph> <ph id="ph4">`startIndex`</ph> + 1，其中<ph id="ph5">`endIndex`</ph>是返回值的<ph id="ph6">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph7">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The following example extracts a continuous block of "b" characters from a string.</source>
          <target state="translated">下面的示例从字符串提取"b"字符的连续块。</target>       </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>If you've searched for multiple characters that are to mark the end of the substring, the <ph id="ph1">`length`</ph> parameter equals  <ph id="ph2">`endIndex`</ph><ph id="ph3"> + </ph><ph id="ph4">`endMatchLength`</ph><ph id="ph5"> - </ph><ph id="ph6">`startIndex`</ph>, where <ph id="ph7">`endIndex`</ph> is the return value of the <ph id="ph8">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph9">&lt;xref:System.String.IndexOf%2A&gt;</ph> method., and <ph id="ph10">`endMatchLength`</ph> is the length of the character sequence that marks the end of the substring.</source>
          <target state="translated">如果您已搜索多个字符的标记的末尾的子字符串，<ph id="ph1">`length`</ph>参数等于<ph id="ph2">`endIndex`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`endMatchLength`</ph> <ph id="ph5"> - </ph> <ph id="ph6">`startIndex`</ph>，其中<ph id="ph7">`endIndex`</ph>是的返回值<ph id="ph8">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph9">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。 和<ph id="ph10">`endMatchLength`</ph>是标记的子字符串末尾的字符序列的长度。</target>       </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The following example extracts a block of text that contains an XML <ph id="ph1">`&lt;definition&gt;`</ph> element.</source>
          <target state="translated">下面的示例提取包含 XML 的文本块<ph id="ph1">`&lt;definition&gt;`</ph>元素。</target>       </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>If the character or character sequence is not included in the end of the substring, the <ph id="ph1">`length`</ph> parameter equals <ph id="ph2">`endIndex`</ph><ph id="ph3"> - </ph><ph id="ph4">`startIndex`</ph>, where <ph id="ph5">`endIndex`</ph> is the return value of the <ph id="ph6">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id="ph7">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">如果字符或字符序列不包含的末尾的子字符串，在<ph id="ph1">`length`</ph>参数等于<ph id="ph2">`endIndex`</ph> <ph id="ph3"> - </ph> <ph id="ph4">`startIndex`</ph>，其中<ph id="ph5">`endIndex`</ph>是返回值的<ph id="ph6">&lt;xref:System.String.IndexOf%2A&gt;</ph>或<ph id="ph7">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`startIndex`</ph> is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</source>
          <target state="translated">如果<ph id="ph1">`startIndex`</ph>等于零，并且等于当前的字符串，该方法的长度返回未更改的原始字符串。</target>       </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The following example illustrates a simple call to the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph> method that extracts two characters from a string starting at the sixth character position (that is, at index five).</source>
          <target state="translated">下面的示例阐释了简单调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph>从字符串的第六个字符位置开始提取两个字符的方法 （即，在索引 5）。</target>       </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph> method in the following three cases to isolate substrings within a string.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph>在以下的三种情况下，若要隔离字符串内的子字符串的方法。</target>       </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</source>
          <target state="translated">在两个情况下使用子字符串在比较中，并且第三个用例中，因为指定的参数无效引发异常。</target>       </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>It extracts the single character and the third position in the string (at index 2) and compares it with a "c".</source>
          <target state="translated">它提取单个字符和字符串 （在索引 2） 中的第三个位置，并将其替换为"c"进行比较。</target>       </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>This comparison returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">此比较返回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method.</source>
          <target state="translated">它提取开始 （索引 3） 处的字符串中的第四个位置零字符并将其传递给<ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>This returns true because the call to the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method returns <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">这返回 true，因为调用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法返回<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>It attempts to extract one character starting at the fourth position in the string.</source>
          <target state="translated">它尝试提取一个字符在字符串中的第四个位置启动。</target>       </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>Because there is no character at that position, the method call throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">由于该位置没有任何字符，方法调用将引发<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to separate key/value pairs that are delimited by an equals ("=") character.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>方法来分隔由等于分隔的键/值对 （"="） 字符。</target>       </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method is used to get the position of the equals character in the string..</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法用于获取字符串中的等号字符位置...</target>       </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph>方法提取密钥名称。，可从字符串中的第一个字符开始并扩展它的调用返回的字符数<ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph> method then extracts the value assigned to the key.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph>方法则会提取分配给键的值。</target>       </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>It starts at one character position beyond the equals character and extends to the end of the string.</source>
          <target state="translated">它在等号字符之外的一个字符位置开始，并将扩展到字符串的末尾。</target>       </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> indicates a position not within this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 加 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 指示不在此实例内的位置。</target>       </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve" uid="M:System.String.Substring(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve" uid="M:System.String.System#Collections#Generic#IEnumerable&amp;lt;char&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">返回循环访问当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的枚举数。</target>       </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve" uid="M:System.String.System#Collections#Generic#IEnumerable&amp;lt;char&amp;gt;#GetEnumerator">
          <source>A strongly-typed enumerator that can be used to iterate through the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">可用于循环访问当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的强类型化枚举器。</target>       </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#Collections#Generic#IEnumerable&amp;lt;char&amp;gt;#GetEnumerator">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#Collections#Generic#IEnumerable&amp;lt;char&amp;gt;#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface object.</source>
          <target state="translated">可以使用它时，才<ph id="ph1">&lt;xref:System.String&gt;</ph>实例被强制转换为<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>界面对象。</target>       </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#Collections#Generic#IEnumerable&amp;lt;char&amp;gt;#GetEnumerator">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve" uid="M:System.String.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">返回循环访问当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的枚举数。</target>       </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve" uid="M:System.String.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator that can be used to iterate through the current string.</source>
          <target state="translated">一个枚举器，可用于循环访问当前的字符串。</target>       </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#Collections#IEnumerable#GetEnumerator">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#Collections#IEnumerable#GetEnumerator">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">忽略此参数。</target>       </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of the current string is <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the value of the current string is <ph id="ph4">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated">如果当前字符串的值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则为 <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>；如果当前字符串的值为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>，则为 <ph id="ph4">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>The value of the current string is not <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated">当前字符串的值不是 <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是大于 <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> 或小于 <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> 的数。</target>       </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>The character at index 0 in the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中索引 0 处的字符。</target>       </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> greater.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是小于 <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> 或大于 <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> 的数。</target>       </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是小于 <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> 或大于 <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph> 的数。</target>       </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是大于 <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 或小于 <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> 的数。</target>       </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是大于 <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> 或小于 <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> 的数。</target>       </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The type of the returned object.</source>
          <target state="translated">返回对象的类型。</target>       </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be converted to the type specified by the <ph id="ph2">&lt;paramref name="type" /&gt;</ph> parameter.</source>
          <target state="translated">无法将当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值转换为由 <ph id="ph2">&lt;paramref name="type" /&gt;</ph> 参数指定的类型。</target>       </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph>.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是大于 <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph> 或小于 <ph id="ph3">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> 的数。</target>       </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object cannot be parsed.</source>
          <target state="translated">无法分析当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object is a number greater <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph></source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的值是大于 <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph> 或小于 <ph id="ph3">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> 的数</target>       </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>An object that provides culture-specific formatting information.</source>
          <target state="translated">一个对象，提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">有关此成员的说明，请参阅 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve" uid="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The converted value of the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换值。</target>       </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.String&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Copies the characters in this instance to a Unicode character array.</source>
          <target state="translated">将此实例中的字符复制到 Unicode 字符数组。</target>       </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray">
          <source>Copies the characters in this instance to a Unicode character array.</source>
          <target state="translated">将此实例中的字符复制到 Unicode 字符数组。</target>       </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray">
          <source>A Unicode character array whose elements are the individual characters of this instance.</source>
          <target state="translated">元素为此实例的各字符的 Unicode 字符数组。</target>       </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray">
          <source>If this instance is an empty string, the returned array is empty and has a zero length.</source>
          <target state="translated">如果此实例是空字符串，则返回的数组为空且长度为零。</target>       </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>This method copies each character (that is, each <ph id="ph1">&lt;xref:System.Char&gt;</ph> object) in a string to a character array.</source>
          <target state="translated">此方法会复制每个字符 (即，每个<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象) 中的字符数组的字符串。</target>       </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>The first character copied is at index zero of the returned character array; the last character copied is at index <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph> – 1.</source>
          <target state="translated">复制的第一个字符位于索引零的返回的字符数组中;复制的最后一个字符位于索引<ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph>– 1。</target>       </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>To create a string from the characters in a character array, call the <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph> constructor.</source>
          <target state="translated">若要从字符数组中的字符创建一个字符串，请调用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>To create a byte array that contains the encoded characters in a string, instantiate the appropriate <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object and call its <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要创建包含字符串中的编码的字符的字节数组，实例化相应<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>对象并调用其<ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>Some of the standard encodings available in the .NET Framework include the following:</source>
          <target state="translated">一些.NET Framework 中可用的标准编码包括以下：</target>       </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>Encoding</source>
          <target state="translated">编码</target>       </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>Object</source>
          <target state="translated">对象</target>       </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>       </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>UTF-16</source>
          <target state="translated">UTF-16</target>       </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>UTF-32</source>
          <target state="translated">UTF-32</target>       </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>For more information, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>.NET Framework 中的字符编码<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.String.ToCharArray%2A&gt;</ph> method to extract the characters in a string to a character array.</source>
          <target state="translated">下面的示例调用<ph id="ph1">&lt;xref:System.String.ToCharArray%2A&gt;</ph>方法以提取的字符数组的字符串中的字符。</target>       </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>It then displays the original string and the elements in the array.</source>
          <target state="translated">它将数组中显示原始字符串和元素。</target>       </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>The following example defines a string containing the characters that serve as delimiters in a delimited string.</source>
          <target state="translated">下面的示例定义一个包含用作分隔符分隔的字符串中字符的字符串。</target>       </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray">
          <source>It then calls the <ph id="ph1">&lt;xref:System.String.ToCharArray%2A&gt;</ph> method to create a character array that can be passed to the <ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method to separate the delimited string into its individual substrings.</source>
          <target state="translated">然后，它调用<ph id="ph1">&lt;xref:System.String.ToCharArray%2A&gt;</ph>方法用于创建字符数组，可传递给<ph id="ph2">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>方法将单独分隔的字符串放入其单独的子字符串。</target>       </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>The starting position of a substring in this instance.</source>
          <target state="translated">此实例内子字符串的起始位置。</target>       </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>The length of the substring in this instance.</source>
          <target state="translated">此实例内子字符串的长度。</target>       </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>Copies the characters in a specified substring in this instance to a Unicode character array.</source>
          <target state="translated">将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。</target>       </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>A Unicode character array whose elements are the <ph id="ph1">&lt;paramref name="length" /&gt;</ph> number of characters in this instance starting from character position <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">元素为此实例中从字符位置 <ph id="ph1">&lt;paramref name="length" /&gt;</ph> 开始的 <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> 字符数的 Unicode 字符数组。</target>       </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>This method copies the characters in a portion of a string to a character array.</source>
          <target state="translated">此方法将字符串的部分中的字符复制到字符数组。</target>       </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>To create a string from a range of characters in a character array, call the  <ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">若要创建从一系列字符数组中字符的字符串，调用<ph id="ph1">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>The <ph id="ph1">`startIndex`</ph> parameter is zero-based.</source>
          <target state="translated"><ph id="ph1">`startIndex`</ph>参数是从零开始。</target>       </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>That is, the index of the first character in the string instance is zero.</source>
          <target state="translated">也就是说，在字符串实例中的第一个字符的索引为零。</target>       </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`length`</ph> is zero, the returned array is empty and has a zero length.</source>
          <target state="translated">如果<ph id="ph1">`length`</ph>为零，则返回的数组为空并且具有长度为零。</target>       </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>If this instance is <ph id="ph1">`null`</ph> or an empty string (""), the returned array is empty and has a zero length.</source>
          <target state="translated">如果此实例是<ph id="ph1">`null`</ph>或空字符串 ("")，返回的数组为空并且具有长度为零。</target>       </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object and call its <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">若要创建包含已编码的字符字符串的部分中的字节数组，实例化相应<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>对象并调用其<ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>Some of the standard encodings available in the .NET Framework include the following:</source>
          <target state="translated">一些.NET Framework 中可用的标准编码包括以下：</target>       </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>Encoding</source>
          <target state="translated">编码</target>       </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>Object</source>
          <target state="translated">对象</target>       </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>       </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>UTF-16</source>
          <target state="translated">UTF-16</target>       </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>UTF-32</source>
          <target state="translated">UTF-32</target>       </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>.NET Framework 中的字符编码<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</source>
          <target state="translated">下面的示例将一个字符串内的子字符串转换为数组的字符，然后枚举并显示该数组的元素。</target>       </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve" uid="M:System.String.ToCharArray(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 加上 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 大于此实例的长度。</target>       </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a copy of this string converted to lowercase.</source>
          <target state="translated">返回此字符串转换为小写形式的副本。</target>       </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve" uid="M:System.String.ToLower">
          <source>Returns a copy of this string converted to lowercase.</source>
          <target state="translated">返回此字符串转换为小写形式的副本。</target>       </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve" uid="M:System.String.ToLower">
          <source>A string in lowercase.</source>
          <target state="translated">一个小写字符串。</target>       </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>This method takes into account the casing rules of the current culture.</source>
          <target state="translated">此方法将当前区域性的大小写规则考虑在内。</target>       </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</source>
          <target state="translated">相反，它返回当前实例中的所有字符都转换为小写形式的新字符串。</target>       </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>The casing operation that results from calling the <ph id="ph1">&lt;xref:System.String.ToLower&gt;</ph> method takes the casing conventions of the current culture into account.</source>
          <target state="translated">调用得到的结果的大小写操作<ph id="ph1">&lt;xref:System.String.ToLower&gt;</ph>方法将当前区域性的大小写约定考虑在内。</target>       </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> methods.</source>
          <target state="translated">如果你需要操作系统的标识符，如文件名、 小写或大写版本命名管道或注册表项，使用<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>This produces the same result in every culture (unlike the <ph id="ph1">&lt;xref:System.String.ToLower&gt;</ph> method) and performs more efficiently.</source>
          <target state="translated">这将生成中每个区域性相同的结果 (与不同<ph id="ph1">&lt;xref:System.String.ToLower&gt;</ph>方法) 和更有效地执行。</target>       </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>The following example converts several mixed case strings to lowercase.</source>
          <target state="translated">下面的示例将几个混合大小写的字符串转换为小写。</target>       </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串的大小写方法。</target>       </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower">
          <source>To convert a character to lowercase by using the casing conventions of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="culture" /&gt;</ph> parameter.</source>
          <target state="translated">若要为通过使用当前区域性的大小写约定小写的字符转换，调用<ph id="ph1">&lt;see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="culture" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>An object that supplies culture-specific casing rules.</source>
          <target state="translated">一个对象，用于提供区域性特定的大小写规则。</target>       </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</source>
          <target state="translated">根据指定区域性的大小写规则返回此字符串转换为小写形式的副本。</target>       </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>The lowercase equivalent of the current string.</source>
          <target state="translated">当前字符串的等效小写形式。</target>       </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>The casing rules of the culture specified by the <ph id="ph1">`culture`</ph> parameter determine the way the case of the string is changed.</source>
          <target state="translated">指定的区域性的大小写规则<ph id="ph1">`culture`</ph>参数确定更改字符串的大小写的方法。</target>       </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</source>
          <target state="translated">相反，它返回当前实例中的所有字符都转换为小写形式的新字符串。</target>       </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>If you pass the <ph id="ph1">&lt;xref:System.String.ToLower%28System.Globalization.CultureInfo%29&gt;</ph> method a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object other than <ph id="ph3">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>, the casing operation will take culture-specific rules into account.</source>
          <target state="translated">如果你通过<ph id="ph1">&lt;xref:System.String.ToLower%28System.Globalization.CultureInfo%29&gt;</ph>方法<ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph>以外对象<ph id="ph3">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>，大小写操作将考虑到的区域性特定的规则。</target>       </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.</source>
          <target state="translated">如果你需要操作系统的标识符，如文件名、 小写或大写版本命名管道或注册表项，使用<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>This produces the same result in every culture and performs more efficiently.</source>
          <target state="translated">这产生中每个区域性相同的结果，它更有效地执行。</target>       </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings.</source>
          <target state="translated">下面的示例将转换为小写字符使用美国英语和土耳其语-土耳其区域性的大写字符组成的两个字符串，然后对小写的字符串进行比较。</target>       </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source>The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</source>
          <target state="translated">大写字符串基本相同，只不过 Unicode LATIN CAPITAL LETTER I 在单个字符串中每个匹配项，另一个字符串包含 LATIN CAPITAL LETTER I 与点上方。</target>       </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve" uid="M:System.String.ToLower(System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve" uid="M:System.String.ToLowerInvariant">
          <source>Returns a copy of this <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object converted to lowercase using the casing rules of the invariant culture.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</target>       </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve" uid="M:System.String.ToLowerInvariant">
          <source>The lowercase equivalent of the current string.</source>
          <target state="translated">当前字符串的等效小写形式。</target>       </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>The invariant culture represents a culture that is culture-insensitive.</source>
          <target state="translated">固定区域性表示区域性的不区分区域性的。</target>       </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>It is associated with the English language but not with a specific country or region.</source>
          <target state="translated">关联与英语语言，但不是与特定的国家 / 地区。</target>       </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method.</source>
          <target state="translated">如果你的应用程序依赖于不受当前区域性使用的可预测方式更改字符串的大小写<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>The <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method is equivalent to <ph id="ph2">`ToLower(CultureInfo.InvariantCulture)`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>方法相当于<ph id="ph2">`ToLower(CultureInfo.InvariantCulture)`</ph>。</target>       </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</source>
          <target state="translated">一个字符串集合必须在用户界面控件中可预测的顺序出现时，建议的方法。</target>       </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</source>
          <target state="translated">相反，它返回当前实例中的所有字符都转换为小写形式的新字符串。</target>       </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> methods.</source>
          <target state="translated">如果你需要操作系统的标识符，如文件名、 小写或大写版本命名管道或注册表项，使用<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>The following example defines a string array that contains a single word in a number of languages.</source>
          <target state="translated">下面的示例定义包含大量的语言中使用的单个字符的字符串数组。</target>       </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>The <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>方法用于填充与每个单词的不区分大小写版本并行数组的元素。</target>       </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToLowerInvariant">
          <source>The <ph id="ph1">&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph>方法用于区分大小写数组根据小写的数组，以确保无论何种语言的相同顺序出现元素中的元素的顺序排序。</target>       </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Converts the value of this instance to a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">将此实例的值转换为 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve" uid="M:System.String.ToString">
          <source>Returns this instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>; no actual conversion is performed.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的此实例；不执行实际转换。</target>       </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve" uid="M:System.String.ToString">
          <source>The current string.</source>
          <target state="translated">当前的字符串。</target>       </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToString">
          <source>Because this method simply returns the current string unchanged, there is no need to call it directly.</source>
          <target state="translated">此方法只返回未更改的当前字符串，因为没有无需直接调用。</target>       </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToString">
          <source>It is usually called implicitly in a composite formatting operation, as the example shows.</source>
          <target state="translated">它通常称为隐式中的复合格式设置操作，如示例所示。</target>       </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToString">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.String.ToString%2A&gt;</ph> method.Note that the example does not explicitly call the <ph id="ph2">&lt;xref:System.String.ToString%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.String.ToString%2A&gt;</ph>方法。请注意，该示例不显式调用<ph id="ph2">&lt;xref:System.String.ToString%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToString">
          <source>Instead, the method is called implicitly by the <bpt id="p1">[</bpt>composite formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> feature.</source>
          <target state="translated">相反，此方法叫做隐式<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>功能。</target>       </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve" uid="M:System.String.ToString(System.IFormatProvider)">
          <source>(Reserved) An object that supplies culture-specific formatting information.</source>
          <target state="translated">（保留）一个对象，用于提供区域性特定的格式设置信息。</target>       </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve" uid="M:System.String.ToString(System.IFormatProvider)">
          <source>Returns this instance of <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>; no actual conversion is performed.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的此实例；不执行实际转换。</target>       </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve" uid="M:System.String.ToString(System.IFormatProvider)">
          <source>The current string.</source>
          <target state="translated">当前的字符串。</target>       </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToString(System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is reserved, and does not currently participate in this operation.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 已保留，并且当前不参与此操作。</target>       </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToString(System.IFormatProvider)">
          <source>Because this method simply returns the current string unchanged, there is no need to call it directly.</source>
          <target state="translated">此方法只返回未更改的当前字符串，因为没有无需直接调用。</target>       </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a copy of this string converted to uppercase.</source>
          <target state="translated">返回此字符串转换为大写形式的副本。</target>       </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve" uid="M:System.String.ToUpper">
          <source>Returns a copy of this string converted to uppercase.</source>
          <target state="translated">返回此字符串转换为大写形式的副本。</target>       </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve" uid="M:System.String.ToUpper">
          <source>The uppercase equivalent of the current string.</source>
          <target state="translated">当前字符串的大写形式。</target>       </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.</source>
          <target state="translated">此方法使用当前区域性的大小写规则将当前实例中的每个字符转换为其大写等效项。</target>       </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</source>
          <target state="translated">如果字符没有大写等效项，它将包括在返回的字符串中不变。</target>       </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</source>
          <target state="translated">相反，它返回当前实例中的所有字符都转换为大写的新字符串。</target>       </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>The <ph id="ph1">&lt;xref:System.String.ToUpper%2A&gt;</ph> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToUpper%2A&gt;</ph>方法通常用于将字符串转换为大写形式，以便可以在不区分大小写比较中使用它。</target>       </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>A better method to perform case-insensitive comparison is to call a string comparison method that has a <ph id="ph1">&lt;xref:System.StringComparison&gt;</ph> parameter whose value you set to <ph id="ph2">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph> for a culture-sensitive, case-insensitive comparison.</source>
          <target state="translated">执行不区分大小写的比较更好的方法是调用具有的字符串比较方法<ph id="ph1">&lt;xref:System.StringComparison&gt;</ph>参数设置为其值<ph id="ph2">&lt;xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType&gt;</ph>有关的区分区域性的、 不区分大小写的比较。</target>       </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>The casing operation that results from calling the <ph id="ph1">&lt;xref:System.String.ToUpper&gt;</ph> method takes the casing conventions of the current culture into account.</source>
          <target state="translated">调用得到的结果的大小写操作<ph id="ph1">&lt;xref:System.String.ToUpper&gt;</ph>方法将当前区域性的大小写约定考虑在内。</target>       </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.</source>
          <target state="translated">如果你需要操作系统的标识符，如文件名、 小写或大写版本命名管道或注册表项，使用<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>This produces the same result in every culture (unlike the <ph id="ph1">&lt;xref:System.String.ToUpper&gt;</ph> method) and performs more efficiently.</source>
          <target state="translated">这将生成中每个区域性相同的结果 (与不同<ph id="ph1">&lt;xref:System.String.ToUpper&gt;</ph>方法) 和更有效地执行。</target>       </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.String.ToUpper%2A&gt;</ph> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets.</source>
          <target state="translated">下面的示例调用<ph id="ph1">&lt;xref:System.String.ToUpper%2A&gt;</ph>方法来转换包含基本拉丁，Latin 1 补充和拉丁语扩展 A 字符集中的每个字符的单字符字符串的一系列。</target>       </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>It then displays each string whose uppercase character is different from its lowercase character.</source>
          <target state="translated">然后，它将显示每个字符串的大写字符是不同于它的小写字符。</target>       </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>As explained in <bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>, we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</source>
          <target state="translated">中所述<bpt id="p1">[</bpt>使用字符串的最佳实践<ept id="p1">](~/docs/standard/base-types/best-practices-strings.md)</ept>，我们建议你避免调用替换为默认值并改为调用需要使用参数来显式指定的方法的字符串的大小写方法。</target>       </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper">
          <source>To convert a string to uppercase by using the casing conventions of the current culture, call the <ph id="ph1">&lt;see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /&gt;</ph> method overload with a value of <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentCulture" /&gt;</ph> for its <ph id="ph3">&lt;paramref name="culture" /&gt;</ph> parameter.</source>
          <target state="translated">若要转换为大写通过使用当前区域性的大小写约定的字符串，调用<ph id="ph1">&lt;see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /&gt;</ph>的值的方法重载<ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentCulture" /&gt;</ph>有关其<ph id="ph3">&lt;paramref name="culture" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>An object that supplies culture-specific casing rules.</source>
          <target state="translated">一个对象，用于提供区域性特定的大小写规则。</target>       </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</source>
          <target state="translated">根据指定区域性的大小写规则返回此字符串转换为大写形式的副本。</target>       </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>The uppercase equivalent of the current string.</source>
          <target state="translated">当前字符串的大写形式。</target>       </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>The casing rules of the culture specified by the <ph id="ph1">`culture`</ph> parameter determine the way the case of a string is changed.</source>
          <target state="translated">指定的区域性的大小写规则<ph id="ph1">`culture`</ph>参数确定更改字符串的大小写的方法。</target>       </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</source>
          <target state="translated">相反，它返回当前实例中的所有字符都转换为大写的新字符串。</target>       </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="3568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>If you pass the <ph id="ph1">&lt;xref:System.String.ToUpper%28System.Globalization.CultureInfo%29&gt;</ph> method a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object other than <ph id="ph3">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>, the casing operation will take culture-specific rules into account.</source>
          <target state="translated">如果你通过<ph id="ph1">&lt;xref:System.String.ToUpper%28System.Globalization.CultureInfo%29&gt;</ph>方法<ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph>以外对象<ph id="ph3">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>，大小写操作将考虑到的区域性特定的规则。</target>       </trans-unit>
        <trans-unit id="3569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.</source>
          <target state="translated">如果你需要操作系统的标识符，如文件名、 小写或大写版本命名管道或注册表项，使用<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>This produces the same result in every culture and performs more efficiently.</source>
          <target state="translated">这产生中每个区域性相同的结果，它更有效地执行。</target>       </trans-unit>
        <trans-unit id="3571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings.</source>
          <target state="translated">下面的示例将小写字符的字符串转换为两个字符串的大写字符使用美国英语和土耳其语-土耳其区域性中，然后对大写的字符串进行比较。</target>       </trans-unit>
        <trans-unit id="3572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source>The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</source>
          <target state="translated">大写字符串基本相同，只不过 Unicode LATIN CAPITAL LETTER I 在单个字符串中每个匹配项，另一个字符串包含 LATIN CAPITAL LETTER I 与点上方。</target>       </trans-unit>
        <trans-unit id="3573" translate="yes" xml:space="preserve" uid="M:System.String.ToUpper(System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3574" translate="yes" xml:space="preserve" uid="M:System.String.ToUpperInvariant">
          <source>Returns a copy of this <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object converted to uppercase using the casing rules of the invariant culture.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。</target>       </trans-unit>
        <trans-unit id="3575" translate="yes" xml:space="preserve" uid="M:System.String.ToUpperInvariant">
          <source>The uppercase equivalent of the current string.</source>
          <target state="translated">当前字符串的大写形式。</target>       </trans-unit>
        <trans-unit id="3576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>The invariant culture represents a culture that is culture-insensitive.</source>
          <target state="translated">固定区域性表示区域性的不区分区域性的。</target>       </trans-unit>
        <trans-unit id="3577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>It is associated with the English language but not with a specific country or region.</source>
          <target state="translated">关联与英语语言，但不是与特定的国家 / 地区。</target>       </trans-unit>
        <trans-unit id="3578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="3579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <ph id="ph1">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.</source>
          <target state="translated">如果你的应用程序依赖于不受当前区域性使用的可预测方式更改字符串的大小写<ph id="ph1">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>The <ph id="ph1">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method is equivalent to <ph id="ph2">`ToUpper(CultureInfo.InvariantCulture)`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法相当于<ph id="ph2">`ToUpper(CultureInfo.InvariantCulture)`</ph>。</target>       </trans-unit>
        <trans-unit id="3581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</source>
          <target state="translated">一个字符串集合必须在用户界面控件中可预测的顺序出现时，建议的方法。</target>       </trans-unit>
        <trans-unit id="3582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>This method does not modify the value of the current instance.</source>
          <target state="translated">此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</source>
          <target state="translated">相反，它返回当前实例中的所有字符都转换为大写的新字符串。</target>       </trans-unit>
        <trans-unit id="3584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="3585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> methods.</source>
          <target state="translated">如果你需要操作系统的标识符，如文件名、 小写或大写版本命名管道或注册表项，使用<ph id="ph1">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>The following example defines a string array that contains a single word in a number of languages.</source>
          <target state="translated">下面的示例定义包含大量的语言中使用的单个字符的字符串数组。</target>       </trans-unit>
        <trans-unit id="3587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>The <ph id="ph1">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph>方法用于填充与每个单词的不区分大小写版本并行数组的元素。</target>       </trans-unit>
        <trans-unit id="3588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.ToUpperInvariant">
          <source>The <ph id="ph1">&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph>方法用于对大写的数组，以确保无论何种语言的相同顺序出现元素中的元素的顺序基于区分大小写数组进行排序。</target>       </trans-unit>
        <trans-unit id="3589" translate="yes" xml:space="preserve" uid="T:System.String">
          <source>Returns a new string in which all leading and trailing occurrences of a set of specified characters from the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object are removed.</source>
          <target state="translated">返回一个新字符串，它相当于从当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象中移除了一组指定字符的所有前导匹配项和尾随匹配项。</target>       </trans-unit>
        <trans-unit id="3590" translate="yes" xml:space="preserve" uid="M:System.String.Trim">
          <source>Removes all leading and trailing white-space characters from the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">从当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象移除所有前导空白字符和尾部空白字符。</target>       </trans-unit>
        <trans-unit id="3591" translate="yes" xml:space="preserve" uid="M:System.String.Trim">
          <source>The string that remains after all white-space characters are removed from the start and end of the current string.</source>
          <target state="translated">从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。</target>       </trans-unit>
        <trans-unit id="3592" translate="yes" xml:space="preserve" uid="M:System.String.Trim">
          <source>If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</source>
          <target state="translated">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</target>       </trans-unit>
        <trans-unit id="3593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>The <ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> method removes from the current string all leading and trailing white-space characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph>方法从字符串中删除当前所有前导和尾随空白字符。</target>       </trans-unit>
        <trans-unit id="3594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>Each leading and trailing trim operation stops when a non-white-space character is encountered.</source>
          <target state="translated">每个前导和尾随剪裁操作停止时遇到非空白字符。</target>       </trans-unit>
        <trans-unit id="3595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>For example, if the current string is "   abc   xyz   ", the <ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> method returns "abc   xyz".</source>
          <target state="translated">例如，如果当前字符串"abc x y z"<ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph>方法将返回"abc x y z"。</target>       </trans-unit>
        <trans-unit id="3596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>To remove white-space characters between words in a string, use a <bpt id="p1">[</bpt>.NET Framework Regular Expressions<ept id="p1">](~/docs/standard/base-types/regular-expressions.md)</ept>.</source>
          <target state="translated">若要删除字符串中的单词之间的空白字符，请使用<bpt id="p1">[</bpt>.NET Framework 正则表达式<ept id="p1">](~/docs/standard/base-types/regular-expressions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>If the <ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph>方法从当前实例中删除任何字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</source>
          <target state="translated">相反，它返回一个新字符串，会在当前实例中找到的所有前导和尾随空白字符。</target>       </trans-unit>
        <trans-unit id="3599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>If the current string equals <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> or all the characters in the current instance consist of white-space characters, the method returns <ph id="ph2">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated">如果当前字符串等于<ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>或当前实例中的所有字符由空白字符都组成，该方法返回<ph id="ph2">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>White-space characters are defined by the Unicode standard.</source>
          <target state="translated">由 Unicode 标准定义空白字符。</target>       </trans-unit>
        <trans-unit id="3601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>The <ph id="ph1">&lt;xref:System.String.Trim&gt;</ph> method removes any leading and trailing characters that produce a return value of <ph id="ph2">`true`</ph> when they are passed to the <ph id="ph3">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Trim&gt;</ph>方法可以删除生成的返回值的任何前导和尾随字符<ph id="ph2">`true`</ph>时传递给<ph id="ph3">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="3602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Trim?displayProperty=nameWithType&gt;</ph> method to remove any extra white space from strings entered by the user before concatenating them.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Trim?displayProperty=nameWithType&gt;</ph>方法从用户输入的之前将它们连接起来的字符串中移除任何多余的空白区域。</target>       </trans-unit>
        <trans-unit id="3603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>The <ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions maintain an internal list of white-space characters that this method trims.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本维护此方法修整的空白字符的内部列表。</target>       </trans-unit>
        <trans-unit id="3604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the method trims all Unicode white-space characters (that is, characters that produce a <ph id="ph2">&lt;see langword="true" /&gt;</ph> return value when they are passed to the <ph id="ph3">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph> method).</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，该方法将修整所有 Unicode 空白字符 (即字符生成<ph id="ph2">&lt;see langword="true" /&gt;</ph>返回值传递给<ph id="ph3">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph>方法)。</target>       </trans-unit>
        <trans-unit id="3605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>Because of this change, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>and later versions does not remove.</source>
          <target state="translated">由于此更改，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本中移除两个字符，零宽度空格 (U + 200B) 和零宽度无中断空格 (U + FEFF)，<ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>以及更高版本不是删除。</target>       </trans-unit>
        <trans-unit id="3606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim">
          <source>In addition, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</source>
          <target state="translated">此外，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本不会修整三个 Unicode 空白字符： 蒙古语元音分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空间 (U + 205F)。</target>       </trans-unit>
        <trans-unit id="3607" translate="yes" xml:space="preserve" uid="M:System.String.Trim(System.Char[])">
          <source>An array of Unicode characters to remove, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要删除的 Unicode 字符的数组，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3608" translate="yes" xml:space="preserve" uid="M:System.String.Trim(System.Char[])">
          <source>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">从当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。</target>       </trans-unit>
        <trans-unit id="3609" translate="yes" xml:space="preserve" uid="M:System.String.Trim(System.Char[])">
          <source>The string that remains after all occurrences of the characters in the <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> parameter are removed from the start and end of the current string.</source>
          <target state="translated">从当前字符串的开头移除所出现的所有 <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> 参数中的字符后剩余的字符串。</target>       </trans-unit>
        <trans-unit id="3610" translate="yes" xml:space="preserve" uid="M:System.String.Trim(System.Char[])">
          <source>If <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array, white-space characters are removed instead.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或空数组，则改为移除空白字符。</target>       </trans-unit>
        <trans-unit id="3611" translate="yes" xml:space="preserve" uid="M:System.String.Trim(System.Char[])">
          <source>If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</source>
          <target state="translated">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</target>       </trans-unit>
        <trans-unit id="3612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> method removes from the current string all leading and trailing characters that are in the <ph id="ph2">`trimChars`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph>方法可以删除从当前字符串中的所有前导和尾随字符<ph id="ph2">`trimChars`</ph>参数。</target>       </trans-unit>
        <trans-unit id="3613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>Each leading and trailing trim operation stops when a character that is not in <ph id="ph1">`trimChars`</ph> is encountered.</source>
          <target state="translated">每个前导空格和尾随 trim 操作停止时将不在字符<ph id="ph1">`trimChars`</ph>遇到。</target>       </trans-unit>
        <trans-unit id="3614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>For example, if the current string is "123abc456xyz789" and <ph id="ph1">`trimChars`</ph> contains the digits from "1" through "9", the <ph id="ph2">&lt;xref:System.String.Trim%2A&gt;</ph> method returns "abc456xyz".</source>
          <target state="translated">例如，如果当前的字符串为"123abc456xyz789"和<ph id="ph1">`trimChars`</ph>包含从"1"至"9"的数字<ph id="ph2">&lt;xref:System.String.Trim%2A&gt;</ph>方法将返回"abc456xyz"。</target>       </trans-unit>
        <trans-unit id="3615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>If the <ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.Trim%2A&gt;</ph>方法从当前实例中删除任何字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>Instead, it returns a new string in which all leading and trailing <ph id="ph1">`trimChars`</ph> characters found in the current instance are removed.</source>
          <target state="translated">相反，它将返回一个新字符串，所有前导空格和尾随<ph id="ph1">`trimChars`</ph>移除了当前实例中找到的字符。</target>       </trans-unit>
        <trans-unit id="3617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>If the current string equals <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> or all the characters in the current instance consist of characters in the <ph id="ph2">`trimChars`</ph> array, the method returns <ph id="ph3">&lt;xref:System.String.Empty&gt;</ph>.</source>
          <target state="translated">如果当前字符串等于<ph id="ph1">&lt;xref:System.String.Empty&gt;</ph>或当前实例中的所有字符中的字符都组成<ph id="ph2">`trimChars`</ph>数组，该方法返回<ph id="ph3">&lt;xref:System.String.Empty&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>If <ph id="ph1">`trimChars`</ph> is <ph id="ph2">`null`</ph> or an empty array, this method removes any leading or trailing characters that result in the method returning <ph id="ph3">`true`</ph> when they are passed to the <ph id="ph4">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph> method,</source>
          <target state="translated">如果<ph id="ph1">`trimChars`</ph>是<ph id="ph2">`null`</ph>或空数组，此方法可以删除导致方法返回任何前导或尾随字符<ph id="ph3">`true`</ph>时传递给<ph id="ph4">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType&gt;</ph>方法，</target>       </trans-unit>
        <trans-unit id="3619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph> method to remove space, asterisk (*), and apostrophe (') characters from a string.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法从字符串中移除空间、 星号 （*） 和撇号 （'） 字符。</target>       </trans-unit>
        <trans-unit id="3620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>The <ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions maintains an internal list of white-space characters that this method trims if <ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本维护此方法修剪如果的空白字符的内部列表<ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>或为空数组。</target>       </trans-unit>
        <trans-unit id="3621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, if <ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <ph id="ph4">&lt;see langword="true" /&gt;</ph> return value when they are passed to the <ph id="ph5">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph> method).</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，如果<ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>或空数组，该方法将修整所有 Unicode 空白字符 (即，字符生成<ph id="ph4">&lt;see langword="true" /&gt;</ph>返回值传递给<ph id="ph5">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph>方法)。</target>       </trans-unit>
        <trans-unit id="3622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>Because of this change, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>and later versions does not remove.</source>
          <target state="translated">由于此更改，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本中移除两个字符，零宽度空格 (U + 200B) 和零宽度无中断空格 (U + FEFF)，<ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>以及更高版本不是删除。</target>       </trans-unit>
        <trans-unit id="3623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.Trim(System.Char[])">
          <source>In addition, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</source>
          <target state="translated">此外，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本不会修整三个 Unicode 空白字符： 蒙古语元音分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空间 (U + 205F)。</target>       </trans-unit>
        <trans-unit id="3624" translate="yes" xml:space="preserve" uid="M:System.String.TrimEnd(System.Char[])">
          <source>An array of Unicode characters to remove, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要删除的 Unicode 字符的数组，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3625" translate="yes" xml:space="preserve" uid="M:System.String.TrimEnd(System.Char[])">
          <source>Removes all trailing occurrences of a set of characters specified in an array from the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">从当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象移除数组中指定的一组字符的所有尾部匹配项。</target>       </trans-unit>
        <trans-unit id="3626" translate="yes" xml:space="preserve" uid="M:System.String.TrimEnd(System.Char[])">
          <source>The string that remains after all occurrences of the characters in the <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> parameter are removed from the end of the current string.</source>
          <target state="translated">从当前字符串的开头移除所出现的所有 <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> 参数中的字符后剩余的字符串。</target>       </trans-unit>
        <trans-unit id="3627" translate="yes" xml:space="preserve" uid="M:System.String.TrimEnd(System.Char[])">
          <source>If <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array, Unicode white-space characters are removed instead.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或空数组，则改为删除 Unicode 空白字符。</target>       </trans-unit>
        <trans-unit id="3628" translate="yes" xml:space="preserve" uid="M:System.String.TrimEnd(System.Char[])">
          <source>If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</source>
          <target state="translated">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</target>       </trans-unit>
        <trans-unit id="3629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.TrimEnd%2A&gt;</ph> method removes from the current string all trailing characters that are in the <ph id="ph2">`trimChars`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.TrimEnd%2A&gt;</ph>方法可以删除从当前字符串中的所有尾随字符<ph id="ph2">`trimChars`</ph>参数。</target>       </trans-unit>
        <trans-unit id="3630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>The trim operation stops when the first character that is not in <ph id="ph1">`trimChars`</ph> is encountered at the end of the string.</source>
          <target state="translated">剪裁操作就会停止在第一个字符不是在<ph id="ph1">`trimChars`</ph>遇到在字符串的末尾。</target>       </trans-unit>
        <trans-unit id="3631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>For example, if the current string is "123abc456xyz789" and <ph id="ph1">`trimChars`</ph> contains the digits from "1" through "9", the <ph id="ph2">&lt;xref:System.String.TrimEnd%2A&gt;</ph> method returns "123abc456xyz".</source>
          <target state="translated">例如，如果当前的字符串为"123abc456xyz789"和<ph id="ph1">`trimChars`</ph>包含从"1"至"9"的数字<ph id="ph2">&lt;xref:System.String.TrimEnd%2A&gt;</ph>方法将返回"123abc456xyz"。</target>       </trans-unit>
        <trans-unit id="3632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>If the <ph id="ph1">&lt;xref:System.String.TrimEnd%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.TrimEnd%2A&gt;</ph>方法从当前实例中删除任何字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>Instead, it returns a new string in which all trailing characters found in <ph id="ph1">`trimChars`</ph> are removed from the current string.</source>
          <target state="translated">相反，它返回一个新字符串中找到的所有尾随字符中<ph id="ph1">`trimChars`</ph>从当前字符串删除。</target>       </trans-unit>
        <trans-unit id="3634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>The following example demonstrates how you can use the <ph id="ph1">&lt;xref:System.String.TrimEnd%28System.Char%5B%5D%29&gt;</ph> method to trim white space or punctuation marks from the end of a string.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.String.TrimEnd%28System.Char%5B%5D%29&gt;</ph>方法，以修整空格或标点符号从字符串的末尾。</target>       </trans-unit>
        <trans-unit id="3635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>The <ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions maintains an internal list of white-space characters that this method trims if <ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本维护此方法修剪如果的空白字符的内部列表<ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>或为空数组。</target>       </trans-unit>
        <trans-unit id="3636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, if <ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <ph id="ph4">&lt;see langword="true" /&gt;</ph> return value when they are passed to the <ph id="ph5">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph> method).</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，如果<ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>或空数组，该方法将修整所有 Unicode 空白字符 (即，字符生成<ph id="ph4">&lt;see langword="true" /&gt;</ph>返回值传递给<ph id="ph5">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph>方法)。</target>       </trans-unit>
        <trans-unit id="3637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>Because of this change, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and later versions does not remove.</source>
          <target state="translated">由于此更改，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本中移除两个字符，零宽度空格 (U + 200B) 和零宽度无中断空格 (U + FEFF)，<ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>以及更高版本不是删除。</target>       </trans-unit>
        <trans-unit id="3638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimEnd(System.Char[])">
          <source>In addition, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</source>
          <target state="translated">此外，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本不会修整三个 Unicode 空白字符： 蒙古语元音分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空间 (U + 205F)。</target>       </trans-unit>
        <trans-unit id="3639" translate="yes" xml:space="preserve" uid="M:System.String.TrimStart(System.Char[])">
          <source>An array of Unicode characters to remove, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要删除的 Unicode 字符的数组，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3640" translate="yes" xml:space="preserve" uid="M:System.String.TrimStart(System.Char[])">
          <source>Removes all leading occurrences of a set of characters specified in an array from the current <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object.</source>
          <target state="translated">从当前 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 对象移除数组中指定的一组字符的所有前导匹配项。</target>       </trans-unit>
        <trans-unit id="3641" translate="yes" xml:space="preserve" uid="M:System.String.TrimStart(System.Char[])">
          <source>The string that remains after all occurrences of characters in the <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> parameter are removed from the start of the current string.</source>
          <target state="translated">从当前字符串的开头移除所出现的所有 <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> 参数中的字符后剩余的字符串。</target>       </trans-unit>
        <trans-unit id="3642" translate="yes" xml:space="preserve" uid="M:System.String.TrimStart(System.Char[])">
          <source>If <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array, white-space characters are removed instead.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="trimChars" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或空数组，则改为移除空白字符。</target>       </trans-unit>
        <trans-unit id="3643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> method removes from the current string all leading characters that are in the <ph id="ph2">`trimChars`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph>方法可以删除从当前字符串中的所有前导字符<ph id="ph2">`trimChars`</ph>参数。</target>       </trans-unit>
        <trans-unit id="3644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The trim operation stops when a character that is not in <ph id="ph1">`trimChars`</ph> is encountered.</source>
          <target state="translated">剪裁操作停止时将不在字符<ph id="ph1">`trimChars`</ph>遇到。</target>       </trans-unit>
        <trans-unit id="3645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>For example, if the current string is "123abc456xyz789" and <ph id="ph1">`trimChars`</ph> contains the digits from "1" through "9", the <ph id="ph2">&lt;xref:System.String.TrimStart%2A&gt;</ph> method returns "abc456xyz789".</source>
          <target state="translated">例如，如果当前的字符串为"123abc456xyz789"和<ph id="ph1">`trimChars`</ph>包含从"1"至"9"的数字<ph id="ph2">&lt;xref:System.String.TrimStart%2A&gt;</ph>方法将返回"abc456xyz789"。</target>       </trans-unit>
        <trans-unit id="3646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>If the <ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph>方法从当前实例中删除任何字符，此方法不会修改当前实例的值。</target>       </trans-unit>
        <trans-unit id="3647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</source>
          <target state="translated">相反，它返回一个新字符串，会在当前实例中找到的所有前导空白字符。</target>       </trans-unit>
        <trans-unit id="3648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> method to trim white space and comment characters from lines of source code.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph>方法，以修整空格和从代码的源代码行的注释字符。</target>       </trans-unit>
        <trans-unit id="3649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The <ph id="ph1">`StripComments`</ph> method wraps a call to <ph id="ph2">&lt;xref:System.String.TrimStart%2A&gt;</ph> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#.</source>
          <target state="translated"><ph id="ph1">`StripComments`</ph>方法包装对的调用<ph id="ph2">&lt;xref:System.String.TrimStart%2A&gt;</ph>并将其传递在 Visual Basic 和 C# 中的斜杠 （/） 中包含一个空格和注释字符，这是单引号 （'） 的字符数组。</target>       </trans-unit>
        <trans-unit id="3650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> method is also called to remove leading white space when evaluating whether a string is a comment.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph>方法也称为若要评估一个字符串是否为注释中删除前导空白字符。</target>       </trans-unit>
        <trans-unit id="3651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The following example then illustrates a call to the <ph id="ph1">`StripComments`</ph> method.</source>
          <target state="translated">下面的示例因而演示 <ph id="ph1">`StripComments`</ph> 方法的调用。</target>       </trans-unit>
        <trans-unit id="3652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>The <ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions maintains an internal list of white-space characters that this method trims if <ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本维护此方法修剪如果的空白字符的内部列表<ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>或为空数组。</target>       </trans-unit>
        <trans-unit id="3653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, if <ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <ph id="ph4">&lt;see langword="true" /&gt;</ph> return value when they are passed to the <ph id="ph5">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph> method).</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，如果<ph id="ph2">&lt;paramref name="trimChars" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>或空数组，该方法将修整所有 Unicode 空白字符 (即，字符生成<ph id="ph4">&lt;see langword="true" /&gt;</ph>返回值传递给<ph id="ph5">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)" /&gt;</ph>方法)。</target>       </trans-unit>
        <trans-unit id="3654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>Because of this change, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and later versions does not remove.</source>
          <target state="translated">由于此更改，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本中移除两个字符，零宽度空格 (U + 200B) 和零宽度无中断空格 (U + FEFF)，<ph id="ph3">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph4">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>以及更高版本不是删除。</target>       </trans-unit>
        <trans-unit id="3655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.String.TrimStart(System.Char[])">
          <source>In addition, the <ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph> method in the <ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph> and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</source>
          <target state="translated">此外，<ph id="ph1">&lt;see cref="M:System.String.Trim" /&gt;</ph>中的方法<ph id="ph2">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>和早期版本不会修整三个 Unicode 空白字符： 蒙古语元音分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空间 (U + 205F)。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>