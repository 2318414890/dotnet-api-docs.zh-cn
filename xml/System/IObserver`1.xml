<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea35d1fd6f86c6834e27af2684cc90c2e5b8fc8a" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46662488" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">提供通知信息的对象。</typeparam>
    <summary>提供用于接收基于推送的通知的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601>和<xref:System.IObservable%601>接口提供一种基于推送的通知，也称为观察者设计模式的通用的机制。 <xref:System.IObservable%601>接口表示发送通知 （该提供程序;） 的类<xref:System.IObserver%601>接口表示接收它们 （观察者） 的类。 `T` 表示提供通知信息的类。  
  
 <xref:System.IObserver%601>实现来排列以从提供程序接收通知 (<xref:System.IObservable%601>实现) 通过将自身的实例传递到提供程序的<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>方法。 此方法返回<xref:System.IDisposable>对象，它可用于取消订阅观察者提供程序之前完成发送通知。  
  
 <xref:System.IObserver%601>接口定义观察程序必须实现以下三种方法：  
  
-   <xref:System.IObserver%601.OnNext%2A>通常由提供程序提供的新数据或状态信息的观察程序调用的方法。  
  
-   <xref:System.IObserver%601.OnError%2A>方法，通常会调用由提供程序指示数据不可用，不可访问，或已损坏，或提供程序遇到其他错误条件。  
  
-   <xref:System.IObserver%601.OnCompleted%2A>通常由提供程序，以指示它已完成将通知发送给观察程序调用的方法。  
  
   
  
## Examples  
 下面的示例说明了观察者设计模式。 它定义`Location`类，该类包含纬度和经度信息。  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationReporter`类提供了<xref:System.IObserver%601>实现。 它向控制台显示有关当前的位置的信息。 其构造函数包括`name`参数，它允许`LocationReporter`实例在其字符串输出中标识自身。 它还包括`Subscribe`方法，它包装到提供程序的调用<xref:System.IObservable%601.Subscribe%2A>方法。 这使此方法将返回的分配<xref:System.IDisposable>私有变量的引用。 `LocationReporter`类还包括`Unsubscribe`方法，调用<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法返回的对象<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>方法。 下面的代码定义`LocationReporter`类。  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 `LocationTracker`类提供了<xref:System.IObservable%601>实现。 其`TrackLocation`方法传递一个可以为 null`Location`对象，其中包含纬度和经度数据。 如果`Location`的值不是`null`，则`TrackLocation`方法调用<xref:System.IObserver%601.OnNext%2A>的每个观察程序的方法。  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 如果`Location`值是`null`，则`TrackLocation`方法实例化`LocationNotFoundException`对象，在下面的示例所示。 然后，它调用每个观察程序<xref:System.IObserver%601.OnError%2A>方法并将其传递`LocationNotFoundException`对象。 请注意，`LocationNotFoundException`派生自<xref:System.Exception>但未添加任何新成员。  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 观察程序注册以接收来自通知`TrackLocation`对象通过调用其<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>方法，将观察者对象的引用分配给私有泛型<xref:System.Collections.Generic.List%601>对象。 该方法返回`Unsubscriber`对象，它是<xref:System.IDisposable>实现，它使观察者来停止接收通知。 `LocationTracker`类还包括`EndTransmission`方法。 当没有更多位置数据可用时，该方法会调用每个观察程序<xref:System.IObserver%601.OnCompleted%2A>方法，然后再清除观察者的内部列表。  
  
 提供程序和观察者，然后实例化下面的代码。  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知观察者提供程序已完成发送基于推送的通知。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时观察程序的<xref:System.IObserver%601.OnCompleted%2A>实施被称为，<xref:System.IObserver%601.OnCompleted%2A>方法可以选择调用<xref:System.IDisposable.Dispose%2A>方法<xref:System.IDisposable>对象，该调用时返回到观察者对象<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例提供的实现<xref:System.IObserver%601.OnCompleted%2A>纬度/经度跟踪应用程序中的方法。 该方法仅报告没有更多数据可用，并调用提供程序的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现。 请参阅示例部分<xref:System.IObserver%601>有关完整示例的主题。  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">提供有关错误的附加信息的对象。</param>
        <summary>通知观察者提供程序遇到错误情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管`error`是一个对象，派生自<xref:System.Exception?displayProperty=nameWithType>，不一定表示由提供程序引发的异常。 它还可以表示例程或预期的错误条件，例如数据丢失或不可用。 <xref:System.IObserver%601.OnError%2A>方法应被视为信息性消息、 和提供程序不应期望观察者来提供错误处理。  
  
   
  
## Examples  
 下面的示例提供的实现<xref:System.IObserver%601.OnError%2A>纬度/经度跟踪应用程序中的方法。 方法只是报告数据当前不可用;它不会使利用<xref:System.Exception>对象作为参数传递给它。 请参阅示例部分<xref:System.IObserver%601>有关完整示例的主题。  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">观察程序设计模式最佳做法</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">当前通知信息。</param>
        <summary>向观察者提供新数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 观察者已调用提供程序的后<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>方法，该提供程序调用观察程序的<xref:System.IObserver%601.OnNext%2A>方法以提供通知。  
  
   
  
## Examples  
 下面的示例提供的实现<xref:System.IObserver%601.OnNext%2A>纬度/经度跟踪应用程序中的方法。 请参阅示例部分<xref:System.IObserver%601>有关完整示例的主题。  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>