<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="759a59b663b11958aee79d0d84eee78a6d843a98" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57912781" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
    <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
    <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
    <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
    <param name="arg1">此委托封装的方法的第一个参数。</param>
    <param name="arg2">此委托封装的方法的第二个参数。</param>
    <param name="arg3">此委托封装的方法的第三个参数。</param>
    <summary>封装一个具有三个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
    <returns>此委托封装的方法的返回值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此委托来表示可以作为参数传递而无需显式声明自定义委托的方法。 封装的方法必须对应于此委托定义的方法签名。 这意味着，封装的方法必须具有三个参数，其中每个按值传递给它，并且它必须返回一个值。  
  
> [!NOTE]
>  若要引用的方法有三个参数并返回`void`(或在 Visual Basic 中的声明为`Sub`而不是作为`Function`)，使用泛型<xref:System.Action%603>改为委托。  
  
 当你使用<xref:System.Func%604>委托时，您无需显式定义用于封装具有三个参数的方法的委托。 例如，下面的代码显式声明一个名为的泛型委托`ParseNumber`，并将分配到的引用<xref:System.Int32.Parse%2A>给其委托实例的方法。  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 下面的示例简化了此代码实例化<xref:System.Func%604>而不是显式定义一个新委托，并为其赋值命名的方法的委托。  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 可以使用<xref:System.Func%604>委托与匿名方法在 C# 中，如以下示例所示。 (有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 你还可以分配一个 lambda 表达式到<xref:System.Func%604>委托，如以下示例所示。 (有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)并[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 Lambda 表达式的基础类型是一个泛型`Func`委托。 这样，可以将 lambda 表达式作为参数传递而无需显式将其分配给委托。 具体而言，因为许多方法中的类型<xref:System.Linq>命名空间具有`Func`参数，您可以将传递这些方法的 lambda 表达式无需显式实例化`Func`委托。  
  
   
  
## Examples  
 下面的示例演示如何声明和使用<xref:System.Func%603>委托。 此示例中声明<xref:System.Func%603>变量并将其分配采用的 lambda 表达式<xref:System.String>值和一个<xref:System.Int32>作为参数的值。 Lambda 表达式将返回`true`如果时长<xref:System.String>参数的值等于<xref:System.Int32>参数。 随后在对字符串数组中的筛选器字符串的查询中使用此委托封装此方法。  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Lambda 表达式（C# 编程指南）</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda 表达式</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">委托（C# 编程指南）</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">在 Visual Basic 中的委托</related>
  </Docs>
</Type>