<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="934839c1c4cbb7a73457bc973f4be49a172db0e1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">
      <span data-ttu-id="cd8f2-101">此委托封装的方法的第一个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-101">The type of the first parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T2">
      <span data-ttu-id="cd8f2-102">此委托封装的方法的第二个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-102">The type of the second parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T3">
      <span data-ttu-id="cd8f2-103">此委托封装的方法的第三个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-103">The type of the third parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="cd8f2-104">此委托封装的方法的返回值类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-104">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg1">
      <span data-ttu-id="cd8f2-105">此委托封装的方法的第一个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-105">The first parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg2">
      <span data-ttu-id="cd8f2-106">此委托封装的方法的第二个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-106">The second parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg3">
      <span data-ttu-id="cd8f2-107">此委托封装的方法的第三个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-107">The third parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="cd8f2-108">封装一个具有三个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-108">Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="cd8f2-109">此委托封装的方法的返回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd8f2-109">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd8f2-110">可以使用此委托来表示可以作为参数传递而不用显式声明自定义委托的方法。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-110">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="cd8f2-111">封装的方法必须对应于此委托定义方法签名。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-111">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="cd8f2-112">这意味着，封装的方法必须具有三个参数，其中每个通过值传递给它，并且它必须返回一个值。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-112">This means that the encapsulated method must have three parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cd8f2-113">若要引用的方法具有三个参数并返回`void`(或在 Visual Basic 中，声明为`Sub`而不是`Function`)，使用泛型<xref:System.Action%603>委托。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-113">To reference a method that has three parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%603> delegate instead.</span></span>  
  
 <span data-ttu-id="cd8f2-114">当你使用<xref:System.Func%604>委托，则不需要显式定义委托，用于封装具有三个参数的方法。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-114">When you use the <xref:System.Func%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="cd8f2-115">例如，下面的代码显式声明一个名为的泛型委托`ParseNumber`并将分配到的引用<xref:System.Int32.Parse%2A>给其委托实例的方法。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-115">For example, the following code explicitly declares a generic delegate named `ParseNumber` and assigns a reference to the <xref:System.Int32.Parse%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="cd8f2-116">下面的示例简化了此代码实例化<xref:System.Func%604>而不是显式定义新的委托，并向其分配指定的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-116">The following example simplifies this code by instantiating the <xref:System.Func%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 <span data-ttu-id="cd8f2-117">你可以使用<xref:System.Func%604>委托与 C# 中的匿名方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-117">You can use the <xref:System.Func%604> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="cd8f2-118">(有关匿名方法的简介，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="cd8f2-118">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 <span data-ttu-id="cd8f2-119">你还可以分配到 lambda 表达式<xref:System.Func%604>委托，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-119">You can also assign a lambda expression to a <xref:System.Func%604> delegate, as the following example illustrates.</span></span> <span data-ttu-id="cd8f2-120">(有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)和[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="cd8f2-120">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="cd8f2-121">Lambda 表达式的基础类型是一个泛型`Func`委托。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-121">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="cd8f2-122">这使它可以将 lambda 表达式作为参数传递而不显式将其分配给委托。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-122">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="cd8f2-123">具体而言，因为许多方法中的类型<xref:System.Linq>命名空间具有`Func`参数，你可以将传递这些方法的 lambda 表达式而不显式实例化`Func`委托。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-123">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd8f2-124">下面的示例演示如何声明和使用<xref:System.Func%603>委托。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-124">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="cd8f2-125">此示例声明<xref:System.Func%603>变量并将其分配采用的 lambda 表达式<xref:System.String>值和<xref:System.Int32>作为参数的值。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-125">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="cd8f2-126">Lambda 表达式返回`true`如果的长度<xref:System.String>参数等于的值<xref:System.Int32>参数。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-126">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="cd8f2-127">委托，用于封装此方法随后在对数组的字符串中的筛选器字符串的查询中使用。</span><span class="sxs-lookup"><span data-stu-id="cd8f2-127">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>