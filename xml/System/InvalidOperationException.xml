<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="310a76379e88bee1dcef1420b7010efdaf2c8a3d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429904" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b03c5-101">当方法调用对于对象的当前状态无效时引发的异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b03c5-101">The exception that is thrown when a method call is invalid for the object's current state.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b03c5-102"><xref:System.InvalidOperationException> 在情况下在由以外的参数无效的原因导致无法调用方法时使用。</span><span class="sxs-lookup"><span data-stu-id="b03c5-102"><xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.</span></span> <span data-ttu-id="b03c5-103">通常情况下，它时引发对象的状态无法支持该方法调用。</span><span class="sxs-lookup"><span data-stu-id="b03c5-103">Typically, it is thrown when the state of an object cannot support the method call.</span></span> <span data-ttu-id="b03c5-104">例如，<xref:System.InvalidOperationException>如由方法引发异常：</span><span class="sxs-lookup"><span data-stu-id="b03c5-104">For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:</span></span>  
  
-   <span data-ttu-id="b03c5-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> 如果创建枚举器后，会修改对象的集合。</span><span class="sxs-lookup"><span data-stu-id="b03c5-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> if objects of a collection are modified after the enumerator is created.</span></span> <span data-ttu-id="b03c5-106">有关详细信息，请参阅[更改循环访问它时收集](#Iterating)。</span><span class="sxs-lookup"><span data-stu-id="b03c5-106">For more information, see [Changing a collection while iterating it](#Iterating).</span></span>  
  
-   <span data-ttu-id="b03c5-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> 如果之前已关闭对资源集，进行方法调用。</span><span class="sxs-lookup"><span data-stu-id="b03c5-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> if the resource set is closed before the method call is made.</span></span>  
  
-   <span data-ttu-id="b03c5-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>如果要添加的对象将导致不正确的结构化的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="b03c5-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, if the object or objects to be added would result in an incorrectly structured XML document.</span></span>  
  
-   <span data-ttu-id="b03c5-109">尝试操作 UI。 不是主要的线程或 UI 线程的一种方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-109">A method that attempts to manipulate the UI from a thread that is not the main or UI thread.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b03c5-110">因为<xref:System.InvalidOperationException>可能会引发异常在各种情况下，务必读取返回的异常消息<xref:System.Exception.Message%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="b03c5-110">Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.</span></span>  
  
 <span data-ttu-id="b03c5-111">本节内容：</span><span class="sxs-lookup"><span data-stu-id="b03c5-111">In this section:</span></span>  
  
 <span data-ttu-id="b03c5-112">[InvalidOperationException 异常的一些常见原因](#Causes) </span><span class="sxs-lookup"><span data-stu-id="b03c5-112">[Some common causes of InvalidOperationException exceptions](#Causes) </span></span>  
 [<span data-ttu-id="b03c5-113">更新 UI 线程从非 UI 线程</span><span class="sxs-lookup"><span data-stu-id="b03c5-113">Updating a UI thread from a non-UI thread</span></span>](#UI)  
 [<span data-ttu-id="b03c5-114">更改循环访问它时收集</span><span class="sxs-lookup"><span data-stu-id="b03c5-114">Changing a collection while iterating it</span></span>](#Iterating)  
 [<span data-ttu-id="b03c5-115">排序数组或集合的对象不能进行比较</span><span class="sxs-lookup"><span data-stu-id="b03c5-115">Sorting an array or collection whose objects cannot be compared</span></span>](#Sorting)  
 <span data-ttu-id="b03c5-116">[强制转换一个可以为 Null&lt;T&gt; null 为其基础类型](#Nullable) </span><span class="sxs-lookup"><span data-stu-id="b03c5-116">[Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable) </span></span>  
 [<span data-ttu-id="b03c5-117">对空集合调用 System.Linq.Enumerable 方法</span><span class="sxs-lookup"><span data-stu-id="b03c5-117">Calling a System.Linq.Enumerable method on an empty collection</span></span>](#Empty)  
 [<span data-ttu-id="b03c5-118">不带一个元素的顺序调用 Enumerable.Single 或 Enumerable.SingleOrDefault</span><span class="sxs-lookup"><span data-stu-id="b03c5-118">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>](#Single)  
 [<span data-ttu-id="b03c5-119">动态跨应用程序域字段访问</span><span class="sxs-lookup"><span data-stu-id="b03c5-119">Dynamic cross-application domain field access</span></span>](#Emit)  
[<span data-ttu-id="b03c5-120">引发 InvalidOperationException 异常</span><span class="sxs-lookup"><span data-stu-id="b03c5-120">Throwing an InvalidOperationException exception</span></span>](#Throwing)  
[<span data-ttu-id="b03c5-121">其他信息</span><span class="sxs-lookup"><span data-stu-id="b03c5-121">Miscellaneous information</span></span>](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a><span data-ttu-id="b03c5-122">InvalidOperationException 异常的一些常见原因</span><span class="sxs-lookup"><span data-stu-id="b03c5-122">Some common causes of InvalidOperationException exceptions</span></span>  
 <span data-ttu-id="b03c5-123">以下部分介绍了某些常见顺序中的情况下<xref:System.InvalidOperationException>应用程序中引发异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-123">The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app.</span></span> <span data-ttu-id="b03c5-124">如何处理问题取决于特定的情况。</span><span class="sxs-lookup"><span data-stu-id="b03c5-124">How you handle the issue depends on the specific situation.</span></span> <span data-ttu-id="b03c5-125">通常情况下，但是，异常导致的开发人员错误，与<xref:System.InvalidOperationException>可以预料并避免异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-125">Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.</span></span>  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a><span data-ttu-id="b03c5-126">更新 UI 线程从非 UI 线程</span><span class="sxs-lookup"><span data-stu-id="b03c5-126">Updating a UI thread from a non-UI thread</span></span>  
 <span data-ttu-id="b03c5-127">通常情况下，工作线程用于执行一些后台工作涉及收集数据显示在应用程序的用户界面。</span><span class="sxs-lookup"><span data-stu-id="b03c5-127">Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.</span></span> <span data-ttu-id="b03c5-128">但是。</span><span class="sxs-lookup"><span data-stu-id="b03c5-128">However.</span></span> <span data-ttu-id="b03c5-129">.NET Framework 中，例如 Windows 窗体和 Windows Presentation Foundation (WPF) 的大多数 GUI （图形用户界面） 应用程序框架可以只从线程创建和管理 UI （主数据连接或 UI 线程） 访问 GUI 对象。</span><span class="sxs-lookup"><span data-stu-id="b03c5-129">most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).</span></span> <span data-ttu-id="b03c5-130"><xref:System.InvalidOperationException>当你尝试从 UI 线程外的线程访问 UI 元素时引发。</span><span class="sxs-lookup"><span data-stu-id="b03c5-130">An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.</span></span>  <span data-ttu-id="b03c5-131">下表中显示异常消息的文本。</span><span class="sxs-lookup"><span data-stu-id="b03c5-131">The text of the exception message is shown in the following table.</span></span>  
  
|<span data-ttu-id="b03c5-132">应用程序类型</span><span class="sxs-lookup"><span data-stu-id="b03c5-132">Application Type</span></span>|<span data-ttu-id="b03c5-133">消息</span><span class="sxs-lookup"><span data-stu-id="b03c5-133">Message</span></span>|  
|----------------------|-------------|  
|<span data-ttu-id="b03c5-134">WPF 应用</span><span class="sxs-lookup"><span data-stu-id="b03c5-134">WPF app</span></span>|<span data-ttu-id="b03c5-135">**调用线程无法访问此对象，因为另一个线程拥有它。**</span><span class="sxs-lookup"><span data-stu-id="b03c5-135">**The calling thread cannot access this object because a different thread owns it.**</span></span>|  
|<span data-ttu-id="b03c5-136">UWP 应用</span><span class="sxs-lookup"><span data-stu-id="b03c5-136">UWP app</span></span>|<span data-ttu-id="b03c5-137">**应用程序为另一个线程调用封送的接口。**</span><span class="sxs-lookup"><span data-stu-id="b03c5-137">**The application called an interface that was marshalled for a different thread.**</span></span>|  
|<span data-ttu-id="b03c5-138">Windows 窗体应用程序</span><span class="sxs-lookup"><span data-stu-id="b03c5-138">Windows Forms app</span></span>|<span data-ttu-id="b03c5-139">**线程间操作无效： 控件 TextBox1 创建的线程以外的线程访问。**</span><span class="sxs-lookup"><span data-stu-id="b03c5-139">**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**</span></span>|  
  
 <span data-ttu-id="b03c5-140">.NET Framework 的 UI 框架实现*调度程序*包括种用以检查 UI 线程上是否正在执行对 UI 元素成员的调用的方法和其他用以计划对 UI 线程的调用的方法的模式：</span><span class="sxs-lookup"><span data-stu-id="b03c5-140">UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:</span></span>  
  
-   <span data-ttu-id="b03c5-141">在 WPF 应用中，调用<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType>方法来确定方法是否正在非 UI 线程上运行。</span><span class="sxs-lookup"><span data-stu-id="b03c5-141">In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="b03c5-142">它将返回`true`如果方法在 UI 线程上是否正在运行和`false`否则为。</span><span class="sxs-lookup"><span data-stu-id="b03c5-142">It returns `true` if the method is running on the UI thread and `false` otherwise.</span></span> <span data-ttu-id="b03c5-143">调用的重载之一<xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType>用以计划对 UI 线程的调用的方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-143">Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> method to schedule the call on the UI thread.</span></span>  
  
-   <span data-ttu-id="b03c5-144">在 UWP 应用中，调用[CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)方法来确定方法是否正在非 UI 线程上运行。</span><span class="sxs-lookup"><span data-stu-id="b03c5-144">In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="b03c5-145">调用[CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)才能执行更新 UI 线程的委托方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-145">Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread.</span></span> <span data-ttu-id="b03c5-146">使用</span><span class="sxs-lookup"><span data-stu-id="b03c5-146">Use the</span></span>  
  
-   <span data-ttu-id="b03c5-147">在 Windows 窗体应用中，使用<xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType>属性来确定方法是否正在非 UI 线程上运行。</span><span class="sxs-lookup"><span data-stu-id="b03c5-147">In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> property to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="b03c5-148">调用的重载之一<xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType>才能执行更新 UI 线程的委托方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-148">Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> method to execute a delegate that updates the UI thread.</span></span>  
  
 <span data-ttu-id="b03c5-149">下面的示例阐释<xref:System.InvalidOperationException>当你尝试更新 UI 元素，它在创建线程的线程时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-149">The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.</span></span>  <span data-ttu-id="b03c5-150">每个示例需要创建两个控件：</span><span class="sxs-lookup"><span data-stu-id="b03c5-150">Each example requires that you create two controls:</span></span>  
  
-   <span data-ttu-id="b03c5-151">名为文本框控件`textBox1`。</span><span class="sxs-lookup"><span data-stu-id="b03c5-151">A text box control named `textBox1`.</span></span>  <span data-ttu-id="b03c5-152">在 Windows 窗体应用中，应设置其<xref:System.Windows.Forms.TextBox.Multiline%2A>属性`true`。</span><span class="sxs-lookup"><span data-stu-id="b03c5-152">In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.</span></span>  
  
-   <span data-ttu-id="b03c5-153">一个名为的按钮控件`threadExampleBtn`。</span><span class="sxs-lookup"><span data-stu-id="b03c5-153">A button  control named `threadExampleBtn`.</span></span> <span data-ttu-id="b03c5-154">本示例提供了一个处理程序， `ThreadsExampleBtn_Click`，为按钮的`Click`事件。</span><span class="sxs-lookup"><span data-stu-id="b03c5-154">The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.</span></span>  
  
 <span data-ttu-id="b03c5-155">在每个情况下，`threadExampleBtn_Click`事件处理程序调用`DoSomeWork`方法两次。</span><span class="sxs-lookup"><span data-stu-id="b03c5-155">In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice.</span></span> <span data-ttu-id="b03c5-156">第一次调用同步运行并成功。</span><span class="sxs-lookup"><span data-stu-id="b03c5-156">The first call runs synchronously and succeeds.</span></span> <span data-ttu-id="b03c5-157">但第二个调用，因为它在线程池线程上以异步方式运行试图从非 UI 线程更新 UI。</span><span class="sxs-lookup"><span data-stu-id="b03c5-157">But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.</span></span> <span data-ttu-id="b03c5-158">这会导致<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-158">This results in a <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="b03c5-159">WPF 和 UWP 应用</span><span class="sxs-lookup"><span data-stu-id="b03c5-159">WPF and UWP apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 <span data-ttu-id="b03c5-160">以下版本的`DoSomeWork`方法消除了 WPF 应用中的异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-160">The following version of the `DoSomeWork` method eliminates the exception in a WPF app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 <span data-ttu-id="b03c5-161">以下版本的`DoSomeWork`方法消除 UWP 应用中的异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-161">The following version of the `DoSomeWork` method eliminates the exception in a UWP app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 <span data-ttu-id="b03c5-162">Windows 窗体应用</span><span class="sxs-lookup"><span data-stu-id="b03c5-162">Windows Forms apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 <span data-ttu-id="b03c5-163">以下版本的`DoSomeWork`方法消除了在 Windows 窗体应用程序中的异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-163">The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a><span data-ttu-id="b03c5-164">更改循环访问它时收集</span><span class="sxs-lookup"><span data-stu-id="b03c5-164">Changing a collection while iterating it</span></span>  
 <span data-ttu-id="b03c5-165">`foreach` C# 中的语句或`For Each`使用在 Visual Basic 中的语句循环访问集合的成员并将读取或修改其自身的元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-165">The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.</span></span> <span data-ttu-id="b03c5-166">但是，它不能添加或从集合中移除项。</span><span class="sxs-lookup"><span data-stu-id="b03c5-166">However, it can't be used to add or remove items from the collection.</span></span> <span data-ttu-id="b03c5-167">这样做这会引发<xref:System.InvalidOperationException>异常，并附带一条消息，类似于，"**集合已修改;枚举操作无法执行。**"</span><span class="sxs-lookup"><span data-stu-id="b03c5-167">Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, "**Collection was modified; enumeration operation may not execute.**"</span></span>  
  
 <span data-ttu-id="b03c5-168">下面的示例循环的整数的集合尝试添加到集合的每个整数的平方。</span><span class="sxs-lookup"><span data-stu-id="b03c5-168">The following example iterates a collection of integers attempts to add the square of each integer to the collection.</span></span> <span data-ttu-id="b03c5-169">本示例将引发<xref:System.InvalidOperationException>与首次调用<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-169">The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 <span data-ttu-id="b03c5-170">具体取决于你的应用程序逻辑，可以消除两种方式之一中的异常：</span><span class="sxs-lookup"><span data-stu-id="b03c5-170">You can eliminate the exception in one of two ways, depending on your application logic:</span></span>  
  
-   <span data-ttu-id="b03c5-171">如果必须将元素添加到集合中循环访问它时，你可通过索引使用循环它`for`语句而不是`foreach`或`For Each`。</span><span class="sxs-lookup"><span data-stu-id="b03c5-171">If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`.</span></span> <span data-ttu-id="b03c5-172">下面的示例使用语句添加到集合的集合中的数字的平方。</span><span class="sxs-lookup"><span data-stu-id="b03c5-172">The following example uses the for statement to add the square of numbers in the collection to the collection.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     <span data-ttu-id="b03c5-173">请注意在循环访问集合可以通过将通过向后循环中退出循环 appropraitely，循环内的计数器之前，必须建立的迭代数从`Count`-1 到 0，或如该示例执行的通过分配号一个变量并使用它来建立的循环上限到数组中的元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-173">Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.</span></span> <span data-ttu-id="b03c5-174">否则，如果元素添加到每个迭代的集合，则产生无限循环。</span><span class="sxs-lookup"><span data-stu-id="b03c5-174">Otherwise, if an element is added to the collection on every iteration, an endless loop results.</span></span>  
  
-   <span data-ttu-id="b03c5-175">如果没有必要将元素添加到集合中循环访问它时，你可以存储临时集合中添加循环访问集合来完成时要添加的元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-175">If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.</span></span>  <span data-ttu-id="b03c5-176">下面的示例使用此方法添加到临时的集合，集合中的数字的平方，然后将组合到单个数组对象的集合。</span><span class="sxs-lookup"><span data-stu-id="b03c5-176">The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a><span data-ttu-id="b03c5-177">排序数组或集合的对象不能进行比较</span><span class="sxs-lookup"><span data-stu-id="b03c5-177">Sorting an array or collection whose objects cannot be compared</span></span>  
 <span data-ttu-id="b03c5-178">通用排序方法，如<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>方法或<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>方法，通常需要至少一个要排序的对象实现<xref:System.IComparable%601>或<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="b03c5-178">General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="b03c5-179">如果不是，为集合或数组无法进行排序，并且该方法将引发<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-179">If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception.</span></span> <span data-ttu-id="b03c5-180">下面的示例定义`Person`类存储两个`Person`泛型中的对象<xref:System.Collections.Generic.List%601>对象，并尝试对它们进行排序。</span><span class="sxs-lookup"><span data-stu-id="b03c5-180">The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them.</span></span> <span data-ttu-id="b03c5-181">如示例所示，到调用输出<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>方法抛出异常<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="b03c5-181">As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException>.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 <span data-ttu-id="b03c5-182">你可以消除任何以下三种方式中的异常：</span><span class="sxs-lookup"><span data-stu-id="b03c5-182">You can eliminate the exception in any of three ways:</span></span>  
  
-   <span data-ttu-id="b03c5-183">如果你可以拥有你正在进行排序 （即，如果你控制其源代码） 的类型，则可以修改以使其实现<xref:System.IComparable%601>或<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="b03c5-183">If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="b03c5-184">这要求，你实现<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>或<xref:System.IComparable.CompareTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-184">This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> or the <xref:System.IComparable.CompareTo%2A> method.</span></span> <span data-ttu-id="b03c5-185">将接口的实现添加到现有的类型不是一项重大更改。</span><span class="sxs-lookup"><span data-stu-id="b03c5-185">Adding an interface implementation to an existing type is not a breaking change.</span></span>  
  
     <span data-ttu-id="b03c5-186">下面的示例使用此方法以提供<xref:System.IComparable%601>实现`Person`类。</span><span class="sxs-lookup"><span data-stu-id="b03c5-186">The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class.</span></span> <span data-ttu-id="b03c5-187">你仍然可以调用集合或数组的常规排序方法，并如示例输出所示，集合对进行排序成功。</span><span class="sxs-lookup"><span data-stu-id="b03c5-187">You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   <span data-ttu-id="b03c5-188">如果无法修改要排序的类型的源代码，则可以定义一个实现的特殊用途排序类<xref:System.Collections.Generic.IComparer%601>接口。</span><span class="sxs-lookup"><span data-stu-id="b03c5-188">If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.</span></span>  <span data-ttu-id="b03c5-189">你可以调用的重载`Sort`包含方法中，<xref:System.Collections.Generic.IComparer%601>参数。</span><span class="sxs-lookup"><span data-stu-id="b03c5-189">You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter.</span></span> <span data-ttu-id="b03c5-190">这种方法是特别有用，如果你想要开发专用化的排序类，可以基于多个条件的对象进行排序。</span><span class="sxs-lookup"><span data-stu-id="b03c5-190">This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.</span></span>  
  
     <span data-ttu-id="b03c5-191">下面的示例使用通过开发一个自定义方法`PersonComparer`用于排序的类`Person`集合。</span><span class="sxs-lookup"><span data-stu-id="b03c5-191">The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.</span></span>  <span data-ttu-id="b03c5-192">然后将其传递到此类的实例<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-192">It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   <span data-ttu-id="b03c5-193">如果你不能修改类型的源代码您尝试对进行排序，你可以创建<xref:System.Comparison%601>委托以执行排序。</span><span class="sxs-lookup"><span data-stu-id="b03c5-193">If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting.</span></span> <span data-ttu-id="b03c5-194">委托签名</span><span class="sxs-lookup"><span data-stu-id="b03c5-194">The delegate signature is</span></span>  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     <span data-ttu-id="b03c5-195">下面的示例使用方法，通过定义`PersonComparison`符合方法<xref:System.Comparison%601>委托签名。</span><span class="sxs-lookup"><span data-stu-id="b03c5-195">The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.</span></span>  <span data-ttu-id="b03c5-196">然后将其传递到此委托<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-196">It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a><span data-ttu-id="b03c5-197">强制转换一个可以为 Null\<T > 这是为其基础类型为 null</span><span class="sxs-lookup"><span data-stu-id="b03c5-197">Casting a Nullable\<T> that is null to its underlying type</span></span>  
 <span data-ttu-id="b03c5-198">尝试强制转换<xref:System.Nullable%601>值，该值是`null`为其基础类型将引发<xref:System.InvalidOperationException>异常并显示错误消息中，"**可以为 Null 的对象必须具有一个值。**</span><span class="sxs-lookup"><span data-stu-id="b03c5-198">Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, "**Nullable object must have a value.**</span></span>  
  
 <span data-ttu-id="b03c5-199">下面的示例引发<xref:System.InvalidOperationException>异常在尝试循环访问数组时，包括`Nullable(Of Integer)`值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-199">The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 <span data-ttu-id="b03c5-200">为了防止出现异常：</span><span class="sxs-lookup"><span data-stu-id="b03c5-200">To prevent the exception:</span></span>  
  
-   <span data-ttu-id="b03c5-201">使用<xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType>属性以仅选择这些元素不`null`。</span><span class="sxs-lookup"><span data-stu-id="b03c5-201">Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> property to select only those elements that are not `null`.</span></span>  
  
-   <span data-ttu-id="b03c5-202">调用之一<xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType>重载来提供默认值为`null`值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-202">Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> overloads to provide a default value for a `null` value.</span></span>  
  
 <span data-ttu-id="b03c5-203">下面的示例既以免<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-203">The following example does both to avoid the  <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a><span data-ttu-id="b03c5-204">对空集合调用 System.Linq.Enumerable 方法</span><span class="sxs-lookup"><span data-stu-id="b03c5-204">Calling a System.Linq.Enumerable method on an empty collection</span></span>  
 <span data-ttu-id="b03c5-205"><xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>，和<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法对序列执行操作并返回单一结果。</span><span class="sxs-lookup"><span data-stu-id="b03c5-205">The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods perform operations on a sequence and return a single result.</span></span>   <span data-ttu-id="b03c5-206">这些方法的一些重载会引发<xref:System.InvalidOperationException>异常序列为空，而其他重载返回时`null`。</span><span class="sxs-lookup"><span data-stu-id="b03c5-206">Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`.</span></span> <span data-ttu-id="b03c5-207"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法也会引发<xref:System.InvalidOperationException>序列包含多个元素时出现异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-207">The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b03c5-208">引发方法的大多数<xref:System.InvalidOperationException>异常一些重载。</span><span class="sxs-lookup"><span data-stu-id="b03c5-208">Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads.</span></span> <span data-ttu-id="b03c5-209">请确保你理解你选择的重载行为。</span><span class="sxs-lookup"><span data-stu-id="b03c5-209">Be sure that you understand the behavior of the overload that you choose.</span></span>  
  
 <span data-ttu-id="b03c5-210">下表列出了中的异常消息<xref:System.InvalidOperationException>由对某些调用引发的异常对象<xref:System.Linq.Enumerable?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-210">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="b03c5-211">方法</span><span class="sxs-lookup"><span data-stu-id="b03c5-211">Method</span></span>|<span data-ttu-id="b03c5-212">消息</span><span class="sxs-lookup"><span data-stu-id="b03c5-212">Message</span></span>|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|<span data-ttu-id="b03c5-213">**序列不包含任何元素**</span><span class="sxs-lookup"><span data-stu-id="b03c5-213">**Sequence contains no elements**</span></span>|  
|`First`|<span data-ttu-id="b03c5-214">**序列中不包含任何匹配元素**</span><span class="sxs-lookup"><span data-stu-id="b03c5-214">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="b03c5-215">**序列包含多个匹配元素**</span><span class="sxs-lookup"><span data-stu-id="b03c5-215">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="b03c5-216">消除或处理异常的方式取决于你的应用程序的假设和你调用的特定方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-216">How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.</span></span>  
  
-   <span data-ttu-id="b03c5-217">当你有意调用这些方法之一而不检查空序列时，你假定该序列不为空，并且空序列是意外的匹配项。</span><span class="sxs-lookup"><span data-stu-id="b03c5-217">When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.</span></span> <span data-ttu-id="b03c5-218">在这种情况下，捕捉或重新引发的异常适合。</span><span class="sxs-lookup"><span data-stu-id="b03c5-218">In this case, catching or rethrowing the exception is appropriate .</span></span>  
  
-   <span data-ttu-id="b03c5-219">如果你无法检查空序列是意外，你可以调用的重载之一<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>重载，以确定序列是否包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-219">If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> overload to determine whether a sequence contains any elements.</span></span>  
  
    > [!TIP]
    >  <span data-ttu-id="b03c5-220">调用<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>之前序列生成的方法可以提高性能，如果要处理的数据可能包含大量元素或如果生成该序列的操作将占用大量资源。</span><span class="sxs-lookup"><span data-stu-id="b03c5-220">Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.</span></span>  
  
-   <span data-ttu-id="b03c5-221">如果你已调用方法，如<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>，或<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>，还可以用来替换另一种方法，如<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>，或<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>，返回默认值而不是序列的成员。</span><span class="sxs-lookup"><span data-stu-id="b03c5-221">If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, that returns a default value instead of a member of the sequence.</span></span>  
  
 <span data-ttu-id="b03c5-222">示例提供了更多详细信息。</span><span class="sxs-lookup"><span data-stu-id="b03c5-222">The examples provide additional detail.</span></span>  
  
 <span data-ttu-id="b03c5-223">下面的示例使用<xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>方法来计算其值是大于 4 序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-223">The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> method to compute the average of a sequence whose values are greater than 4.</span></span> <span data-ttu-id="b03c5-224">由于原始数组中的任何值超出 4，没有值包含在序列，并且该方法将引发<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-224">Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 <span data-ttu-id="b03c5-225">可通过调用来消除异常<xref:System.Linq.Enumerable.Any%2A>方法来确定是否序列不包含任何元素之前调用方法处理的序列，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="b03c5-225">The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <span data-ttu-id="b03c5-226"><xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>方法返回在序列或序列中满足指定的条件的第一个元素的第一项。</span><span class="sxs-lookup"><span data-stu-id="b03c5-226">The <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.</span></span> <span data-ttu-id="b03c5-227">如果序列为空，因此不会将第一个元素，它将引发<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-227">If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="b03c5-228">在下面的示例中，<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>方法抛出异常<xref:System.InvalidOperationException>异常因为 dbQueryResults 数组不包含大于 4 的元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-228">In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 <span data-ttu-id="b03c5-229">你可以调用<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>方法而不是<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>以返回特定值或默认值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-229">You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> to return a specified or default value.</span></span> <span data-ttu-id="b03c5-230">如果方法在序列中未找到第一个元素，则返回该数据类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-230">If the method does not find a first element in the sequence, it returns  the default value for that data type.</span></span>  <span data-ttu-id="b03c5-231">默认值是`null`对于引用类型，零对于数值数据类型，和<xref:System.DateTime.MinValue?displayProperty=nameWithType>为<xref:System.DateTime>类型。</span><span class="sxs-lookup"><span data-stu-id="b03c5-231">The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=nameWithType> for the <xref:System.DateTime> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b03c5-232">解释返回的值<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>方法通常复杂，因为该类型的默认值可以是序列中有效的值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-232">Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.</span></span> <span data-ttu-id="b03c5-233">在此情况下，你调用<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>方法，以确定序列是否具有有效成员之前调用<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-233">In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b03c5-234">下面的示例调用<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>方法，以阻止<xref:System.InvalidOperationException>在前面的示例引发异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-234">The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a><span data-ttu-id="b03c5-235">不带一个元素的顺序调用 Enumerable.Single 或 Enumerable.SingleOrDefault</span><span class="sxs-lookup"><span data-stu-id="b03c5-235">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>  
 <span data-ttu-id="b03c5-236"><xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>方法返回唯一元素的序列，或者序列中满足指定的条件的唯一元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-236">The <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.</span></span>    <span data-ttu-id="b03c5-237">如果在序列中，没有任何元素或如果多个元素，该方法将引发<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-237">If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="b03c5-238">你可以使用<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法以返回默认值而不是序列中不包含任何元素时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-238">You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method to return a default value instead of throwing an exception when the sequence contains no elements.</span></span> <span data-ttu-id="b03c5-239">但是，<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法仍会引发<xref:System.InvalidOperationException>序列包含多个元素时出现异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-239">However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="b03c5-240">下表列出了中的异常消息<xref:System.InvalidOperationException>通过调用引发的异常对象<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>和<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-240">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="b03c5-241">方法</span><span class="sxs-lookup"><span data-stu-id="b03c5-241">Method</span></span>|<span data-ttu-id="b03c5-242">消息</span><span class="sxs-lookup"><span data-stu-id="b03c5-242">Message</span></span>|  
|------------|-------------|  
|`Single`|<span data-ttu-id="b03c5-243">**序列中不包含任何匹配元素**</span><span class="sxs-lookup"><span data-stu-id="b03c5-243">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="b03c5-244">**序列包含多个匹配元素**</span><span class="sxs-lookup"><span data-stu-id="b03c5-244">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="b03c5-245">在下面的示例中，调用<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>方法抛出异常<xref:System.InvalidOperationException>异常因为序列没有大于 4 的元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-245">In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 <span data-ttu-id="b03c5-246">下面的示例尝试阻止<xref:System.InvalidOperationException>序列为空的通过改为调用时引发的异常<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b03c5-246">The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b03c5-247">但是，因为此序列将返回其值是否大于 2 的多个元素，它还会引发<xref:System.InvalidOperationException>异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-247">However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 <span data-ttu-id="b03c5-248">调用<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>方法假定序列或序列中满足指定的条件包含仅有一个元素。</span><span class="sxs-lookup"><span data-stu-id="b03c5-248">Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.</span></span>  <span data-ttu-id="b03c5-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 假定具有零个或一个结果，但没有更多的序列。</span><span class="sxs-lookup"><span data-stu-id="b03c5-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> assumes a sequence with zero or one result, but no more.</span></span> <span data-ttu-id="b03c5-250">如果此假设是您有意的不满足这些条件，重新引发或捕捉生成<xref:System.InvalidOperationException>适合。</span><span class="sxs-lookup"><span data-stu-id="b03c5-250">If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate.</span></span> <span data-ttu-id="b03c5-251">否则为或如果你预计这些无效的条件将以某种频率发生，则应考虑使用某些其他<xref:System.Linq.Enumerable>方法，如<xref:System.Linq.Enumerable.FirstOrDefault%2A>或<xref:System.Linq.Enumerable.Where%2A>。</span><span class="sxs-lookup"><span data-stu-id="b03c5-251">Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.</span></span>  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a><span data-ttu-id="b03c5-252">动态跨应用程序域字段访问</span><span class="sxs-lookup"><span data-stu-id="b03c5-252">Dynamic cross-application domain field access</span></span>  
 <span data-ttu-id="b03c5-253"><xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft 中间语言 (MSIL) 指令将引发<xref:System.InvalidOperationException>如果包含要检索其地址的字段的对象不在你的代码正在执行的应用程序域内的异常。</span><span class="sxs-lookup"><span data-stu-id="b03c5-253">The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.</span></span> <span data-ttu-id="b03c5-254">字段的地址仅可以从它所在的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="b03c5-254">The address of a field can only be accessed from the application domain in which it resides.</span></span>  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a><span data-ttu-id="b03c5-255">引发 InvalidOperationException 异常</span><span class="sxs-lookup"><span data-stu-id="b03c5-255">Throwing an InvalidOperationException exception</span></span>  
 <span data-ttu-id="b03c5-256">您应该引发<xref:System.InvalidOperationException>异常仅在您出于某种原因的对象的状态不支持的特定方法调用时。</span><span class="sxs-lookup"><span data-stu-id="b03c5-256">You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call.</span></span> <span data-ttu-id="b03c5-257">即方法调用是在某些情况下或上下文中，有效，但在其他无效。</span><span class="sxs-lookup"><span data-stu-id="b03c5-257">That is, the method call is valid in some circumstances or contexts, but is invalid in others.</span></span>  
  
 <span data-ttu-id="b03c5-258">如果方法调用失败是由于无效自变量，然后<xref:System.ArgumentException>或其派生类之一<xref:System.ArgumentNullException>或<xref:System.ArgumentOutOfRangeException>，应改为引发。</span><span class="sxs-lookup"><span data-stu-id="b03c5-258">If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.</span></span>  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a><span data-ttu-id="b03c5-259">其他信息</span><span class="sxs-lookup"><span data-stu-id="b03c5-259">Miscellaneous information</span></span>  
 <span data-ttu-id="b03c5-260"><xref:System.InvalidOperationException> 使用 HRESULT 返回 COR_E_INVALIDOPERATION，其值 0x80131509。</span><span class="sxs-lookup"><span data-stu-id="b03c5-260"><xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.</span></span>  
  
 <span data-ttu-id="b03c5-261">有关的实例的初始属性值的列表<xref:System.InvalidOperationException>，请参阅<xref:System.InvalidOperationException.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b03c5-261">For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b03c5-262">初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-262">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b03c5-263">初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-263">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b03c5-264">此构造函数初始化<xref:System.Exception.Message%2A>为系统提供的消息的描述错误，如"无法执行请求的操作"。 将新实例的属性</span><span class="sxs-lookup"><span data-stu-id="b03c5-264">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "The requested operation cannot be performed."</span></span> <span data-ttu-id="b03c5-265">此消息将当前系统区域性考虑在内。</span><span class="sxs-lookup"><span data-stu-id="b03c5-265">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="b03c5-266">下表显示 <xref:System.InvalidOperationException> 的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-266">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="b03c5-267">Property</span><span class="sxs-lookup"><span data-stu-id="b03c5-267">Property</span></span>|<span data-ttu-id="b03c5-268">“值”</span><span class="sxs-lookup"><span data-stu-id="b03c5-268">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b03c5-269">空引用（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="b03c5-269">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b03c5-270">本地化的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="b03c5-270">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="b03c5-271">描述错误的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-271">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b03c5-272">用指定的错误消息初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-272">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b03c5-273">此构造函数初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>属性的新异常使用`message`参数。</span><span class="sxs-lookup"><span data-stu-id="b03c5-273">This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=nameWithType> property of the new exception using the `message` parameter.</span></span> <span data-ttu-id="b03c5-274">`message` 的内容被设计为人可理解的形式。</span><span class="sxs-lookup"><span data-stu-id="b03c5-274">The content of `message` is intended to be understood by humans.</span></span> <span data-ttu-id="b03c5-275">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</span><span class="sxs-lookup"><span data-stu-id="b03c5-275">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="b03c5-276">下表显示 <xref:System.InvalidOperationException> 的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-276">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="b03c5-277">Property</span><span class="sxs-lookup"><span data-stu-id="b03c5-277">Property</span></span>|<span data-ttu-id="b03c5-278">“值”</span><span class="sxs-lookup"><span data-stu-id="b03c5-278">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b03c5-279">空引用（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="b03c5-279">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b03c5-280">错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="b03c5-280">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="b03c5-281">承载序列化对象数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-281">The object that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="b03c5-282">关于来源和目标的上下文信息</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-282">The contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b03c5-283">用序列化数据初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-283">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b03c5-284">此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。</span><span class="sxs-lookup"><span data-stu-id="b03c5-284">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="b03c5-285">有关详细信息，请参阅[XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。</span><span class="sxs-lookup"><span data-stu-id="b03c5-285">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="b03c5-286">解释异常原因的错误消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-286">The error message that explains the reason for the exception.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="b03c5-287">导致当前异常的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-287">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="b03c5-288">如果 <c>innerException</c> 参数不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-288">If the <c>innerException</c> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b03c5-289">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b03c5-289">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b03c5-290">因前一个异常而直接引发的异常应在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。</span><span class="sxs-lookup"><span data-stu-id="b03c5-290">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="b03c5-291"><xref:System.Exception.InnerException%2A> 属性返回传递到构造函数中的相同值，或者如果 `Nothing` 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 <xref:System.Exception.InnerException%2A>）。</span><span class="sxs-lookup"><span data-stu-id="b03c5-291">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="b03c5-292">下表显示 <xref:System.InvalidOperationException> 的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="b03c5-292">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="b03c5-293">Property</span><span class="sxs-lookup"><span data-stu-id="b03c5-293">Property</span></span>|<span data-ttu-id="b03c5-294">“值”</span><span class="sxs-lookup"><span data-stu-id="b03c5-294">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b03c5-295">内部异常引用。</span><span class="sxs-lookup"><span data-stu-id="b03c5-295">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b03c5-296">错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="b03c5-296">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>