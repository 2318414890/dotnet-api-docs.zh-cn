<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="469ed8e0801c9371e32db2c9dbf6d628854d8825" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/13/2018" />
    <Meta Name="ms.locfileid" Value="35417116" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="T:System.Span`1" /> 的元素提供枚举器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md)的 C# 语言和[每个...下一步](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)构造在 Visual Basic 中的隐藏了枚举数的复杂性。 而不是直接操作枚举数，使用`foreach`或`For Each...Next`建议。 

最初，枚举数定位在的第一个元素之前<xref:System.Span%601>。 在此位置上，未定义 <xref:System.Span%601.Enumerator.Current>。 必须调用<xref:System.Span%601.Enumerator.MoveNext%2A>将枚举数前移到中的第一项<xref:System.Span%601>之前读取的值<xref:System.Span%601.Enumerator.Current>。

<xref:System.Span%601.Enumerator.Current> 返回相同的值，直到<xref:System.Span%601.Enumerator.MoveNext%2A>调用。 <xref:System.Span%601.Enumerator.MoveNext%2A> 设置<xref:System.Span%601.Enumerator.Current>到中的下一步项<xref:System.Span%601>。

如果<xref:System.Span%601.Enumerator.MoveNext%2A>传递的末尾<xref:System.Span%601>，<xref:System.Span%601.Enumerator.MoveNext%2A>返回`false`。 当该枚举数将在此状态，因为在后续调用<xref:System.Span%601.Enumerator.MoveNext%2A>还返回`false`和<xref:System.Span%601.Enumerator.Current>是不确定的。 无法设置<xref:System.Span%601.Enumerator.Current>到中的第一个项<xref:System.Span%601>再次; 必须改为创建新的枚举器实例。 

枚举数没有对独占访问权<xref:System.Span%601>。 此外，还可以修改范围所基于的基础数据。 因此，通过一段枚举本质上不是一个线程安全的过程。 若要确保枚举过程中的线程安全性，则必须实现自己的同步。 例如，下面的代码具有一个争用条件。 不能确保该范围，将枚举之前`ClearContents`方法执行。 因此，在范围的枚举过程中被清除基础数组：

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

如果在枚举的范围内，作为修改后的版本之前同步对数组的访问`EnumerateSpan`方法在以下示例中，执行`ClearContents`方法不会修改枚举过程中基础范围的数据。 请注意示例锁定范围所基于的基础数组。  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

与在.NET 中，某些其他枚举器结构不同<xref:System.Span%601.Enumerator>:

- 不实现<xref:System.Collections.IEnumerator>或<xref:System.Collections.Generic.IEnumerator%601>接口。 这是因为<xref:System.Span%601.Enumerator>是[ref 结构](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)。

- 不包括`Reset`方法，可以将枚举数设置为第一个元素之前在范围中其初始位置。 (<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>方法必须实现该接口的一部分，但大多数实现器引发异常，或提供没有实现。) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对枚举器当前位置的项目的引用。</summary>
        <value>
          <see cref="T:System.Span`1" /> 中位于该枚举数当前位置的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` 未定义在以下条件之一： 

- 立即创建枚举器之后，枚举数定位在范围中的第一个元素之前。 <xref:System.Span%601.Enumerator.MoveNext%2A> 必须调用来枚举器向前移动到范围的第一个元素在读取的值之前`Current`。

- 上次调用<xref:System.Span%601.Enumerator.MoveNext%2A>返回`false`，指示范围的末尾。 

`Current` 返回相同的值，直到<xref:System.Span%601.Enumerator.MoveNext%2A>调用。 <xref:System.Span%601.Enumerator.MoveNext%2A> 设置`Current`到范围中的下一项。 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举器推进到 <see cref="System.Span`1" /> 的下一项。</summary>
        <returns>如果枚举器成功推进到下一项，则为“true”；如果已通过范围的末尾，则为“false”。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

创建一个枚举器后，它定位跨度内，、 首次调用中的第一个元素的前面`MoveNext`将枚举数推进到范围中的第一项。 

如果`MoveNext`传递跨度内，末尾`MoveNext`返回`false`。 当该枚举数将在此状态，因为在后续调用`MoveNext`还返回`false`。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>