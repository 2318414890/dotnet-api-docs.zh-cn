<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarshalByRefObject.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583acfa54440d5b5ba0c4eb247332f63cbe45d467.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83acfa54440d5b5ba0c4eb247332f63cbe45d467</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Enables access to objects across application domain boundaries in applications that support remoting.</source>
          <target state="translated">在支持远程处理的应用程序中，允许跨应用程序域边界访问对象。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>An application domain is a partition in an operating system process where one or more applications reside.</source>
          <target state="translated">应用程序域是在一个或多个应用程序所在位置的操作系统进程中的分区。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in the same application domain communicate directly.</source>
          <target state="translated">在同一应用程序域中的对象直接进行通信。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</source>
          <target state="translated">不同的应用程序域中的对象进行通信的传输对象的副本跨应用程序域边界进行，或通过使用代理服务器来交换消息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 使用代理服务器通过交换消息跨应用程序域边界进行通信的对象的基类。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects that do not inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> are implicitly marshal by value.</source>
          <target state="translated">对象不是继承自<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>隐式封送的值。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</source>
          <target state="translated">当远程应用程序引用封送值对象时，跨应用程序域边界传递对象的副本。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objects are accessed directly within the boundaries of the local application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 本地应用程序域的边界内的直接访问对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first time an application in a remote application domain accesses a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, a proxy is passed to the remote application.</source>
          <target state="translated">中远程应用程序在第一次应用程序域访问<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>，代理传递给远程应用程序。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</source>
          <target state="translated">代理上的后续调用将封送回驻留在本地应用程序域中的对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Types must inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</source>
          <target state="translated">类型必须继承自<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>时跨应用程序域边界进行，使用的类型和必须不复制对象的状态，因为对象的成员不在其创建位置的应用程序域之外使用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When you derive an object from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</source>
          <target state="translated">当派生的对象，<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>跨应用程序域边界使用，你不应重写任何的成员，也不应直接调用其方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The runtime recognizes that classes derived from  <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> should be marshaled across app domain boundaries.</source>
          <target state="translated">运行时识别类派生自<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>应跨应用程序域边界进行封送。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first code example shows how to create an instance of a class in another application domain.</source>
          <target state="translated">第一个代码示例演示如何在另一个应用程序域中创建类的实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The second code example shows a simple class that can be used for remoting.</source>
          <target state="translated">第二个代码示例显示简单的类可以用于远程处理。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>示例 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following code example shows the simplest way to execute code in another application domain.</source>
          <target state="translated">下面的代码示例演示在另一个应用程序域中执行代码的最简单方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example defines a class named <ph id="ph1">`Worker`</ph> that inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, with a method that displays the name of the application domain in which it is executing.</source>
          <target state="translated">该示例定义一个名为类<ph id="ph1">`Worker`</ph>继承<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>，替换方法，用于显示正在执行的应用程序域的名称。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example creates instances of <ph id="ph1">`Worker`</ph> in the default application domain and in a new application domain.</source>
          <target state="translated">该示例创建的实例<ph id="ph1">`Worker`</ph>默认应用程序域中和新的应用程序域中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The assembly that contains <ph id="ph1">`Worker`</ph> must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</source>
          <target state="translated">包含的程序集<ph id="ph1">`Worker`</ph>必须加载到这两个应用程序域，但它无法加载仅在新的应用程序域中存在其他程序集。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>示例 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following example demonstrates a class derived from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> that is used later in remoting.</source>
          <target state="translated">下面的示例演示从派生的类<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>，它是更高版本中使用远程处理。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object that the new <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> will reference.</source>
          <target state="translated">新的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 将引用的对象的 <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</source>
          <target state="translated">创建一个对象，该对象包含生成用于与远程对象进行通信的代理所需的全部相关信息。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Information required to generate a proxy.</source>
          <target state="translated">生成代理所需要的信息。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> method is called by remote object creation methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph>如远程对象创建方法通过调用方法<ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>In most cases, there is no need to override this method.</source>
          <target state="translated">在大多数情况下，没有无需重写此方法。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This instance is not a valid remoting object.</source>
          <target state="translated">此实例不是有效的远程处理对象。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">直接调用方没有基础结构权限。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</source>
          <target state="translated">检索控制此实例的生存期策略的当前生存期服务对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> 类型的对象，用于控制此实例的生存期策略。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">生存期服务有关的详细信息，请参阅<ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">直接调用方没有基础结构权限。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>Obtains a lifetime service object to control the lifetime policy for this instance.</source>
          <target state="translated">获取生存期服务对象来控制此实例的生存期策略。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> 类型的对象，用于控制此实例的生存期策略。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> property.</source>
          <target state="translated">这是此实例当前的生存期服务对象（如果存在）；否则为初始化为 <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> 属性的值的新生存期服务对象。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">生存期服务有关的详细信息，请参阅<ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The following code example demonstrates creating a lease.</source>
          <target state="translated">下面的代码示例演示如何创建租约。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">直接调用方没有基础结构权限。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Creates a shallow copy of the current object.</source>
          <target state="translated">创建当前对象的卷影副本。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> to delete the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</source>
          <target state="translated">如果要删除当前 <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 对象的标识，则为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，这使该对象在跨远程边界封送时分配一个新标识。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A value of <ph id="ph1">&lt;see langword="false" /&gt;</ph> is usually appropriate.</source>
          <target state="translated">值 <ph id="ph1">&lt;see langword="false" /&gt;</ph> 通常比较合适。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to copy the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则将当前 <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 对象的标识复制到它的克隆项，这会将远程客户端调用路由到远程服务器对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Creates a shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">创建当前 <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 对象的浅表副本。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 对象的浅表副本。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method creates a shallow copy by creating a new <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> object, and then copying the nonstatic fields of the current <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object to the new object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph>方法通过创建一个新创建的浅表副本<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>对象，然后再复制当前的非静态字段<ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>到新的对象的对象。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a value type, a bit-by-bit copy of the field is performed.</source>
          <target state="translated">如果字段是值类型，则执行字段的按位复制。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</source>
          <target state="translated">如果字段是引用类型，引用将复制，但被引用的对象不;因此，原始对象和其克隆引用同一对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>For example, consider a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface to perform a deep or shallow copy of an object.</source>
          <target state="translated">例如，考虑<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>对象被称为 X 引用对象 A 和 B，反过来，引用对象 c。X 的浅表副本创建新的对象 X2 也引用对象 A 和 b。与此相反，X 的深层副本创建新对象 X2 引用 A2 和 B2，是的一个副本的新对象并 B.B2，反过来，引用副本 C.使用实现的类的新对象 C2，<ph id="ph2">&lt;xref:System.ICloneable&gt;</ph>接口来执行深度或浅表 c对象的复制。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The identity of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object is defined as the remote server object that is the target of a remoting client call.</source>
          <target state="translated">标识<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>对象定义为目标的远程客户端调用的远程服务器对象。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>By default, the memberwise clone of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</source>
          <target state="translated">默认情况下，成员副本<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>对象具有与原始对象，并通常不会跨客户端为远程处理边界封送的服务器端对象的克隆是正确行为相同的标识。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Specify <ph id="ph1">`false`</ph>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <ph id="ph2">`true`</ph> to cause the clone to retain the identity of the original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object.</source>
          <target state="translated">指定<ph id="ph1">`false`</ph>，这是通常适当，从而删除克隆的标识，并且导致跨远程处理边界，封送克隆时要分配的新标识或<ph id="ph2">`true`</ph>导致克隆以保留原始的标识<ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method is intended to be used by developers implementing remote server objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph>方法旨在实现远程服务器对象的开发人员可使用。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>