<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8caf098e13eedb4e57cdd5a421860fc3b46fdd06" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39910031" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示时区。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时区是在其中使用相同的标准时间的地理区域。  
  
> [!IMPORTANT]
>  只要可能，使用<xref:System.TimeZoneInfo>类而不是<xref:System.TimeZone>类。  
  
 可以使用<xref:System.TimeZone>类来检索有关当前所在的时区信息，并将时间转换从从当地时间为协调世界时 (UTC)，反之亦然。 但是，不能使用<xref:System.TimeZone>类用于表示时区不是本地区域或用于处理日期和时间从一个时区之间转换。 为此，请使用<xref:System.TimeZoneInfo>类。 此类可用于检索有关在本地系统上，若要创建自定义时区，并将时间从一个时区转换到另一个定义的任何时区的信息。  
  
 <xref:System.TimeZone>类支持的本地时区的只是单个夏令时调整规则。 因此，<xref:System.TimeZone>类可以准确地报告夏时制信息或仅为最新调整规则是有效的期限 UTC 与当地时间之间转换。 与此相反，<xref:System.TimeZoneInfo>类支持多个调整规则，从而有可能可以使用历史时区数据。  
  
   
  
## Examples  
 下面的示例引用并显示所选`TimeZone`类元素。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>除了提供实现其<see langword="abstract" />成员 (那些已标记<see langword="MustOverride" />在 Visual Basic 中)，非常重要的类派生自<see cref="T:System.TimeZone" />重写的默认行为<see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" />方法。这是因为的默认行为<see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" />在.NET Framework 2.0 版不依赖于调用<see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />，像在.NET framework 1.0 和 1.1 版中。有关详细信息，请参阅<see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" />方法。</para>
    </block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.TimeZone" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前计算机的时区。</summary>
        <value>一个 <see cref="T:System.TimeZone" /> 对象，表示当前的本地时区。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A>属性对应于<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>属性。 只要可能，使用<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>属性。  
  
   
  
## Examples  
 下面的示例引用`CurrentTimeZone`属性并显示标准时间名称和夏时制的本地时区。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>本地时间区域数据缓存后<see cref="P:System.TimeZone.CurrentTimeZone" />首次用于检索时区信息。如果系统的本地时区后来发生更改，<see cref="P:System.TimeZone.CurrentTimeZone" />属性会反映此更改。如果您需要处理时所在的时区更改运行你的应用程序，请使用<see cref="T:System.TimeZoneInfo" />类并调用其<see cref="M:System.TimeZoneInfo.ClearCachedData" />方法。</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取夏时制时区名称。</summary>
        <value>夏时制时区名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果夏时制未使用的时区为空字符串 ("") 返回。  
  
 <xref:System.TimeZone.DaylightName%2A>属性对应于<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType>属性。 只要可能，使用<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType>属性。  
  
   
  
## Examples  
 下面的示例引用并显示`DaylightName`属性的当前时区。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">要应用夏时制期间的年份。</param>
        <summary>返回特定年份的夏时制期间。</summary>
        <returns>一个 <see cref="T:System.Globalization.DaylightTime" /> 对象，包含 <paramref name="year" /> 中夏时制的起始和结束日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 支持每年只有一个夏时制期间。  
  
 如果夏令时不使用当前时区中，返回值是<xref:System.Globalization.DaylightTime>对象，其中的值<xref:System.Globalization.DaylightTime.Start%2A>并<xref:System.Globalization.DaylightTime.End%2A>是<xref:System.DateTime.MinValue?displayProperty=nameWithType>，和的值<xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType>是<xref:System.TimeSpan>初始化为 0 刻度。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小于 1 或大于 9999。</exception>
        <block subset="none" type="usage">
          <para>因为<see cref="T:System.TimeZone" />类支持只有一个夏令时调整规则<see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />方法适用于任何年，而不考虑是否调整规则实际应用到该年的当前的调整规则。假定操作系统本身具有特定年份的准确的数据，更准确的结果则可通过使用数组<see cref="T:System.TimeZoneInfo.AdjustmentRule" />返回的对象<see cref="M:System.TimeZoneInfo.GetAdjustmentRules" />方法。<see cref="P:System.Globalization.DaylightTime.Start" />， <see cref="P:System.Globalization.DaylightTime.End" />，并<see cref="P:System.Globalization.DaylightTime.Delta" />属性对应于<see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />， <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />，并<see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />属性。</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和时间值。</param>
        <summary>返回指定本地时间的协调世界时 (UTC) 偏移量。</summary>
        <returns>与 <paramref name="time" /> 相比的协调世界时 (UTC) 偏移量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的偏移量或差异，之间`time`参数与协调世界时 (UTC)。 即：  
  
 `time` = UTC + 偏移量  
  
 此方法将解释的时区`time`基于其<xref:System.DateTime.Kind%2A>属性。 如果的值<xref:System.DateTime.Kind%2A>属性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，该方法返回的本地时区偏移量。 如果的值<xref:System.DateTime.Kind%2A>属性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，该方法返回某一偏移量等于<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
 如果本地时区实行夏令时，<xref:System.TimeZone.GetUtcOffset%2A>将应用到当前的调整规则`time`时确定的本地时区偏移量。 也就是说，返回的偏移量<xref:System.TimeZone.GetUtcOffset%2A>反映了是否`time`属于中时区的标准时间还是其夏令时。  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A>方法只识别当前夏令时调整规则的本地时区。 因此，它保证准确地仅在最新调整规则是有效期间返回了本地时间的 UTC 偏移量。 它可能返回不准确的结果，如果`time`是历史日期和时间值，它需要遵守先前的调整规则。  
  
 <xref:System.TimeZone.GetUtcOffset%2A>方法对应于<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType>方法。 只要可能，使用<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType>方法。  
  
 因为由表示的日期和时间值`time`和此值相对于 UTC 的偏移量不紧密耦合，本地或未指定的日期和时间值可能会返回不同的偏移量的值时在不同的计算机上运行或在同一台计算机上运行时不同的时区。 如果不需要此行为，使用<xref:System.DateTimeOffset>相反值。 <xref:System.DateTimeOffset>数据类型的日期和时间值紧密耦合与它的偏移量上，从 UTC。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个值，用以指示指定日期和时间是否处于夏时制期间。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和时间。</param>
        <summary>返回一个值，用以指示指定日期和时间是否处于夏时制期间。</summary>
        <returns>如果 <paramref name="time" /> 处于夏时制期间，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 夏时制期间应用的年份派生自`time`参数。  
  
 因为<xref:System.TimeZone>类支持单个夏令时调整规则，<xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29>方法将当前的调整规则应用到任何日期，而不考虑调整规则是否实际上在该日期。 假定操作系统本身具有准确历史夏令制数据，更准确的结果则可通过使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法。 只要可能，使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和时间。</param>
        <param name="daylightTimes">To be added.</param>
        <summary>返回一个值，用以指示指定日期和时间是否处于指定的夏时制期间。</summary>
        <returns>如果 <paramref name="time" /> 处于 <paramref name="daylightTimes" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法提供的相同功能的此重载与<xref:System.TimeZone.IsDaylightSavingTime%2A>方法。 只要可能，使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="daylightTimes" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取标准时区名称。</summary>
        <value>标准时区名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A>属性对应于<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType>属性。 只要可能，使用<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType>属性。  
  
   
  
## Examples  
 下面的示例引用并显示`StandardName`属性的当前时区。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 <see langword="null" />。</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">协调世界时 (UTC) 时间。</param>
        <summary>返回对应于指定日期和时间值的本地时间。</summary>
        <returns>一个 <see cref="T:System.DateTime" /> 对象，其值为对应于 <paramref name="time" /> 的本地时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了之间的关系`time`参数和<xref:System.DateTime>此方法返回的值。  
  
|`time` 参数|行为|返回值|  
|----------------------|--------------|------------------|  
|协调世界时 (UTC) 时间 (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>)。|将时间从 UTC 转换为本地时间。|一个 <xref:System.DateTime> 对象，其值为对应于 `time` 的本地时间。|  
|本地时间 (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>)。|不需要进行转换。|相同<xref:System.DateTime>所表示的值`time`参数。|  
|未指定的时间 (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>)。|假定时间为 UTC，并将它从 UTC 转换为本地时间。|一个 <xref:System.DateTime> 对象，其值为对应于 `time` 的本地时间。|  
  
 如果本地时区实行夏令时，<xref:System.TimeZone.ToLocalTime%2A>将应用到当前的调整规则`time`时执行转换。  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A>方法只识别当前夏令时调整规则的本地时区。 因此，它被保证准确地返回到特定的 UTC 时间的最新调整规则是有效的时间段内仅对应的本地时间。 它可能返回不准确的结果，如果`time`是历史日期和时间值，它需要遵守先前的调整规则。  
  
 <xref:System.TimeZone.ToLocalTime%2A>方法对应于<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType>方法替换其`destinationTimeZone`参数设置为<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。 只要可能，使用<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>尽管不是必需的但在大多数情况下.NET Framework 2.0 版下运行的派生的类应重写此方法的默认实现。在.NET framework 1.0 和 1.1 中，<see langword="ToLocalTime" />方法调用<see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />方法且返回本地时间时调整为夏时制。但是，从.NET Framework 2.0 开始，默认实现的行为取决于<see cref="P:System.DateTime.Kind" />属性的<paramref name="time" />参数。如果其值为<see cref="F:System.DateTimeKind.Local" />，此方法返回<paramref name="time" />不变。如果其值为<see cref="F:System.DateTimeKind.Utc" />或<see cref="F:System.DateTimeKind.Unspecified" />，则此方法假定<paramref name="time" />为 UTC，并将其转换为本地系统时间，而无需调用<see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />方法。下面的代码提供的默认实现的是简单的重写<see langword="ToLocalTime" />方法。在此代码中，<see langword="internalTimeZone" />变量表示的私有实例<see langword="TimeZone" />类: [！ 代码 csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [！ 代码 vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和时间。</param>
        <summary>返回对应于指定时间的协调世界时 (UTC)。</summary>
        <returns>一个 <see cref="T:System.DateTime" /> 对象，其值为对应于 <paramref name="time" /> 的协调世界时 (UTC)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果本地时区实行夏令时，<xref:System.TimeZone.ToUniversalTime%2A>将应用到当前的调整规则`time`参数执行转换时。  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A>方法只识别当前夏令时调整规则的本地时区。 因此，它被保证准确地返回协调世界时 (UTC) 仅在最新调整规则是有效的段对应于特定的本地时间。 它可能返回不准确的结果，如果`time`是历史日期和时间值，它需要遵守先前的调整规则。  
  
 如果`time`参数是不明确的时间，该方法假定它是标准时间。 （不明确时间是指可以映射到标准时间或在本地时区内是夏令时时间。）如果`time`是无效时间，则方法只需减去本地时区的 UTC 偏移量以返回 UTC 中的本地时间。 （无效的时间是指因夏令时调整规则的应用程序而不存在。）  
  
 因为`time`解释根据当前系统上当前时区，日期和时间，此方法返回可以如果相同的应用程序运行在不同计算机上或同一台计算机上使用不同的时区。 对于在其中的日期和时间值必须表示单一、 明确的时间点的情况下，使用<xref:System.DateTimeOffset>值来表示本地时间。  
  
 <xref:System.TimeZone.ToUniversalTime%2A>方法对应于<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType>方法的重载<xref:System.DateTime>参数其<xref:System.DateTime.Kind%2A>属性不等于<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 只要可能，使用<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType>方法重载。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>