<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c38ffad7637e8473b8613a855ed60406c608f1b4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c38ffad7637e8473b8613a855ed60406c608f1b4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Tuple">
          <source>Provides static methods for creating tuple objects.</source>
          <target state="translated">提供用于创造元组对象的静态方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>A tuple is a data structure that has a specific number and sequence of elements.</source>
          <target state="translated">元组是一种数据结构，具有特定数量和元素序列。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>An example of a tuple is a data structure with three elements (known as a 3-tuple or triple) that is used to store an identifier such as a person's name in the first element, a year in the second element, and the person's income for that year in the third element.</source>
          <target state="translated">元组的一个示例是用于存储人员的姓名等标识符的第一个元素，第二个元素和人员收入中该年度第三个元素中的每一年中的数据结构具有三个元素 （称为 3 元组或三元组）。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>The .NET Framework directly supports tuples with one to seven elements.</source>
          <target state="translated">.NET Framework 直接支持具有 1 到 7 元素的元组。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>In addition, you can create tuples of eight or more elements by nesting tuple objects in the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">此外，您可以创建由嵌套中的元组对象的元组的八个或多个元素<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>Tuples are commonly used in four ways:</source>
          <target state="translated">元组常用四种方法：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>To represent a single set of data.</source>
          <target state="translated">来表示一组数据。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">例如，一个元组可以表示的数据库记录，并且其组件可以表示每个字段的记录。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">若要提供轻松访问和数据集的操作。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>To return multiple values from a method without using <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">若要从方法返回多个值，而无需使用<ph id="ph1">`out`</ph>参数 （在 C# 中) 或<ph id="ph2">`ByRef`</ph>参数 （在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">若要将多个值传递给通过单个参数的方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup time.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法只有一个参数，允许你提供一个线程在启动时执行的方法的值。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object as the method argument, you can supply the thread’s startup routine with three items of data.</source>
          <target state="translated">如果你提供<ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph>对象作为方法自变量，则可以提供有三个项的数据的线程的启动例程。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>The <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> class does not itself represent a tuple.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple&gt;</ph>类不本身表示元组。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>Instead, it is a class that provides static methods for creating instances of the tuple types that are supported by the .NET Framework.</source>
          <target state="translated">相反，它是提供用于创造元组类型支持.NET Framework 的实例的静态方法的类。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>It provides helper methods that you can call to instantiate tuple objects without having to explicitly specify the type of each tuple component.</source>
          <target state="translated">它提供了你可以调用实例化元组对象，而无需显式指定的每个元组组件类型的帮助器方法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>Although you can create an instance of a tuple class by calling its class constructor, the code to do so can be cumbersome.</source>
          <target state="translated">虽然你可以通过调用其类构造函数创建元组类的实例，若要这样做的代码会比较麻烦。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>The following example uses a class constructor to create a 7-tuple or septuple that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">下面的示例使用类构造函数来创建 7 元组，或七元组，其中包含从 1950 年到 2000 年每次人口普查的纽约填充数据。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>Creating the same tuple object by using a helper method is more straightforward, as the following example shows.</source>
          <target state="translated">通过使用一个帮助器方法创建相同的元组对象是更为简单，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>The <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> helper methods directly support the creation of tuple objects that have from one to eight components (that is, singletons through octuples).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>帮助器方法直接支持创建有一至八个组件 （即，到八元组的单一实例） 的元组对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>Although there is no practical limit to the number of components a tuple may have, helper methods are not available to create a tuple with nine or more components.</source>
          <target state="translated">尽管没有组件的数量没有实际限制但元组可能具有，帮助程序方法不是可用于创建具有九个或多个组件的元组。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>To create such a tuple, you must call the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">若要创建此类元组，必须调用<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>For additional information and examples that use tuples, see the documentation for the individual tuple types in the .NET Framework.</source>
          <target state="translated">有关其他信息和使用元组的示例，请参阅.NET Framework 中的各个元组类型的文档。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>These are listed in the See Also section at the end of this topic.</source>
          <target state="translated">在本主题末尾的另请参阅部分中列出了这些加载项。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple">
          <source>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</source>
          <target state="translated">下面的示例创建一个 8 元组 （八元组） 包含小于 20 的质数。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Tuple">
          <source>Creates a new tuple object.</source>
          <target state="translated">创建新的元组对象。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``1(``0)">
          <source>The type of the only component of the tuple.</source>
          <target state="translated">元组的唯一一个分量的类型。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``1(``0)">
          <source>The value of the only component of the tuple.</source>
          <target state="translated">元组仅有的分量的值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``1(``0)">
          <source>Creates a new 1-tuple, or singleton.</source>
          <target state="translated">创建新的 1 元组，即单一实例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``1(``0)">
          <source>A tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>) 的元组。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``1(``0)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 1-tuple object without having to explicitly specify the type of its component.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，你可以调用实例化的 1 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``1(``0)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 1-tuple whose component is of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化一个 1 元组，其元素类型的<ph id="ph2">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``1(``0)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%601.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%601.%23ctor%2A&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>Creates a new 2-tuple, or pair.</source>
          <target state="translated">创建新的 2 元组，即二元组。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>A 2-tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>) 的 2 元组。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``2(``0,``1)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 2-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化 2 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 2-tuple.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化 2 元组。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``2(``0,``1)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%602.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%602.%23ctor%2A&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The type of the third component of the tuple.</source>
          <target state="translated">元组的第三个分量的类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The value of the third component of the tuple.</source>
          <target state="translated">此元组的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>Creates a new 3-tuple, or triple.</source>
          <target state="translated">创建新的 3 元组，即三元组。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>A 3-tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>) 的 3 元组。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 3-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化 3 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 3-tuple.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化 3 元组。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``3(``0,``1,``2)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%603.%23ctor%2A?displayProperty=nameWithType&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%603.%23ctor%2A?displayProperty=nameWithType&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The type of the third component of the tuple.</source>
          <target state="translated">元组的第三个分量的类型。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The type of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的类型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The value of the third component of the tuple.</source>
          <target state="translated">此元组的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The value of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>Creates a new 4-tuple, or quadruple.</source>
          <target state="translated">创建新的 4 元组，即四元组。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>A 4-tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>) 的 4 元组。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 4-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化 4 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 4-tuple.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化 4 元组。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``4(``0,``1,``2,``3)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%604.%23ctor%2A?displayProperty=nameWithType&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%604.%23ctor%2A?displayProperty=nameWithType&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The type of the third component of the tuple.</source>
          <target state="translated">元组的第三个分量的类型。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The type of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的类型。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The type of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的类型。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The value of the third component of the tuple.</source>
          <target state="translated">此元组的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The value of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The value of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>Creates a new 5-tuple, or quintuple.</source>
          <target state="translated">创建新的 5 元组，即五元组。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>A 5-tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>) 的 5 元组。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 5-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化 5 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 5-tuple.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化 5 元组。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%605.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%605.%23ctor%2A&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The type of the third component of the tuple.</source>
          <target state="translated">元组的第三个分量的类型。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The type of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的类型。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The type of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的类型。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The type of the sixth component of the tuple.</source>
          <target state="translated">此元组的第六个分量的类型。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The value of the third component of the tuple.</source>
          <target state="translated">此元组的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The value of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The value of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The value of the sixth component of the tuple.</source>
          <target state="translated">此元组的第六个分量的值。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>Creates a new 6-tuple, or sextuple.</source>
          <target state="translated">创建新的 6 元组，即六元组。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>A 6-tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>, <ph id="ph6">&lt;paramref name="item6" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>, <ph id="ph6">&lt;paramref name="item6" /&gt;</ph>) 的 6 元组。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 6-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化 6 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 6-tuple.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化 6 元组。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the third component of the tuple.</source>
          <target state="translated">元组的第三个分量的类型。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的类型。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的类型。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the sixth component of the tuple.</source>
          <target state="translated">此元组的第六个分量的类型。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The type of the seventh component of the tuple.</source>
          <target state="translated">元组的第七个分量的类型。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the third component of the tuple.</source>
          <target state="translated">此元组的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the sixth component of the tuple.</source>
          <target state="translated">此元组的第六个分量的值。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The value of the seventh component of the tuple.</source>
          <target state="translated">元组的第七个分量的值。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>Creates a new 7-tuple, or septuple.</source>
          <target state="translated">创建新的 7 元组，即七元组。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>A 7-tuple whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>, <ph id="ph6">&lt;paramref name="item6" /&gt;</ph>, <ph id="ph7">&lt;paramref name="item7" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>, <ph id="ph6">&lt;paramref name="item6" /&gt;</ph>, <ph id="ph7">&lt;paramref name="item7" /&gt;</ph>) 的 7 元组。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate a 7-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化 7 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 7-tuple.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph>方法可实例化 7 元组。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
          <source>This code is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">此代码是等效于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的类型。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the second component of the tuple.</source>
          <target state="translated">元组的第二个分量的类型。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the third component of the tuple.</source>
          <target state="translated">元组的第三个分量的类型。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的类型。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的类型。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the sixth component of the tuple.</source>
          <target state="translated">此元组的第六个分量的类型。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the seventh component of the tuple.</source>
          <target state="translated">元组的第七个分量的类型。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The type of the eighth component of the tuple.</source>
          <target state="translated">元组的第八个分量的类型。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the first component of the tuple.</source>
          <target state="translated">此元组的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the second component of the tuple.</source>
          <target state="translated">此元组的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the third component of the tuple.</source>
          <target state="translated">此元组的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the fourth component of the tuple.</source>
          <target state="translated">此元组的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the fifth component of the tuple.</source>
          <target state="translated">此元组的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the sixth component of the tuple.</source>
          <target state="translated">此元组的第六个分量的值。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the seventh component of the tuple.</source>
          <target state="translated">元组的第七个分量的值。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The value of the eighth component of the tuple.</source>
          <target state="translated">元组的第八个分量的值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>Creates a new 8-tuple, or octuple.</source>
          <target state="translated">创建新的 8 元组，即八元组。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>An 8-tuple (octuple) whose value is (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>, <ph id="ph6">&lt;paramref name="item6" /&gt;</ph>, <ph id="ph7">&lt;paramref name="item7" /&gt;</ph>, <ph id="ph8">&lt;paramref name="item8" /&gt;</ph>).</source>
          <target state="translated">值为 (<ph id="ph1">&lt;paramref name="item1" /&gt;</ph>, <ph id="ph2">&lt;paramref name="item2" /&gt;</ph>, <ph id="ph3">&lt;paramref name="item3" /&gt;</ph>, <ph id="ph4">&lt;paramref name="item4" /&gt;</ph>, <ph id="ph5">&lt;paramref name="item5" /&gt;</ph>, <ph id="ph6">&lt;paramref name="item6" /&gt;</ph>, <ph id="ph7">&lt;paramref name="item7" /&gt;</ph>, <ph id="ph8">&lt;paramref name="item8" /&gt;</ph>) 的 8 元祖（八元组）。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> is a helper method that you can call to instantiate an 8-tuple without having to explicitly specify the types of its components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> 是一种帮助器方法，可以调用以实例化的 8 元组，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>You must call the  <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor to create a tuple with nine or more components unless your language provides a special syntax for this purpose.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType&gt;</ph>构造函数来创建具有九个或多个组件的元组，除非你的语言为此目的提供了一种特殊语法。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The static (<ph id="ph1">`Shared`</ph> in Visual Basic) methods of the <ph id="ph2">&lt;xref:System.Tuple&gt;</ph> class cannot be used to create a tuple with nine or more components.</source>
          <target state="translated">静态 (<ph id="ph1">`Shared`</ph>在 Visual Basic 中) 的方法<ph id="ph2">&lt;xref:System.Tuple&gt;</ph>类不能用于创建具有九个或多个组件的元组。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>The following example creates an 8-tuple whose components are prime numbers that are less than 20.</source>
          <target state="translated">下面的示例创建其组件是小于 20 的质数 8-元组。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>This is equivalent to the following example, which uses the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> class constructor instead of the <ph id="ph2">&lt;xref:System.Tuple.Create%2A&gt;</ph> factory creation method.</source>
          <target state="translated">这相当于以下示例中，它使用<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>类构造函数，而不是<ph id="ph2">&lt;xref:System.Tuple.Create%2A&gt;</ph>工厂创建方法。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
          <source>Note that instantiating a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object in this way involves considerably more code, because you must declare a nested <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> object as the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object's eighth component to produce an octuple.</source>
          <target state="translated">请注意该实例化<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>对象以这种方式涉及相当多的代码，因为您必须声明嵌套<ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph>对象作为<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>对象的第八个组件，以生成一个八元组。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>