<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppDomainUnloadedException.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bd11553089e034ffc94389fed29dcbcdd9da860c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd11553089e034ffc94389fed29dcbcdd9da860c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppDomainUnloadedException">
          <source>The exception that is thrown when an attempt is made to access an unloaded application domain.</source>
          <target state="translated">当尝试访问已卸载的应用程序域时引发的异常。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>In the .NET Framework version 2.0, an <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> that is not handled in user code has the following effect:</source>
          <target state="translated">在.NET Framework 2.0 版中，<ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>即在未处理的用户代码会产生以下影响：</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>If a thread was started in managed code, it is terminated.</source>
          <target state="translated">如果线程已启动在托管代码中，将它终止。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The unhandled exception is not allowed to terminate the application.</source>
          <target state="translated">不允许未经处理的异常终止该应用程序。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>If a task is executing on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, it is terminated and the thread is returned to the thread pool.</source>
          <target state="translated">如果任务在其上执行<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>线程，它已终止，线程返回给该线程池。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The unhandled exception is not allowed to terminate the application.</source>
          <target state="translated">不允许未经处理的异常终止该应用程序。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>If a thread started in unmanaged code, such as the main application thread, it is terminated.</source>
          <target state="translated">如果一个线程启动在非托管代码中，如主应用程序的线程，就会终止。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The unhandled exception is allowed to proceed, and the operating system terminates the application.</source>
          <target state="translated">未经处理的异常允许继续进行，并且操作系统终止应用程序。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source><ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> uses the HRESULT COR_E_APPDOMAINUNLOADED, which has the value 0x80131014.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> 使用 HRESULT COR_E_APPDOMAINUNLOADED，其值 0x80131014。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.AppDomainUnloadedException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">有关的实例的初始属性值的列表<ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>，请参阅<ph id="ph2">&lt;xref:System.AppDomainUnloadedException.%23ctor%2A&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The first example demonstrates the effects of an <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> on various threads, and the second shows elementary application domain unloading.</source>
          <target state="translated">第一个示例演示的效果<ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>在各种线程和第二个的显示基本应用程序域卸载。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>Example 1</source>
          <target state="translated">示例 1</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The following code example defines a <ph id="ph1">`TestClass`</ph> class that can be marshaled across application domain boundaries and an <ph id="ph2">`Example`</ph> class containing a <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) <ph id="ph5">`ThreadProc`</ph> method.</source>
          <target state="translated">下面的代码示例定义<ph id="ph1">`TestClass`</ph>类可以跨应用程序域边界进行封送处理和<ph id="ph2">`Example`</ph>类包含<ph id="ph3">`static`</ph>(<ph id="ph4">`Shared`</ph>在 Visual Basic 中)<ph id="ph5">`ThreadProc`</ph>方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The <ph id="ph1">`ThreadProc`</ph> method creates an application domain, creates a <ph id="ph2">`TestClass`</ph> object in the domain, and calls a method of <ph id="ph3">`TestClass`</ph> that unloads the executing domain, causing an <ph id="ph4">&lt;xref:System.AppDomainUnloadedException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>方法创建一个应用程序域中，创建<ph id="ph2">`TestClass`</ph>对象在域中，调用的方法和<ph id="ph3">`TestClass`</ph>卸载正在执行的域，导致<ph id="ph4">&lt;xref:System.AppDomainUnloadedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The <ph id="ph1">`TestClass`</ph> method is executed without exception handling from a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread and from an ordinary thread, demonstrating that the unhandled exception terminates the task or thread but not the application.</source>
          <target state="translated"><ph id="ph1">`TestClass`</ph>方法执行没有异常处理从<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>线程和从普通的线程，演示未经处理的异常终止该任务或线程，但不是应用程序。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>It is then executed with and without exception handling from the main application thread, demonstrating that it terminates the application if not handled.</source>
          <target state="translated">然后执行显式超时和没有处理从主应用程序线程，演示它终止应用程序时，如果未处理的异常。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>Example 2</source>
          <target state="translated">示例 2</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainUnloadedException">
          <source>The following code example creates and unloads an application domain, and demonstrates that an <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> is thrown on a subsequent attempt to access the unloaded domain.</source>
          <target state="translated">下面的代码示例创建和卸载应用程序域中，并演示<ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>会在后续尝试访问已卸载的域上引发。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.AppDomainUnloadedException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "The target application domain has been unloaded."</source>
          <target state="translated">此构造函数初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>为系统提供的消息的描述错误，如"目标应用程序域已被卸载。"的新实例的属性</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此消息将当前系统区域性考虑在内。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">空引用（在 Visual Basic 中为 <ph id="ph1">`Nothing`</ph>）。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">本地化的错误消息字符串。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">描述错误的消息。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">用指定的错误消息初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>The content of the <ph id="ph1">`message`</ph> parameter is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 参数的内容应为人所理解。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">空引用（在 Visual Basic 中为 <ph id="ph1">`Nothing`</ph>）。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">错误消息字符串。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">承载序列化对象数据的对象。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The contextual information about the source or destination.</source>
          <target state="translated">关于来源和目标的上下文信息</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">用序列化数据初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>XML 和 SOAP 序列化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The message that describes the error.</source>
          <target state="translated">描述错误的消息。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">导致当前异常的异常。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference, the current exception is raised in a <ph id="ph1">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> 参数不为空引用，则在处理内部异常的 <ph id="ph1">&lt;see langword="catch" /&gt;</ph> 块中引发当前异常。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainUnloadedException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The content of the <ph id="ph1">`message`</ph> parameter is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 参数的内容应为人所理解。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">因前一个异常而直接引发的异常应在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性中包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference if the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph>属性返回的相同值，如果传递到构造函数中，则为空引用<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>属性不会提供给构造函数的内部异常值。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">内部异常引用。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">错误消息字符串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>