<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e5b6cdff1b612ac2adc40e982b75d2afd346a2d" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52386104" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset>结构包含<xref:System.DateTime>值以及<xref:System.DateTimeOffset.Offset%2A>属性，用于定义当前之间的差异<xref:System.DateTimeOffset>实例的日期和时间与协调世界时 (UTC)。 它完全定义的日期和时间相对于 UTC，因为<xref:System.DateTimeOffset>结构不包括`Kind`成员，作为<xref:System.DateTime>结构。 它表示日期和时间值采用 UTC 范围 12:00:00，年 1 月 1 日午夜 0001 午夜 11:59:59 止 （基督纪元） 到 11:59:59 PM，到公元 9999 年 12 月 31 日 (C.E.)。  
  
 时间部分的<xref:System.DateTimeOffset>值以 100 毫微秒为单位称为计时周期，和特定日期是自午夜 12:00，公元 0001 年 1 月 1 日以来的计时周期数 (C.E.)在<xref:System.Globalization.GregorianCalendar>日历。 一个<xref:System.DateTimeOffset>值始终表示上下文的显式或默认日历中。 中的计时周期总数不包括归因于闰秒为单位的计时周期数。  
  
> [!NOTE]
>  如果您正在使用计时周期值，你想要将转换为其他时间间隔，如分钟或秒，则应使用<xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>，或<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>常量来执行此转换。 例如，若要添加的秒数表示的时钟周期到指定数值<xref:System.DateTimeOffset.Second%2A>组成部分<xref:System.DateTimeOffset>值，可以使用表达式`dateValue.Second + nTicks/Timespan.TicksPerSecond`。  
  
 尽管<xref:System.DateTimeOffset>值包含一个偏移量，它不是一种完全时区感知的数据结构。 一个特征的时区与 UTC 的偏移量时，它并不明确地标识一个时区。 不仅执行多个时区具有相同的偏移量从 UTC，而且如果实行夏令时更改一个时区的偏移量。 这意味着，只要<xref:System.DateTimeOffset>值与其时区，它可以不再进行明确链接回其原始时区。  
  
 因为<xref:System.DateTimeOffset>是一种结构，<xref:System.DateTimeOffset>已声明但未初始化的对象包含的默认值为每个成员字段。 这意味着，其<xref:System.DateTimeOffset.DateTime%2A>属性设置为<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>并将其<xref:System.DateTimeOffset.Offset%2A>属性设置为<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
 您可以创建一个新<xref:System.DateTimeOffset>通过调用其构造函数重载，它类似于重载构造任何的函数值<xref:System.DateTime>结构。 您还可以创建一个新<xref:System.DateTimeOffset>通过将其分配值<xref:System.DateTime>值。 这是隐式转换;它不需要强制转换运算符 （在 C# 中) 或调用转换方法 （在 Visual Basic 中)。 此外可以初始化<xref:System.DateTimeOffset>值的字符串表示形式的日期和时间，通过调用静态字符串分析方法，其中包括许多<xref:System.DateTimeOffset.Parse%2A>， <xref:System.DateTimeOffset.ParseExact%2A>， <xref:System.DateTimeOffset.TryParse%2A>，和<xref:System.DateTimeOffset.TryParseExact%2A>。  
  
 成员<xref:System.DateTimeOffset>结构提供以下几个方面的功能：  
  
-   日期和时间算术。  
  
     可以添加或减去的日期或时间间隔从特定<xref:System.DateTimeOffset>值。 算术运算<xref:System.DateTimeOffset>值，与具有不同<xref:System.DateTime>时返回的结果值，调整时间偏移量中的差异。 例如，下面的代码使用<xref:System.DateTime>变量以减去相应的当前本地时间从当前的 UTC 时间。 然后，代码使用<xref:System.DateTimeOffset>变量来执行相同的操作。 使用减法<xref:System.DateTime>值时使用该减法运算返回 UTC，从本地时区的差值<xref:System.DateTimeOffset>值返回<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   类型转换操作。  
  
     可以将转换<xref:System.DateTimeOffset>值到<xref:System.DateTimeOffset.DateTime%2A>值，反之亦然。  
  
-   时间操作和提取操作。  
  
     你可以提取日期或时间的<xref:System.DateTimeOffset>值。 此外可以检索特定的值<xref:System.DateTimeOffset>组件，例如其年份或月份。  
  
-   日期和时间转换。  
  
     可以将任何转换<xref:System.DateTimeOffset>到另一个值<xref:System.DateTimeOffset>值，该值表示在另一个时区的时间相同的点。 但是，仅在的情况下应用时区的调整规则<xref:System.DateTimeOffset.ToLocalTime%2A>方法，它将转换<xref:System.DateTimeOffset>本地系统区域中的为日期和时间值。  
  
-   日期和时间的比较。  
  
     您可以确定是否有任何特定<xref:System.DateTimeOffset>值是早于、 等于还是晚于另一个<xref:System.DateTimeOffset>值。 在执行比较前，所有值都转换为 UTC。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">在 DateTime、DateTimeOffset、TimeSpan 和 TimeZoneInfo 之间进行选择</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">示例：.NET Framework 4 格式设置实用工具</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间。</param>
        <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的行为取决于值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性的`dateTime`参数：  
  
-   如果的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，则<xref:System.DateTimeOffset.DateTime%2A>的新实例的属性设置为等于`dateTime`，并<xref:System.DateTimeOffset.Offset%2A>属性设置为等于<xref:System.TimeSpan.Zero>。  
  
-   如果的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，则<xref:System.DateTimeOffset.DateTime%2A>的新实例的属性设置为等于`dateTime`，并且<xref:System.DateTimeOffset.Offset%2A>属性设置为等于本地系统的当前时区的偏移量。  
  
   
  
## Examples  
 下面的示例演示如何的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性的`dateTime`参数影响返回的此构造函数的日期和时间值。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量得出的协调世界时 (UTC) 日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
通过应用偏移量得出的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的 <see cref="T:System.DateTime" /> 值和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的行为部分取决于的值<xref:System.DateTime.Kind%2A>属性的`dateTime`参数：  
  
-   如果的值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>的值`offset`参数必须为 0 或<xref:System.ArgumentException>引发。  
  
-   如果的值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>的值`offset`参数必须是该特定日期等于本地时区的偏移量从协调世界时 (UTC) 或<xref:System.ArgumentException>引发。  
  
-   如果的值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，则`offset`参数可以具有任何有效的值。  
  
   
  
## Examples  
 下面的示例演示如何初始化<xref:System.DateTimeOffset>使用日期和时间以及本地时区时事先不知道该时区的偏移量的对象。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="offset" /> 不等于零。  
  
或 
 <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="offset" /> 不等于系统的本地时区偏移量。  
  
或 
 未使用整分钟数指定 <paramref name="offset" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  
  
或 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">一个日期和时间，以 0001 年 1 月 1 日午夜 12:00:00 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的计时周期数和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，尝试调用<xref:System.DateTimeOffset.%23ctor%2A>构造函数实例化<xref:System.DateTimeOffset>之外的值使用了本地时间和偏移量的本地时间的区域将引发<xref:System.ArgumentException>。 可以使用此重载<xref:System.DateTimeOffset>构造函数，以解决此限制。 下面的示例使用本地时间的计时周期数来实例化<xref:System.DateTimeOffset>其偏移量不一定表示的本地时间的值：  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 下面的示例初始化<xref:System.DateTimeOffset>对象中的偏移量为-5 的任意日期 （在此情况下，2007 年 7 月 16 日，下午 1:32） 使用计时周期数。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">未使用整分钟数指定 <paramref name="offset" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。  
  
或 
 <paramref name="ticks" /> 小于 <see langword="DateTimeOffset.MinValue.Ticks" /> 或大于 <see langword="DateTimeOffset.MaxValue.Ticks" />。  
  
或 
 <paramref name="Offset" /> 小于 -14 小时或大于 14 小时。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的年、月、日、小时、分钟、秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将解释`year`， `month`，和`day`为年、 月和天公历日历中的。 若要实例化<xref:System.DateTimeOffset>值在另一个日历中，调用使用年、 月和日<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>构造函数。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.DateTimeOffset>对象使用<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>构造函数重载。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小于 1 或大于 9999。  
  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
  
或 
 <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  
  
或 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将解释`year`， `month`，和`day`为年、 月和天公历日历中的。 若要实例化<xref:System.DateTimeOffset>值在另一个日历中，调用使用年、 月和日<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>构造函数。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.DateTimeOffset>对象使用<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>构造函数重载。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小于 1 或大于 9999。  
  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  
  
或 
 <paramref name="offset" /> 小于 -14 或大于 14。  
  
或 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>用指定日历的指定年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`， `month`， `day`， `hour`， `minute`， `second`，以及`millisecond`所有参数都反映在由指定的日历表示的值`calendar`参数。 如果这些值构成的日期和不能使用此日历表示的时间，将引发异常。  
  
   
  
## Examples  
 下面的示例使用两个实例<xref:System.Globalization.HebrewCalendar>类和<xref:System.Globalization.HijriCalendar>要实例化类<xref:System.DateTimeOffset>值。 然后向控制台中使用各自的日历和公历日历显示日期。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> 不能为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小于 <paramref name="calendar" /> 参数的 <see langword="MinSupportedDateTime.Year" /> 或大于 <see langword="MaxSupportedDateTime.Year" />。  
  
或 
 <paramref name="month" /> 在 <paramref name="calendar" /> 中小于或大于 <paramref name="year" /> 中的月数。  
  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  
  
或 
 <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  
  
或 
<paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 参数不能表示为日期和时间值。  
  
或 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">一个 <see cref="T:System.TimeSpan" /> 对象，表示正时间间隔或负时间间隔。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它向此实例的值添加指定的时间间隔。</summary>
        <returns>一个对象，其值为当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="timeSpan" /> 所表示的时间间隔之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.DateTimeOffset.Add%2A>方法以在单个操作中添加多个类型的时间间隔 （天、 小时、 分钟、 秒或毫秒为单位）。 此方法的行为等同于加法运算符。 <xref:System.DateTimeOffset>结构还支持专用的加法 (如<xref:System.DateTimeOffset.AddDays%2A>， <xref:System.DateTimeOffset.AddHours%2A>，和<xref:System.DateTimeOffset.AddMinutes%2A>) 为每个时间间隔。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`timeSpan`为其日期和时间。  
  
 <xref:System.DateTimeOffset.Add%2A>方法不会影响当前的值<xref:System.DateTimeOffset>对象的<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.Add%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 如果`timeSpan`参数是`null`，此方法返回的原始值<xref:System.DateTimeOffset>对象保持不变。  
  
   
  
## Examples  
 下面的示例创建的数组<xref:System.TimeSpan>代表目标之间的航班时间的对象。 <xref:System.DateTimeOffset.Add%2A>方法，然后将这些时间与<xref:System.DateTimeOffset>表示航班的初始起飞时间的对象。 结果反映每个目标中的计划的到达时间。  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">由整数和小数部分组成的天数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定天数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="days" /> 所表示的天数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分的`days`参数是一天的小数部分。 例如，4.5 相当于 4 天，12 小时，0 分 0 秒，0 毫秒。 `days`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`days`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddDays%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 不足一天的时间间隔转换为小数部分可能涉及到精度损失。 如果这是有问题，则可以使用<xref:System.DateTimeOffset.Add%2A>方法，它使你可以在单个方法调用中指定的时间间隔的多个类型，并且不需要将转换为一天的小数部分的时间间隔。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.AddDays%2A>方法列出在星期一，2008 年 3 月、 工作周的开始日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">由整数和小数部分组成的小时数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定小时数添加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="hours" /> 所表示的小时数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分的`hours`参数是一小时的小数部分。 例如，4.5 相当于 4 小时 30 分钟，0 秒，0 毫秒。 `hours`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`hours`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddHours%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 转换不会超过一小时的时间间隔为一小部分可能会丢失精度。 （例如，一分钟是 0.01666 一小时。）如果这是有问题，则可以使用<xref:System.DateTimeOffset.Add%2A>方法，它使你可以在单个方法调用中指定的时间间隔的多个类型，并且不需要将转换为一小时的小数部分的时间间隔。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.AddHours%2A>特定周转移具有两个八小时轮班每日的办公室方法列出工作的开始时间。  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">由整数和小数部分组成的毫秒数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的毫秒数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前 <see cref="T:System.DateTimeOffset" /> 对象表示的时间和日期与 <paramref name="milliseconds" /> 对象表示的整毫秒数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分的`milliseconds`参数是以毫秒为单位的小数部分。 例如，4.5 相当于 4 毫秒和 5000 个时钟周期，其中一毫秒等于 10000 个计时周期。 但是，`milliseconds`舍入为最接近的毫秒;.5 或更高版本的所有值将向上舍都入。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`milliseconds`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddMilliseconds%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">由整数和小数部分组成的分钟数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定分钟数添加到此实例的值上。</summary>
        <returns>一个对象，其值是当前 <see cref="T:System.DateTimeOffset" /> 对象表示的日期和时间与 <paramref name="minutes" /> 表示的分钟数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分的`minutes`参数是一分钟的小数部分。 例如，4.5 相当于 4 分 30 秒，0 毫秒。 `minutes`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`minutes`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddMinutes%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 转换小于一分钟的时间间隔为一小部分可能会丢失精度。 （例如，一个第二个是时间的 0.01666 一分钟。）如果这是有问题，则可以使用<xref:System.DateTimeOffset.Add%2A>方法，它使你可以在单个方法调用中指定的时间间隔的多个类型，并且不需要将转换为一分钟的小数部分的时间间隔。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">整月份数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的月份数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="months" /> 所表示的月份数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与大多数其他将单个时间间隔单位 （如分钟或几天） 添加到日期和时间值的方法不同<xref:System.DateTimeOffset.AddMonths%2A>不会启用你添加的每个月的小数部分。 若要添加的月数为其他时间单位组成<xref:System.DateTimeOffset>对象，请使用<xref:System.DateTimeOffset.Add%2A>方法。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`months`为其日期和时间。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.AddMonths%2A>方法来显示每个季度的 2007 年的开始日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">由整数和小数部分组成的秒数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定秒数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="seconds" /> 所表示的秒数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分的`seconds`参数是一秒的小数部分。 下表中显示秒的小数部分的值。  
  
|第二个值|等效|  
|------------------|----------------|  
|.1 秒|100 毫秒|  
|.01 秒|10 毫秒|  
|.001 秒|1 毫秒|  
  
 `seconds`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`minutes`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddSeconds%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">以 100 纳秒为单位的计时周期数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的计时周期数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="ticks" /> 所表示的计时周期数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个对勾表示 100 纳秒或一个 10 的第二个。 由于时钟周期是一个很小且精确的时间间隔，任何更大的时间单位可以表示为损失精度的计时周期数。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`minutes`为其日期和时间。  
  
 下表列出在特定时间间隔内的计时周期数。  
  
|时间间隔|计时周期数|  
|-------------------|---------------------|  
|秒|10,000,000|  
|分钟|600,000,000|  
|小时|36,000,000,000|  
|天|864,000,000,000|  
|周|6,048,000,000,000|  
|月份|取决于月份中的天数。|  
|非闰年|315,360,000,000,000|  
|闰年|316,224,000,000,000|  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddTicks%2A>方法不考虑特定时区的调整规则执行日期和时间算术时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">年份数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的年份数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="years" /> 所表示的年数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与大多数其他将单个时间间隔单位 （如分钟或几天） 添加到日期和时间值的方法不同<xref:System.DateTimeOffset.AddYears%2A>不会启用你添加的一年的小数部分。 若要添加包含除了年到其他时间单位的时间<xref:System.DateTimeOffset>对象，请使用<xref:System.DateTimeOffset.Add%2A>方法。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`months`为其日期和时间。  
  
   
  
## Examples  
 在美国，驱动程序的许可证不能颁发给人员 16 岁。 以下示例显示在其一个人必须出生为了获颁合法的驱动程序许可证的最新可能日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">要比较的第一个对象。</param>
        <param name="second">要比较的第二个对象。</param>
        <summary>对两个 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明第一个对象是早于、等于还是晚于第二个对象。</summary>
        <returns>一个有符号的整数，它表示 <paramref name="first" /> 参数的值是早于、晚于还是等于 <paramref name="second" /> 参数的值，如下表所示。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 含义 
 </description></listheader><item><term> 小于零 
 </term><description><paramref name="first" /> 早于 <paramref name="second" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="first" /> 等于 <paramref name="second" />。  
  
 </description></item><item><term> 大于零 
 </term><description><paramref name="first" /> 晚于 <paramref name="second" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较时，该方法将两者`first`和`second`参数为协调世界时 (UTC) 执行比较前。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 换而言之，<xref:System.DateTimeOffset.Compare%2A>方法确定两个<xref:System.DateTimeOffset>对象表示单个点的时间。 它将直接进行比较的日期和时间既不偏移量。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.Compare%2A>方法来比较<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">将与当前的 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明当前对象是早于、等于还是晚于另一个 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>一个有符号的整数，它指明了当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 之间的关系，如下表所示。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 描述 
 </description></listheader><item><term> 小于零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象早于 <paramref name="other" />。  
  
 </description></item><item><term> 零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 相同。  
  
 </description></item><item><term> 大于零。  
  
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象晚于 <paramref name="other" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法比较<xref:System.DateTimeOffset>进行比较的对象及其<xref:System.DateTimeOffset.UtcDateTime%2A>值; 也就是说，它确定是否有两个对象表示单个点的时间，并且指示当前对象是早于、 晚于或等于`other`参数。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.CompareTo%2A>方法来比较<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</summary>
        <value>一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性中移除的时间部分，从任何重要部分<xref:System.DateTimeOffset>对象，并只返回其有意义的日期组件。 例如，如果<xref:System.DateTimeOffset>的对象的日期和时间的值"1/12/07 下午 4:01 + 7:30"，该属性返回<xref:System.DateTime>的值"1/12/07 12:00:00"。 <xref:System.DateTime>然后可以使用任何标准或自定义格式说明符来显示日期只显示值。 （请参阅示例部分的说明。）  
  
 值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>所返回的属性<xref:System.DateTime>对象始终是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 若要显示不带其时间部分的日期，您可以使用"D"或者"d"格式说明符;有关说明，请参阅示例部分。  
  
   
  
## Examples  
 下面的示例检索的值<xref:System.DateTimeOffset.Date%2A>特定日期的属性。 然后会将该值显示在控制台使用某些标准和自定义日期格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准 DateTime 格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此属性返回的日期和时间组成部分<xref:System.DateTimeOffset>对象，使其非常适合执行<xref:System.DateTimeOffset>到<xref:System.DateTime>转换。 例如，如果<xref:System.DateTimeOffset>的对象的日期和时间的值"1/12/07 下午 4:01 + 7:30"，该属性返回的日期"1/12/07 下午 4:01"。  
  
 值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>所返回的属性<xref:System.DateTime>对象是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.DateTime%2A>属性将返回的时间转换<xref:System.DateTimeOffset.Now%2A>并<xref:System.DateTimeOffset.UtcNow%2A>属性设置为<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">在 DateTime 与 DateTimeOffset 之间进行转换</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的月中的某一天。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的日组成部分，以 1 到 31 之间的一个值来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的日组成部分<xref:System.DateTimeOffset.ToString%2A>方法带有"d"或"dd"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的日组成部分<xref:System.DateTimeOffset>三种不同方式的对象：  
  
-   通过检索的值<xref:System.DateTimeOffset.Day%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"d"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法带"dd"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的周中的某一天。</summary>
        <value>用于指示当前 <see cref="T:System.DateTimeOffset" /> 对象的星期几的枚举值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的常量值<xref:System.DayOfWeek>枚举的范围从<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>到<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>。 如果强制转换为一个整数，其值的范围是从零 (指示<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) 为 6 (表示<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 此外可以通过使用"D"格式说明符或"dddd"自定义格式说明符来显示特定日期的星期几名称。 例如:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 请注意，该字符串返回通过调用`ToString`方法的<xref:System.DayOfWeek>枚举成员，此属性返回未本地化。 若要提取包含当前区域性或特定区域性的星期几名称的字符串，调用<xref:System.DateTimeOffset.ToString%2A>方法带"dddd"自定义格式说明符。 例如，下面的代码显示使用为日期的星期几名称`fr-fr`区域性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 以下示例显示 2008年年度的每个月的第一天的星期几名称。  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的年中的某一天。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的年中的某一天，以 1 到 366 之间的一个值来表示。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定两个 <see cref="T:System.DateTimeOffset" /> 对象是否相等，或者 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象相等。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点。</summary>
        <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法在执行比较之前，将这两者的值转换<xref:System.DateTimeOffset>对象为协调世界时 (UTC)。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 换而言之，<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法确定两个<xref:System.DateTimeOffset>对象表示单个点的时间。 它将直接进行比较的日期和时间既不偏移量。 若要确定两个<xref:System.DateTimeOffset>对象表示同一时间并且具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 一个<xref:System.DateTimeOffset>对象，它不是`null`被视为可更高版本 （或更高版本） 个是`null`。  
  
 此重载<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法实现<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。 它提供了略有更好的性能比<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>重载，因为`other`参数无需从对象转换。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法来测试<xref:System.DateTimeOffset>对象是否与当前相等<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>确定 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象表示同一时间点。</summary>
        <returns>如果 <paramref name="obj" /> 参数是 <see cref="T:System.DateTimeOffset" /> 对象，并且与当前的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将这两个的当前值<xref:System.DateTimeOffset>对象和`obj`参数为协调世界时 (UTC)。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 换而言之，<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>方法确定是否当前<xref:System.DateTimeOffset>对象和指定的对象表示单个点的时间。 它将直接进行比较的日期和时间既不偏移量。 若要确定两个<xref:System.DateTimeOffset>对象表示同一时间并且具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 如果`obj`是`null`，或者如果运行时类型的`obj`不是<xref:System.DateTimeOffset>，该方法将返回`false`。  
  
   
  
## Examples  
 下面的示例指示是否当前<xref:System.DateTimeOffset>对象是否等同于其他几个<xref:System.DateTimeOffset>对象，以及如为空引用和一个<xref:System.DateTime>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">要比较的第一个对象。</param>
        <param name="second">要比较的第二个对象。</param>
        <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
        <returns>如果这两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将两者<xref:System.DateTimeOffset>对象为协调世界时 (UTC)。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换而言之，<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>方法确定是否两个<xref:System.DateTimeOffset>对象表示单个点的时间。 它将直接进行比较的日期和时间既不偏移量。 若要确定两个<xref:System.DateTimeOffset>对象表示同一时间并且具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>方法用于测试的各种对<xref:System.DateTimeOffset>对象是否相等。  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间并且是否具有相同的偏移量。</summary>
        <returns>如果当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 具有相同的日期和时间值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为多个时区具有一个偏移量，返回值`true`不保证的当前和`other`相同的时区中的对象表示时间。  
  
 与不同<xref:System.DateTimeOffset.EqualsExact%2A>方法中，重载<xref:System.DateTimeOffset.Equals%2A>方法确定两个是否仅<xref:System.DateTimeOffset>值表示时间单一点。 它们不指示两个值具有相同的日期和时间，以及相同偏移量。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.EqualsExact%2A>方法来比较类似<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
        <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
        <returns>一个对象，表示偏移量被设置为本地时间偏移量的 <paramref name="fileTime" /> 的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是 64 位值，它表示午夜 12:00，公元 1601 年 1 月 1 日起经过的 100 纳秒间隔数 (C.E.)协调世界时 (UTC)。 Windows 使用的文件时间记录时应用程序创建、 访问，或写入文件。  
  
 Windows 文件时间是通过 Windows API 直接访问通过调用`GetFileTime`函数，返回`FILETIME`结构。 单个函数参数是要检索其文件的时间信息的文件句柄。 通过调用检索的文件句柄`CreateFile`函数。 `FILETIME`结构的`dwHighDateTime`成员包含的文件时间的四个高序位字节并将其`dwLowDateTime`成员包含的四个低序位字节。 下面的示例说明了如何检索 Windows 文件时间值并将它们转换为<xref:System.DateTimeOffset>值。  
  
 也可以从创建 Windows 文件时间值<xref:System.DateTime>值通过调用<xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType>并<xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType>方法，并从<xref:System.DateTimeOffset>值通过调用<xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例使用 Windows API 检索写字板可执行文件的 Windows 文件时间。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> 小于零。  
  
或 
 <paramref name="filetime" /> 大于 <see langword="DateTimeOffset.MaxValue.Ticks" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的毫秒数。 对于在此日期之前的 Unix 时间，其值为负数。</param>
        <summary>将表示为从 1970-01-01T00:00:00Z 开始已经过的毫秒数的 Unix 时间转换为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个日期和时间值，以 Unix 时间表示同一时刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A>所返回的属性值<xref:System.DateTimeOffset>实例是<xref:System.TimeSpan.Zero?displayProperty=nameWithType>，它表示协调世界时。 您可以将其转换为特定时区中的时间通过调用<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="milliseconds" /> 小于 -62,135,596,800,000。  
  
或 
 <paramref name="milliseconds" /> 大于 253,402,300,799,999。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的秒数。 对于在此日期之前的 Unix 时间，其值为负数。</param>
        <summary>将表示为从 1970-01-01T00:00:00Z 开始已经过的秒数的 Unix 时间转换为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个日期和时间值，以 Unix 时间表示同一时刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A>所返回的属性值<xref:System.DateTimeOffset>实例是<xref:System.TimeSpan.Zero?displayProperty=nameWithType>，它表示协调世界时。 您可以将其转换为特定时区中的时间通过调用<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="seconds" /> 小于 -62,135,596,800。  
  
或 
 <paramref name="seconds" /> 大于 253,402,300,799。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前 <see cref="T:System.DateTimeOffset" /> 对象的哈希代码。</summary>
        <returns>32 位有符号整数哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的小时组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的小时组成部分。 此属性使用 24 小时制；值介于 0 到 23 之间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>对象的小时部分，通过调用<xref:System.DateTimeOffset.ToString%2A>方法使用"H"或"HH"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的小时组成部分<xref:System.DateTimeOffset>三种不同方式的对象：  
  
-   通过检索的值<xref:System.DateTimeOffset.Hour%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"H"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法与"HH"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</summary>
        <value>当前的 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有必要，请<xref:System.DateTimeOffset.LocalDateTime%2A>属性将为当前<xref:System.DateTimeOffset>对象的日期和时间为本地系统的日期和时间。 转换是一个包含两个步骤操作：  
  
1.  该属性将当前<xref:System.DateTimeOffset>对象的时间为协调世界时 (UTC)。  
  
2.  然后，该属性将 UTC 转换为本地时间。  
  
 有没有无效的时间并不明确时间映射到本地时区的标准时间。 (但是，转换可以创建异常情况： 如果<xref:System.DateTimeOffset>派生自本地计算机的值反映了不明确的日期和时间，值可以转换为 UTC，然后返回不同于原始时间了本地时间。)执行此转换时，则属性将应用在本地时区内的任何调整规则。  
  
 此属性返回的日期和时间组成部分<xref:System.DateTimeOffset>对象，使其非常适合<xref:System.DateTimeOffset>到<xref:System.DateTime>转换。 除了执行任何必要的时间转换时，此属性不同于<xref:System.DateTimeOffset.DateTime%2A>属性的值设置<xref:System.DateTime.Kind%2A>所返回的属性<xref:System.DateTime>对象传递给<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示几个转换的<xref:System.DateTimeOffset>美国太平洋时区中的本地时间的值太平洋标准时区运行。 请注意，最后三个时间都不明确;该属性将所有这些映射到单个日期和时间在太平洋标准时区中。  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值为 12/31/9999 11:59:59 PM + 00:00。  
  
 <xref:System.DateTimeOffset.MaxValue>属性用于确定是否的一个新值<xref:System.DateTimeOffset>对象或<xref:System.DateTimeOffset>的算术运算返回值是相同等于或早于此最大范围值。 如果不是这样，该方法将引发<xref:System.ArgumentOutOfRangeException>。 任何<xref:System.DateTimeOffset>值转换为协调世界时 (UTC)，该方法将其与进行比较之前<xref:System.DateTimeOffset.MaxValue>。  这意味着，<xref:System.DateTimeOffset>值的日期和时间是接近最大范围，但其偏移量为负，则可能会引发异常。 例如，值 12/31/9999 下午 11:00-02:00 不在范围内，因为它是一小时晚于<xref:System.DateTimeOffset.MaxValue>时转换为 UTC。  
  
 某些日历，如<xref:System.Globalization.UmAlQuraCalendar>，支持早于上部的日期范围<xref:System.DateTime.MaxValue>。 在这些情况下，尝试访问<xref:System.DateTime.MaxValue>变量赋值或格式设置和分析操作中可能会引发<xref:System.ArgumentOutOfRangeException>。 而不是检索的值<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，可以检索的值中指定的区域性的最新有效的日期值<xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" /> 位于当前或指定区域性的默认日历的范围之外。</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的毫秒组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的毫秒组成部分，以 0 到 999 之间的一个整数来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的毫秒部分<xref:System.DateTimeOffset.ToString%2A>方法使用"fff"自定义格式说明符。  
  
 如果你如依赖属性<xref:System.DateTimeOffset.Now%2A>或<xref:System.DateTimeOffset.UtcNow%2A>才能准确地跟踪已用的毫秒数，时间的毫秒部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 及更高版本、 和 Windows Vista 操作系统上，时钟的分辨率大约为 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例显示的毫秒数<xref:System.DateTimeOffset>对象使用自定义格式说明符，并直接访问<xref:System.DateTimeOffset.Millisecond%2A>属性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的分钟组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的分钟组成部分，以 0 到 59 之间的一个整数来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的分钟部分<xref:System.DateTimeOffset.ToString%2A>方法使用"m"或"mm"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的分钟组成部分<xref:System.DateTimeOffset>三种不同方式的对象：  
  
-   通过检索的值<xref:System.DateTimeOffset.Minute%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"m"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"mm"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示可能的最早 <see cref="T:System.DateTimeOffset" /> 值。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值为 0001 年 1 月 1 日上午 12:00:00 + 00:00。  
  
 <xref:System.DateTimeOffset.MinValue>属性用于确定是否的一个新值<xref:System.DateTimeOffset>对象或<xref:System.DateTimeOffset>的算术运算返回值是相同等于还是晚于此最小范围值。 如果不是这样，该方法将引发<xref:System.ArgumentOutOfRangeException>。 任何<xref:System.DateTimeOffset>值转换为协调世界时 (UTC)，该方法执行与比较前<xref:System.DateTimeOffset.MinValue>。  这意味着，<xref:System.DateTimeOffset>值的日期和时间是接近最小范围，但其偏移量为正，则可能会引发异常。 例如，值 0001 年 1 月 1 日凌晨 1:00:00 + 02:00 不在范围内，因为它是一小时早于<xref:System.DateTimeOffset.MinValue>时转换为 UTC。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的月份组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的月份组成部分，以 1 到 12 之间的一个整数来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的月份部分<xref:System.DateTimeOffset.ToString%2A>方法与"M"或"MM"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的月份组成部分<xref:System.DateTimeOffset>三种不同方式的值：  
  
-   通过检索的值<xref:System.DateTimeOffset.Month%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"M"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"MM"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。</summary>
        <value>一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间为当前的本地时间，其偏移量为本地时区与协调世界时 (UTC) 之间的偏移量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前本地时间的毫秒部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 及更高版本、 和 Windows Vista 操作系统上，时钟的分辨率大约为 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.Now%2A>属性来检索当前日期和时间，并通过使用上述每种显示[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)受<xref:System.DateTimeOffset>类型。  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 下面的示例使用<xref:System.DateTimeOffset.Now%2A>和<xref:System.DateTimeOffset.Millisecond%2A>属性以确定系统时钟的分辨率。 它显示的时间仅当其毫秒部分的值更改。  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与协调世界时 (UTC) 之间的时间偏移量。</summary>
        <value>当前的 <see cref="T:System.DateTimeOffset" /> 对象的时间值与协调世界时 (UTC) 之差。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeSpan.Hours%2A>属性所返回的<xref:System.TimeSpan>对象介于-14 小时到 14 小时。  
  
 值<xref:System.DateTimeOffset.Offset%2A>属性是精确到分钟。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.Offset%2A>属性来显示本地时间的差异与协调世界时 (UTC)。  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要向其加上时间间隔的对象。</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">待添加的时间间隔。</param>
        <summary>将指定的时间间隔与具有指定日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象相加，产生一个具有新的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>一个对象，其值为 <paramref name="dateTimeTz" /> 与 <paramref name="timeSpan" /> 的值之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A>方法定义的加法运算<xref:System.DateTimeOffset>值。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 不支持自定义的运算符和运算符重载的语言可以调用<xref:System.DateTimeOffset.Add%2A>方法相反。  
  
 此运算符的等效方法是<xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
        <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A>方法定义的相等运算符的运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 计算之前`left`和`right`操作数是否相等，则运算符将这两个值转换为协调世界时 (UTC)。 该操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换而言之，<xref:System.DateTimeOffset.op_Equality%2A>方法确定是否两个<xref:System.DateTimeOffset>对象表示单个点的时间。 它将直接进行比较的日期和时间既不偏移量。 若要确定两个<xref:System.DateTimeOffset>对象表示同一时间并且具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否大于（或晚于）另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>方法定义的大于运算符的运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 不支持自定义的运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 它们还可以调用<xref:System.DateTimeOffset.op_GreaterThan%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 计算之前`left`和`right`操作数，运算符将这两个值转换为协调世界时 (UTC)。 该操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是大于还是等于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等于或晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>方法定义大于或等于运算符的运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 不支持自定义的运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外可以调用某些语言<xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 计算之前`left`和`right`操作数，运算符将这两个值转换为协调世界时 (UTC)。 该操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的对象。</param>
        <summary>定义从 <see cref="T:System.DateTime" /> 对象到 <see cref="T:System.DateTimeOffset" /> 对象的隐式转换。</summary>
        <returns>被转换的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A>方法使编译器能够自动转换<xref:System.DateTime>对象传递给<xref:System.DateTimeOffset>而无需使用显式强制转换运算符 （在 C#) 或 （在 Visual Basic) 的转换函数的调用的对象。 它定义了扩大转换，不会丢失数据，也不会引发<xref:System.OverflowException>。 <xref:System.DateTimeOffset.op_Implicit%2A>方法使诸如以下的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 此方法等效于<xref:System.DateTimeOffset.%23ctor%2A>构造函数。 所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性的`dateTime`参数：  
  
-   如果的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，日期和时间<xref:System.DateTimeOffset>对象设置为等于`dateTime`，并将其<xref:System.DateTimeOffset.Offset%2A>属性设置为等于 0。  
  
-   如果的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，日期和时间<xref:System.DateTimeOffset>对象设置为等于`dateTime`，并将其<xref:System.DateTimeOffset.Offset%2A>属性设置为等于本地系统的当前时区的偏移量。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量得出的协调世界时 (UTC) 日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
通过应用偏移量得出的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示不同的时间点。</summary>
        <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.DateTimeOffset>对象。 它始终返回相反的结果从<xref:System.DateTimeOffset.op_Equality%2A>。 <xref:System.DateTimeOffset.op_Inequality%2A>方法使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 计算之前`left`和`right`操作数是否相等，则运算符将这两个值转换为协调世界时 (UTC)。 该操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换而言之，<xref:System.DateTimeOffset.op_Inequality%2A>方法确定是否两个<xref:System.DateTimeOffset>对象表示的时间的不同时间点。 它将直接进行比较的日期和时间既不偏移量。  
  
 不支持自定义的运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外，还可以调用某些语言<xref:System.DateTimeOffset.op_Inequality%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A>方法定义的小于运算符的运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 计算之前`left`和`right`操作数，运算符将两个操作数转换为协调世界时 (UTC)。 该操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 不支持自定义的运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外，还可以调用某些语言<xref:System.DateTimeOffset.op_LessThan%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 不支持自定义的运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外可以调用某些语言<xref:System.DateTimeOffset.op_LessThanOrEqual%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 计算之前`left`和`right`操作数，运算符将这两个值转换为协调世界时 (UTC)。 该操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的 <see cref="T:System.TimeSpan" /> 或 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">被减数。</param>
        <param name="right">减数。</param>
        <summary>从一个 <see cref="T:System.DateTimeOffset" /> 对象中减去另一个对象并生成时间间隔。</summary>
        <returns>一个表示 <paramref name="left" /> 与 <paramref name="right" /> 之差的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>方法定义为该减法运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 不支持自定义的运算符和运算符重载的语言可以调用<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>方法相反。  
  
 此运算符的等效方法是<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要从其减去的日期和时间对象。</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">待减去的时间间隔。</param>
        <summary>从指定的日期和时间减去指定的时间间隔，并生成新的日期和时间。</summary>
        <returns>一个对象，它等于 <paramref name="dateTimeOffset" /> 减 <paramref name="timeSpan" /> 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>方法定义为该减法运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 不支持自定义的运算符和运算符重载的语言可以调用<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>方法相反。  
  
 此运算符的等效方法是<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <summary>将日期、时间和偏移量的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> 分析具有三个元素，可以按任何顺序出现，并通过空白分隔的字符串。 这三个要素是下表中所示。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移 > 不能单独出现。 它必须提供任意一个协同\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前天。 如果\<时间 > 缺少，其默认值是 12:00:00 AM。 如果\<日期 > 已存在但其组件包含仅有两个数字的年份，它将转换到值的基础的当前区域性的当前日历中每年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量。 \<偏移量 > 可表示为负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移 > 必须包括正负符号。  
  
 `input`通过使用中的格式设置信息分析字符串<xref:System.Globalization.DateTimeFormatInfo>初始化为当前区域性的对象。 若要分析的字符串，其中包含指定格式设置不一定对应于当前区域性的格式设置，请使用<xref:System.DateTimeOffset.ParseExact%2A>方法并提供格式说明符。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.Parse%28System.String%29>方法来分析日期和时间的多个字符串。 该示例包括输出从 2007 年 3 月 22 日，其区域性为 en 的系统上-我们。  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
或 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
        <summary>使用指定的特定于区域性的格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法分析具有三个元素，可以按任何顺序出现，并通过空白分隔的字符串。 下表中显示这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移 > 不能单独出现。 它必须提供任意一个协同\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前天。 如果\<日期 > 已存在但其组件包含仅有两个数字的年份，它将转换到一年`provider`的值基于参数的当前日历<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值是 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量。 \<偏移量 > 可表示为负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移 > 必须包括正负符号。  
  
 这三个元素的格式定义由`formatProvider`可以为以下对象之一的参数：  
  
-   一个<xref:System.Globalization.CultureInfo>对象，表示的格式设置中使用的区域性`input`参数。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 使用中的正或负号\<偏移 > 必须为 + 或-。 它不能由<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>的属性<xref:System.Globalization.NumberFormatInfo>对象的`formatProvider`参数。  
  
   
  
## Examples  
 下面的示例分析日期和时间字符串，用于为 fr-fr 区域性进行格式化，并显示它们使用本地系统的默认 en-我们的区域性。  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
或 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法分析具有三个元素，可以按任何顺序出现，并通过空白分隔的字符串。 下表中显示这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移 > 不能单独出现。 它必须提供任意一个协同\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前天。 如果\<日期 > 已存在但其组件包含仅有两个数字的年份，它将转换到一年`provider`的值基于参数的当前日历<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值是 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量或<xref:System.TimeSpan.Zero?displayProperty=nameWithType>如果任一<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>或<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>中指定值`styles`参数。 如果\<偏移量 >，则它可以表示为负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移 > 必须包括正负符号。  
  
 这三个元素的格式定义由`formatProvider`可以为以下对象之一的参数：  
  
-   一个<xref:System.Globalization.CultureInfo>对象，表示的格式设置中使用的区域性`input`参数。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 每个元素也括前导或尾随空格和\<日期 > 和\<时间 > 元素可以包括内部的空白区域 （如 6: 00:00)。 仅\<偏移 > 组件不能包含内部空格。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 使用中的正或负号\<偏移 > 必须为 + 或-。 它不能由<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>的属性<xref:System.Globalization.NumberFormatInfo>返回的对象`formatProvider`参数。  
  
 下表显示的成员<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>支持的枚举。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析字符串由`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但将忽略此值。 中允许内部空格\<日期 > 和\<时间 > 元素。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但将忽略此值。 前面已分析的字符串中每个组件允许前导空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但将忽略此值。 前面分析的字符串中每个组件允许存在尾随空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|这是默认行为。 不能重写通过提供更具限制性<xref:System.Globalization.DateTimeStyles>枚举值，例如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|表明，如果`input`参数缺少\<偏移量 > 元素中，应提供的本地时区偏移量。 这是默认行为的<xref:System.DateTimeOffset.Parse%2A>方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|表明，如果`input`参数缺少\<偏移量 > 元素中，应提供的 UTC 偏移量 (00:00)。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但此值将被忽略，并且不起作用。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|因为<xref:System.DateTimeOffset>结构不包括`Kind`属性，此值不起作用。|  
  
 仅<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>值不受支持。 <xref:System.ArgumentException>如果此值包含在引发`styles`参数。  
  
   
  
## Examples  
 下面的示例演示传递的效果<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>，并<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>值到`styles`参数的<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
  
或 
 <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
或 
 <paramref name="styles" /> 包含不支持的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
或 
 <paramref name="styles" /> 包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
或 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>方法分析的日期，必须在所定义的格式的字符串表示形式`format`参数。 它还需要\<日期 >，\<时间 >，并\<偏移量 > 元素的日期和时间的字符串表示形式出现在指定的顺序`format`。 如果`input`字符串不匹配这`format`参数，该方法将引发<xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法分析的字符串表示形式中任何一种可识别的格式提供程序的格式的日期<xref:System.Globalization.DateTimeFormatInfo>对象。 <xref:System.DateTimeOffset.Parse%2A> 此外允许\<日期 >，\<时间 >，和\<偏移 > 要按任何顺序出现的日期和时间的字符串表示形式中的元素。  
  
 `format`参数是一个包含单一的标准格式说明符或一个或多个自定义格式说明符用于定义所需的格式的字符串`input`参数。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果`format`不需要`input`包含偏移量，从而<xref:System.DateTimeOffset>对象分配的本地系统时区偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数，因为是精确的格式`input`如果`format`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>使用标准和自定义格式说明符和固定区域性分析日期和时间的多个字符串的方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

下面的示例分析应符合的字符串数组[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)。 输出中的示例所示，为带有前导或尾随空格的字符串无法分析成功，因为执行日期和时间不在范围内的元素的字符串。

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 为 <see langword="null" />。  
  
或 
 <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 为空字符串 ("")。  
  
或 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
或 
 <paramref name="format" /> 是一个空字符串。  
  
或 
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage">
          <para>在中[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，则<see cref="Overload:System.DateTimeOffset.ParseExact" />方法会抛出<see cref="T:System.FormatException" />如果要分析的字符串包含的小时组件和 AM/PM 指示符不在协议中的。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">一个表示日期和时间的字符范围。</param>
        <param name="format">包含格式说明符的字符范围，用于定义 <paramref name="input" /> 的预期格式。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将表示日期和时间的字符范围转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

此方法分析表示日期，必须在所定义的格式的字符范围`format`参数。 它还需要\<日期 >，\<时间 >，并\<偏移量 > 元素的日期和时间的字符串表示形式出现在指定的顺序`format`。 如果`input`不符`format`模式，该方法将引发<xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法分析的字符串表示形式中任何一种可识别的格式提供程序的格式的日期<xref:System.Globalization.DateTimeFormatInfo>对象。 <xref:System.DateTimeOffset.Parse%2A> 此外允许\<日期 >，\<时间 >，和\<偏移 > 要按任何顺序出现的日期和时间的字符串表示形式中的元素。  
  
 `format`参数是包含一个单字符标准格式说明符或一个或多个自定义格式说明符用于定义所需的格式的字符范围`input`参数。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果`format`不需要`input`包含偏移量，从而<xref:System.DateTimeOffset>对象分配的本地系统时区偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数，因为是精确的格式`input`如果`format`是标准格式说明符。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
或  
<paramref name="styles" /> 参数包含不支持的值。  
或  
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 是一个空的字符范围。  
 -或- <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
 -或- <paramref name="format" /> 是一个空的字符范围。  
 或  
 <paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符范围。</param>
        <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的期望格式。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将包含日期和时间的字符串表示形式的字符范围转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
此方法分析表示的日期的任何一种分配到的模式匹配的字符范围`formats`参数。 如果`input`与任何定义的变体不匹配。 这些模式的任一`styles`参数，该方法将引发<xref:System.FormatException>。 除了比较`input`到多个格式设置模式，此重载的行为与完全相同<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法。  
  
 `formats`参数是一个字符串数组，其元素包含一个单一的标准格式说明符或一个或多个自定义格式说明符用于定义的可能模式的`input`参数。 当调用该方法时，`input`必须与其中一种模式相匹配。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的匹配的元素`formats`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用`formats`的此重载来指定多个格式参数可以帮助减少很多用户在输入日期和时间时遇到的错误。 具体而言，定义多个输入的模式的功能使应用程序能够处理日期和时间的表示形式，可以包括或缺少几个月、 天、 小时、 分钟和秒为单位中的前导零。
  
 如果中的匹配的元素`formats`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果中的匹配的元素`formats`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果中的匹配的元素`formats`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数。 同样适用于的确切格式`input`，如果匹配的元素的`formats`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含未指定的内部空白`format`。 额外的空白区域可以显示日期和时间组件之间以及各个组件 （除偏移量），内部和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包含未指定的尾随空格`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的前导、 尾随和内部空格`formats`。 未在中的匹配元素中指定的所有多余空白字符`formats`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中的特定元素指定的那样`formats`以便匹配。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|具有不起作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
-或- <paramref name="styles" /> 包含不支持的值。  
或  
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 是一个空的字符范围。  
-或- <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
或  
<paramref name="formats" /> 的元素均不包含有效的格式说明符。  
或  
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析的日期，必须在所定义的格式的字符串表示形式`format`参数。 它还需要\<日期 >，\<时间 >，并\<偏移量 > 元素的日期和时间的字符串表示形式出现在指定的顺序`format`。 如果`input`字符串不匹配的模式`format`参数，并具有定义的任何变体`styles`参数，该方法将引发<xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析的字符串表示形式中任何一种可识别的格式提供程序的格式的日期<xref:System.Globalization.DateTimeFormatInfo>对象。 <xref:System.DateTimeOffset.Parse%2A> 此外允许\<日期 >，\<时间 >，和\<偏移 > 要按任何顺序出现的日期和时间的字符串表示形式中的元素。  
  
 `format`参数是一个包含单一的标准格式说明符或一个或多个自定义格式说明符用于定义所需的模式字符串`input`参数。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果`format`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数。 同样适用于的确切格式`input`，如果`format`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含未指定的内部空白`format`。 额外的空白区域日期和时间组件之间以及各个组件中可以显示和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包含未指定的尾随空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的前导、 尾随和内部空格`format`。 中未指定的所有多余空白字符`format`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中指定的那样`format`。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|具有不起作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法使用标准和自定义格式说明符，固定区域性和各种<xref:System.Globalization.DateTimeStyles>值来分析日期和时间的多个字符串。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

下面的示例使用的各种<xref:System.Globalization.DateTimeStyles>值来分析应符合的字符串数组[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)。 如示例输出所示，采用正确格式的字符串无法分析如果：

- 它们包含空格和相应<xref:System.Globalization.DateTimeStyles>标志 (如<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>尚未在方法调用中提供。

- 它们包含日期和时间不在范围内的元素。

假定未指定 UTC 偏移量的字符串具有的本地时区偏移量 (在本例中为-07:00) 除非<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>标志在方法调用中提供。 在这种情况下，它们被假定为协调世界时。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
  
或 
<paramref name="styles" /> 参数包含不支持的值。  
  
或 
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 为 <see langword="null" />。  
  
或 
 <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 为空字符串 ("")。  
  
或 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
或 
 <paramref name="format" /> 是一个空字符串。  
  
或 
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage">
          <para>在中[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，则<see cref="Overload:System.DateTimeOffset.ParseExact" />方法会抛出<see cref="T:System.FormatException" />如果要分析的字符串包含的小时组件和 AM/PM 指示符不在协议中的。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的期望格式。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析的日期的任何一种分配到的模式匹配的字符串表示形式`formats`参数。 如果`input`字符串不与任何定义的变体匹配这些模式的任一`styles`参数，该方法将引发<xref:System.FormatException>。 除了比较`input`到多个格式设置模式，此重载的行为与完全相同<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `formats`参数是一个字符串数组，其元素包含一个单一的标准格式说明符或一个或多个自定义格式说明符用于定义的可能模式的`input`参数。 当调用该方法时，`input`必须与其中一种模式相匹配。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的匹配的元素`formats`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用`formats`的此重载来指定多个格式参数可以帮助减少很多用户在输入日期和时间时遇到的错误。 具体而言，定义多个输入的模式的功能使应用程序能够处理日期和时间的表示形式，可以包括或缺少几个月、 天、 小时、 分钟和秒为单位中的前导零。 该示例提供这样的一个示例。  
  
 如果中的匹配的元素`formats`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果中的匹配的元素`formats`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果中的匹配的元素`formats`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数。 同样适用于的确切格式`input`，如果匹配的元素的`formats`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含未指定的内部空白`format`。 额外的空白区域可以显示日期和时间组件之间以及各个组件 （除偏移量），内部和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包含未指定的尾随空格`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的前导、 尾随和内部空格`formats`。 未在中的匹配元素中指定的所有多余空白字符`formats`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中的特定元素指定的那样`formats`以便匹配。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|具有不起作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例定义了多个输入的格式的日期和时间和偏移量的值的字符串表示形式，然后将传递到用户输入的字符串<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
  
或 
 <paramref name="styles" /> 包含不支持的值。  
  
或 
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> 为空字符串 ("")。  
  
或 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
或 
<paramref name="formats" /> 的元素均不包含有效的格式说明符。  
  
或 
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage">
          <para>在中[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，则<see cref="Overload:System.DateTimeOffset.ParseExact" />方法会抛出<see cref="T:System.FormatException" />如果要分析的字符串包含的小时组件和 AM/PM 指示符不在协议中的。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时钟时间的秒组成部分。</summary>
        <value>
          <see cref="T:System.DateTimeOffset" /> 对象的秒组成部分，以 0 到 59 之间的一个整数值来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的第二个分量<xref:System.DateTimeOffset.ToString%2A>方法与"s"或"ss"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的第二个组件<xref:System.DateTimeOffset>三种不同方式的对象：  
  
-   通过检索的值<xref:System.DateTimeOffset.Second%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法与"s"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"ss"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间或持续时间。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">一个对象，表示要减去的值。</param>
        <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去表示特定日期和时间的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个对象，指定两个 <see cref="T:System.DateTimeOffset" /> 对象之间的间隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将转换同时<xref:System.DateTimeOffset>对象为协调世界时 (UTC)，然后再计算的时间间隔将它们分开。 这会删除任何可能造成的影响不同相对于 UTC 的偏移量的比较。  
  
> [!NOTE]
>  对于支持自定义的运算符的语言，还可以通过使用减法运算符执行日期和时间相减。 有关详细信息，请参阅<xref:System.DateTimeOffset.op_Subtraction%2A>方法。  
  
 因为任一当前<xref:System.DateTimeOffset>对象也不`value`参数表示的日期和时间以特定时区，<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>方法不考虑特定时区的调整规则的日期和时间相减时。  
  
   
  
## Examples  
 下面的示例演示使用减法<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">待减去的时间间隔。</param>
        <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间间隔。</summary>
        <returns>一个对象，它等于当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.DateTimeOffset.Subtract%2A>方法以减去相应的多个类型的单个操作的时间间隔 （天、 小时、 分钟、 秒或毫秒为单位）。 其行为等同于<xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29>方法，后者定义减法运算符。 <xref:System.DateTimeOffset>结构还支持专用的加法 (如<xref:System.DateTimeOffset.AddDays%2A>， <xref:System.DateTimeOffset.AddHours%2A>，和<xref:System.DateTimeOffset.AddMinutes%2A>)，可通过将负值分配到方法参数执行减法。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值通过添加`timeSpan`为其日期和时间。  
  
 <xref:System.DateTimeOffset.Subtract%2A>方法不会影响的值<xref:System.DateTimeOffset>对象的<xref:System.DateTimeOffset.Offset%2A>属性。 返回<xref:System.DateTimeOffset>对象具有与原始对象相同的偏移量。  
  
 因为当前<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29>方法不考虑特定时区的调整规则时执行减法运算。  
  
   
  
## Examples  
 下面的示例演示使用减法<xref:System.DateTimeOffset.Subtract%2A>方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值与相同类型的另一个对象进行比较。</summary>
        <returns>一个 32 位带符号整数，它指示当前的 <see cref="T:System.DateTimeOffset" /> 对象是小于、等于还是大于 <paramref name="obj" />。 此方法的返回值的说明如下： 
 <list type="table"><listheader><term> 返回值 
 </term><description> 描述 
 </description></listheader><item><term> 小于零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象小于（早于）<paramref name="obj" />。  
  
 </description></item><item><term> 零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="obj" /> 相等（表示同一时间点）。  
  
 </description></item><item><term> 大于零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象大于（晚于）<paramref name="obj" />。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
        <summary>在对象的反序列化完成时运行。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的对象。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用序列化当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的数据来填充 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 参数为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取计时周期数，此计时周期数表示时钟时间中当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
        <value>
          <see cref="T:System.DateTimeOffset" /> 对象的时钟时间中的计时周期数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 值<xref:System.DateTimeOffset.Ticks%2A>属性表示 0001 年 1 月 1 日凌晨 12:00:00 午夜起经过的 100 纳秒间隔数 (的值<xref:System.DateTimeOffset.MinValue>)。 它不包括将闰秒所添加的计时周期数。 一纳秒等于第二个; 的一个第 10 亿用户在一秒内有 10 万个计时周期数。 值<xref:System.DateTimeOffset.Ticks%2A>属性介于`DateTimeOffset.MinValue.Ticks`到`DateTimeOffset.MaxValue.Ticks`。  
  
 可以将分配到的计时周期数<xref:System.DateTimeOffset>对象使用<xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29>构造函数重载。  
  
   
  
## Examples  
 下面的示例初始化<xref:System.DateTimeOffset>对象通过在 2008 年 7 月 1 日的日期中估计的计时周期数来 1:23:07。 然后，显示的日期和该日期表示到控制台的计时周期数。  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.DateTimeOffset" /> 对象的日时。</summary>
        <value>表示当前日期自午夜以来的时间间隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A>属性返回的时间部分<xref:System.DateTimeOffset>中的窗体对象<xref:System.TimeSpan>对象。 它相当于<xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType>属性。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.TimeOfDay%2A>属性来提取时间并将其显示到控制台。  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为 Windows 文件时间。</summary>
        <returns>用 Windows 文件时间来表示的当前 <see cref="T:System.DateTimeOffset" /> 对象的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是 64 位值，它表示午夜 12:00，公元 1601 年 1 月 1 日起经过的 100 纳秒间隔数 (C.E.)协调世界时 (UTC)。 Windows 使用的文件时间记录时应用程序创建、 访问，或写入文件。  
  
 <xref:System.DateTimeOffset.ToFileTime%2A>方法将为当前<xref:System.DateTimeOffset>对象的日期和时间转换为 UTC 之前它执行的转换。 换而言之，调用<xref:System.DateTimeOffset.ToFileTime%2A>方法等效于下面的方法调用：  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时 (UTC) 公元 1601 年 1 月 1 日午夜之前的日期和时间 协调世界时 (UTC)。</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为表示本地时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>一个对象，表示当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间，已转换为本地时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行转换为本地时间，该方法首先将当前<xref:System.DateTimeOffset>对象的日期和时间为协调世界时 (UTC) 通过减去从时间偏移量。 它然后将转换的 UTC 日期和时间为本地时间通过添加本地时区偏移量。 在执行此操作，需要本地时区的任何调整规则的帐户。  
  
 这两个值的当前<xref:System.DateTimeOffset>对象和的值<xref:System.DateTimeOffset>方法调用返回的对象表示相同的点的时间。 也就是说，如果同时传递给<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法，该方法将返回`true`。  
  
 如果转换会导致不在范围内的时间<xref:System.DateTimeOffset>类型，<xref:System.DateTimeOffset.ToLocalTime%2A>方法将返回<xref:System.DateTimeOffset>对象，它具有的日期和时间设置为<xref:System.DateTimeOffset.MaxValue>或<xref:System.DateTimeOffset.MinValue>和偏移量设置为本地时区偏移量。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ToLocalTime%2A>方法将<xref:System.DateTimeOffset>为太平洋标准时区中的本地时间的值。 它还阐释了对本地时区的调整规则的方法的支持。  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">
          <see cref="T:System.DateTimeOffset" /> 值所转换成的偏移量。</param>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为偏移量值所指定的日期和时间。</summary>
        <returns>一个对象，它等于原始的 <see cref="T:System.DateTimeOffset" /> 对象（也就是说，它们的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法返回的时间点相同），但其 <see cref="P:System.DateTimeOffset.Offset" /> 属性设置为 <paramref name="offset" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A>方法是调用的替代方法<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。 它可以是可用于执行从一个时区的简单转换到另一个时区的偏移量从协调世界时 (UTC) 已知时。 但是，因为既不原始<xref:System.DateTimeOffset>对象，也不新<xref:System.DateTimeOffset>方法调用返回的对象明确与特定时区，该方法不适用于任何时区调整规则在转换中的。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.ToOffset%2A>方法将转换<xref:System.DateTimeOffset>对象传递给<xref:System.DateTimeOffset>对象具有不同的偏移量。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">所生成的 <see cref="T:System.DateTimeOffset" /> 对象的值 <see cref="P:System.DateTimeOffset.DateTime" /> 值早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
或 
所生成的 <see cref="T:System.DateTimeOffset" /> 对象的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 小于 -14 小时。  
  
或 
 <paramref name="offset" /> 大于 14 小时。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
        <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象的字符串表示形式，并在字符串末尾追加了偏移量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的返回值是相同的<xref:System.DateTime.ToString?displayProperty=nameWithType>方法，但它包含空格跟在字符串末尾追加了偏移量。 换而言之，它还设置使用短日期模式，长时间模式的输出格式和`zzz`自定义格式字符串，且从上一个元素由空格分隔每个元素。 例如，如果<xref:System.DateTime.ToString?displayProperty=nameWithType>返回的值为 2008 年 1 月 12 日下午 6:15:50，<xref:System.DateTimeOffset.ToString>返回的值为 2008 年 1 月 12 日下午 6:15:50-08:00 的时间是八个小时后协调世界时 (UTC)。  
  
 此方法使用派生自当前区域性的格式设置信息。 有关详情，请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 另一个重载<xref:System.DateTimeOffset.ToString%2A>方法使您能够指定的区域性的格式设置的使用，并定义输出模式的<xref:System.DateTimeOffset>值。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.ToString>方法，并显示其输出当前区域性为 en 的系统上-我们。  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString" />方法返回的日期和时间的字符串表示形式中使用当前区域性的日历。 如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更高版本比<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。 下面的示例进行了这方面的演示。 它会尝试设置的范围之外的日期格式<see cref="T:System.Globalization.HijriCalendar" />类时的当前区域性为阿拉伯语 （叙利亚）。  
  
[！ 代码 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [！ 代码 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
        <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <paramref name="formatProvider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的返回值等同于它的等效<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法，但它包含空格跟在字符串末尾追加了偏移量。 换而言之，它还设置使用短日期模式，长时间模式的输出格式和`zzz`自定义格式字符串，且从上一个元素由空格分隔每个元素。  
  
 这三个元素的格式定义由`formatProvider`参数。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>对象，表示其格式设置约定应用于返回的字符串的区域性。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义返回的字符串的格式设置。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatProvider`是`null`，则<xref:System.Globalization.DateTimeFormatInfo>使用当前区域性关联的对象 (请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 下面的示例显示<xref:System.DateTimeOffset>对象使用<xref:System.Globalization.CultureInfo>表示固定区域性，以及四个其他区域性的对象。  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="formatProvider" /> 所用日历支持的日期范围。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />方法返回的日期和时间的字符串表示形式中使用代表的区域性的日历<paramref name="formatProvider" />参数。 由定义其日历<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />属性。 如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更高版本比<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。 下面的示例进行了这方面的演示。 它会尝试设置的范围之外的日期格式<see cref="T:System.Globalization.JapaneseCalendar" />类。  
  
[！ 代码 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [！ 代码 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">一个格式字符串。</param>
        <summary>使用指定的格式将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <paramref name="format" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`参数应包含单个格式说明符 (请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自定义格式模式 (请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md))，它定义返回的字符串的格式。 如果`format`是 null 或为空字符串 ("")，则<xref:System.DateTimeOffset>值使用默认格式的输出。  
  
 下表显示了某些格式说明符与一起使用时的确切操作<xref:System.DateTimeOffset>，从与一起使用时其行为方面与它不同<xref:System.DateTime>。  
  
|现有的格式说明符|新行为|  
|-------------------------------|------------------|  
|“K”|设计往返日期和时间。 使用<xref:System.DateTimeOffset>，映射到"zzz"（偏移量始终显示为带有小时和分钟）。 请注意，"K"自定义格式说明符;它不能显示为单个字符`format`。|  
|“U”|不支持。|  
|"r"|将转换<xref:System.DateTimeOffset>对象为协调世界时 (UTC)，并输出使用自定义格式字符串`ddd, dd MMM yyyy HH:mm:ss GMT`。|  
|“u”|将转换<xref:System.DateTimeOffset>UTC 到对象并将其使用的格式输出`yyyy-MM-dd HH:mm:ssZ`。|  
  
 其余的标准日期和时间格式说明符的行为相同，但有<xref:System.DateTimeOffset.ToString%28System.String%29>方法与使用<xref:System.DateTime.ToString%2A>方法。  
  
 此方法使用派生自当前区域性的格式设置信息。 有关详情，请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>。  
  
   
  
## Examples  
 下面的示例显示<xref:System.DateTimeOffset>在控制台中使用的每个标准日期和时间格式说明符的对象。 使用 en 格式化输出的区域性。  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 的长度为 1，它不属于为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符字符。  
  
或 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.String)" />方法返回的日期和时间的字符串表示形式中使用当前区域性的日历。 如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更高版本比<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。 下面的示例进行了这方面的演示。 它会尝试设置的范围之外的日期格式<see cref="T:System.Globalization.HebrewCalendar" />类时的当前区域性是希伯来语 （以色列）。  
  
[！ 代码 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [！ 代码 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">一个格式字符串。</param>
        <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
        <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`参数应包含单个格式说明符 (请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自定义格式模式 (请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). 如果`format`是 null 或为空字符串 ("")，则<xref:System.DateTimeOffset>对象使用默认格式的输出。  
  
 下表显示了某些格式说明符与一起使用时的确切操作<xref:System.DateTimeOffset>，从与一起使用时其行为方面与它不同<xref:System.DateTime>。  
  
|现有的格式说明符|新行为|  
|-------------------------------|------------------|  
|“K”|设计往返日期和时间。 使用<xref:System.DateTimeOffset>，映射到"zzz"（偏移量始终显示为带有小时和分钟）。 请注意，"K"自定义格式说明符;它不能显示为单个字符`format`。|  
|“U”|不支持。|  
|"r"|将转换<xref:System.DateTimeOffset>对象为协调世界时 (UTC)，并输出使用自定义格式字符串`ddd, dd MMM yyyy HH:mm:ss GMT`。|  
|“u”|将转换<xref:System.DateTimeOffset>为 UTC 值并将其使用的格式输出`yyyy-MM-dd HH:mm:ssZ`。|  
  
 其余的标准日期和时间格式说明符的行为相同，但有<xref:System.DateTimeOffset.ToString%28System.String%29>方法与使用<xref:System.DateTime.ToString%2A>方法。  
  
 对应于标准格式说明符，以及符号和日期和时间组件的名称模式的定义由`formatProvider`参数。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>对象，表示的格式设置中使用的区域性`input`。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatProvider`是`null`，则<xref:System.Globalization.DateTimeFormatInfo>使用当前区域性关联的对象 (请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29>方法来显示<xref:System.DateTimeOffset>对象的多个不同的区域性，使用自定义格式字符串。  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 的长度为 1，它不属于为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符字符。  
  
或 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="formatProvider" /> 所用日历支持的日期范围。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />方法返回的日期和时间的字符串表示形式中使用的日历<paramref name="formatProvider" />参数。 由定义其日历<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />属性。 如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更高版本比<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。 下面的示例进行了这方面的演示。 它会尝试设置的范围之外的日期格式<see cref="T:System.Globalization.UmAlQuraCalendar" />类。  
  
[！ 代码 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [！ 代码 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">示例：.NET Framework 4 格式设置实用工具</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为一个表示协调世界时 (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个对象，它表示转换为协调世界时 (UTC) 的当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回<xref:System.DateTimeOffset>对象，其<xref:System.DateTimeOffset.Offset%2A>属性设置为零。  
  
 这两个值的当前<xref:System.DateTimeOffset>对象和的值<xref:System.DateTimeOffset>方法调用返回的对象表示相同的点的时间。 也就是说，如果同时传递给<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法，该方法将返回`true`。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.ToUniversalTime%2A>方法，将本地时间和几个其他时间转换为协调世界时 (UTC)。  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回自 1970-01-01T00:00:00.000Z 起已经过的毫秒数。</summary>
        <returns>自 1970-01-01T00:00:00.000Z 起已经过的毫秒数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 时间表示自 1970 年 1 已过去的秒数-01-01T00:00:00Z (1，1970 年 1 月在 UTC 时间上午 12:00)。 它不会考虑闰秒。 此方法返回毫秒的数的 Unix 时间。  
  
 此方法首先将在其 Unix 时间中返回的毫秒数之前的当前实例转换为 UTC。 对于早于 1970 年的日期和时间值-01-01T00:00:00Z，此方法返回一个负值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回自 1970-01-01T00:00:00.00Z 起已经过的秒数。</summary>
        <returns>自 1970-01-01T00:00:00.00Z 起已经过的秒数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 时间表示自 1970 年 1 已过去的秒数-01-01T00:00:00Z (1，1970 年 1 月在 UTC 时间上午 12:00)。 它不会考虑闰秒。  
  
 此方法首先将返回其 Unix 时间之前的当前实例转换为 UTC。 对于早于 1970 年的日期和时间值-01-01T00:00:00Z，此方法返回一个负值。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.ToUnixTimeSeconds%2A>方法返回的 Unix 时间的值相等的不久之前和不久之后 1970年-01-01T00:00:00Z。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>方法就像<xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType>方法，但它不会引发异常，如果转换失败。 分析具有三个元素，可以按任何顺序出现，并通过空白分隔的字符串。 下表中显示这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移 > 不能单独出现。 它必须提供任意一个协同\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前天。 如果\<日期 > 已存在但其组件包含仅有两个数字的年份，它将转换到值的基础的当前区域性的当前日历中每年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值是 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量。 如果\<偏移量 >，则它可以表示为负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号，否则该方法返回`false`。  
  
 `input`通过使用中的格式设置信息分析字符串<xref:System.Globalization.DateTimeFormatInfo>对象初始化为当前区域性。 若要分析包含指定格式设置不一定对应于当前区域性的字符串，请使用<xref:System.DateTimeOffset.TryParseExact%2A>方法并提供格式说明符。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>方法，以便分析各种日期和时间格式的多个字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">示例：.NET Framework 4 格式设置实用工具</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>尝试将日期和时间的指定字符串表示形式转换为其等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法就像<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，但它不会引发异常，如果转换失败。 此方法分析具有三个元素，可以按任何顺序出现，并通过空白分隔的字符串。 下表中显示这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移 > 不能单独出现。 它必须提供任意一个协同\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前天。 如果\<日期 > 已存在但其组件包含仅有两个数字的年份，它将转换到一年`provider`的值基于参数的当前日历<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值是 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量或<xref:System.TimeSpan.Zero>如果任一<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>或<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>中指定值`styles`。 如果\<偏移量 >，则它可以表示为负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号，否则该方法返回`false`。  
  
 `input`通过使用特定于区域性的格式设置信息中分析字符串<xref:System.Globalization.DateTimeFormatInfo>提供的对象`formatProvider`参数。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>对象，表示的格式设置中使用的区域性`input`。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 此外，可以由前导或尾随空格分隔每个元素和\<日期 > 和\<时间 > 组件可以包括内部的空白区域 （如 6: 00:00)。 仅\<偏移 > 组件不能包含内部空格。  
  
 如果`provider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 使用中的正或负号\<偏移 > 必须为 + 或-。 它不能由<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>的属性<xref:System.Globalization.NumberFormatInfo>返回的对象`formatprovider`参数的<xref:System.Globalization.CultureInfo.NumberFormat%2A>属性。  
  
 以下成员<xref:System.Globalization.DateTimeStyles>枚举支持：  
  
|DateTimeStyles 成员|注释|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析字符串由`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用返回的对象<xref:System.DateTimeOffset.ToUniversalTime>方法。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但将忽略此值。 中允许内部空格\<日期 > 和\<时间 > 组件。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但将忽略此值。 前面已分析的字符串中每个组件允许前导空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但将忽略此值。 尾随的空白区域允许分析的字符串中每个组件的前面。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|这是默认行为。 不能重写通过提供更具限制性<xref:System.Globalization.DateTimeStyles>枚举值，例如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|表明，如果`input`参数缺少\<偏移量 > 元素中，应提供的本地时区偏移量。 这是默认行为的<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|表明，如果`input`参数缺少\<偏移量 > 元素中，应提供的 UTC 偏移量 (00:00)。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但此值将被忽略，并且不起作用。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|因为<xref:System.DateTimeOffset>结构不包括`Kind`属性，此值不起作用。|  
  
 仅<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>值不受支持。 <xref:System.ArgumentException>如果此值包含在引发`styles`参数。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法与各种<xref:System.Globalization.DateTimeStyles>要分析各种日期和时间格式的一些字符串值。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
或 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
或 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间表示形式的字符范围。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果出现以下情况，转换将失败</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将字符范围中的日期和时间的表示形式转换为其等效的 <see cref="System.DateTimeOffset" />。 日期和时间表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

此重载就像<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法，不同之处在于此方法不会引发异常，如果转换失败。 它所分析的日期和时间必须与指定的模式完全匹配表示`format`参数。 如果`input`不匹配此模式下，使用一些可能的变体中定义的空白`styles`参数，在分析操作失败，并且该方法将返回`false`。  
  
`format`参数是一个包含单一的标准格式说明符或一个或多个自定义格式说明符用于定义所需的模式的字符范围`input`。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，在分析操作将失败，该方法将返回`false`。  
  
如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果`format`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数。 这同样适用的精确模式`input`如果`format`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义符号和中允许使用标准格式`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析日期和时间的表示形式，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`包括内部的空白区域，未指定的格式。 额外的空白区域可以显示日期和时间组件之间以及各个组件，以外偏移量，内部和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包含未指定的尾随空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的前导、 尾随和内部空格`format`。 中未指定的所有多余空白字符`format`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中指定的那样`format`。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|没有任何作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> 不受支持。  
-或- <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
此方法分析的日期的任何一种分配到的模式匹配的字符串表示形式`formats`数组。 如果`input`与定义的任何变体这些模式的任何一个不匹配`styles`参数，在分析操作失败，并且该方法将返回`false`。 除了比较`input`为包含格式说明符的多个字符串，此重载的行为与完全相同<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法。  
  
 `formats`参数是一个字符串数组，其元素包含一个单一的标准格式说明符或一个或多个自定义格式说明符用于定义的可能模式的`input`。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的匹配的元素`formats`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，分析操作失败，该方法将返回`false`。  
  
> [!IMPORTANT]
>  使用`formats`的此重载来指定多个格式参数可以帮助减少很多用户在输入日期和时间时遇到的错误。 具体而言，定义多个输入的模式的功能使应用程序能够处理日期和时间的表示形式，可以包括或缺少几个月、 天、 小时、 分钟和秒为单位中的前导零。 该示例提供这样的一个示例。  
  
 如果中的匹配的元素`formats`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果中的匹配的元素`formats`需要输入包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果中的匹配的元素`formats`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
 特定的日期和时间中使用的符号`input`由定义`formatProvider`参数。 这同样适用的精确模式`input`如果匹配的元素的`formats`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含在元素未指定的内部空白`formats`。 额外的空白区域日期和时间组件之间以及各个组件 （除偏移量） 中可以显示和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含前导空格的元素中未指定`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包括尾随空格的元素中未指定`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的元素中的前导、 尾随和内部空格`formats`。 未在中的匹配元素中指定的所有多余空白字符`formats`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中的特定元素中指定的那样`formats`以便成功匹配。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|具有不起作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> 不受支持。  
-或- <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。 要指定的一个典型值为 <see langword="None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含 <paramref name="format" /> 和 <c>provider</c> 所定义的所需格式的日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法就像<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，不同之处在于此方法不会引发异常，如果转换失败。 它会分析日期和时间必须与指定的模式完全匹配的字符串表示形式`format`参数。 如果`input`字符串不匹配此模式下，使用一些可能的变体中定义的空白`styles`参数，在分析操作失败，并且该方法将返回`false`。  
  
 `format`参数是一个包含单一的标准格式说明符或一个或多个自定义格式说明符用于定义所需的模式字符串`input`。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，在分析操作将失败，该方法将返回`false`。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果`format`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数。 这同样适用的精确模式`input`如果`format`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义符号和中允许使用标准格式`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`包括内部的空白区域，未指定的格式。 额外的空白区域可以显示日期和时间组件之间以及各个组件，以外偏移量，内部和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包含未指定的尾随空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的前导、 尾随和内部空格`format`。 中未指定的所有多余空白字符`format`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中指定的那样`format`。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|没有任何作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
## Examples 

 下面的示例使用<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法使用标准和自定义格式说明符，固定区域性和各种<xref:System.Globalization.DateTimeStyles>值来分析日期和时间的多个字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

下面的示例使用的各种<xref:System.Globalization.DateTimeStyles>值来分析应符合的字符串数组[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)。 如示例输出所示，采用正确格式的字符串无法分析如果：

- 它们包含空格和相应<xref:System.Globalization.DateTimeStyles>标志 (如<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>尚未在方法调用中提供。

- 它们包含日期和时间不在范围内的元素。

假定未指定 UTC 偏移量的字符串具有的本地时区偏移量 (在本例中为-07:00，这反映了太平洋夏令时时区的偏移量) 除非<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>标志在方法调用中提供。 在这种情况下，它们被假定为协调世界时。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
或 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
或 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <block subset="none" type="usage">
          <para>在中[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，则<see cref="Overload:System.DateTimeOffset.TryParseExact" />返回<see langword="false" />如果要分析的字符串包含的小时组件和 AM/PM 指示符不在协议中的。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formats">一个用于定义 <paramref name="input" /> 的所需格式的数组。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。 要指定的一个典型值为 <see langword="None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式，或者不包含 <paramref name="format" /> 所定义的所需格式的日期和时间，或者 <paramref name="formats" /> 为 <see langword="null" />，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法分析的日期的任何一种分配到的模式匹配的字符串表示形式`formats`数组。 如果`input`字符串不匹配定义的任何变体这些模式的任何一个`styles`参数，在分析操作失败，并且该方法将返回`false`。 除了比较`input`为包含格式说明符的多个字符串，此重载的行为与完全相同<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `formats`参数是一个字符串数组，其元素包含一个单一的标准格式说明符或一个或多个自定义格式说明符用于定义的可能模式的`input`。 有关有效的格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的匹配的元素`formats`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，分析操作失败，该方法将返回`false`。  
  
> [!IMPORTANT]
>  使用`formats`的此重载来指定多个格式参数可以帮助减少很多用户在输入日期和时间时遇到的错误。 具体而言，定义多个输入的模式的功能使应用程序能够处理日期和时间的表示形式，可以包括或缺少几个月、 天、 小时、 分钟和秒为单位中的前导零。 该示例提供这样的一个示例。  
  
 如果中的匹配的元素`formats`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配的时间为午夜 (0: 00:00)。 如果中的匹配的元素`formats`需要输入包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象被分配本地系统上的当前日期。 如果中的匹配的元素`formats`不需要`input`包含偏移量，所生成的偏移量<xref:System.DateTimeOffset>对象上的值取决于`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任一值，则使用本地时区的偏移量。  
  
 特定日期和时间的符号和中使用的字符串`input`由定义`formatProvider`参数。 这同样适用的精确模式`input`如果匹配的元素的`formats`是一个标准格式说明符的字符串。 `formatProvider`参数可以是以下之一：  
  
-   一个<xref:System.Globalization.CultureInfo>表示区域性的对象基于所`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回的对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和格式设置`input`。  
  
-   一个<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`，则<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串中指示如何分析而无需显式的偏移量组成部分的字符串，并支持 UTC 转换在分析操作的一部分。 所有成员<xref:System.Globalization.DateTimeStyles>除支持枚举<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`和，如果有必要，将其转换为 UTC。 它相当于分析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法所返回的<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的匹配的元素`formats`不需要`input`包含偏移量的值，则返回的<xref:System.DateTimeOffset>对象都提供了 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含在元素未指定的内部空白`formats`。 额外的空白区域日期和时间组件之间以及各个组件 （除偏移量） 中可以显示和分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含前导空格的元素中未指定`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包括尾随空格的元素中未指定`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定的元素中的前导、 尾随和内部空格`formats`。 未在中的匹配元素中指定的所有多余空白字符`formats`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须出现空白中的特定元素中指定的那样`formats`以便成功匹配。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|具有不起作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例定义了多个输入的格式的日期和时间和偏移量的值的字符串表示形式，然后将传递到用户输入的字符串<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
或 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
或 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <block subset="none" type="usage">
          <para>在中[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，则<see cref="Overload:System.DateTimeOffset.TryParseExact" />返回<see langword="false" />如果要分析的字符串包含的小时组件和 AM/PM 指示符不在协议中的。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A>属性执行双重转换：  
  
-   它会将转换的日期和时间的当前<xref:System.DateTimeOffset>对象为协调世界时 (UTC)。 通过减去的值来执行转换<xref:System.DateTimeOffset.Offset%2A>中的日期和时间的当前属性<xref:System.DateTimeOffset>对象。  
  
-   它将转换<xref:System.DateTimeOffset>值设为<xref:System.DateTime>值。  
  
 <xref:System.DateTime.Kind%2A>所返回的属性<xref:System.DateTimeOffset.DateTime%2A>值设置为<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 检索的值<xref:System.DateTimeOffset.UtcDateTime%2A>属性相当于调用当前<xref:System.DateTimeOffset>对象的`ToUniversalTime.DateTime`属性，不同之处在于<xref:System.DateTime.Kind%2A>后者的属性<xref:System.DateTime>值是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何利用<xref:System.DateTimeOffset.UtcDateTime%2A>属性来显示<xref:System.DateTimeOffset>值和其对应的 UTC 时间。  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</summary>
        <value>一个对象，其日期和时间为当前的协调世界时 (UTC)，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A>属性计算当前通用协调时间 (UTC) 基于本地系统时钟时间，并由本地系统的时区偏移量。  
  
 当前 UTC 时间的毫秒部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 及更高版本、 和 Windows Vista 操作系统上，时钟的分辨率大约为 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例说明了协调世界时 (UTC) 和本地时间之间的关系。  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间的计时周期数。</summary>
        <value>
          <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 中的计时周期数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.DateTimeOffset.UtcTicks%2A>属性表示 0001 年 1 月 1 日凌晨 12:00:00 午夜起经过的 100 纳秒间隔数 (的值<xref:System.DateTimeOffset.MinValue>)。 它不包括将闰秒所添加的计时周期数。 一纳秒等于第二个; 的一个第 10 亿用户在一秒内有 10 万个计时周期数。 值<xref:System.DateTimeOffset.UtcTicks%2A>属性介于`DateTimeOffset.MinValue.Ticks`到`DateTimeOffset.MaxValue.Ticks`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的年份组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的年份组成部分，以 0 到 9999 之间的一个整数值来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A>的值不会影响属性<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此外可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的年份部分<xref:System.DateTimeOffset.ToString%2A>方法与"y"、"yy"或"yyyy"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的年份组成部分<xref:System.DateTimeOffset>四个不同的方式的值：  
  
-   通过检索的值<xref:System.DateTimeOffset.Year%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法与"y"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"yy"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法带"yyyy"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>