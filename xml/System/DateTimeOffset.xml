<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0121851dad511751c9beb499045b55b619cc57c7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433719" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset>结构包括<xref:System.DateTime>值以及<xref:System.DateTimeOffset.Offset%2A>属性，用于定义当前之间的差异<xref:System.DateTimeOffset>实例的日期和时间与协调世界时 (UTC)。 因为它完全定义的日期和时间相对于 UTC，<xref:System.DateTimeOffset>结构不包括`Kind`成员，作为<xref:System.DateTime>结构。 它表示日期和时间值采用 UTC 范围从 12:00:00 年 1 月 1 日午夜 0001 公元 （基督纪元） 到 11:59:59 PM，公元 9999 年 12 月 31 日 (C.E.)。  
  
 时间部分<xref:System.DateTimeOffset>值的单位为 100 毫微秒为单位调用个时钟周期，和特定日期是自午夜 12:00 到公元 0001 年 1 月 1 日以来的计时周期数 (C.E.)在<xref:System.Globalization.GregorianCalendar>日历。 A<xref:System.DateTimeOffset>值始终表示中的上下文显式或默认日历。 中的刻度总数不包括归因于闰秒的刻度。  
  
> [!NOTE]
>  如果你正在使用计时周期值是否想要转换为其他时间间隔，如分钟或秒，应使用<xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>，或<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>常量，以执行转换。 例如，若要添加的秒数表示通过指定到的计时周期数<xref:System.DateTimeOffset.Second%2A>组件的<xref:System.DateTimeOffset>值，你可以使用表达式`dateValue.Second + nTicks/Timespan.TicksPerSecond`。  
  
 尽管<xref:System.DateTimeOffset>值包含一个偏移量，它不是完全时区感知数据结构。 一个特征的时区相对于 UTC 的偏移量时，它并不明确地标识一个时区。 不仅执行多个时区具有相同的偏移量从 UTC，但如果它遵循夏令时的单个时区偏移量更改。 这意味着，只要<xref:System.DateTimeOffset>值与其时区不再关联时，它可以不再明确链接回其原始的时区。  
  
 因为<xref:System.DateTimeOffset>是一种结构，<xref:System.DateTimeOffset>对象已声明但从未初始化为其成员字段的每个包含默认值。 这意味着，其<xref:System.DateTimeOffset.DateTime%2A>属性设置为<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>及其<xref:System.DateTimeOffset.Offset%2A>属性设置为<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
 你可以创建一个新<xref:System.DateTimeOffset>值通过调用其构造函数，它类似于重载构造函数的重载任一<xref:System.DateTime>结构。 你还可以创建一个新<xref:System.DateTimeOffset>为其分配的值<xref:System.DateTime>值。 这是隐式转换;不需要强制转换运算符 （在 C# 中) 或调用转换方法 （在 Visual Basic 中)。 也可以初始化<xref:System.DateTimeOffset>值的字符串表示形式的日期和时间通过调用静态字符串分析方法，包括多种<xref:System.DateTimeOffset.Parse%2A>， <xref:System.DateTimeOffset.ParseExact%2A>， <xref:System.DateTimeOffset.TryParse%2A>，和<xref:System.DateTimeOffset.TryParseExact%2A>。  
  
 成员<xref:System.DateTimeOffset>结构提供以下几个方面的功能：  
  
-   日期和时间运算。  
  
     你可以添加或减去日期或从特定的时间间隔<xref:System.DateTimeOffset>值。 使用算术运算<xref:System.DateTimeOffset>值，与具有不同<xref:System.DateTime>值，调整的时间偏移量存在差异时返回结果。 例如，下面的代码使用<xref:System.DateTime>变量要减去的当前的 UTC 时间从当前的本地时间。 该代码将使用<xref:System.DateTimeOffset>变量以执行相同的操作。 与减法<xref:System.DateTime>值返回 UTC，从本地时区的差异时与减法<xref:System.DateTimeOffset>值返回<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   类型转换操作。  
  
     你可以将转换<xref:System.DateTimeOffset>值复制到<xref:System.DateTimeOffset.DateTime%2A>值，反之亦然。  
  
-   时间操作和提取操作。  
  
     你可以提取日期或时间<xref:System.DateTimeOffset>值。 您还可以检索特定的值<xref:System.DateTimeOffset>组件，如其年份或月份。  
  
-   日期和时间转换。  
  
     你可以将任何转换<xref:System.DateTimeOffset>到另一个的值<xref:System.DateTimeOffset>表示另一时区中的时间相同点的值。 但是，仅在的情况下应用时区的调整规则<xref:System.DateTimeOffset.ToLocalTime%2A>方法，后者将转换<xref:System.DateTimeOffset>本地系统区域中的为日期和时间值。  
  
-   日期和时间的比较。  
  
     你可以确定是否有任何特定<xref:System.DateTimeOffset>值是早于、 等于还是晚于另一个<xref:System.DateTimeOffset>值。 进行比较之前，所有值都会都转换为 UTC。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的行为取决于值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性`dateTime`参数：  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、<xref:System.DateTimeOffset.DateTime%2A>的新实例的属性设置为等于`dateTime`，和<xref:System.DateTimeOffset.Offset%2A>属性设置为等于<xref:System.TimeSpan.Zero>。  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、<xref:System.DateTimeOffset.DateTime%2A>的新实例的属性设置为等于`dateTime`，和<xref:System.DateTimeOffset.Offset%2A>属性被设置为本地系统的当前时区的偏移量。  
  
   
  
## Examples  
 下面的示例演示如何的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性`dateTime`参数会影响此构造函数返回的日期和时间值。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的行为部分取决于值<xref:System.DateTime.Kind%2A>属性`dateTime`参数：  
  
-   如果值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>的值`offset`参数必须为 0 或<xref:System.ArgumentException>引发。  
  
-   如果值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>的值`offset`参数必须为该特定日期等于本地时区的偏移量从协调世界时 (UTC) 或<xref:System.ArgumentException>引发。  
  
-   如果值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、`offset`参数可以具有任何有效的值。  
  
   
  
## Examples  
 下面的示例演示如何初始化<xref:System.DateTimeOffset>使用日期和时间以及本地时区时提前不知道该时区偏移量的对象。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.  -or-  <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.  -or-  <paramref name="offset" /> is not specified in whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  -or-  <see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，尝试调用<xref:System.DateTimeOffset.%23ctor%2A>构造函数实例化<xref:System.DateTimeOffset>值与本地时间和偏移量以外，本地时间的区域引发<xref:System.ArgumentException>。 你可以使用此重载的<xref:System.DateTimeOffset>构造函数，若要解决此限制。 下面的示例使用本地时间的计时周期数来实例化<xref:System.DateTimeOffset>其偏移量不一定表示的本地时间的值：  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 下面的示例初始化<xref:System.DateTimeOffset>对象在相对-5 的偏移量的任意日期 （在此情况下，2007 年 7 月 16 日下午 1:32） 中使用的刻度数。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> is not specified in whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.  -or-  <paramref name="ticks" /> is less than <see langword="DateTimeOffset.MinValue.Ticks" /> or greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.  -or-  <paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将解释`year`， `month`，和`day`作为年、 月和公历日历中的天。 若要实例化<xref:System.DateTimeOffset>通过使用另一个日历，调用中的年、 月和日值<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>构造函数。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.DateTimeOffset>通过使用对象<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>构造函数重载。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than one or greater than 9999.  -or-  <paramref name="month" /> is less than one or greater than 12.  -or-  <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than zero or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  -or-  The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将解释`year`， `month`，和`day`作为年、 月和公历日历中的天。 若要实例化<xref:System.DateTimeOffset>通过使用另一个日历，调用中的年、 月和日值<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>构造函数。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.DateTimeOffset>通过使用对象<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>构造函数重载。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than one or greater than 9999.  -or-  <paramref name="month" /> is less than one or greater than 12.  -or-  <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than zero or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.  -or-  <paramref name="offset" /> is less than -14 or greater than 14.  -or-  The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`， `month`， `day`， `hour`， `minute`， `second`，和`millisecond`所有参数都反映指定的日历表示的值`calendar`参数。 如果这些值构成的日期和时间，无法表示通过使用此日历，将引发异常。  
  
   
  
## Examples  
 下面的示例使用这两者的实例<xref:System.Globalization.HebrewCalendar>类和<xref:System.Globalization.HijriCalendar>要实例化类<xref:System.DateTimeOffset>值。 然后向控制台中使用各自的日历和公历日历显示日期。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> cannot be <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's <see langword="MinSupportedDateTime.Year" /> or greater than <see langword="MaxSupportedDateTime.Year" />.  -or-  <paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than zero or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.  -or-  <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  -or-  The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.  -or-  The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified time interval to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.DateTimeOffset.Add%2A>方法在单个操作中添加多个一种类型的时间间隔 （天、 小时、 分钟、 秒或毫秒为单位）。 此方法的行为等同于加法运算符。 <xref:System.DateTimeOffset>结构还支持专用的加法 (如<xref:System.DateTimeOffset.AddDays%2A>， <xref:System.DateTimeOffset.AddHours%2A>，和<xref:System.DateTimeOffset.AddMinutes%2A>) 为每个时间间隔。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`timeSpan`为其日期和时间。  
  
 <xref:System.DateTimeOffset.Add%2A>方法不会影响的当前值<xref:System.DateTimeOffset>对象的<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.Add%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 如果`timeSpan`参数是`null`，此方法返回的原始值<xref:System.DateTimeOffset>对象保持不变。  
  
   
  
## Examples  
 下面的示例创建的数组<xref:System.TimeSpan>表示目标之间的航班时间的对象。 <xref:System.DateTimeOffset.Add%2A>方法然后将添加到这些时段<xref:System.DateTimeOffset>表示航班的初始起飞时间的对象。 结果在每个目标反映计划的到达时间。  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分`days`参数是一天的小数部分。 例如，4.5 相当于 4 天 12 小时，0 分钟，0 秒，0 毫秒。 `days`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`days`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddDays%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 小于一天的时间间隔转换为一小部分可能涉及精度损失。 如果这有问题，则可以使用<xref:System.DateTimeOffset.Add%2A>方法，它使你可以在单个方法调用中指定的时间间隔的多个类型并无需转换为一天的小数部分的时间间隔。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.AddDays%2A>方法列出星期一，2008 年 3 月中的工作星期开始的日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分`hours`参数是一小时的小数部分。 例如，4.5 相当于 4 小时，30 分钟，0 秒，0 毫秒。 `hours`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`hours`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddHours%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 转换为一小部分的少于一小时的时间间隔可能会丢失精度。 （例如，是一分钟 0.01666 小时。）如果这有问题，则可以使用<xref:System.DateTimeOffset.Add%2A>方法，它使你可以在单个方法调用中指定的时间间隔的多个类型并无需转换为一小时的小数部分的时间间隔。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.AddHours%2A>方法若要列出的起始时间的工作会转而特定周具有两个八小时将在每天的办公室。  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分`milliseconds`参数是以毫秒为单位的小数部分。 例如，4.5 相当于 4 毫秒，5000 个时钟周期，其中 1 毫秒等于 10000 个计时周期。 但是，`milliseconds`舍入为最接近的毫秒;.5 的或更高版本的所有值将向上舍都入。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`milliseconds`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddMilliseconds%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分`minutes`参数是一分钟的小数部分。 例如，4.5 相当于 4 分钟，30 秒，0 毫秒。 `minutes`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`minutes`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddMinutes%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 转换为一小部分的不超过 1 分钟的时间间隔可能会丢失精度。 （例如，一个第二个是时间的 0.01666 一分钟。）如果这有问题，则可以使用<xref:System.DateTimeOffset.Add%2A>方法，它使你可以在单个方法调用中指定的时间间隔的多个类型并无需转换为 1 分钟的小数部分的时间间隔。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of whole months. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与大多数为日期和时间值，将一次间隔单位 （如分钟数或天数） 的其他方法不同<xref:System.DateTimeOffset.AddMonths%2A>不会启用你添加的每个月的小数部分。 若要添加包含除了个月截止到其他时间单位的时间<xref:System.DateTimeOffset>对象，请使用<xref:System.DateTimeOffset.Add%2A>方法。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`months`为其日期和时间。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.AddMonths%2A>方法以显示该 2007 年度每个季度的开始日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分`seconds`参数是一秒的小数部分。 下表所示的一秒的小数部分的值。  
  
|第二个值|等效|  
|------------------|----------------|  
|.1 秒|100 毫秒|  
|.01 秒|10 毫秒|  
|.001 秒|1 毫秒|  
  
 `seconds`参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`minutes`为其日期和时间。  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddSeconds%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 计时周期表示 100 纳秒或一千万分之一的第二个。 因为计时周期是非常小，并且是精确的时间间隔内，任何更大的时间单位可以表示为且不丢失精度的计时周期数。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`minutes`为其日期和时间。  
  
 下表列出在特定时间段内的刻度数。  
  
|时间间隔|计时周期数|  
|-------------------|---------------------|  
|秒|10,000,000|  
|分钟|600,000,000|  
|小时|36,000,000,000|  
|天|864,000,000,000|  
|周|6,048,000,000,000|  
|月份|依赖于该月中的天数。|  
|非闰年|315,360,000,000,000|  
|闰年|316,224,000,000,000|  
  
 因为<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.AddTicks%2A>方法不考虑特定时区的调整规则执行日期和时间运算时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">A number of years. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与大多数为日期和时间值，将一次间隔单位 （如分钟数或天数） 的其他方法不同<xref:System.DateTimeOffset.AddYears%2A>不会启用你添加的每一年的小数部分。 若要添加包含除了年到其他时间单位的时间<xref:System.DateTimeOffset>对象，请使用<xref:System.DateTimeOffset.Add%2A>方法。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`months`为其日期和时间。  
  
   
  
## Examples  
 在美国，驱动程序的许可证无法颁发给人员 16 岁。 下面的示例显示最新的可能日期必须在其生成个人为了获颁从法律上讲驾驶执照。  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">The first object to compare.</param>
        <param name="second">The second object to compare.</param>
        <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
        <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.  
  
 <list type="table"><listheader><term> Return value  </term><description> Meaning  </description></listheader><item><term> Less than zero  </term><description><paramref name="first" /> is earlier than <paramref name="second" />.  </description></item><item><term> Zero  </term><description><paramref name="first" /> is equal to <paramref name="second" />.  </description></item><item><term> Greater than zero  </term><description><paramref name="first" /> is later than <paramref name="second" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较时，该方法将同时`first`和`second`参数为协调世界时 (UTC) 之前在执行比较。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 换而言之，<xref:System.DateTimeOffset.Compare%2A>方法确定两个<xref:System.DateTimeOffset>对象表示的时间的单一点。 它将直接进行比较的既不日期和时间，也不偏移量。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.Compare%2A>方法来比较<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.  
  
 <list type="table"><listheader><term> Return Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.  </description></item><item><term> Zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.  </description></item><item><term> Greater than zero.  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法比较<xref:System.DateTimeOffset>对象通过比较其<xref:System.DateTimeOffset.UtcDateTime%2A>值; 即，它确定是否两个对象表示的时间，单个的点，并指示当前对象是否早于、 晚于，还是相同`other`参数。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.CompareTo%2A>方法来比较<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>A<see cref="T:System.DateTime" />值，该值表示当前的日期部分<see cref="T:System.DateTimeOffset" />对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性中删除的时间组件从任何重要部分<xref:System.DateTimeOffset>对象并返回仅其有意义的日期组件。 例如，如果<xref:System.DateTimeOffset>对象具有的日期和时间值"1/12/07 下午 4:01 + 7:30"，该属性返回<xref:System.DateTime>值"1/12/07 12:00:00 AM"。 <xref:System.DateTime>然后可以使用任何标准或自定义格式说明符来显示仅限于日期显示值。 （请参阅示例部分是为了进行说明。）  
  
 值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性返回<xref:System.DateTime>对象始终是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 若要显示的日期不其时间组成部分的情况下，你可以使用"D"或者"d"格式说明符;有关说明，请参阅示例部分。  
  
   
  
## Examples  
 下面的示例检索的值<xref:System.DateTimeOffset.Date%2A>针对特定日期的属性。 然后会将该值显示在控制台使用某些标准和自定义日期格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 此属性返回的日期和时间部分<xref:System.DateTimeOffset>对象，使其可用于执行<xref:System.DateTimeOffset>到<xref:System.DateTime>转换。 例如，如果<xref:System.DateTimeOffset>对象具有的日期和时间值"1/12/07 下午 4:01 + 7:30"，该属性返回的日期"1/12/07 下午 4:01"。  
  
 值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性返回<xref:System.DateTime>对象是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.DateTime%2A>属性将返回由时间转换<xref:System.DateTimeOffset.Now%2A>和<xref:System.DateTimeOffset.UtcNow%2A>属性设置为<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>日部分中的当前<see cref="T:System.DateTimeOffset" />对象，表示为介于 1 和 31 之间的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的日部分<xref:System.DateTimeOffset.ToString%2A>方法使用"d"或"dd"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的日部分<xref:System.DateTimeOffset>三个不同的方式的对象：  
  
-   通过检索的值的<xref:System.DateTimeOffset.Day%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"d"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法带"dd"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>一个枚举值，该值指示当前的星期几<see cref="T:System.DateTimeOffset" />对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的常量的值<xref:System.DayOfWeek>枚举的范围从<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>到<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>。 如果强制转换为一个整数，其值的范围是从零 (指示<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) 为 6 个 (指示<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 你也可以通过使用"D"格式说明符或"dddd"自定义格式说明符来显示特定日期的星期几名称。 例如：  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 请注意，通过调用返回字符串`ToString`方法<xref:System.DayOfWeek>并未经过本地化; 此属性返回的枚举成员。 若要提取包含当前区域性或特定区域性的星期几名称的字符串，调用<xref:System.DateTimeOffset.ToString%2A>与"dddd"自定义格式说明符的方法。 例如，下面的代码显示日期使用的星期几名称`fr-fr`区域性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 下面的示例显示的年份 2008年的每个月的第一天的星期几名称。  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前年度的天<see cref="T:System.DateTimeOffset" />对象，表示为介于 1 和 366 之间的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether two <see cref="T:System.DateTimeOffset" /> objects are equal, or a <see cref="T:System.DateTimeOffset" /> object is equal to a specified object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将这两者的值<xref:System.DateTimeOffset>对象为协调世界时 (UTC)。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 换而言之，<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法确定两个<xref:System.DateTimeOffset>对象表示的时间的单一点。 它将直接进行比较的既不日期和时间，也不偏移量。 若要确定是否两个<xref:System.DateTimeOffset>对象表示的相同的时间和具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 A<xref:System.DateTimeOffset>对象，并且不`null`被视为可更高版本 （或更高版本） 个是`null`。  
  
 此重载<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法实现<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。 它提供略有更好的性能比<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>重载，因为`other`参数没有要从对象转换。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法来测试<xref:System.DateTimeOffset>对象与当前是否相等<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将这两个当前的值<xref:System.DateTimeOffset>对象和`obj`参数为协调世界时 (UTC)。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 换而言之，<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>方法确定是否当前<xref:System.DateTimeOffset>对象和指定的对象表示一个单点的时间。 它将直接进行比较的既不日期和时间，也不偏移量。 若要确定是否两个<xref:System.DateTimeOffset>对象表示的相同的时间和具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 如果`obj`是`null`，或运行时的类型是否`obj`不<xref:System.DateTimeOffset>，该方法返回`false`。  
  
   
  
## Examples  
 下面的示例指示是否当前<xref:System.DateTimeOffset>对象是否等于其他几个<xref:System.DateTimeOffset>对象，也为空引用为和<xref:System.DateTime>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">The first object to compare.</param>
        <param name="second">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将同时<xref:System.DateTimeOffset>对象为协调世界时 (UTC)。 等效于以下的方法是：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换而言之，<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>方法确定是否两个<xref:System.DateTimeOffset>对象表示的时间的单一点。 它将直接进行比较的既不日期和时间，也不偏移量。 若要确定是否两个<xref:System.DateTimeOffset>对象表示的相同的时间和具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>方法来测试各种对<xref:System.DateTimeOffset>对象是否相等。  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为多个时区具有单个偏移量，返回值`true`不保证的当前和`other`相同的时区中的对象表示时间。  
  
 与不同<xref:System.DateTimeOffset.EqualsExact%2A>方法时，重载<xref:System.DateTimeOffset.Equals%2A>方法确定是否两个则仅<xref:System.DateTimeOffset>值表示的时间的单一点。 它们并未指明两个值具有相同的日期和时间，以及相同的偏移量。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.EqualsExact%2A>方法来比较类似<xref:System.DateTimeOffset>对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time, expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是 64 位值，表示第午夜 12:00 到公元 1601 年 1 月 1 日以来经过的 100 毫微秒隔数 (C.E.)协调世界时 (UTC)。 Windows 使用的文件时间应用程序创建、 访问，或将写入文件时进行记录。  
  
 Windows 文件时间可直接访问通过 Windows API 通过调用`GetFileTime`函数，返回`FILETIME`结构。 单个函数参数是要检索其文件时间信息的文件句柄。 通过调用检索的文件句柄`CreateFile`函数。 `FILETIME`结构的`dwHighDateTime`成员包含的文件时间的四个高序位字节并将其`dwLowDateTime`成员包含四个低序位字节。 下面的示例演示如何检索 Windows 文件时间值并将它们转换为<xref:System.DateTimeOffset>值。  
  
 也可以从创建 Windows 文件时间值<xref:System.DateTime>值通过调用<xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType>和<xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType>方法，并从<xref:System.DateTimeOffset>值通过调用<xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例使用 Windows API 检索写字板可执行文件的 Windows 文件时间。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> is less than zero.  -or-  <paramref name="filetime" /> is greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
        <summary>Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
        <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A>返回的属性值<xref:System.DateTimeOffset>实例是<xref:System.TimeSpan.Zero?displayProperty=nameWithType>，表示协调世界时。 你可以将其转换为特定时区中的时间通过调用<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="milliseconds" /> is less than  -62,135,596,800,000.  -or-  <paramref name="milliseconds" /> is greater than 253,402,300,799,999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
        <summary>Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
        <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A>返回的属性值<xref:System.DateTimeOffset>实例是<xref:System.TimeSpan.Zero?displayProperty=nameWithType>，表示协调世界时。 你可以将其转换为特定时区中的时间通过调用<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="seconds" /> is less than  -62,135,596,800.  -or-  <paramref name="seconds" /> is greater than 253,402,300,799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前的小时部分<see cref="T:System.DateTimeOffset" />对象。 此属性使用 24 小时制；值介于 0 到 23 之间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的小时部分<xref:System.DateTimeOffset.ToString%2A>方法使用"H"或"HH"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的小时部分<xref:System.DateTimeOffset>三个不同的方式的对象：  
  
-   通过检索的值的<xref:System.DateTimeOffset.Hour%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"H"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法与"HH"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>本地日期和时间的当前<see cref="T:System.DateTimeOffset" />对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如有必要，<xref:System.DateTimeOffset.LocalDateTime%2A>属性将转换当前<xref:System.DateTimeOffset>对象的日期和时间为本地系统的日期和时间。 转换是一个包含两个步骤操作：  
  
1.  该属性将当前<xref:System.DateTimeOffset>对象的时间为协调世界时 (UTC)。  
  
2.  然后，该属性将 UTC 转换为本地时间。  
  
 没有任何无效的时间，并且不明确的时间映射到本地时区的标准时间。 (但是，转换可能出现反常： 如果<xref:System.DateTimeOffset>派生从本地计算机的值反映了不明确的日期和时间，值可以转换为 UTC，然后再为本地时间不同于原始的时间。)执行此转换时，属性适用的本地时区的任何调整规则。  
  
 此属性返回的日期和时间部分<xref:System.DateTimeOffset>对象，使其非常适合<xref:System.DateTimeOffset>到<xref:System.DateTime>转换。 除了执行任何必要的时间转换，此属性不同于<xref:System.DateTimeOffset.DateTime%2A>通过设置的值的属性<xref:System.DateTime.Kind%2A>属性返回<xref:System.DateTime>对象传递给<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示的一些转换<xref:System.DateTimeOffset>到美国的本地时间的值太平洋标准时区运行。 请注意，最后三次所有不明确;该属性将所有这些映射到单个日期和时区的太平洋标准时间的时间。  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值为 12/31/9999 11:59:59 PM + 00:00。  
  
 <xref:System.DateTimeOffset.MaxValue>属性用于确定是否的新值<xref:System.DateTimeOffset>对象或<xref:System.DateTimeOffset>算术运算返回的值是相同等于或早于此最大范围值。 如果不是这样，该方法将引发<xref:System.ArgumentOutOfRangeException>。 任何<xref:System.DateTimeOffset>值转换为协调世界时 (UTC)，该方法将其与进行比较之前<xref:System.DateTimeOffset.MaxValue>。  这意味着，<xref:System.DateTimeOffset>值，其日期和时间是接近最大范围，但其偏移量为负，可能会引发异常。 例如，值 12/31/9999 11:00 PM-02:00 不在范围内，因为它是一小时晚于<xref:System.DateTimeOffset.MaxValue>时转换为 UTC。  
  
 如日历<xref:System.Globalization.UmAlQuraCalendar>，支持早于上部日期范围<xref:System.DateTime.MaxValue>。 在这些情况下，尝试访问<xref:System.DateTime.MaxValue>变量赋值或格式设置和分析操作中可以引发<xref:System.ArgumentOutOfRangeException>。 而不是检索的值的<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，你可以检索由指定的区域性的最新的有效日期值的值<xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current or specified culture's default calendar.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前的毫秒数部分<see cref="T:System.DateTimeOffset" />对象，表示为介于 0 和 999 之间的整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的毫秒数部分<xref:System.DateTimeOffset.ToString%2A>与"fff"自定义格式说明符的方法。  
  
 如果你如依赖于属性<xref:System.DateTimeOffset.Now%2A>或<xref:System.DateTimeOffset.UtcNow%2A>准确地跟踪已用的毫秒数，则时间的毫秒数部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 和更高版本、 和 Windows Vista 操作系统上，时钟的分辨率为大约 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例显示的毫秒数<xref:System.DateTimeOffset>对象通过使用自定义格式说明符和通过直接访问<xref:System.DateTimeOffset.Millisecond%2A>属性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前的分钟部分<see cref="T:System.DateTimeOffset" />对象，表示为介于 0 和 59 之间的整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的分钟部分<xref:System.DateTimeOffset.ToString%2A>方法使用"m"或"mm"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的分钟部分<xref:System.DateTimeOffset>三个不同的方式的对象：  
  
-   通过检索的值的<xref:System.DateTimeOffset.Minute%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"m"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法带"mm"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值是 1/1/0001 12:00:00 AM + 00:00。  
  
 <xref:System.DateTimeOffset.MinValue>属性用于确定是否的新值<xref:System.DateTimeOffset>对象或<xref:System.DateTimeOffset>算术运算返回的值是相同等于还是晚于此最小范围值。 如果不是这样，该方法将引发<xref:System.ArgumentOutOfRangeException>。 任何<xref:System.DateTimeOffset>值转换为协调世界时 (UTC) 之前该方法执行与比较<xref:System.DateTimeOffset.MinValue>。  这意味着，<xref:System.DateTimeOffset>值，其日期和时间是接近最小的范围，但其偏移量为正值，则可能引发异常。 例如，值 1/1/0001 1:00:00 AM + 02:00 不在范围内，因为它是一小时早于<xref:System.DateTimeOffset.MinValue>时转换为 UTC。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前的月份部分<see cref="T:System.DateTimeOffset" />对象，表示为介于 1 和 12 之间的整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的月份部分<xref:System.DateTimeOffset.ToString%2A>方法使用"M"或"MM"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的月份部分<xref:System.DateTimeOffset>三个不同的方式的值：  
  
-   通过检索的值的<xref:System.DateTimeOffset.Month%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"M"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法带"MM"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
        <value>A<see cref="T:System.DateTimeOffset" />对象其日期和时间是当前的本地时间，其偏移量为本地时区的偏移量从协调世界时 (UTC)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前的本地时间毫秒组成部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 和更高版本、 和 Windows Vista 操作系统上，时钟的分辨率为大约 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.Now%2A>要检索的当前日期和时间属性并将其显示通过使用每个[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)支持<xref:System.DateTimeOffset>类型。  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 下面的示例使用<xref:System.DateTimeOffset.Now%2A>和<xref:System.DateTimeOffset.Millisecond%2A>属性来确定系统时钟的分辨率。 它显示的时间仅当其毫秒组成部分的值已更改时。  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time's offset from Coordinated Universal Time (UTC).</summary>
        <value>当前之间的差异<see cref="T:System.DateTimeOffset" />对象的时间值和协调世界时 (UTC)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeSpan.Hours%2A>属性返回的<xref:System.TimeSpan>对象介于-14 小时到 14 小时。  
  
 值<xref:System.DateTimeOffset.Offset%2A>属性是精确到分钟。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.Offset%2A>属性，以显示本地时间差异与协调世界时 (UTC)。  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The object to add the time interval to.</param>
        <param name="timeSpan">The time interval to add.</param>
        <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
        <returns>An object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A>方法定义的加法运算<xref:System.DateTimeOffset>值。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 不支持自定义的运算符和运算符重载的语言可以调用<xref:System.DateTimeOffset.Add%2A>方法相反。  
  
 此运算符的等效方法是<xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A>方法定义的相等运算符的运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 在计算之前`left`和`right`相等性，运算符的操作数将这两个值转换为协调世界时 (UTC)。 此操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换而言之，<xref:System.DateTimeOffset.op_Equality%2A>方法确定是否两个<xref:System.DateTimeOffset>对象表示的时间的单一点。 它将直接进行比较的既不日期和时间，也不偏移量。 若要确定是否两个<xref:System.DateTimeOffset>对象表示的相同的时间和具有相同的偏移量的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>方法定义的操作的大于运算符<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 不支持自定义运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 它们还可以调用<xref:System.DateTimeOffset.op_GreaterThan%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 在计算之前`left`和`right`操作数，运算符将这两个值转换为协调世界时 (UTC)。 此操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>方法定义的操作大于或等于运算符<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 不支持自定义运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外可以调用某些语言<xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 在计算之前`left`和`right`操作数，运算符将这两个值转换为协调世界时 (UTC)。 此操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The object to convert.</param>
        <summary>Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>The converted object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A>方法使编译器能够自动转换<xref:System.DateTime>对象传递给<xref:System.DateTimeOffset>而无需使用显式强制转换运算符 （在 C# 中) 或 （在 Visual Basic) 的转换函数的调用的对象。 它定义一个的扩大转换，不会丢失数据，也不会引发<xref:System.OverflowException>。 <xref:System.DateTimeOffset.op_Implicit%2A>方法使以下可以编写诸如代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 此方法相当于<xref:System.DateTimeOffset.%23ctor%2A>构造函数。 所生成的偏移量<xref:System.DateTimeOffset>对象依赖于的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性`dateTime`参数：  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，日期和时间<xref:System.DateTimeOffset>对象设置为等于`dateTime`，并将其<xref:System.DateTimeOffset.Offset%2A>属性被设置为 0。  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>属性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，日期和时间<xref:System.DateTimeOffset>对象设置为等于`dateTime`，并将其<xref:System.DateTimeOffset.Offset%2A>属性被设置为本地系统的当前时区的偏移量。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A>方法定义的不相等运算符的运算<xref:System.DateTimeOffset>对象。 它始终返回从相反的结果<xref:System.DateTimeOffset.op_Equality%2A>。 <xref:System.DateTimeOffset.op_Inequality%2A>方法使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 在计算之前`left`和`right`相等性，运算符的操作数将这两个值转换为协调世界时 (UTC)。 此操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换而言之，<xref:System.DateTimeOffset.op_Inequality%2A>方法确定是否两个<xref:System.DateTimeOffset>对象表示的时间的不同点。 它将直接进行比较的既不日期和时间，也不偏移量。  
  
 不支持自定义运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外，还可以调用某些语言<xref:System.DateTimeOffset.op_Inequality%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A>方法定义的操作的小于运算符<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 在计算之前`left`和`right`操作数，运算符将两个操作数转换为协调世界时 (UTC)。 此操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 不支持自定义运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外，还可以调用某些语言<xref:System.DateTimeOffset.op_LessThan%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 不支持自定义运算符的语言可以调用<xref:System.DateTimeOffset.Compare%2A>方法相反。 此外可以调用某些语言<xref:System.DateTimeOffset.op_LessThanOrEqual%2A>方法直接，如以下示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 在计算之前`left`和`right`操作数，运算符将这两个值转换为协调世界时 (UTC)。 此操作等效于以下：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTimeOffset" /> or <see cref="T:System.TimeSpan" /> object from a <see cref="T:System.DateTimeOffset" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The minuend.</param>
        <param name="right">The subtrahend.</param>
        <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
        <returns>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>方法定义的减法运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 不支持自定义的运算符和运算符重载的语言可以调用<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>方法相反。  
  
 此运算符的等效方法是<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time object to subtract from.</param>
        <param name="timeSpan">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
        <returns>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>方法定义的减法运算<xref:System.DateTimeOffset>对象。 它使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 不支持自定义的运算符和运算符重载的语言可以调用<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>方法相反。  
  
 此运算符的等效方法是<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> 分析一个具有三个元素，可以按任意顺序出现，并且用空白分隔字符串。 这三个要素是下表中所示。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移量 > 不能单独出现。 它必须提供一起\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前日期。 如果\<时间 > 缺少，其默认值为 12:00:00 AM。 如果\<日期 > 是存在但其组件包含仅两个数字的年份，它将转换到基于值的当前区域性的当前日历中每一年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量。 \<偏移量 > 可以表示负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号。  
  
 `input`通过使用中的格式设置信息分析字符串<xref:System.Globalization.DateTimeFormatInfo>初始化为当前区域性的对象。 若要分析包含指定的格式设置，不一定对应于当前区域性的格式设置字符串，请使用<xref:System.DateTimeOffset.ParseExact%2A>方法并提供的格式说明符。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.Parse%28System.String%29>方法，以便分析多个日期和时间的字符串。 该示例包括从 2007 年 3 月 22 日，输出区域性为 en 的系统上的我们。  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific format information about <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法分析具有三个元素，可以按任意顺序出现，并且用空白分隔字符串。 下表中显示这些三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移量 > 不能单独出现。 它必须提供一起\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前日期。 如果\<日期 > 是存在但其组件包含仅两个数字的年份，它将转换为一年`provider`参数的当前日历的值基于<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值为 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量。 \<偏移量 > 可以表示负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号。  
  
 这三个元素的格式由定义`formatProvider`可以为以下对象之一的参数：  
  
-   A<xref:System.Globalization.CultureInfo>表示的格式设置中使用的区域性的对象`input`参数。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 使用中的正整数或负号\<偏移量 > 必须为 + 或-。 它不由定义<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>属性<xref:System.Globalization.NumberFormatInfo>对象`formatProvider`参数。  
  
   
  
## Examples  
 下面的示例分析日期和时间字符串的 fr-fr 区域性的格式设置，并显示它们使用本地系统的默认 en-我们区域性。  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific format information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法分析具有三个元素，可以按任意顺序出现，并且用空白分隔字符串。 下表中显示这些三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移量 > 不能单独出现。 它必须提供一起\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前日期。 如果\<日期 > 是存在但其组件包含仅两个数字的年份，它将转换为一年`provider`参数的当前日历的值基于<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值为 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量或<xref:System.TimeSpan.Zero?displayProperty=nameWithType>如果<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>或<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>中指定值`styles`参数。 如果\<偏移量 > 存在，它可以表示负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号。  
  
 这三个元素的格式由定义`formatProvider`可以为以下对象之一的参数：  
  
-   A<xref:System.Globalization.CultureInfo>表示的格式设置中使用的区域性的对象`input`参数。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 每个元素也可由前导或尾随空格，括和\<日期 > 和\<时间 > 元素可以包含内部空格 （如 6: 00:00)。 仅\<偏移量 > 组件不能包含内部空格。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 使用中的正整数或负号\<偏移量 > 必须为 + 或-。 它不由定义<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>属性<xref:System.Globalization.NumberFormatInfo>返回对象`formatProvider`参数。  
  
 下表显示的成员<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>支持的枚举。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析所表示的字符串`input`并且，如果有必要，请将其转换为 UTC。 它相当于解析字符串，然后调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法的返回<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但将忽略此值。 中允许内部空白\<日期 > 和\<时间 > 元素。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但将忽略此值。 前导空白允许分析的字符串中每个组件的前面。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但将忽略此值。 分析的字符串中每个组件的前面允许存在尾随空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|这是默认行为。 不能重写通过提供限制性更强<xref:System.Globalization.DateTimeStyles>枚举值，如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|表明，如果`input`参数缺少\<偏移量 > 元素的情况下应提供的本地时区偏移量。 这是默认行为的<xref:System.DateTimeOffset.Parse%2A>方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|表明，如果`input`参数缺少\<偏移量 > 元素的情况下应提供的 UTC 偏移量 (00:00)。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但此值将被忽略，并且没有影响。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|因为<xref:System.DateTimeOffset>结构不包括`Kind`属性，此值不起作用。|  
  
 仅<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>不支持值。 <xref:System.ArgumentException>如果此值包含在引发`styles`参数。  
  
   
  
## Examples  
 下面的示例演示传递的效果<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>，和<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>值复制到`styles`参数<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  -or-  <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent. The format of the string representation must match a specified format exactly.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the expected format of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>方法分析的字符串表示形式必须是定义的格式的日期`format`参数。 它还要求\<日期 >，\<时间 >，和\<偏移量 > 元素的字符串表示形式的日期和时间显示在指定的顺序中`format`。 如果`input`字符串与这都不匹配`format`参数，该方法将引发<xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法分析的字符串表示形式中任何一种识别的格式提供程序的格式的日期<xref:System.Globalization.DateTimeFormatInfo>对象。 <xref:System.DateTimeOffset.Parse%2A> 此外允许\<日期 >，\<时间 >，和\<偏移量 > 元素的字符串表示形式要按任何顺序显示的日期和时间。  
  
 `format`参数是一个字符串，包含单个标准格式说明符或一个或多个定义的所需的格式的自定义格式说明符`input`参数。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配午夜的时间 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象分配本地系统上的当前日期。 如果`format`不要求`input`包含偏移量，生成<xref:System.DateTimeOffset>对象分配的本地系统时区偏移量。  
  
 特定日期和时间符号和中使用的字符串`input`由定义`formatProvider`参数，则精确格式`input`如果`format`是一个标准格式说明符字符串。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的区域性的对象在其上基于`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>对象由其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>属性定义的符号和中的格式设置`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>与要分析多个日期和时间字符串的标准和自定义格式说明符和固定区域性的方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.  -or-  <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  -or-  <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="format" /> is an empty string.  -or-  The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，<see cref="Overload:System.DateTimeOffset.ParseExact" />方法抛出异常<see cref="T:System.FormatException" />如果要分析的字符串包含小时组成部分和 AM/PM 指示符，并不一致。在 [！INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the expected format of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析的字符串表示形式必须是定义的格式的日期`format`参数。 它还要求\<日期 >，\<时间 >，和\<偏移量 > 元素的字符串表示形式的日期和时间显示在指定的顺序中`format`。 如果`input`字符串不匹配的模式`format`参数，并具有定义的任何变体`styles`参数，该方法将引发<xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析的字符串表示形式中任何一种识别的格式提供程序的格式的日期<xref:System.Globalization.DateTimeFormatInfo>对象。 <xref:System.DateTimeOffset.Parse%2A> 此外允许\<日期 >，\<时间 >，和\<偏移量 > 元素的字符串表示形式要按任何顺序显示的日期和时间。  
  
 `format`参数是一个字符串，包含单个标准格式说明符或一个或多个定义的所需的模式的自定义格式说明符`input`参数。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配午夜的时间 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象分配本地系统上的当前日期。 如果`format`不要求`input`包含偏移量，所产生的偏移量<xref:System.DateTimeOffset>对象依赖于的值`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任何值，则使用本地时区的偏移量。  
  
 特定日期和时间符号和中使用的字符串`input`由定义`formatProvider`参数。 同样适用于的确切格式`input`，如果`format`是一个标准格式说明符字符串。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的区域性的对象在其上基于`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和中的格式设置`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串，指示无显式的偏移量组成部分的字符串分析的方式，并且支持在分析操作的一部分进行 UTC 转换。 所有成员<xref:System.Globalization.DateTimeStyles>枚举支持除外<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出的每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`并且，如果有必要，请将其转换为 UTC。 它相当于解析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法的返回<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象提供的本地时区偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象都提供了的 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含未指定的内部空白`format`。 额外的空白区域日期和时间的组件之间和在各个组件内可能出现，并分析此字符串时被忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包括尾随空格不指定`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含前导、 尾随和内部未由指定的空格`format`。 中未指定的所有额外空白字符`format`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 空白必须出现在完全指定`format`。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|没有任何作用因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法使用标准和自定义格式说明符、 固定区域性，和各种<xref:System.Globalization.DateTimeStyles>值来分析多个日期和时间的字符串。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  -or-  The <paramref name="styles" /> parameter includes an unsupported value.  -or-  The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.  -or-  <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  -or-  <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="format" /> is an empty string.  -or-  The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，<see cref="Overload:System.DateTimeOffset.ParseExact" />方法抛出异常<see cref="T:System.FormatException" />如果要分析的字符串包含小时组成部分和 AM/PM 指示符，并不一致。在 [！INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formats">An array of format specifiers that define the expected formats of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析的字符串表示形式符合任一分配到的模式的日期`formats`参数。 如果`input`字符串不与任一这些模式不匹配与任意所定义的变体`styles`参数，该方法将引发<xref:System.FormatException>。 除了比较`input`到多个格式设置模式，此重载行为类似<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `formats`参数是一个字符串数组，其元素包含单个标准格式说明符或一个或多个自定义格式说明符用于定义的可能模式的`input`参数。 当调用该方法时，`input`必须匹配这些模式之一。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的匹配的元素`formats`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，则该方法将引发<xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用`formats`的此重载来指定多种格式的参数可以帮助减少在输入日期和时间时，许多用户遇到的挫折。 具体而言，应用程序，以处理日期和时间的表示形式，可以包括或缺少前导零中月份、 天、 小时、 分钟和秒可以定义多个输入的模式的功能。 该示例提供这样的一个示例。  
  
 如果中的匹配的元素`formats`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配午夜的时间 (0: 00:00)。 如果中的匹配的元素`formats`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象分配本地系统上的当前日期。 如果中的匹配的元素`formats`不要求`input`包含偏移量，所产生的偏移量<xref:System.DateTimeOffset>对象依赖于的值`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任何值，则使用本地时区的偏移量。  
  
 特定日期和时间符号和中使用的字符串`input`由定义`formatProvider`参数。 同样适用于的确切格式`input`，如果匹配的元素的`formats`是一个标准格式说明符字符串。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的区域性的对象在其上基于`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和中的格式设置`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串，指示无显式的偏移量组成部分的字符串分析的方式，并且支持在分析操作的一部分进行 UTC 转换。 所有成员<xref:System.Globalization.DateTimeStyles>枚举支持除外<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出的每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`并且，如果有必要，请将其转换为 UTC。 它相当于解析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法的返回<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的匹配的元素`formats`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象提供的本地时区偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的匹配的元素`formats`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象都提供了的 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含未指定的内部空白`format`。 额外的空白区域日期和时间的组件之间和在 （偏移量），除外的各个组件内可能出现，并分析此字符串时被忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包括尾随空格不指定`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含前导、 尾随和内部未由指定的空格`formats`。 未在中的匹配元素中指定的所有额外空白字符`formats`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 空白区域必须完全按照中的某个特定元素指定的方式`formats`地发生匹配。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|没有任何作用因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例定义了多个输入的格式的字符串表示形式的日期和时间和偏移量的值，并随后将传递到用户输入的字符串<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  -or-  <paramref name="styles" /> includes an unsupported value.  -or-  The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  -or-  <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  No element of <paramref name="formats" /> contains a valid format specifier.  -or-  The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，<see cref="Overload:System.DateTimeOffset.ParseExact" />方法抛出异常<see cref="T:System.FormatException" />如果要分析的字符串包含小时组成部分和 AM/PM 指示符，并不一致。在 [！INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>第二个组件<see cref="T:System.DateTimeOffset" />对象，表示为 0 和 59 之间的整数值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的第二个组件<xref:System.DateTimeOffset.ToString%2A>方法使用"s"或"ss"自定义格式说明符。  
  
   
  
## Examples  
 下面的示例显示的第二个组件<xref:System.DateTimeOffset>三个不同的方式的对象：  
  
-   通过检索的值的<xref:System.DateTimeOffset.Second%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"s"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法与"ss"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified time or duration from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">An object that represents the value to subtract.</param>
        <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将转换同时<xref:System.DateTimeOffset>对象为协调世界时 (UTC)，然后再计算分隔它们的时间间隔。 这将删除不同于 UTC 的偏移量可能会对比较产生任何影响。  
  
> [!NOTE]
>  对于支持自定义运算符的语言，你还可以通过使用减法运算符执行日期和时间的减法。 有关详细信息，请参阅<xref:System.DateTimeOffset.op_Subtraction%2A>方法。  
  
 因为既不当前<xref:System.DateTimeOffset>对象也不`value`参数表示的日期和时间以特定时区，<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>方法不考虑特定时区的调整规则的日期和时间相减时。  
  
   
  
## Examples  
 下面的示例演示使用的减法<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.DateTimeOffset.Subtract%2A>要减去的一项操作的时间间隔 （天、 小时、 分钟、 秒或毫秒） 的多个类型的方法。 其行为等同于<xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29>方法，后者定义减法运算符。 <xref:System.DateTimeOffset>结构还支持专用的加法 (如<xref:System.DateTimeOffset.AddDays%2A>， <xref:System.DateTimeOffset.AddHours%2A>，和<xref:System.DateTimeOffset.AddMinutes%2A>)，可让你通过将负值分配给方法参数执行减法。  
  
> [!NOTE]
>  此方法返回一个新<xref:System.DateTimeOffset>对象。 它不会修改当前对象的值加上`timeSpan`为其日期和时间。  
  
 <xref:System.DateTimeOffset.Subtract%2A>方法不会影响的值<xref:System.DateTimeOffset>对象的<xref:System.DateTimeOffset.Offset%2A>属性。 返回<xref:System.DateTimeOffset>对象具有与原始对象相同的偏移量。  
  
 因为当前<xref:System.DateTimeOffset>对象不表示的日期和时间以特定时区，<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29>方法不考虑特定时区的调整规则执行减法时。  
  
   
  
## Examples  
 下面的示例演示使用的减法<xref:System.DateTimeOffset.Subtract%2A>方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
        <returns>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:  <list type="table"><listheader><term> Return Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.  </description></item><item><term> Zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.  </description></item><item><term> Greater than zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.  </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of an object has been completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
        <value>中的计时周期数<see cref="T:System.DateTimeOffset" />对象的时钟时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 值<xref:System.DateTimeOffset.Ticks%2A>属性表示 0001 年 1 月 1 日午夜 12:00:00 以来所经历的 100 毫微秒隔数 (的值<xref:System.DateTimeOffset.MinValue>)。 它不包括将添加闰秒的刻度。 一纳秒等于第二个; 的一个十亿分之一秒第二个有一千万刻度。 值<xref:System.DateTimeOffset.Ticks%2A>属性范围从`DateTimeOffset.MinValue.Ticks`到`DateTimeOffset.MaxValue.Ticks`。  
  
 你可以分配到的计时周期数<xref:System.DateTimeOffset>通过使用对象<xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29>构造函数重载。  
  
   
  
## Examples  
 下面的示例初始化<xref:System.DateTimeOffset>对象通过在 2008 年 7 月 1 日的日期中估计的刻度数来 1:23:07。 它将显示日期和按该日期表示到控制台的计时周期数。  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>表示当前日期自午夜以来的时间间隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A>属性返回的时间组件<xref:System.DateTimeOffset>形式的对象<xref:System.TimeSpan>对象。 它相当于<xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType>属性。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.TimeOfDay%2A>属性来提取时间并将其显示到控制台。  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是 64 位值，表示第午夜 12:00 到公元 1601 年 1 月 1 日以来经过的 100 毫微秒隔数 (C.E.)协调世界时 (UTC)。 Windows 使用的文件时间应用程序创建、 访问，或将写入文件时进行记录。  
  
 <xref:System.DateTimeOffset.ToFileTime%2A>方法将转换当前<xref:System.DateTimeOffset>对象的日期和时间转换为 UTC 之前它执行的转换。 换而言之，调用<xref:System.DateTimeOffset.ToFileTime%2A>方法等效于以下的方法调用：  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
        <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行转换为本地时间，该方法首先将当前<xref:System.DateTimeOffset>对象的日期和时间为协调世界时 (UTC) 通过减去从时间偏移量。 它然后将转换的 UTC 日期和时间为本地时间通过添加本地时区偏移量。 在执行此操作，它采用本地时区的任何调整规则的帐户。  
  
 这两个值的当前<xref:System.DateTimeOffset>对象和的值<xref:System.DateTimeOffset>方法调用所返回的对象表示的时间相同的点。 也就是说，如果同时传递给<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法，该方法将返回`true`。  
  
 如果转换会导致超出范围的时间<xref:System.DateTimeOffset>类型，<xref:System.DateTimeOffset.ToLocalTime%2A>方法返回<xref:System.DateTimeOffset>对象，具有日期和时间设置为<xref:System.DateTimeOffset.MaxValue>或<xref:System.DateTimeOffset.MinValue>以及设置为本地时区偏移量的偏移量。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ToLocalTime%2A>方法将转换<xref:System.DateTimeOffset>为太平洋标准时区中的本地时间的值。 它还说明了对本地时区的调整规则的方法的支持。  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
        <returns>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A>方法是调用的替代方法<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。 它可以是可用于执行简单从一个时区之间转换时已知的时区偏移量从协调世界时 (UTC)。 但是，因为既不原始<xref:System.DateTimeOffset>对象也新<xref:System.DateTimeOffset>方法调用所返回的对象将明确地与特定时区，该方法不适用于任何时区调整规则在转换中的。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.ToOffset%2A>方法将转换<xref:System.DateTimeOffset>对象传递给<xref:System.DateTimeOffset>与不同的偏移量的对象。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than -14 hours.  -or-  <paramref name="offset" /> is greater than 14 hours.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
        <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的返回值是相同的<xref:System.DateTime.ToString?displayProperty=nameWithType>方法，但它包含空格后追加字符串末尾的偏移量。 使用短日期模式，长时间模式的输出格式设置的换而言之，和`zzz`自定义格式字符串，且从上一个元素由空格分隔每个元素。 例如，如果<xref:System.DateTime.ToString?displayProperty=nameWithType>返回值为 1/12/2008年 6:15:50 PM，<xref:System.DateTimeOffset.ToString>返回值为 1/12/2008年下午 6:15:50-08:00 为八个小时后协调世界时 (UTC) 时间。  
  
 此方法使用派生自当前区域性的格式设置信息。 有关详细信息，请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 其他重载<xref:System.DateTimeOffset.ToString%2A>方法使您能够指定区域性的格式设置的使用，并定义的输出模式的<xref:System.DateTimeOffset>值。  
  
   
  
## Examples  
 下面的示例演示如何调用<xref:System.DateTimeOffset.ToString>方法并在其当前区域性为 en 的系统上显示其输出-我们。  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString" />方法使用当前区域性的日历中返回的字符串表示形式的日期和时间。如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或晚于<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。下面的示例进行了这方面的演示。它会尝试设置日期超出范围的格式<see cref="T:System.Globalization.HijriCalendar" />类时的当前区域性为阿拉伯语 （叙利亚）。 [！ 代码 csharp [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [！ 代码 vb [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的返回值等同于它的等效<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法，但它包含空格后追加字符串末尾的偏移量。 使用短日期模式，长时间模式的输出格式设置的换而言之，和`zzz`自定义格式字符串，且从上一个元素由空格分隔每个元素。  
  
 这三个元素的格式由定义`formatProvider`参数。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示其格式设置约定应用于返回的字符串的区域性的对象。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义返回字符串的格式。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatProvider`是`null`、<xref:System.Globalization.DateTimeFormatInfo>使用与当前区域性关联的对象 (请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 下面的示例显示<xref:System.DateTimeOffset>对象使用<xref:System.Globalization.CultureInfo>表示固定区域性，以及四个其他区域性的对象。  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />方法代表的区域性所使用的日历中返回的字符串表示形式的日期和时间<paramref name="formatProvider" />参数。由定义其日历<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />属性。如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或晚于<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。下面的示例进行了这方面的演示。它会尝试设置日期超出范围的格式<see cref="T:System.Globalization.JapaneseCalendar" />类。 [！ 代码 csharp [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [！ 代码 vb [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`参数应包含单个格式说明符 (请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自定义格式模式 (请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md))，它定义返回字符串的格式。 如果`format`为 null 或为空字符串 ("")，则<xref:System.DateTimeOffset>值使用默认格式的输出。  
  
 下表显示某些格式说明符一起使用时的确切操作<xref:System.DateTimeOffset>，这不同于其行为与一起使用时<xref:System.DateTime>。  
  
|现有的格式说明符|新行为|  
|-------------------------------|------------------|  
|“K”|设计往返日期和时间。 与<xref:System.DateTimeOffset>，映射到"zzz"（偏移量始终显示为带有小时和分钟）。 请注意，"K"自定义格式说明符;它不能显示为单个字符`format`。|  
|“U”|不支持。|  
|"r"|将转换<xref:System.DateTimeOffset>对象为协调世界时 (UTC)，并输出使用自定义格式字符串`ddd, dd MMM yyyy HH:mm:ss GMT`。|  
|“u”|将转换<xref:System.DateTimeOffset>为 UTC 的对象，并输出使用格式`yyyy-MM-dd HH:mm:ssZ`。|  
  
 其余的标准日期和时间格式说明符的行为相同，但有<xref:System.DateTimeOffset.ToString%28System.String%29>方法像它们对待<xref:System.DateTime.ToString%2A>方法。  
  
 此方法使用派生自当前区域性的格式设置信息。 有关详细信息，请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>。  
  
   
  
## Examples  
 下面的示例显示<xref:System.DateTimeOffset>到控制台中使用的每个标准日期和时间格式说明符的对象。 通过使用 en 设置输出的格式的区域性。  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.String)" />方法使用当前区域性的日历中返回的字符串表示形式的日期和时间。如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或晚于<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。下面的示例进行了这方面的演示。它会尝试设置日期超出范围的格式<see cref="T:System.Globalization.HebrewCalendar" />类的当前区域性时希伯来语 （以色列）。 [！ 代码 csharp [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [！ 代码 vb [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A format string.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`参数应包含单个格式说明符 (请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自定义格式模式 (请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). 如果`format`为 null 或为空字符串 ("")，则<xref:System.DateTimeOffset>对象使用默认格式的输出。  
  
 下表显示某些格式说明符一起使用时的确切操作<xref:System.DateTimeOffset>，这不同于其行为与一起使用时<xref:System.DateTime>。  
  
|现有的格式说明符|新行为|  
|-------------------------------|------------------|  
|“K”|设计往返日期和时间。 与<xref:System.DateTimeOffset>，映射到"zzz"（偏移量始终显示为带有小时和分钟）。 请注意，"K"自定义格式说明符;它不能显示为单个字符`format`。|  
|“U”|不支持。|  
|"r"|将转换<xref:System.DateTimeOffset>对象为协调世界时 (UTC)，并输出使用自定义格式字符串`ddd, dd MMM yyyy HH:mm:ss GMT`。|  
|“u”|将转换<xref:System.DateTimeOffset>为 UTC 值，并输出使用格式`yyyy-MM-dd HH:mm:ssZ`。|  
  
 其余的标准日期和时间格式说明符的行为相同，但有<xref:System.DateTimeOffset.ToString%28System.String%29>方法像它们对待<xref:System.DateTime.ToString%2A>方法。  
  
 对应于标准格式说明符，以及符号和日期和时间组件的名称模式的定义通过`formatProvider`参数。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的格式设置中使用的区域性的对象`input`。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatProvider`是`null`、<xref:System.Globalization.DateTimeFormatInfo>使用与当前区域性关联的对象 (请参阅<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29>方法以显示<xref:System.DateTimeOffset>对象用于几个不同的区域性的自定义格式字符串。  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />方法返回的字符串表示形式的日期和时间中使用的日历<paramref name="formatProvider" />参数。由定义其日历<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />属性。如果当前的值<see cref="T:System.DateTimeOffset" />实例是早于<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或晚于<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，该方法将引发<see cref="T:System.ArgumentOutOfRangeException" />。下面的示例进行了这方面的演示。它会尝试设置日期超出范围的格式<see cref="T:System.Globalization.UmAlQuraCalendar" />类。 [！ 代码 csharp [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [！ 代码 vb [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
        <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回<xref:System.DateTimeOffset>对象，其<xref:System.DateTimeOffset.Offset%2A>属性设置为零。  
  
 这两个值的当前<xref:System.DateTimeOffset>对象和的值<xref:System.DateTimeOffset>方法调用所返回的对象表示的时间相同的点。 也就是说，如果同时传递给<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法，该方法将返回`true`。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.ToUniversalTime%2A>方法将本地时间和几个其他时间转换为协调世界时 (UTC)。  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</summary>
        <returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 时间表示自 1970 年 1 所经历的秒数-01-01T00:00:00Z (1，1970 年 1 月 12:00 AM utc)。 它不会考虑闰秒。 在 Unix 时间，此方法返回毫秒的数。  
  
 此方法首先将在其 Unix 及时返回的毫秒数之前的当前实例转换为 UTC。 早于 1970 年的日期和时间值-01-01T00:00:00Z，此方法返回一个负值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.</summary>
        <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 时间表示自 1970 年 1 所经历的秒数-01-01T00:00:00Z (1，1970 年 1 月 12:00 AM utc)。 它不会考虑闰秒。  
  
 此方法首先将返回其 Unix 时间前的当前实例转换为 UTC。 早于 1970 年的日期和时间值-01-01T00:00:00Z，此方法返回一个负值。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.ToUnixTimeSeconds%2A>方法返回的值相等，很快之前和在 1970年之后很快的 Unix 时间-01-01T00:00:00Z。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>方法就像是<xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType>方法，但它不会引发异常，如果转换失败。 分析具有三个元素，可以按任意顺序出现，并且用空白分隔的字符串。 下表中显示这些三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移量 > 不能单独出现。 它必须提供一起\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前日期。 如果\<日期 > 是存在但其组件包含仅两个数字的年份，它将转换到基于值的当前区域性的当前日历中每一年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值为 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量。 如果\<偏移量 > 存在，它可以表示负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号，否则该方法将返回`false`。  
  
 `input`通过使用中的格式设置信息分析字符串<xref:System.Globalization.DateTimeFormatInfo>初始化为当前区域性的对象。 若要分析包含指定的格式设置，不一定对应于当前区域性的字符串，请使用<xref:System.DateTimeOffset.TryParseExact%2A>方法并提供的格式说明符。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>方法，以便分析几个不同的日期和时间格式字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法就像是<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，但它不会引发异常，如果转换失败。 此方法分析具有三个元素，可以按任意顺序出现，并且用空白分隔的字符串。 下表中显示这些三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 尽管每个元素是可选的但\<偏移量 > 不能单独出现。 它必须提供一起\<日期 > 或\<时间 >。 如果\<日期 > 缺少，其默认值为当前日期。 如果\<日期 > 是存在但其组件包含仅两个数字的年份，它将转换为一年`provider`参数的当前日历的值基于<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>属性。 如果\<时间 > 缺少，其默认值为 12:00:00 AM。 如果\<偏移量 > 缺少，其默认值为本地时区的偏移量或<xref:System.TimeSpan.Zero>如果<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>或<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>中指定值`styles`。 如果\<偏移量 > 存在，它可以表示负或正偏移量从协调世界时 (UTC)。 在任一情况下，\<偏移量 > 必须包括正负符号，否则该方法将返回`false`。  
  
 `input`通过使用中的区域性特定格式设置信息分析字符串<xref:System.Globalization.DateTimeFormatInfo>通过提供对象`formatProvider`参数。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的格式设置中使用的区域性的对象`input`。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义中使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 此外，可以由前导或尾随空格分隔每个元素与\<日期 > 和\<时间 > 组件可以包含内部空格 （如 6: 00:00)。 仅\<偏移量 > 组件不能包含内部空格。  
  
 如果`provider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 使用中的正整数或负号\<偏移量 > 必须为 + 或-。 它不由定义<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>属性<xref:System.Globalization.NumberFormatInfo>返回对象`formatprovider`参数的<xref:System.Globalization.CultureInfo.NumberFormat%2A>属性。  
  
 以下成员<xref:System.Globalization.DateTimeStyles>枚举支持：  
  
|DateTimeStyles 成员|注释|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析所表示的字符串`input`并且，如果有必要，请将其转换为 UTC。 它相当于解析字符串，并调用返回的对象<xref:System.DateTimeOffset.ToUniversalTime>方法。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但将忽略此值。 中允许内部空白\<日期 > 和\<时间 > 组件。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但将忽略此值。 前导空白允许分析的字符串中每个组件的前面。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但将忽略此值。 前面分析的字符串中每个组件允许存在尾随空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|这是默认行为。 不能重写通过提供限制性更强<xref:System.Globalization.DateTimeStyles>枚举值，如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|表明，如果`input`参数缺少\<偏移量 > 元素的情况下应提供的本地时区偏移量。 这是默认行为的<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|表明，如果`input`参数缺少\<偏移量 > 元素的情况下应提供的 UTC 偏移量 (00:00)。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但此值将被忽略，并且没有影响。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|因为<xref:System.DateTimeOffset>结构不包括`Kind`属性，此值不起作用。|  
  
 仅<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>不支持值。 <xref:System.ArgumentException>如果此值包含在引发`styles`参数。  
  
   
  
## Examples  
 下面的示例调用<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法与各种<xref:System.Globalization.DateTimeStyles>值以分析某些与各种的日期和时间格式字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  -or-  <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent. The format of the string representation must match a specified format exactly.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> parameter is <see langword="null" />, or does not contain a valid string representation of a date and time in the expected format defined by <c>format</c> and <c>provider</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法就像是<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，只不过此方法不会引发异常，如果转换失败。 它所分析的字符串表示形式的日期和时间，必须完全匹配指定的模式`format`参数。 如果`input`字符串不匹配此模式，与所定义的空白空间中一些可能变体`styles`参数，在分析操作失败，并且该方法返回`false`。  
  
 `format`参数是一个字符串，包含单个标准格式说明符或一个或多个定义的所需的模式的自定义格式说明符`input`。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，分析操作将失败，该方法返回`false`。  
  
 如果`format`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配午夜的时间 (0: 00:00)。 如果`format`要求`input`包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象分配本地系统上的当前日期。 如果`format`不要求`input`包含偏移量，所产生的偏移量<xref:System.DateTimeOffset>对象依赖于的值`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任何值，则使用本地时区的偏移量。  
  
 特定日期和时间符号和中使用的字符串`input`由定义`formatProvider`参数。 这同样适用对于精确模式`input`如果`format`是一个标准格式说明符字符串。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的区域性的对象在其上基于`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义符号，并且中的标准格式允许`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串，指示无显式的偏移量组成部分的字符串分析的方式，并且支持在分析操作的一部分进行 UTC 转换。 所有成员<xref:System.Globalization.DateTimeStyles>枚举支持除外<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出的每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`并且，如果有必要，请将其转换为 UTC。 它相当于解析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法的返回<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象提供的本地时区偏移量。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象都提供了的 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含内部空白未指定的格式。 额外的空白区域日期和时间的组件之间和在各个组件，偏移量，以外内可能出现，并分析此字符串时被忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包含未指定的前导空格`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包括尾随空格不指定`format`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含前导、 尾随和内部未由指定的空格`format`。 中未指定的所有额外空白字符`format`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 空白必须出现在完全指定`format`。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|没有任何作用，因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例使用<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法使用标准和自定义格式说明符、 固定区域性，和各种<xref:System.Globalization.DateTimeStyles>值来分析多个日期和时间的字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  -or-  <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，<see cref="Overload:System.DateTimeOffset.TryParseExact" />返回<see langword="false" />如果要分析的字符串包含小时组成部分和 AM/PM 指示符，并不一致。在 [！INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formats">An array that defines the expected formats of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <c>format</c>, or if <c>formats</c> is <see langword="null" />. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法分析的字符串表示形式符合任一分配到的模式的日期`formats`数组。 如果`input`字符串不匹配任一这些模式与定义的任何变体`styles`参数，在分析操作失败，并且该方法返回`false`。 除了比较`input`到包含格式说明符的多个字符串，此重载行为类似<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `formats`参数是一个字符串数组，其元素包含单个标准格式说明符或一个或多个自定义格式说明符用于定义的可能模式的`input`。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的匹配的元素`formats`包括`z`， `zz`，或`zzz`自定义格式说明符，以指示某一偏移量必须存在于`input`，该偏移量必须包括正号或负号。 如果缺少符号，分析操作将失败，该方法返回`false`。  
  
> [!IMPORTANT]
>  使用`formats`的此重载来指定多种格式的参数可以帮助减少在输入日期和时间时，许多用户遇到的挫折。 具体而言，应用程序，以处理日期和时间的表示形式，可以包括或缺少前导零中月份、 天、 小时、 分钟和秒可以定义多个输入的模式的功能。 该示例提供这样的一个示例。  
  
 如果中的匹配的元素`formats`要求`input`包含日期而不是时间，则会为生成<xref:System.DateTimeOffset>对象分配午夜的时间 (0: 00:00)。 如果中的匹配的元素`formats`要求输入包含时间而不是日期，则会为生成<xref:System.DateTimeOffset>对象分配本地系统上的当前日期。 如果中的匹配的元素`formats`不要求`input`包含偏移量，所产生的偏移量<xref:System.DateTimeOffset>对象依赖于的值`styles`参数。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeLocal>，本地时区的偏移量分配给<xref:System.DateTimeOffset>对象。 如果`styles`包括<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，协调世界时 (UTC) 偏移量，或 + 00:00，分配给<xref:System.DateTimeOffset>对象。 如果未指定任何值，则使用本地时区的偏移量。  
  
 特定日期和时间符号和中使用的字符串`input`由定义`formatProvider`参数。 这同样适用对于精确模式`input`如果的匹配元素`formats`是一个标准格式说明符字符串。 `formatProvider`参数可以为下列操作之一：  
  
-   A<xref:System.Globalization.CultureInfo>表示的区域性的对象在其上基于`input`解释。 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性定义的符号和中的格式设置`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定义的日期和时间数据格式的对象。  
  
 如果`formatprovider`是`null`、<xref:System.Globalization.CultureInfo>使用对应于当前区域性的对象。  
  
 `styles`参数定义是否允许空白区域输入字符串，指示无显式的偏移量组成部分的字符串分析的方式，并且支持在分析操作的一部分进行 UTC 转换。 所有成员<xref:System.Globalization.DateTimeStyles>枚举支持除外<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出的每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析`input`并且，如果有必要，请将其转换为 UTC。 它相当于解析字符串，并调用<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法的返回<xref:System.DateTimeOffset>对象。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的匹配的元素`formats`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象提供的本地时区偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的匹配的元素`formats`不要求`input`包含偏移量的值，则会为所返回的<xref:System.DateTimeOffset>对象都提供了的 UTC 偏移量 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许`input`若要包含未指定中的元素的内部空白`formats`。 额外的空白区域日期和时间的组件之间和在 （除外偏移量） 的各个组件内可能出现，并分析此字符串时被忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许`input`包括前导空格的元素中未指定`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许`input`包括中的元素未指定尾随空格`formats`。 分析字符串时，将忽略这些。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许`input`包含未指定中的元素的前导、 尾随和内部空格`formats`。 未在中的匹配元素中指定的所有额外空白字符`formats`分析字符串时，将忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示该额外的空白区域中不允许使用`input`。 必须完全按照中的特定元素中指定的方式出现空白`formats`以便成功匹配。 这是默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|没有任何作用因为<xref:System.DateTimeOffset>结构不包括`Kind`属性。|  
  
   
  
## Examples  
 下面的示例定义了多个输入的格式的字符串表示形式的日期和时间和偏移量的值，并随后将传递到用户输入的字符串<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  -or-  <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，<see cref="Overload:System.DateTimeOffset.TryParseExact" />返回<see langword="false" />如果要分析的字符串包含小时组成部分和 AM/PM 指示符，并不一致。在 [！INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，AM/PM 指示符将被忽略。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>协调世界时 (UTC) 日期和时间的当前<see cref="T:System.DateTimeOffset" />对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A>属性执行双重转换：  
  
-   它将转换的日期和时间的当前<xref:System.DateTimeOffset>对象为协调世界时 (UTC)。 减去的值来执行转换<xref:System.DateTimeOffset.Offset%2A>属性的日期和时间的当前从<xref:System.DateTimeOffset>对象。  
  
-   它将转换<xref:System.DateTimeOffset>值赋给<xref:System.DateTime>值。  
  
 <xref:System.DateTime.Kind%2A>属性返回<xref:System.DateTimeOffset.DateTime%2A>值设置为<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 检索的值的<xref:System.DateTimeOffset.UtcDateTime%2A>属性等效于调用当前<xref:System.DateTimeOffset>对象的`ToUniversalTime.DateTime`属性，只不过<xref:System.DateTime.Kind%2A>属性后者<xref:System.DateTime>值是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.DateTimeOffset.UtcDateTime%2A>属性显示<xref:System.DateTimeOffset>值和其相应的 UTC 时间。  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
        <value>一个对象，其日期和时间是当前的协调世界时 (UTC)，其偏移量为<see cref="F:System.TimeSpan.Zero" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A>属性计算当前协调世界时 (UTC) 根据本地系统时钟时间与由本地系统时区偏移量。  
  
 当前 UTC 时间的毫秒数部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 和更高版本、 和 Windows Vista 操作系统上，时钟的分辨率为大约 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例阐释了协调世界时 (UTC) 和当地时间之间的关系。  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
        <value>中的计时周期数<see cref="T:System.DateTimeOffset" />对象的协调世界时 (UTC)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.DateTimeOffset.UtcTicks%2A>属性表示 0001 年 1 月 1 日午夜 12:00:00 以来所经历的 100 毫微秒隔数 (的值<xref:System.DateTimeOffset.MinValue>)。 它不包括将添加闰秒的刻度。 一纳秒等于第二个; 的一个十亿分之一秒第二个有一千万刻度。 值<xref:System.DateTimeOffset.UtcTicks%2A>属性范围从`DateTimeOffset.MinValue.Ticks`到`DateTimeOffset.MaxValue.Ticks`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>当前的年份部分<see cref="T:System.DateTimeOffset" />对象，表示为介于 0 和 9999 之间的整数值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A>属性的值不影响<xref:System.DateTimeOffset.Offset%2A>属性。  
  
 你还可以创建的字符串表示形式<xref:System.DateTimeOffset>通过调用对象的年份部分<xref:System.DateTimeOffset.ToString%2A>与"y"、"yy"或"yyyy"自定义格式说明符的方法。  
  
   
  
## Examples  
 下面的示例显示的年份部分<xref:System.DateTimeOffset>四个不同的方式的值：  
  
-   通过检索的值的<xref:System.DateTimeOffset.Year%2A>属性。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>与"y"格式说明符的方法。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"yy"格式说明符。  
  
-   通过调用<xref:System.DateTimeOffset.ToString%28System.String%29>方法带"yyyy"格式说明符。  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>