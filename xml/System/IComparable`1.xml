<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3331f1bbc5cf363b6ed960262fcd90e74a236a00" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34241370" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="4bd51-101">要比较的对象的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bd51-101">The type of object to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="4bd51-102">定义由值类型或类实现的通用比较方法，以为排序实例创建类型特定的比较方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bd51-102">Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd51-103">此接口由可排序其值类型实现，提供强类型的比较方法以进行排序的泛型集合对象的成员。</span><span class="sxs-lookup"><span data-stu-id="4bd51-103">This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="4bd51-104">例如，一个数可能会大于第二个数字，并且一个字符串可以出现在另一个之前的按字母顺序。</span><span class="sxs-lookup"><span data-stu-id="4bd51-104">For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</span></span> <span data-ttu-id="4bd51-105">它需要实现的类型定义一个方法， <xref:System.IComparable%601.CompareTo%28%600%29>，，该值指示当前实例在排序顺序中的位置是否在之前，之后，还是与相同类型的第二个对象相同。</span><span class="sxs-lookup"><span data-stu-id="4bd51-105">It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</span></span> <span data-ttu-id="4bd51-106">通常情况下，直接从开发人员代码不调用方法。</span><span class="sxs-lookup"><span data-stu-id="4bd51-106">Typically, the method is not called directly from developer code.</span></span> <span data-ttu-id="4bd51-107">相反，它由自动方法如<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。</span><span class="sxs-lookup"><span data-stu-id="4bd51-107">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="4bd51-108">通常，所提供的类型<xref:System.IComparable%601>实现还实现<xref:System.IEquatable%601>接口。</span><span class="sxs-lookup"><span data-stu-id="4bd51-108">Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="4bd51-109"><xref:System.IEquatable%601>接口定义<xref:System.IEquatable%601.Equals%2A>方法，这可确定的相等性的实现类型实例。</span><span class="sxs-lookup"><span data-stu-id="4bd51-109">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="4bd51-110">实现<xref:System.IComparable%601.CompareTo%28%600%29>方法必须返回<xref:System.Int32>，有三个值之一下, 表中所示。</span><span class="sxs-lookup"><span data-stu-id="4bd51-110">The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.</span></span>  
  
|<span data-ttu-id="4bd51-111">“值”</span><span class="sxs-lookup"><span data-stu-id="4bd51-111">Value</span></span>|<span data-ttu-id="4bd51-112">含义</span><span class="sxs-lookup"><span data-stu-id="4bd51-112">Meaning</span></span>|  
|-----------|-------------|  
|<span data-ttu-id="4bd51-113">小于零</span><span class="sxs-lookup"><span data-stu-id="4bd51-113">Less than zero</span></span>|<span data-ttu-id="4bd51-114">此对象之前指定的对象<xref:System.IComparable%601.CompareTo%2A>在排序顺序的方法。</span><span class="sxs-lookup"><span data-stu-id="4bd51-114">This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.</span></span>|  
|<span data-ttu-id="4bd51-115">零</span><span class="sxs-lookup"><span data-stu-id="4bd51-115">Zero</span></span>|<span data-ttu-id="4bd51-116">此当前实例在排序顺序中作为指定的对象的同一位置中发生<xref:System.IComparable%601.CompareTo%2A>方法自变量。</span><span class="sxs-lookup"><span data-stu-id="4bd51-116">This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.</span></span>|  
|<span data-ttu-id="4bd51-117">大于零</span><span class="sxs-lookup"><span data-stu-id="4bd51-117">Greater than zero</span></span>|<span data-ttu-id="4bd51-118">此当前实例遵循指定的对象<xref:System.IComparable%601.CompareTo%2A>在排序顺序的方法自变量。</span><span class="sxs-lookup"><span data-stu-id="4bd51-118">This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.</span></span>|  
  
 <span data-ttu-id="4bd51-119">所有数值类型 (如<xref:System.Int32>和<xref:System.Double>) 实现<xref:System.IComparable%601>，这一点与<xref:System.String>， <xref:System.Char>，和<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="4bd51-119">All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>.</span></span> <span data-ttu-id="4bd51-120">自定义类型还应提供自己实现<xref:System.IComparable%601>使对象实例排序或排序。</span><span class="sxs-lookup"><span data-stu-id="4bd51-120">Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd51-121">下面的代码示例演示的实现<xref:System.IComparable%601>作为一个简单`Temperature`对象。</span><span class="sxs-lookup"><span data-stu-id="4bd51-121">The following code example illustrates the implementation of  <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="4bd51-122">该示例创建<xref:System.Collections.Generic.SortedList%602>字符串与集合`Temperature`对象键，并将记录了天气和字符串的若干个对添加到列表顺序不正确。</span><span class="sxs-lookup"><span data-stu-id="4bd51-122">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="4bd51-123">在调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法，<xref:System.Collections.Generic.SortedList%602>集合使用<xref:System.IComparable%601>实现进行排序的列表项，然后显示递增温度的顺序。</span><span class="sxs-lookup"><span data-stu-id="4bd51-123">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="4bd51-124">
        <para>替换的类型参数<see cref="T:System.IComparable`1" />实现此接口的类型的接口。如果你实现<see cref="T:System.IComparable`1" />，应该重载<see langword="op_GreaterThan" />， <see langword="op_GreaterThanOrEqual" />， <see langword="op_LessThan" />，和<see langword="op_LessThanOrEqual" />运算符返回值与相一致<see cref="M:System.IComparable`1.CompareTo(`0)" />。此外，还应实现<see cref="T:System.IEquatable`1" />。请参阅<see cref="T:System.IEquatable`1" />文章的完整信息。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="4bd51-124">
          <para>Replace the type parameter of the <see cref="T:System.IComparable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IComparable`1" />, you should overload the <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, and <see langword="op_LessThanOrEqual" /> operators to return values that are consistent with <see cref="M:System.IComparable`1.CompareTo(`0)" />. In addition, you should also implement <see cref="T:System.IEquatable`1" />. See the <see cref="T:System.IEquatable`1" /> article for complete information.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="4bd51-125">与此实例进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bd51-125">An object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4bd51-126">将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bd51-126">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4bd51-127">一个值，指示要比较的对象的相对顺序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bd51-127">A value that indicates the relative order of the objects being compared.</span>
          </span>
          <span data-ttu-id="4bd51-128">返回值的含义如下：<list type="table"><listheader><term> 值  </term><description> 含义  </description></listheader><item><term> 小于零  </term><description> 此实例在排序顺序中位于 <paramref name="other" /> 之前。</description></item><item><term> 零  </term><description> 此实例在排序顺序中出现在与 <paramref name="other" /> 的相同位置。</description></item><item><term> 大于零  </term><description> 此实例在排序顺序中位于 <paramref name="other" /> 之后。  </description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="4bd51-128">The return value has these meanings:  <list type="table"><listheader><term> Value  </term><description> Meaning  </description></listheader><item><term> Less than zero  </term><description> This instance precedes <paramref name="other" /> in the sort order.  </description></item><item><term> Zero  </term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.  </description></item><item><term> Greater than zero  </term><description> This instance follows <paramref name="other" /> in the sort order.  </description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd51-129"><xref:System.IComparable%601.CompareTo%2A> 提供强类型的比较方法以进行排序的泛型集合对象的成员。</span><span class="sxs-lookup"><span data-stu-id="4bd51-129"><xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="4bd51-130">因此，它通常不调用直接从开发人员代码。</span><span class="sxs-lookup"><span data-stu-id="4bd51-130">Because of this, it is usually not called directly from developer code.</span></span> <span data-ttu-id="4bd51-131">相反，它由自动方法如<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。</span><span class="sxs-lookup"><span data-stu-id="4bd51-131">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="4bd51-132">此方法只是一个定义，必须实现的特定的类或值类型，才能生效。</span><span class="sxs-lookup"><span data-stu-id="4bd51-132">This method is only a definition and must be implemented by a specific class or value type to have effect.</span></span> <span data-ttu-id="4bd51-133">部分 （"之前"、"发生在同一个位置"，而"遵循） 依赖于特定实现的返回值中指定的比较的含义。</span><span class="sxs-lookup"><span data-stu-id="4bd51-133">The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</span></span>  
  
 <span data-ttu-id="4bd51-134">根据定义，任何对象相比较大于`null`，两个 null 引用的比较结果为彼此相等。</span><span class="sxs-lookup"><span data-stu-id="4bd51-134">By definition, any object compares greater than `null`, and two null references compare equal to each other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd51-135">下面的代码示例演示的实现<xref:System.IComparable%601>作为一个简单`Temperature`对象。</span><span class="sxs-lookup"><span data-stu-id="4bd51-135">The following code example illustrates the implementation of <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="4bd51-136">该示例创建<xref:System.Collections.Generic.SortedList%602>字符串与集合`Temperature`对象键，并将记录了天气和字符串的若干个对添加到列表顺序不正确。</span><span class="sxs-lookup"><span data-stu-id="4bd51-136">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="4bd51-137">在调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法，<xref:System.Collections.Generic.SortedList%602>集合使用<xref:System.IComparable%601>实现进行排序的列表项，然后显示递增温度的顺序。</span><span class="sxs-lookup"><span data-stu-id="4bd51-137">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="4bd51-138">
            <para>对于对象 A、 B 和 C，以下必须为 true: <c>A.CompareTo(A)</c>需要返回零。如果<c>A.CompareTo(B)</c>返回零，则<c>B.CompareTo(A)</c>需要返回零。如果<c>A.CompareTo(B)</c>返回零和<c>B.CompareTo(C)</c>返回零，则<c>A.CompareTo(C)</c>需要返回零。如果<c>A.CompareTo(B)</c>返回非零，一个值则<c>B.CompareTo(A)</c>需要返回值为符号相反。如果<c>A.CompareTo(B)</c>返回一个值<paramref name="x" />不等于零，和<c>B.CompareTo(C)</c>返回一个值<paramref name="y" />相同的符号的<paramref name="x" />，然后<c>a。CompareTo(C)</c>返回相同的符号的值所需<paramref name="x" />和<paramref name="y" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="4bd51-138">
              <para>For objects A, B, and C, the following must be true:  <c>A.CompareTo(A)</c> is required to return zero.  If <c>A.CompareTo(B)</c> returns zero, then <c>B.CompareTo(A)</c> is required to return zero.  If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero, then <c>A.CompareTo(C)</c> is required to return zero.  If <c>A.CompareTo(B)</c> returns a value other than zero, then <c>B.CompareTo(A)</c> is required to return a value of the opposite sign.  If <c>A.CompareTo(B)</c> returns a value <paramref name="x" /> that is not equal to zero, and <c>B.CompareTo(C)</c> returns a value <paramref name="y" /> of the same sign as <paramref name="x" />, then <c>A.CompareTo(C)</c> is required to return a value of the same sign as <paramref name="x" /> and <paramref name="y" />.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="usage">
          <span data-ttu-id="4bd51-139">
            <para>使用<see cref="M:System.IComparable`1.CompareTo(`0)" />方法来确定的类的实例排序。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="4bd51-139">
              <para>Use the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method to determine the ordering of instances of a class.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>