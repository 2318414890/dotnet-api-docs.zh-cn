<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5931aa26cc190dfe5da0d88c66d2c06eaa43d705" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58727323" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="25ace-101">要比较的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="25ace-101">The type of object to compare.</span></span></typeparam>
    <summary><span data-ttu-id="25ace-102">定义由值类型或类实现的通用比较方法，旨在创建特定于类型的比较方法以对实例进行排序。</span><span class="sxs-lookup"><span data-stu-id="25ace-102">Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25ace-103">此接口由可排序的值类型实现，并提供强类型化的比较方法的泛型集合对象的成员进行排序。</span><span class="sxs-lookup"><span data-stu-id="25ace-103">This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="25ace-104">例如，1 个数字可能会大于第二个数字，和一个字符串可以显示之前另一个按字母顺序。</span><span class="sxs-lookup"><span data-stu-id="25ace-104">For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</span></span> <span data-ttu-id="25ace-105">它需要实现的类型定义一个方法， <xref:System.IComparable%601.CompareTo%28%600%29>，，该值指示是否在排序顺序中的当前实例的位置是之前，之后，或者与相同类型的第二个对象相同。</span><span class="sxs-lookup"><span data-stu-id="25ace-105">It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</span></span> <span data-ttu-id="25ace-106">通常情况下，不是直接从开发人员代码调用方法。</span><span class="sxs-lookup"><span data-stu-id="25ace-106">Typically, the method is not called directly from developer code.</span></span> <span data-ttu-id="25ace-107">相反，它将自动调用方法等<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。</span><span class="sxs-lookup"><span data-stu-id="25ace-107">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="25ace-108">通常情况下，所提供的类型<xref:System.IComparable%601>实现还实现<xref:System.IEquatable%601>接口。</span><span class="sxs-lookup"><span data-stu-id="25ace-108">Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="25ace-109"><xref:System.IEquatable%601>接口定义<xref:System.IEquatable%601.Equals%2A>方法，这可确定的相等性的实现类型的实例。</span><span class="sxs-lookup"><span data-stu-id="25ace-109">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="25ace-110">实现<xref:System.IComparable%601.CompareTo%28%600%29>方法必须返回<xref:System.Int32>，具有三个值之一下, 表中所示。</span><span class="sxs-lookup"><span data-stu-id="25ace-110">The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.</span></span>  
  
|<span data-ttu-id="25ace-111">值</span><span class="sxs-lookup"><span data-stu-id="25ace-111">Value</span></span>|<span data-ttu-id="25ace-112">含义</span><span class="sxs-lookup"><span data-stu-id="25ace-112">Meaning</span></span>|  
|-----------|-------------|  
|<span data-ttu-id="25ace-113">小于零</span><span class="sxs-lookup"><span data-stu-id="25ace-113">Less than zero</span></span>|<span data-ttu-id="25ace-114">此对象之前指定的对象<xref:System.IComparable%601.CompareTo%2A>方法排序顺序中的。</span><span class="sxs-lookup"><span data-stu-id="25ace-114">This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.</span></span>|  
|<span data-ttu-id="25ace-115">零</span><span class="sxs-lookup"><span data-stu-id="25ace-115">Zero</span></span>|<span data-ttu-id="25ace-116">此当前实例中出现的相同位置在排序顺序中指定的对象作为<xref:System.IComparable%601.CompareTo%2A>方法自变量。</span><span class="sxs-lookup"><span data-stu-id="25ace-116">This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.</span></span>|  
|<span data-ttu-id="25ace-117">大于零</span><span class="sxs-lookup"><span data-stu-id="25ace-117">Greater than zero</span></span>|<span data-ttu-id="25ace-118">此当前实例位于指定的对象<xref:System.IComparable%601.CompareTo%2A>方法排序顺序中的自变量。</span><span class="sxs-lookup"><span data-stu-id="25ace-118">This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.</span></span>|  
  
 <span data-ttu-id="25ace-119">所有数值类型 (如<xref:System.Int32>并<xref:System.Double>) 实现<xref:System.IComparable%601>，这一点与<xref:System.String>， <xref:System.Char>，并<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="25ace-119">All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>.</span></span> <span data-ttu-id="25ace-120">自定义类型还应提供其自己的实现<xref:System.IComparable%601>以启用要排序或排序的对象实例。</span><span class="sxs-lookup"><span data-stu-id="25ace-120">Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25ace-121">下面的代码示例说明了实现<xref:System.IComparable%601>为简单的`Temperature`对象。</span><span class="sxs-lookup"><span data-stu-id="25ace-121">The following code example illustrates the implementation of  <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="25ace-122">此示例将创建<xref:System.Collections.Generic.SortedList%602>与字符串的集合`Temperature`对象密钥，并将温度和字符串的若干个对添加到未按顺序列表。</span><span class="sxs-lookup"><span data-stu-id="25ace-122">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="25ace-123">在调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法，<xref:System.Collections.Generic.SortedList%602>集合使用<xref:System.IComparable%601>实现进行排序的列表项，然后显示递增温度的顺序。</span><span class="sxs-lookup"><span data-stu-id="25ace-123">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="25ace-124">替换为的类型参数<see cref="T:System.IComparable`1" />接口与实现此接口的类型。</span><span class="sxs-lookup"><span data-stu-id="25ace-124">Replace the type parameter of the <see cref="T:System.IComparable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="25ace-125">如果实现<see cref="T:System.IComparable`1" />，则应重载<see langword="op_GreaterThan" />， <see langword="op_GreaterThanOrEqual" />， <see langword="op_LessThan" />，并<see langword="op_LessThanOrEqual" />运算符以返回与一致的值<see cref="M:System.IComparable`1.CompareTo(`0)" />。</span><span class="sxs-lookup"><span data-stu-id="25ace-125">If you implement <see cref="T:System.IComparable`1" />, you should overload the <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, and <see langword="op_LessThanOrEqual" /> operators to return values that are consistent with <see cref="M:System.IComparable`1.CompareTo(`0)" />.</span></span> <span data-ttu-id="25ace-126">此外，还应实现<see cref="T:System.IEquatable`1" />。</span><span class="sxs-lookup"><span data-stu-id="25ace-126">In addition, you should also implement <see cref="T:System.IEquatable`1" />.</span></span> <span data-ttu-id="25ace-127">请参阅<see cref="T:System.IEquatable`1" />一文，了解完整的信息。</span><span class="sxs-lookup"><span data-stu-id="25ace-127">See the <see cref="T:System.IEquatable`1" /> article for complete information.</span></span></para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="25ace-128">与此实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="25ace-128">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="25ace-129">将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</span><span class="sxs-lookup"><span data-stu-id="25ace-129">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span></span></summary>
        <returns><span data-ttu-id="25ace-130">一个值，指示要比较的对象的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="25ace-130">A value that indicates the relative order of the objects being compared.</span></span> <span data-ttu-id="25ace-131">返回值的含义如下：</span><span class="sxs-lookup"><span data-stu-id="25ace-131">The return value has these meanings:</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="25ace-132">值</span><span class="sxs-lookup"><span data-stu-id="25ace-132">Value</span></span> 
 </term><description> <span data-ttu-id="25ace-133">含义</span><span class="sxs-lookup"><span data-stu-id="25ace-133">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="25ace-134">小于零</span><span class="sxs-lookup"><span data-stu-id="25ace-134">Less than zero</span></span> 
 </term><description> <span data-ttu-id="25ace-135">此实例在排序顺序中位于 <paramref name="other" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="25ace-135">This instance precedes <paramref name="other" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="25ace-136">零</span><span class="sxs-lookup"><span data-stu-id="25ace-136">Zero</span></span> 
 </term><description> <span data-ttu-id="25ace-137">此实例在排序顺序中的位置与 <paramref name="other" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="25ace-137">This instance occurs in the same position in the sort order as <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="25ace-138">大于零</span><span class="sxs-lookup"><span data-stu-id="25ace-138">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="25ace-139">此实例在排序顺序中位于 <paramref name="other" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="25ace-139">This instance follows <paramref name="other" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25ace-140"><xref:System.IComparable%601.CompareTo%2A> 提供泛型集合对象的成员进行排序的强类型的比较方法。</span><span class="sxs-lookup"><span data-stu-id="25ace-140"><xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="25ace-141">正因为如此，它是通常不直接从开发人员代码调用。</span><span class="sxs-lookup"><span data-stu-id="25ace-141">Because of this, it is usually not called directly from developer code.</span></span> <span data-ttu-id="25ace-142">相反，它将自动调用方法等<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。</span><span class="sxs-lookup"><span data-stu-id="25ace-142">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="25ace-143">此方法只是一个定义，必须由特定类或值类型产生影响。</span><span class="sxs-lookup"><span data-stu-id="25ace-143">This method is only a definition and must be implemented by a specific class or value type to have effect.</span></span> <span data-ttu-id="25ace-144">部分 （"之前"、"中出现的相同位置作为"，和"遵循） 取决于特定实现的返回值中指定的比较的含义。</span><span class="sxs-lookup"><span data-stu-id="25ace-144">The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</span></span>  
  
 <span data-ttu-id="25ace-145">根据定义，任何对象相比较大于`null`，两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="25ace-145">By definition, any object compares greater than `null`, and two null references compare equal to each other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25ace-146">下面的代码示例说明了实现<xref:System.IComparable%601>为简单的`Temperature`对象。</span><span class="sxs-lookup"><span data-stu-id="25ace-146">The following code example illustrates the implementation of <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="25ace-147">此示例将创建<xref:System.Collections.Generic.SortedList%602>与字符串的集合`Temperature`对象密钥，并将温度和字符串的若干个对添加到未按顺序列表。</span><span class="sxs-lookup"><span data-stu-id="25ace-147">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="25ace-148">在调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法，<xref:System.Collections.Generic.SortedList%602>集合使用<xref:System.IComparable%601>实现进行排序的列表项，然后显示递增温度的顺序。</span><span class="sxs-lookup"><span data-stu-id="25ace-148">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="25ace-149">对于对象 A、 B 和 C，必须满足以下条件：</span><span class="sxs-lookup"><span data-stu-id="25ace-149">For objects A, B, and C, the following must be true:</span></span> 
 <span data-ttu-id="25ace-150"><c>A.CompareTo(A)</c>需要返回零。</span><span class="sxs-lookup"><span data-stu-id="25ace-150"><c>A.CompareTo(A)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="25ace-151">如果<c>A.CompareTo(B)</c>返回零，则<c>B.CompareTo(A)</c>需要返回零。</span><span class="sxs-lookup"><span data-stu-id="25ace-151">If <c>A.CompareTo(B)</c> returns zero, then <c>B.CompareTo(A)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="25ace-152">如果<c>A.CompareTo(B)</c>将返回零和<c>B.CompareTo(C)</c>返回零，则<c>A.CompareTo(C)</c>需要返回零。</span><span class="sxs-lookup"><span data-stu-id="25ace-152">If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero, then <c>A.CompareTo(C)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="25ace-153">如果<c>A.CompareTo(B)</c>返回的值不为零，然后<c>B.CompareTo(A)</c>需要返回相反的符号的值。</span><span class="sxs-lookup"><span data-stu-id="25ace-153">If <c>A.CompareTo(B)</c> returns a value other than zero, then <c>B.CompareTo(A)</c> is required to return a value of the opposite sign.</span></span>  
  
<span data-ttu-id="25ace-154">如果<c>A.CompareTo(B)</c>返回的值<paramref name="x" />不等于零，和<c>B.CompareTo(C)</c>返回的值<paramref name="y" />的相同的符号<paramref name="x" />，然后<c>A.CompareTo(C)</c>返回相同的符号的值所需<paramref name="x" />和<paramref name="y" />。</span><span class="sxs-lookup"><span data-stu-id="25ace-154">If <c>A.CompareTo(B)</c> returns a value <paramref name="x" /> that is not equal to zero, and <c>B.CompareTo(C)</c> returns a value <paramref name="y" /> of the same sign as <paramref name="x" />, then <c>A.CompareTo(C)</c> is required to return a value of the same sign as <paramref name="x" /> and <paramref name="y" />.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="25ace-155">使用<see cref="M:System.IComparable`1.CompareTo(`0)" />方法来确定某个类的实例的排序。</span><span class="sxs-lookup"><span data-stu-id="25ace-155">Use the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method to determine the ordering of instances of a class.</span></span></para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>