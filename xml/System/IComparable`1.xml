<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5931aa26cc190dfe5da0d88c66d2c06eaa43d705" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58727323" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <summary>定义由值类型或类实现的通用比较方法，旨在创建特定于类型的比较方法以对实例进行排序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口由可排序的值类型实现，并提供强类型化的比较方法的泛型集合对象的成员进行排序。 例如，1 个数字可能会大于第二个数字，和一个字符串可以显示之前另一个按字母顺序。 它需要实现的类型定义一个方法， <xref:System.IComparable%601.CompareTo%28%600%29>，，该值指示是否在排序顺序中的当前实例的位置是之前，之后，或者与相同类型的第二个对象相同。 通常情况下，不是直接从开发人员代码调用方法。 相反，它将自动调用方法等<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。  
  
 通常情况下，所提供的类型<xref:System.IComparable%601>实现还实现<xref:System.IEquatable%601>接口。 <xref:System.IEquatable%601>接口定义<xref:System.IEquatable%601.Equals%2A>方法，这可确定的相等性的实现类型的实例。  
  
 实现<xref:System.IComparable%601.CompareTo%28%600%29>方法必须返回<xref:System.Int32>，具有三个值之一下, 表中所示。  
  
|值|含义|  
|-----------|-------------|  
|小于零|此对象之前指定的对象<xref:System.IComparable%601.CompareTo%2A>方法排序顺序中的。|  
|零|此当前实例中出现的相同位置在排序顺序中指定的对象作为<xref:System.IComparable%601.CompareTo%2A>方法自变量。|  
|大于零|此当前实例位于指定的对象<xref:System.IComparable%601.CompareTo%2A>方法排序顺序中的自变量。|  
  
 所有数值类型 (如<xref:System.Int32>并<xref:System.Double>) 实现<xref:System.IComparable%601>，这一点与<xref:System.String>， <xref:System.Char>，并<xref:System.DateTime>。 自定义类型还应提供其自己的实现<xref:System.IComparable%601>以启用要排序或排序的对象实例。  
  
   
  
## Examples  
 下面的代码示例说明了实现<xref:System.IComparable%601>为简单的`Temperature`对象。 此示例将创建<xref:System.Collections.Generic.SortedList%602>与字符串的集合`Temperature`对象密钥，并将温度和字符串的若干个对添加到未按顺序列表。 在调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法，<xref:System.Collections.Generic.SortedList%602>集合使用<xref:System.IComparable%601>实现进行排序的列表项，然后显示递增温度的顺序。  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>替换为的类型参数<see cref="T:System.IComparable`1" />接口与实现此接口的类型。  
  
如果实现<see cref="T:System.IComparable`1" />，则应重载<see langword="op_GreaterThan" />， <see langword="op_GreaterThanOrEqual" />， <see langword="op_LessThan" />，并<see langword="op_LessThanOrEqual" />运算符以返回与一致的值<see cref="M:System.IComparable`1.CompareTo(`0)" />。 此外，还应实现<see cref="T:System.IEquatable`1" />。 请参阅<see cref="T:System.IEquatable`1" />一文，了解完整的信息。</para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">与此实例进行比较的对象。</param>
        <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
        <returns>一个值，指示要比较的对象的相对顺序。 返回值的含义如下： 
 <list type="table"><listheader><term> 值 
 </term><description> 含义 
 </description></listheader><item><term> 小于零 
 </term><description> 此实例在排序顺序中位于 <paramref name="other" /> 之前。  
  
 </description></item><item><term> 零 
 </term><description> 此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  
  
 </description></item><item><term> 大于零 
 </term><description> 此实例在排序顺序中位于 <paramref name="other" /> 之后。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> 提供泛型集合对象的成员进行排序的强类型的比较方法。 正因为如此，它是通常不直接从开发人员代码调用。 相反，它将自动调用方法等<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。  
  
 此方法只是一个定义，必须由特定类或值类型产生影响。 部分 （"之前"、"中出现的相同位置作为"，和"遵循） 取决于特定实现的返回值中指定的比较的含义。  
  
 根据定义，任何对象相比较大于`null`，两个 null 引用的比较结果相等的。  
  
   
  
## Examples  
 下面的代码示例说明了实现<xref:System.IComparable%601>为简单的`Temperature`对象。 此示例将创建<xref:System.Collections.Generic.SortedList%602>与字符串的集合`Temperature`对象密钥，并将温度和字符串的若干个对添加到未按顺序列表。 在调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法，<xref:System.Collections.Generic.SortedList%602>集合使用<xref:System.IComparable%601>实现进行排序的列表项，然后显示递增温度的顺序。  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>对于对象 A、 B 和 C，必须满足以下条件： 
 <c>A.CompareTo(A)</c>需要返回零。  
  
如果<c>A.CompareTo(B)</c>返回零，则<c>B.CompareTo(A)</c>需要返回零。  
  
如果<c>A.CompareTo(B)</c>将返回零和<c>B.CompareTo(C)</c>返回零，则<c>A.CompareTo(C)</c>需要返回零。  
  
如果<c>A.CompareTo(B)</c>返回的值不为零，然后<c>B.CompareTo(A)</c>需要返回相反的符号的值。  
  
如果<c>A.CompareTo(B)</c>返回的值<paramref name="x" />不等于零，和<c>B.CompareTo(C)</c>返回的值<paramref name="y" />的相同的符号<paramref name="x" />，然后<c>A.CompareTo(C)</c>返回相同的符号的值所需<paramref name="x" />和<paramref name="y" />。</para></block>
        <block subset="none" type="usage"><para>使用<see cref="M:System.IComparable`1.CompareTo(`0)" />方法来确定某个类的实例的排序。</para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>