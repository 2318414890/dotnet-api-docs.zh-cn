<Type Name="Enum" FullName="System.Enum">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99f214e1b0b59cd98cb95ac14df6352797e1f4ec" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36432376" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="F#" Value="type Enum = class&#xA;    inherit ValueType&#xA;    interface IComparable&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="74078-101">为枚举提供基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="74078-101">Provides the base class for enumerations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-102">枚举是一组其基础类型是任何整型类型的已命名常数。</span><span class="sxs-lookup"><span data-stu-id="74078-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="74078-103">如果显式声明没有基础类型，<xref:System.Int32>使用。</span><span class="sxs-lookup"><span data-stu-id="74078-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="74078-104"><xref:System.Enum> 是.NET Framework 中的所有枚举的基类。</span><span class="sxs-lookup"><span data-stu-id="74078-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="74078-105">枚举类型由定义`enum`C# 中的关键字和`Enum`...`End Enum`在 Visual Basic 中构造。</span><span class="sxs-lookup"><span data-stu-id="74078-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="74078-106"><xref:System.Enum> 提供用于比较此类的实例、 将实例的值转换为其字符串表示形式，将数字的字符串表示转换为此类的实例和创建一个指定的枚举和值的实例方法。</span><span class="sxs-lookup"><span data-stu-id="74078-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="74078-107">你还可以将枚举视为位域。</span><span class="sxs-lookup"><span data-stu-id="74078-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="74078-108">有关详细信息，请参阅[非独占成员和标志特性](#Flags)部分和<xref:System.FlagsAttribute>主题。</span><span class="sxs-lookup"><span data-stu-id="74078-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="74078-109">本主题内容：</span><span class="sxs-lookup"><span data-stu-id="74078-109">In this topic:</span></span>  
  
 <span data-ttu-id="74078-110">[创建枚举类型](#Creating) </span><span class="sxs-lookup"><span data-stu-id="74078-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="74078-111">[实例化枚举类型](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="74078-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="74078-112">[枚举最佳做法](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="74078-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="74078-113">[使用枚举执行操作](#Operations) </span><span class="sxs-lookup"><span data-stu-id="74078-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="74078-114">执行转换的转换</span><span class="sxs-lookup"><span data-stu-id="74078-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="74078-115">分析枚举值</span><span class="sxs-lookup"><span data-stu-id="74078-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="74078-116">格式设置的枚举值</span><span class="sxs-lookup"><span data-stu-id="74078-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="74078-117">循环访问枚举成员</span><span class="sxs-lookup"><span data-stu-id="74078-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="74078-118">非独占成员和标志特性</span><span class="sxs-lookup"><span data-stu-id="74078-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="74078-119">添加枚举方法</span><span class="sxs-lookup"><span data-stu-id="74078-119">Adding enumeration methods</span></span>](#methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="74078-120">创建枚举类型</span><span class="sxs-lookup"><span data-stu-id="74078-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="74078-121">编程语言通常提供语法声明一个命名的常量及其值的一组组成的枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="74078-122">下面的示例演示 C# 和 Visual Basic 用于定义枚举的语法。</span><span class="sxs-lookup"><span data-stu-id="74078-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="74078-123">它将创建名为枚举`ArrivalStatus`有三个成员： `ArrivalStatus.Early`， `ArrivalStatus.OnTime`，和`ArrivalStatus.Late`。</span><span class="sxs-lookup"><span data-stu-id="74078-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="74078-124">请注意，在这两种情况下，枚举不会显式继承从<xref:System.Enum>; 由编译器进行隐式处理继承关系。</span><span class="sxs-lookup"><span data-stu-id="74078-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="74078-125">切勿创建其基础类型是非整型的枚举类型或<xref:System.Char>。</span><span class="sxs-lookup"><span data-stu-id="74078-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="74078-126">虽然你可以通过使用反射来创建此类枚举类型，则使用生成的类型的方法调用是不可靠的和也可能会引发其他异常。</span><span class="sxs-lookup"><span data-stu-id="74078-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="74078-127">实例化枚举类型</span><span class="sxs-lookup"><span data-stu-id="74078-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="74078-128">可以实例化枚举类型，就像实例化任何其他值类型： 通过声明一个变量并为其赋值的枚举常量之一。</span><span class="sxs-lookup"><span data-stu-id="74078-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="74078-129">下面的示例实例化`ArrivalStatus`其值是`ArrivalStatus.OnTime`。</span><span class="sxs-lookup"><span data-stu-id="74078-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="74078-130">你还可以通过以下方式在实例化一个枚举值：</span><span class="sxs-lookup"><span data-stu-id="74078-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="74078-131">通过使用采用特定编程语言的功能 （如 C#) 强制转换或转换 （如 Visual Basic 中) 的整数值的枚举值。</span><span class="sxs-lookup"><span data-stu-id="74078-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="74078-132">下面的示例创建`ArrivalStatus`对象，其值是`ArrivalStatus.Early`以这种方式。</span><span class="sxs-lookup"><span data-stu-id="74078-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="74078-133">通过调用其隐式的默认构造函数。</span><span class="sxs-lookup"><span data-stu-id="74078-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="74078-134">如下面的示例所示，在这种情况下枚举实例的基础值为 0。</span><span class="sxs-lookup"><span data-stu-id="74078-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="74078-135">但是，这不一定在枚举中的有效常量的值。</span><span class="sxs-lookup"><span data-stu-id="74078-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="74078-136">通过调用<xref:System.Enum.Parse%2A>或<xref:System.Enum.TryParse%2A>方法，以便分析包含枚举中常数的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="74078-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="74078-137">有关详细信息，请参阅[分析枚举值](#parsing)部分。</span><span class="sxs-lookup"><span data-stu-id="74078-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="74078-138">通过调用<xref:System.Enum.ToObject%2A>方法将一个整数值转换为枚举类型。</span><span class="sxs-lookup"><span data-stu-id="74078-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="74078-139">有关详细信息，请参阅[执行转换](#conversions)部分。</span><span class="sxs-lookup"><span data-stu-id="74078-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="74078-140">枚举最佳做法</span><span class="sxs-lookup"><span data-stu-id="74078-140">Enumeration best practices</span></span>  
 <span data-ttu-id="74078-141">我们建议你在定义枚举类型时使用下列最佳方案：</span><span class="sxs-lookup"><span data-stu-id="74078-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="74078-142">如果你尚未定义枚举成员，其值为 0，请考虑创建`None`枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="74078-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="74078-143">默认情况下，用于枚举的内存初始化为零的公共语言运行时。</span><span class="sxs-lookup"><span data-stu-id="74078-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="74078-144">因此，如果未定义其值为零的常量，枚举将包含在创建时非法值。</span><span class="sxs-lookup"><span data-stu-id="74078-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="74078-145">如果没有明显的默认情况下，你的应用程序具有表示，请考虑使用枚举常量其值为零表示它。</span><span class="sxs-lookup"><span data-stu-id="74078-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="74078-146">如果没有任何默认情况下，请考虑使用由任何其他枚举常量的枚举的常数其值为零，以指定不会显示的大小写。</span><span class="sxs-lookup"><span data-stu-id="74078-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="74078-147">不要指定保留供将来使用的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="74078-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="74078-148">当你定义的方法或属性，它采用作为值的枚举的常数时，请考虑验证值。</span><span class="sxs-lookup"><span data-stu-id="74078-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="74078-149">原因是，即使该数值不在枚举中定义，你可以强制转换为枚举类型的数字值。</span><span class="sxs-lookup"><span data-stu-id="74078-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="74078-150">中列出其常量是位域的枚举类型的其他最佳实践[非独占成员和标志特性](#Flags)部分。</span><span class="sxs-lookup"><span data-stu-id="74078-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="74078-151">使用枚举执行操作</span><span class="sxs-lookup"><span data-stu-id="74078-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="74078-152">创建枚举时，不能定义新的方法。</span><span class="sxs-lookup"><span data-stu-id="74078-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="74078-153">但是，枚举类型继承一组完整的静态和实例方法从<xref:System.Enum>类。</span><span class="sxs-lookup"><span data-stu-id="74078-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="74078-154">下列各节调查这些方法，除了使用枚举值时常用的其他几个方法中的大多数。</span><span class="sxs-lookup"><span data-stu-id="74078-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="74078-155">执行转换的转换</span><span class="sxs-lookup"><span data-stu-id="74078-155">Performing conversions</span></span>  
 <span data-ttu-id="74078-156">可以使用强制转换 （在 C# 中) 或 （在 Visual Basic) 的转换运算符枚举成员和其基础类型之间进行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="74078-157">下面的示例使用强制转换或转换运算符来执行转换，同时从给枚举值的整数和一个枚举值为整数。</span><span class="sxs-lookup"><span data-stu-id="74078-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="74078-158"><xref:System.Enum>类还进行了<xref:System.Enum.ToObject%2A>将任何整数类型的值转换为枚举值的方法。</span><span class="sxs-lookup"><span data-stu-id="74078-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="74078-159">下面的示例使用<xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>方法将转换<xref:System.Int32>到`ArrivalStatus`值。</span><span class="sxs-lookup"><span data-stu-id="74078-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="74078-160">请注意，因为<xref:System.Enum.ToObject%2A>返回类型的值<xref:System.Object>，强制转换或转换运算符的使用可能仍有必要将对象转换为枚举类型。</span><span class="sxs-lookup"><span data-stu-id="74078-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="74078-161">当将整数转换为一个枚举值，则可以将分配一个值，不是实际的枚举成员。</span><span class="sxs-lookup"><span data-stu-id="74078-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="74078-162">若要防止此情况，你可以传递到整数<xref:System.Enum.IsDefined%2A>方法，然后再执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="74078-163">下面的示例使用此方法来确定的整数值的数组中的元素是否可以转换为`ArrivalStatus`值。</span><span class="sxs-lookup"><span data-stu-id="74078-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="74078-164">尽管<xref:System.Enum>类提供的显式接口实现<xref:System.IConvertible>接口对于从一个枚举值转换为整数类型，应使用的方法<xref:System.Convert>类，如<xref:System.Convert.ToInt32%2A>到执行这些转换。</span><span class="sxs-lookup"><span data-stu-id="74078-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="74078-165">下面的示例演示如何使用<xref:System.Enum.GetUnderlyingType%2A>方法以及<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>方法将一个枚举值转换为其基础类型。</span><span class="sxs-lookup"><span data-stu-id="74078-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="74078-166">请注意，此示例不需要在编译时已知枚举的基础类型。</span><span class="sxs-lookup"><span data-stu-id="74078-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="74078-167">分析枚举值</span><span class="sxs-lookup"><span data-stu-id="74078-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="74078-168"><xref:System.Enum.Parse%2A>和<xref:System.Enum.TryParse%2A>方法允许您将一个枚举值的字符串表示转换成该值。</span><span class="sxs-lookup"><span data-stu-id="74078-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="74078-169">字符串表示形式可以是的名称或基础值的枚举常量。</span><span class="sxs-lookup"><span data-stu-id="74078-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="74078-170">注意： 分析方法已成功转换的不是特定枚举的成员，如果字符串可以转换为枚举的基础类型的值的数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="74078-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="74078-171">若要避免此情形，<xref:System.Enum.IsDefined%2A>可以调用方法，以确保分析方法的结果是一个有效的枚举值。</span><span class="sxs-lookup"><span data-stu-id="74078-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="74078-172">此示例演示了此方法，并演示对同时调用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>和<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="74078-173">请注意，非泛型分析方法返回一个对象，你可能需要强制转换 （在 C# 中) 或 （在 Visual Basic 中) 转换为相应的枚举类型。</span><span class="sxs-lookup"><span data-stu-id="74078-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="74078-174">格式设置的枚举值</span><span class="sxs-lookup"><span data-stu-id="74078-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="74078-175">你可以通过调用静态枚举值转换为其字符串表示形式<xref:System.Enum.Format%2A>方法，以及该实例的重载<xref:System.Enum.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="74078-176">一个格式字符串可用于控制在其中一个枚举值表示为字符串的精确方式。</span><span class="sxs-lookup"><span data-stu-id="74078-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="74078-177">有关详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="74078-178">下面的示例使用每个受支持的枚举格式字符串"（"G"或"g"、"D"或"d"、 X"或"x"和"F"或"f"） 将转换的成员`ArrivalStatus`枚举其字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="74078-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="74078-179">循环访问枚举成员</span><span class="sxs-lookup"><span data-stu-id="74078-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="74078-180"><xref:System.Enum>类型未实现<xref:System.Collections.IEnumerable>或<xref:System.Collections.Generic.IEnumerable%601>接口，从而使你能通过使用循环集合的成员`foreach`（在 C# 中) 或`For Each`（在 Visual Basic 中) 构造。</span><span class="sxs-lookup"><span data-stu-id="74078-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="74078-181">但是，你可以枚举中两种方法之一的成员。</span><span class="sxs-lookup"><span data-stu-id="74078-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="74078-182">你可以调用<xref:System.Enum.GetNames%2A>方法来检索包含枚举成员的名称的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="74078-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="74078-183">接下来，对字符串数组的每个元素，您可以调用<xref:System.Enum.Parse%2A>方法将字符串转换为其等效的枚举值。</span><span class="sxs-lookup"><span data-stu-id="74078-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="74078-184">下面的示例阐释了这种方法。</span><span class="sxs-lookup"><span data-stu-id="74078-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="74078-185">你可以调用<xref:System.Enum.GetValues%2A>枚举中的方法来检索一个数组，包含基础值。</span><span class="sxs-lookup"><span data-stu-id="74078-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="74078-186">接下来，对该数组的每个元素，您可以调用<xref:System.Enum.ToObject%2A>方法将整数转换为其等效的枚举值。</span><span class="sxs-lookup"><span data-stu-id="74078-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="74078-187">下面的示例阐释了这种方法。</span><span class="sxs-lookup"><span data-stu-id="74078-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="74078-188">非独占成员和标志特性</span><span class="sxs-lookup"><span data-stu-id="74078-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="74078-189">枚举的一个常见用途是表示一组互斥的值。</span><span class="sxs-lookup"><span data-stu-id="74078-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="74078-190">例如，`ArrivalStatus`实例可以具有的值`Early`， `OnTime`，或`Late`。</span><span class="sxs-lookup"><span data-stu-id="74078-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="74078-191">没有意义的值的`ArrivalStatus`实例以反映多个枚举常量。</span><span class="sxs-lookup"><span data-stu-id="74078-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="74078-192">在其他情况下，但是，枚举对象的值可以包含多个枚举成员，并且每个成员表示中的枚举值的位字段。</span><span class="sxs-lookup"><span data-stu-id="74078-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="74078-193"><xref:System.FlagsAttribute>特性用于指示的位域构成的枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="74078-194">例如，名为枚举`Pets`可能用于指示在全体宠物的种类。</span><span class="sxs-lookup"><span data-stu-id="74078-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="74078-195">可以如下所示定义它。</span><span class="sxs-lookup"><span data-stu-id="74078-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="74078-196">`Pets`可以然后使用枚举，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="74078-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="74078-197">定义按位时，应使用下列最佳方案枚举并将其应用<xref:System.FlagsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="74078-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="74078-198">使用<xref:System.FlagsAttribute>枚举才是对数字值执行按位运算 （AND、 OR 独占或） 的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="74078-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="74078-199">在 2 的幂，即 1、 2、 4、 8 等中定义枚举常量。</span><span class="sxs-lookup"><span data-stu-id="74078-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="74078-200">这意味着不重叠中组合的枚举常量的各个标志。</span><span class="sxs-lookup"><span data-stu-id="74078-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="74078-201">请考虑创建针对常用的标志组合的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="74078-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="74078-202">例如，如果你有用于文件 I/O 操作的枚举包含枚举的常数`Read = 1`和`Write = 2`，请考虑创建枚举的常数`ReadWrite = Read OR Write`，它结合`Read`和`Write`标志。</span><span class="sxs-lookup"><span data-stu-id="74078-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="74078-203">此外，可用于组合标志的按位 OR 操作视为在某些情况下，不应为用于简单任务所需的一个高级的概念。</span><span class="sxs-lookup"><span data-stu-id="74078-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="74078-204">如果为标志枚举常量中定义为负数，因为很多标志位置可能会设置为 1，这可能会使你的代码的混乱，并鼓励编码错误，请务必小心。</span><span class="sxs-lookup"><span data-stu-id="74078-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="74078-205">测试是否在数值中设置一个标志一种简便方式是调用实例<xref:System.Enum.HasFlag%2A>方法，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="74078-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="74078-206">它相当于执行之间的数字值和标志枚举的常数，它将所有位都设置为不对应于标志的零的数字值中，按位与运算，然后测试该操作的结果是否等于标志枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="74078-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="74078-207">下列示例对此进行了阐释。</span><span class="sxs-lookup"><span data-stu-id="74078-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="74078-208">使用`None`用作枚举其值为零的常量的标志名称。</span><span class="sxs-lookup"><span data-stu-id="74078-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="74078-209">不能使用`None`按位运算中，来测试一个标志，因为结果始终为零的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="74078-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="74078-210">但是，你可以执行的逻辑不之间的数字值的按位、 比较和`None`枚举的常量，以确定是否已设置在数值中的任何位。</span><span class="sxs-lookup"><span data-stu-id="74078-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="74078-211">下列示例对此进行了阐释。</span><span class="sxs-lookup"><span data-stu-id="74078-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="74078-212">未定义一个枚举值，只是为了镜像与枚举本身的状态。</span><span class="sxs-lookup"><span data-stu-id="74078-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="74078-213">例如，不定义仅用于枚举的结束标记的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="74078-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="74078-214">如果你需要确定在枚举的最后一个值，请显式检查该值。</span><span class="sxs-lookup"><span data-stu-id="74078-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="74078-215">此外，你可以执行范围检查第一个和最后一个枚举常量，如果范围内的所有值都是有效。</span><span class="sxs-lookup"><span data-stu-id="74078-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="74078-216">添加枚举方法</span><span class="sxs-lookup"><span data-stu-id="74078-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="74078-217">因为枚举类型按语言结构，如定义`enum`(C#) 和`Enum`(Visual Basic 中)，不能定义为非继承自的那些方法枚举类型的自定义方法<xref:System.Enum>类。</span><span class="sxs-lookup"><span data-stu-id="74078-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="74078-218">但是，你可以使用扩展方法将功能添加到特定的枚举类型。</span><span class="sxs-lookup"><span data-stu-id="74078-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="74078-219">在下面的示例中，`Grades` 枚举表示学生可能在班里收到的字母等级分。</span><span class="sxs-lookup"><span data-stu-id="74078-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="74078-220">该示例将一个名为 `Passing` 的扩展方法添加到 `Grades` 类型中，以便该类型的每个实例现在都“知道”它是否表示合格的等级分。</span><span class="sxs-lookup"><span data-stu-id="74078-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="74078-221">`Extensions`类还包含定义的最小传递评分结果的静态读写变量。</span><span class="sxs-lookup"><span data-stu-id="74078-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="74078-222">返回值`Passing`扩展方法将反映该变量的当前值。</span><span class="sxs-lookup"><span data-stu-id="74078-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="74078-223">下面的示例演示如何使用枚举来表示已命名的值和另一个枚举表示已命名的位域。</span><span class="sxs-lookup"><span data-stu-id="74078-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="74078-224">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="74078-224">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="74078-225">初始化 <see cref="T:System.Enum" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="enum.CompareTo target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="74078-226">要比较的对象，或为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-226">An object to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-227">将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-227">Compares this instance to a specified object and returns an indication of their relative values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-228">一个有符号数，用于指示此实例和 <paramref name="target" /> 的相对值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span>
          </span>
          <span data-ttu-id="74078-229">
            <list type="table">
              <listheader>
                <term> 值  </term>
                <description> 含义  </description>
              </listheader>
              <item>
                <term> 小于零  </term>
                <description> 此实例的值小于 <paramref name="target" /> 的值。</description>
              </item>
              <item>
                <term> 零  </term>
                <description> 此实例的值与 <paramref name="target" /> 的值相等。</description>
              </item>
              <item>
                <term> 大于零  </term>
                <description> 此实例的值大于 <paramref name="target" /> 的值。  -或-  <paramref name="target" /> 为 <see langword="null" />。  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-229">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The value of this instance is less than the value of <paramref name="target" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The value of this instance is equal to the value of <paramref name="target" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The value of this instance is greater than the value of <paramref name="target" />.  -or-  <paramref name="target" /> is <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="74078-230">下面的示例演示如何使用`CompareTo`的上下文中`Enum`。</span><span class="sxs-lookup"><span data-stu-id="74078-230">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-231">
            <paramref name="target" /> 与此实例不是同一类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-231">
              <paramref name="target" /> and this instance are not the same type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-232">此实例不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" /> 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-232">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="enum.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="74078-233">与此实例进行比较的对象，或为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-233">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-234">返回一个值，该值指示此实例是否等于指定的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-234">Returns a value indicating whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-235">如果枚举值 <paramref name="obj" /> 的类型和基础值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-235">
              <see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-236"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType>方法重写<xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>来定义如何将枚举成员评估是否相等。</span><span class="sxs-lookup"><span data-stu-id="74078-236">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-237">下面的示例演示 <xref:System.Enum.Equals%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="74078-237">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="74078-238">下面的示例定义两种枚举类型，`SledDog`和`WorkDog`。</span><span class="sxs-lookup"><span data-stu-id="74078-238">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="74078-239">`SledDog`枚举具有两个成员，`SledDog.AlaskanMalamute`和`SledDog.Malamute`，具有相同的基础值。</span><span class="sxs-lookup"><span data-stu-id="74078-239">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="74078-240">调用<xref:System.Enum.Equals%2A>方法指示这些值是否相等的因为其基础值相同。</span><span class="sxs-lookup"><span data-stu-id="74078-240">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="74078-241">`SledDog.Malamute`和`WorkDog.Newfoundland`该组的成员具有相同的基础值，不过它们表示不同的枚举类型。</span><span class="sxs-lookup"><span data-stu-id="74078-241">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="74078-242">调用<xref:System.Enum.Equals%2A>方法指示这些值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="74078-242">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberSignature Language="F#" Value="static member Format : Type * obj * string -&gt; string" Usage="System.Enum.Format (enumType, value, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-243">要转换的值的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-243">The enumeration type of the value to convert.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-244">要转换的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-244">The value to convert.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="74078-245">要使用的输出格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-245">The output format to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-246">根据指定格式将指定枚举类型的指定值转换为其等效的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-246">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-247">
            <paramref name="value" /> 的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-247">A string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-248">下表显示的有效值`format`参数。</span><span class="sxs-lookup"><span data-stu-id="74078-248">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="74078-249">格式</span><span class="sxs-lookup"><span data-stu-id="74078-249">Format</span></span>|<span data-ttu-id="74078-250">描述</span><span class="sxs-lookup"><span data-stu-id="74078-250">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="74078-251">“G”或“g”</span><span class="sxs-lookup"><span data-stu-id="74078-251">"G" or "g"</span></span>|<span data-ttu-id="74078-252">如果`value`是等于命名的枚举常数，该常数的名称是返回; 否则为的十进制等效`value`返回。</span><span class="sxs-lookup"><span data-stu-id="74078-252">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="74078-253">例如，假设仅枚举的常量名为红色，且其值为 1。</span><span class="sxs-lookup"><span data-stu-id="74078-253">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="74078-254">如果`value`指定为 1，则此格式返回"Red"。</span><span class="sxs-lookup"><span data-stu-id="74078-254">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="74078-255">但是，如果`value`指定为 2，则此格式返回"2"。</span><span class="sxs-lookup"><span data-stu-id="74078-255">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="74078-256">或</span><span class="sxs-lookup"><span data-stu-id="74078-256">-or-</span></span><br /><br /> <span data-ttu-id="74078-257">如果<xref:System.FlagsAttribute>自定义特性应用于枚举，`value`视为包含一个或多个包含一个或多个位标志的位字段。</span><span class="sxs-lookup"><span data-stu-id="74078-257">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="74078-258">如果`value`等于的组合，名为枚举的常数，则返回的分隔符分隔这些常量的名称的列表。</span><span class="sxs-lookup"><span data-stu-id="74078-258">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="74078-259">`value` 搜索标志，则返回的最大值用到的最小值。</span><span class="sxs-lookup"><span data-stu-id="74078-259">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="74078-260">对应于一个位字段在每个标志`value`的常数的名称连接到分隔符分隔的列表。</span><span class="sxs-lookup"><span data-stu-id="74078-260">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="74078-261">该标志的值会然后排除进一步考虑，并且搜索会继续进行下一步的标志。</span><span class="sxs-lookup"><span data-stu-id="74078-261">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="74078-262">如果`value`是否不等于的组合命名枚举的常量的十进制等效`value`返回。</span><span class="sxs-lookup"><span data-stu-id="74078-262">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="74078-263">“X”或“x”</span><span class="sxs-lookup"><span data-stu-id="74078-263">"X" or "x"</span></span>|<span data-ttu-id="74078-264">表示`value`以十六进制格式而无需前导"0x"。</span><span class="sxs-lookup"><span data-stu-id="74078-264">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="74078-265">“D”或“d”</span><span class="sxs-lookup"><span data-stu-id="74078-265">"D" or "d"</span></span>|<span data-ttu-id="74078-266">表示`value`以十进制格式。</span><span class="sxs-lookup"><span data-stu-id="74078-266">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="74078-267">“F”或“f”</span><span class="sxs-lookup"><span data-stu-id="74078-267">"F" or "f"</span></span>|<span data-ttu-id="74078-268">行为与"G"或"g"相同，只不过<xref:System.FlagsAttribute>不需要位于<xref:System.Enum>声明。</span><span class="sxs-lookup"><span data-stu-id="74078-268">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="74078-269">下面的示例演示如何使用`Format`的上下文中`Enum`。</span><span class="sxs-lookup"><span data-stu-id="74078-269">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-270">
            <paramref name="enumType" />、<paramref name="value" /> 或 <paramref name="format" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-270">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-271">
            <paramref name="enumType" /> 参数不是 <see cref="T:System.Enum" /> 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-271">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span>
          </span>
          <span data-ttu-id="74078-272">-或-  <paramref name="value" /> 来自于类型与 <paramref name="enumType" /> 不同的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-272">-or-  The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span>
          </span>
          <span data-ttu-id="74078-273">-或-  <paramref name="value" /> 的类型不是 <paramref name="enumType" /> 的基础类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-273">-or-  The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="74078-274">
            <paramref name="format" /> 参数包含无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-274">The <paramref name="format" /> parameter contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-275">
            <paramref name="format" /> 等于“X”，但枚举类型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-275">
              <paramref name="format" /> equals "X", but the enumeration type is unknown.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="enum.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="74078-276">返回该实例的值的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-276">Returns the hash code for the value of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-277">32 位有符号整数哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-277">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetName : Type * obj -&gt; string" Usage="System.Enum.GetName (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-278">枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-278">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-279">特定枚举常量的值（根据其基础类型）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-279">The value of a particular enumerated constant in terms of its underlying type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-280">在指定枚举中检索具有指定值的常数的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-280">Retrieves the name of the constant in the specified enumeration that has the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-281">一个字符串，其中包含 <paramref name="enumType" /> 中值为 <paramref name="value" /> 的枚举常数的名称；如果没有找到这样的常数，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-281">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-282">如果多个枚举成员具有相同的基础值，<xref:System.Enum.GetName%2A>方法可保证它将返回这些枚举成员之一的名称。</span><span class="sxs-lookup"><span data-stu-id="74078-282">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="74078-283">但是，它不保证它将始终返回相同的枚举成员的名称。</span><span class="sxs-lookup"><span data-stu-id="74078-283">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="74078-284">因此，当多个枚举成员具有相同的值，应用程序代码应永远不会依赖于返回特定成员的名称的方法。</span><span class="sxs-lookup"><span data-stu-id="74078-284">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-285">下面的示例演示如何使用`GetName`。</span><span class="sxs-lookup"><span data-stu-id="74078-285">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-286">
            <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-286">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-287">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-287">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="74078-288">-或-  <paramref name="value" /> 既不属于类型 <paramref name="enumType" />，也不具有与 <paramref name="enumType" /> 相同的基础类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-288">-or-  <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetNames : Type -&gt; string[]" Usage="System.Enum.GetNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-289">枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-289">An enumeration type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-290">检索指定枚举中常数名称的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-290">Retrieves an array of the names of the constants in a specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-291">
            <paramref name="enumType" /> 的常数名称的字符串数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-291">A string array of the names of the constants in <paramref name="enumType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-292">返回值数组的元素按枚举常量的二进制值进行排序 (即，由它们无符号的量)。</span><span class="sxs-lookup"><span data-stu-id="74078-292">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="74078-293">下面的示例提供有关返回的数组的显示信息<xref:System.Enum.GetNames%2A>包括负、 零，并且是正数值的枚举方法。</span><span class="sxs-lookup"><span data-stu-id="74078-293">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="74078-294">如果存在具有相同值的枚举的常数，则不指定其相应名称的顺序。</span><span class="sxs-lookup"><span data-stu-id="74078-294">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-295">下面的示例演示 <xref:System.Enum.GetNames%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="74078-295">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-296">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-296">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-297">
            <paramref name="enumType" /> 参数不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-297">
              <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="enum.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="74078-298">返回此枚举成员的基础类型的类型代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-298">Returns the type code of the underlying type of this enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-299">此实例的基础类型的类型代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-299">The type code of the underlying type of this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-300">枚举类型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-300">The enumeration type is unknown.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetUnderlyingType : Type -&gt; Type" Usage="System.Enum.GetUnderlyingType enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-301">基础类型将被检索的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-301">The enumeration whose underlying type will be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-302">返回指定枚举的基础类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-302">Returns the underlying type of the specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-303">
            <paramref name="enumType" /> 的基础类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-303">The underlying type of <paramref name="enumType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-304"><xref:System.Enum>结构使值表示为已命名常数。</span><span class="sxs-lookup"><span data-stu-id="74078-304">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="74078-305">枚举的值的数据类型被称为其基础类型。</span><span class="sxs-lookup"><span data-stu-id="74078-305">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="74078-306">例如，基础类型的<xref:System.DayOfWeek>枚举，包括表示一周中的每一天的常量 (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>， <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>，依次类推)，是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="74078-306">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-307">下面的示例调用<xref:System.Enum.GetUnderlyingType%2A>方法以显示一些枚举成员的基础类型。</span><span class="sxs-lookup"><span data-stu-id="74078-307">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-308">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-308">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-309">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-309">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetValues : Type -&gt; Array" Usage="System.Enum.GetValues enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-310">枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-310">An enumeration type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-311">检索指定枚举中常数值的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-311">Retrieves an array of the values of the constants in a specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-312">一个数组，其中包含 <paramref name="enumType" /> 中常数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-312">An array that contains the values of the constants in <paramref name="enumType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-313">数组的元素按枚举常量的二进制值进行排序 (即，由它们无符号的量)。</span><span class="sxs-lookup"><span data-stu-id="74078-313">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="74078-314">下面的示例显示返回的数组信息<xref:System.Enum.GetValues%2A>包括值为负、 零，并且是正数值的枚举方法。</span><span class="sxs-lookup"><span data-stu-id="74078-314">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="74078-315"><xref:System.Enum.GetValues%2A>方法返回的每个成员包含一个值的数组`enumType`枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-315">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="74078-316">如果多个成员具有相同的值，则返回的数组包含重复值。</span><span class="sxs-lookup"><span data-stu-id="74078-316">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="74078-317">在这种情况下，调用<xref:System.Enum.GetName%2A>方法返回的数组中每个值不会还原分配给具有重复值的成员的唯一名称。</span><span class="sxs-lookup"><span data-stu-id="74078-317">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="74078-318">若要成功检索的枚举成员的所有名称，请调用<xref:System.Enum.GetNames%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-318">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="74078-319"><xref:System.Enum.GetValues%2A>无法在仅限反射上下文中使用反射调用方法。</span><span class="sxs-lookup"><span data-stu-id="74078-319">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="74078-320">相反，你可以通过使用来检索所有枚举成员的值<xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法以获取数组的<xref:System.Reflection.FieldInfo>对象，表示枚举成员，然后调用<xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType>对数组的每个元素的方法。</span><span class="sxs-lookup"><span data-stu-id="74078-320">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="74078-321">下面的示例演示此方法。</span><span class="sxs-lookup"><span data-stu-id="74078-321">The following example illustrates this technique.</span></span> <span data-ttu-id="74078-322">它需要的程序集中名为 Enumerations.dll 定义以下枚举：</span><span class="sxs-lookup"><span data-stu-id="74078-322">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="74078-323">在仅限反射上下文中，加载程序集的<xref:System.Type>对象，表示`Pets`枚举实例化，数组<xref:System.Reflection.FieldInfo>检索对象，并向控制台显示的字段值。</span><span class="sxs-lookup"><span data-stu-id="74078-323">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="74078-324">下面的示例演示如何使用<xref:System.Enum.GetValues%2A>。</span><span class="sxs-lookup"><span data-stu-id="74078-324">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-325">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-325">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-326">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-326">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-327">在仅限反射的上下文中通过反射调用方法，-或-  <paramref name="enumType" /> 是在仅限反射的上下文中加载的程序集中的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-327">The method is invoked by reflection in a reflection-only context,  -or-  <paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberSignature Language="F#" Value="member this.HasFlag : Enum -&gt; bool" Usage="enum.HasFlag flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag">
          <span data-ttu-id="74078-328">一个枚举值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-328">An enumeration value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-329">确定当前实例中是否设置了一个或多个位域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-329">Determines whether one or more bit fields are set in the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-330">如果在 <paramref name="flag" /> 中设置的位域也在当前实例中进行了设置，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-330">
              <see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-331"><xref:System.Enum.HasFlag%2A>方法返回以下布尔表达式的结果。</span><span class="sxs-lookup"><span data-stu-id="74078-331">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="74078-332">如果的基础值`flag`为零，该方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="74078-332">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="74078-333">如果此行为不可取，则可以使用<xref:System.Enum.Equals%2A>方法来测试相等性零并调用<xref:System.Enum.HasFlag%2A>才的基础值`flag`为非零，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="74078-333">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="74078-334"><xref:System.Enum.HasFlag%2A>方法旨在用于与标记的枚举类型<xref:System.FlagsAttribute>属性，并可以用于确定是否设置了多个位字段。</span><span class="sxs-lookup"><span data-stu-id="74078-334">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="74078-335">对于未用标记的枚举类型<xref:System.FlagsAttribute>属性，请调用<xref:System.Enum.Equals%2A>方法或<xref:System.Enum.CompareTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-335">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-336">下面的示例定义`ItemsOrdered`反映客户可以在一家餐厅进行排序的项的类别的枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-336">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="74078-337">该示例测试是否客户具有顺序点了主菜和饮料。</span><span class="sxs-lookup"><span data-stu-id="74078-337">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-338">
            <paramref name="flag" /> 是与当前实例不同的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-338">
              <paramref name="flag" /> is a different type than the current instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDefined : Type * obj -&gt; bool" Usage="System.Enum.IsDefined (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-339">枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-339">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-340">
            <c>enumType</c> 的常数的值或名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-340">The value or name of a constant in <c>enumType</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-341">返回一个布尔值，该值指示给定的整数值或其名称字符串是否存在于指定的枚举中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-341">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-342">如果 <paramref name="enumType" /> 的某个常数具有等于 <paramref name="value" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-342">
              <see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-343">`value`参数可以是任何以下：</span><span class="sxs-lookup"><span data-stu-id="74078-343">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="74078-344">类型的任何成员`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-344">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="74078-345">其值为枚举成员的类型的变量`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-345">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="74078-346">字符串表示形式的枚举成员的名称。</span><span class="sxs-lookup"><span data-stu-id="74078-346">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="74078-347">在字符串中的字符必须具有相同的大小写的枚举成员名称。</span><span class="sxs-lookup"><span data-stu-id="74078-347">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="74078-348">值的基础类型为`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-348">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="74078-349">如果在常量`enumType`定义一组的位字段和`value`包含值、 名称或基础值的多个位字段，<xref:System.Enum.IsDefined%2A>方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="74078-349">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="74078-350">换而言之，定义一组的位域的枚举，该方法确定仅单个位字段是否属于枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-350">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="74078-351">确定是否使用标记的枚举类型中设置多个位字段<xref:System.FlagsAttribute>属性，可以调用<xref:System.Enum.HasFlag%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-351">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-352">下面的示例定义名为枚举`PetType`组成的单个位域。</span><span class="sxs-lookup"><span data-stu-id="74078-352">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="74078-353">然后，它调用<xref:System.Enum.IsDefined%2A>具有基础枚举值、 字符串名称和得到设置多个位域的复合值的可能的方法。</span><span class="sxs-lookup"><span data-stu-id="74078-353">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-354">
            <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-354">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-355">
            <paramref name="enumType" /> 不是 <see langword="Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-355">
              <paramref name="enumType" /> is not an <see langword="Enum" />.</span>
          </span>
          <span data-ttu-id="74078-356">-或-  <paramref name="value" /> 的类型是枚举，但它不是类型 <paramref name="enumType" /> 的枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-356">-or-  The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span>
          </span>
          <span data-ttu-id="74078-357">-或-  <paramref name="value" /> 的类型不是 <paramref name="enumType" /> 的基础类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-357">-or-  The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-358">
            <paramref name="value" /> 的类型不为 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /><see cref="T:System.UInt64" /> 或 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-358">
              <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="74078-359">
            <para>如果<paramref name="enumType" />是一个枚举，通过定义<see cref="T:System.FlagsAttribute" />属性，该方法返回<see langword="false" />如果中的多个位字段<paramref name="value" />设置但<paramref name="value" />不对应一个复合枚举值，或者如果<paramref name="value" />是字符串串联的多个位标志的名称。在下面的示例中，<c>宠物</c>枚举定义与<see cref="T:System.FlagsAttribute" />属性。<see cref="M:System.Enum.IsDefined(System.Type,System.Object)" />方法返回<see langword="false" />传递时，它具有两个位域，一个枚举值 (<c>Pets.Dog</c>和<c>Pets.Cat</c>) 设置，并当你向其传递的字符串表示形式，枚举值 （"Dog，Cat"）。 [！ 代码 csharp [System.Enum.IsDefined#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/系统。Enum.IsDefined/cs/isdefined2.cs#2)] [！ 代码 vb [System.Enum.IsDefined#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/系统。Enum.IsDefined/vb/isdefined2.vb#2)] 你可以确定是否通过调用设置了多个位字段<see cref="M:System.Enum.HasFlag(System.Enum)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-359">
              <para>If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags. In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute. The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").  [!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]  You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="74078-360">将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-360">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
        </summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string -&gt; obj" Usage="System.Enum.Parse (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-361">枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-361">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-362">包含要转换的值或名称的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-362">A string containing the name or value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-363">将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-363">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-364">
            <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-364">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-365">`value`参数包含的字符串表示形式的枚举成员的基础值或已命名的常数、 或的列表命名常量由逗号 （，） 分隔。</span><span class="sxs-lookup"><span data-stu-id="74078-365">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="74078-366">一个或多个空格可以前面或后面每个值、 名称或在逗号`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-366">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="74078-367">如果`value`是列表，则返回值是与按位组合的指定名称的值`OR`操作。</span><span class="sxs-lookup"><span data-stu-id="74078-367">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="74078-368">如果`value`是不对应的命名常量的名称`enumType`，该方法将引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="74078-368">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="74078-369">如果`value`是一个整数，它不表示的基础值的字符串表示`enumType`枚举，该方法返回一个枚举成员，其基础值为`value`转换为整数类型。</span><span class="sxs-lookup"><span data-stu-id="74078-369">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="74078-370">如果不需要此行为，调用<xref:System.Enum.IsDefined%2A>方法，以确保特定的字符串表示形式整数是实际的成员`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-370">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="74078-371">下面的示例定义`Colors`枚举，调用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法将字符串转换为其相应的枚举值和调用<xref:System.Enum.IsDefined%2A>中值的方法，以确保特定的整数值基础`Colors`枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-371">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="74078-372">此操作是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="74078-372">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-373">下面的示例使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法，以便分析通过调用创建的字符串数组<xref:System.Enum.GetNames%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-373">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="74078-374">它还使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法，以便分析包含位域的枚举值。</span><span class="sxs-lookup"><span data-stu-id="74078-374">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-375">
            <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-375">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-376">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-376">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="74078-377">-或-  <paramref name="value" /> 为空字符串或只包含空格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-377">-or-  <paramref name="value" /> is either an empty string or only contains white space.</span>
          </span>
          <span data-ttu-id="74078-378">-或-  <paramref name="value" /> 是一个名称，但不是为该枚举定义的指定常量之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-378">-or-  <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="74078-379">
            <paramref name="value" /> 超出 <paramref name="enumType" /> 基础类型的范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-379">
              <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string * bool -&gt; obj" Usage="System.Enum.Parse (enumType, value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-380">枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-380">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-381">包含要转换的值或名称的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-381">A string containing the name or value to convert.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="74078-382">
            <see langword="true" /> 为忽略大小写；<see langword="false" /> 为考虑大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-382">
              <see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-383">将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-383">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="74078-384">一个参数指定该操作是否不区分大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-384">A parameter specifies whether the operation is case-insensitive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-385">
            <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-385">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-386">`value`参数包含的字符串表示形式的枚举成员的基础值或已命名的常数、 或的列表命名常量由逗号 （，） 分隔。</span><span class="sxs-lookup"><span data-stu-id="74078-386">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="74078-387">一个或多个空格可以前面或后面每个值、 名称或在逗号`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-387">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="74078-388">如果`value`是列表，则返回值是与按位组合的指定名称的值`OR`操作。</span><span class="sxs-lookup"><span data-stu-id="74078-388">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="74078-389">如果`value`是不对应的命名常量的名称`enumType`，该方法将引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="74078-389">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="74078-390">如果`value`是一个整数，它不表示的基础值的字符串表示`enumType`枚举，该方法返回一个枚举成员，其基础值为`value`转换为整数类型。</span><span class="sxs-lookup"><span data-stu-id="74078-390">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="74078-391">如果不需要此行为，调用<xref:System.Enum.IsDefined%2A>方法，以确保特定的字符串表示形式整数是实际的成员`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-391">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="74078-392">下面的示例定义`Colors`枚举，调用<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>方法将字符串转换为其相应的枚举值和调用<xref:System.Enum.IsDefined%2A>中值的方法，以确保特定的整数值基础`Colors`枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-392">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="74078-393">`ignoreCase`参数指定此操作是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="74078-393">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-394">下面的示例使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>方法，以便分析通过调用创建的字符串数组<xref:System.Enum.GetNames%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-394">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="74078-395">它还使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法，以便分析包含位域的枚举值。</span><span class="sxs-lookup"><span data-stu-id="74078-395">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-396">
            <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-396">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-397">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-397">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="74078-398">-或-  <paramref name="value" /> 为空字符串 ("") 或只包含空格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-398">-or-  <paramref name="value" /> is either an empty string ("") or only contains white space.</span>
          </span>
          <span data-ttu-id="74078-399">-或-  <paramref name="value" /> 是一个名称，但不是为该枚举定义的指定常量之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-399">-or-  <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="74078-400">
            <paramref name="value" /> 超出 <paramref name="enumType" /> 基础类型的范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-400">
              <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse (value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-401">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-401">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-402">根据基础类型将当前值转换为布尔值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-402">Converts the current value to a Boolean value based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-403">此成员总是引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-403">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-404">当前未实现。</span><span class="sxs-lookup"><span data-stu-id="74078-404">Currently not implemented.</span></span> <span data-ttu-id="74078-405">将始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="74078-405">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="74078-406">在所有情况下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-406">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-407">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-407">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-408">根据基础类型将当前值转换为 8 位无符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-408">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-409">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-409">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-410">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-410">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-411">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-411">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-412">根据基础类型将当前值转换为 Unicode 字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-412">Converts the current value to a Unicode character based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-413">此成员总是引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-413">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-414">当前未实现。</span><span class="sxs-lookup"><span data-stu-id="74078-414">Currently not implemented.</span></span> <span data-ttu-id="74078-415">将始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="74078-415">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="74078-416">在所有情况下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-416">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-417">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-417">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-418">根据基础类型将当前值转换为 <see cref="T:System.DateTime" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-418">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-419">此成员总是引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-419">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-420">当前未实现。</span><span class="sxs-lookup"><span data-stu-id="74078-420">Currently not implemented.</span></span> <span data-ttu-id="74078-421">将始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="74078-421">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="74078-422">在所有情况下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-422">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-423">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-423">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-424">根据基础类型将当前值转换为 <see cref="T:System.Decimal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-424">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-425">此成员总是引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-425">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-426">当前未实现。</span><span class="sxs-lookup"><span data-stu-id="74078-426">Currently not implemented.</span></span> <span data-ttu-id="74078-427">将始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="74078-427">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="74078-428">在所有情况下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-428">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-429">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-429">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-430">根据基础类型将当前值转换为双精度浮点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-430">Converts the current value to a double-precision floating point number based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-431">此成员总是引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-431">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-432">当前未实现。</span><span class="sxs-lookup"><span data-stu-id="74078-432">Currently not implemented.</span></span> <span data-ttu-id="74078-433">将始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="74078-433">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="74078-434">在所有情况下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-434">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-435">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-435">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-436">根据基础类型将当前值转换为 16 位有符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-436">Converts the current value to a 16-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-437">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-437">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-438">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-438">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-439">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-439">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-440">根据基础类型将当前值转换为 32 位有符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-440">Converts the current value to a 32-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-441">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-441">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-442">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-442">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-443">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-443">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-444">根据基础类型将当前值转换为 64 位有符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-444">Converts the current value to a 64-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-445">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-445">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-446">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-446">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-447">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-447">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-448">根据基础类型将当前值转换为 8 位有符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-448">Converts the current value to an 8-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-449">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-449">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-450">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-450">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-451">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-451">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-452">根据基础类型将当前值转换为单精度浮点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-452">Converts the current value to a single-precision floating-point number based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-453">此成员总是引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-453">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-454">当前未实现。</span><span class="sxs-lookup"><span data-stu-id="74078-454">Currently not implemented.</span></span> <span data-ttu-id="74078-455">将始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="74078-455">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="74078-456">在所有情况下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-456">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="74078-457">要转换为的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-457">The type to convert to.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="74078-458">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-458">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-459">根据基础类型将当前值转换为指定类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-459">Converts the current value to a specified type based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-460">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-460">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-461">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-461">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-462">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-462">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-463">根据基础类型将当前值转换为 16 位无符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-463">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-464">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-464">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-465">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-466">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-466">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-467">根据基础类型将当前值转换为 32 位无符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-467">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-468">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-468">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-469">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-470">一个提供区域性特定的格式设置信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-470">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-471">根据基础类型将当前值转换为 64 位无符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-471">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-472">转换后的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-472">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-473">使用<xref:System.Convert>来执行转换。</span><span class="sxs-lookup"><span data-stu-id="74078-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="74078-474">将指定的整数值转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-474">Converts a specified integer value to an enumeration member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * byte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-475">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-475">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-476">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-476">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-477">将指定的 8 位无符号整数转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-477">Converts the specified 8-bit unsigned integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-478">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-478">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-479"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-479">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-480">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-480">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-481">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-481">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-482">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-482">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-483">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-483">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-484">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-484">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-485">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-485">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-486">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-486">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-487">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-487">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-488">将指定的 16 位有符号整数转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-488">Converts the specified 16-bit signed integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-489">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-489">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-490"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-490">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-491">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-491">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-492">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-492">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-493">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-493">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-494">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-494">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-495">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-495">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-496">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-496">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-497">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-497">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-498">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-498">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-499">将指定的 32 位有符号整数转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-499">Converts the specified 32-bit signed integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-500">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-500">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-501"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-501">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-502">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-502">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-503">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-503">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-504">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-504">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-505">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-505">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-506">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-506">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-507">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-507">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-508">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-508">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-509">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-509">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-510">将指定的 64 位有符号整数转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-510">Converts the specified 64-bit signed integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-511">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-511">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-512"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-512">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-513">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-513">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-514">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-514">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-515">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-515">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-516">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-516">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-517">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-517">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-518">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-518">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * obj -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-519">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-519">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-520">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-520">The value convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-521">将具有整数值的指定对象转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-521">Converts the specified object with an integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-522">值为 <paramref name="value" /> 的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-522">An enumeration object whose value is <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-523"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29>方法将整数值转换`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-523">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-524">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-524">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-525">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-525">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-526">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-526">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-527">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-527">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-528">
            <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-528">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-529">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-529">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="74078-530">-或-  <paramref name="value" /> 的类型不为 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-530">-or-  <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * sbyte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-531">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-531">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-532">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-532">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-533">将指定的 8 位有符号整数值转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-533">Converts the specified 8-bit signed integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-534">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-534">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-535"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-535">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-536">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-536">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-537">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-537">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-538">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-538">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-539">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-539">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-540">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-540">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-541">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-541">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-542">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-542">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-543">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-543">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-544">将指定的 16 位无符号整数值转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-544">Converts the specified 16-bit unsigned integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-545">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-545">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-546"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-546">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-547">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-547">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-548">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-548">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-549">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-549">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-550">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-550">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-551">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-551">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-552">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-552">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint32 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-553">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-553">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-554">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-554">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-555">将指定的 32 位无符号整数值转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-555">Converts the specified 32-bit unsigned integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-556">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-556">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-557"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-557">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-558">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-558">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-559">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-559">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-560">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-560">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-561">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-561">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-562">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-562">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-563">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-563">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="74078-564">要返回的枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-564">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="74078-565">要转换为枚举成员的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-565">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-566">将指定的 64 位无符号整数值转换为枚举成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-566">Converts the specified 64-bit unsigned integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-567">设置为 <paramref name="value" /> 的枚举的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-567">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-568"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29>方法将`value`为枚举成员，其基础值为`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-568">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="74078-569">请注意，转换成功，即使的边界之外的值是`enumType`成员。</span><span class="sxs-lookup"><span data-stu-id="74078-569">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="74078-570">若要确保`value`是有效的基础值的`enumType`枚举，将其传递到<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="74078-570">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="74078-571">此转换方法的返回类型的值<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="74078-571">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="74078-572">然后，可以将其强制转换，或将其转换为类型的对象`enumType`。</span><span class="sxs-lookup"><span data-stu-id="74078-572">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="74078-573">
            <paramref name="enumType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-573">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-574">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-574">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="74078-575">将此实例的值转换为其等效的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-575">Converts the value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="enum.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="74078-576">将此实例的值转换为其等效的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-576">Converts the value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-577">此实例的值的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-577">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-578">返回的值进行格式设置常规格式说明符 ("G")。</span><span class="sxs-lookup"><span data-stu-id="74078-578">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="74078-579">也就是说，如果<xref:System.FlagsAttribute>不应用于此枚举类型并没有命名常量，等于此实例的值，然后返回值是一个包含字符串的常数的名称。</span><span class="sxs-lookup"><span data-stu-id="74078-579">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="74078-580">如果<xref:System.FlagsAttribute>应用等于此实例的值是一个或多个已命名常数的组合，然后返回值是一个包含字符串的分隔符分隔常数名称的列表。</span><span class="sxs-lookup"><span data-stu-id="74078-580">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="74078-581">否则，返回值是此实例的数字值的字符串表示。</span><span class="sxs-lookup"><span data-stu-id="74078-581">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="74078-582">有关格式设置的枚举值的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-582">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="74078-583">有关格式设置的常规详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-583">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-584">下面的示例演示如何将一个枚举的值转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="74078-584">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="74078-585">
            <para>如果多个枚举成员具有相同的基础值，并且你想要检索的字符串表示形式根据其基础值的枚举成员的名称，你的代码不应作出任何假设，该方法将返回有关的名称。例如，下面的枚举定义两个成员， <c>Shade.Gray</c>和<c>Shade.Grey</c>，具有相同的基础值。 [！ code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)][！ code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)] 下面的方法调用尝试检索的一个成员的名称<c>阴影</c>枚举其基础值为 1。该方法可以返回"Gray"或"Grey"和你的代码不应将哪些返回字符串的任何假设。 [！ code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)][！ code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-585">
              <para>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return. For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.  [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1. The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.  [!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="enum.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="74078-586">（已过时）</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-586">(obsolete)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-587">此方法重载已过时；请使用 <see cref="M:System.Enum.ToString" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-587">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-588">此实例的值的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-588">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="enum.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="74078-589">一个格式字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-589">A format string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-590">使用指定格式将此实例的值转换成其等效的字符串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-590">Converts the value of this instance to its equivalent string representation using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-591">此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-591">The string representation of the value of this instance as specified by <paramref name="format" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-592">`format`参数可以包含"G"或"g"、"D"或"d"、"X"或"x"和"F"或"f"格式字符串 （格式字符串不区分大小写）。</span><span class="sxs-lookup"><span data-stu-id="74078-592">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="74078-593">如果`format`是`null`或空字符串 ("")，使用常规格式说明符 ("G")。</span><span class="sxs-lookup"><span data-stu-id="74078-593">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="74078-594">有关枚举格式字符串和格式设置的枚举值的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-594">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="74078-595">有关格式设置的常规详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-595">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-596">下面的示例演示如何将一个枚举的值转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="74078-596">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="74078-597">
            <paramref name="format" /> 包含无效规范。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-597">
              <paramref name="format" /> contains an invalid specification.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-598">
            <paramref name="format" /> 等于“X”，但枚举类型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-598">
              <paramref name="format" /> equals "X", but the enumeration type is unknown.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="74078-599">
            <para>如果多个枚举成员具有相同的基础值，并且你想要检索的字符串表示形式根据其基础值的枚举成员的名称，你的代码不应作出任何假设，该方法将返回有关的名称。例如，下面的枚举定义两个成员， <c>Shade.Gray</c>和<c>Shade.Grey</c>，具有相同的基础值。 [！ code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)][！ code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)] 下面的方法调用尝试检索的一个成员的名称<c>阴影</c>枚举其基础值为 1。该方法可以返回"Gray"或"Grey"和你的代码不应将哪些返回字符串的任何假设。 [！ code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)][！ code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-599">
              <para>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return. For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.  [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1. The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.  [!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="enum.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="74078-600">格式规范。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-600">A format specification.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="74078-601">（已过时。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-601">(Obsolete.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-602">此方法重载已过时；请使用 <see cref="M:System.Enum.ToString(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-602">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-603">此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-603">The string representation of the value of this instance as specified by <paramref name="format" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-604">`format`参数可以包含"G"或"g"、"D"或"d"、"X"或"x"和"F"或"f"格式字符串 （格式字符串不区分大小写）。</span><span class="sxs-lookup"><span data-stu-id="74078-604">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="74078-605">如果`format`是`null`或空字符串 ("")，使用常规格式说明符 ("G")。</span><span class="sxs-lookup"><span data-stu-id="74078-605">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="74078-606">有关枚举格式字符串和格式设置的枚举值的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-606">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="74078-607">有关格式设置的常规详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="74078-607">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="74078-608">仅指定`format`;`provider`参数已废弃不用。</span><span class="sxs-lookup"><span data-stu-id="74078-608">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="74078-609">
            <paramref name="format" /> 未包含有效的格式规范。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-609">
              <paramref name="format" /> does not contain a valid format specification.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="74078-610">
            <paramref name="format" /> 等于“X”，但枚举类型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-610">
              <paramref name="format" /> equals "X", but the enumeration type is unknown.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="74078-611">将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-611">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="74078-612">用于指示转换是否成功的返回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-612">The return value indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string * bool *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">
          <span data-ttu-id="74078-613">要转换为枚举类型<c>值</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-613">The enumeration type to which to convert <c>value</c>.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="74078-614">要转换的枚举名称或基础值的区分大小写字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-614">The case-sensitive string representation of the enumeration name or underlying value to convert.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="74078-615">此方法返回时，如果分析操作成功，则 <c>result</c> 包含其值由 <c>value</c> 表示的 <c>TEnum</c> 类型的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-615">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span>
          </span>
          <span data-ttu-id="74078-616">如果分析操作失败，<c>result</c> 包括 <c>TEnum</c> 基础类型的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-616">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span>
          </span>
          <span data-ttu-id="74078-617">请注意，此值无需为 <c>TEnum</c> 枚举的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-617">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span>
          </span>
          <span data-ttu-id="74078-618">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-618">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-619">将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-619">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="74078-620">用于指示转换是否成功的返回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-620">The return value indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-621">如果 <paramref name="value" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-621">
              <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-622"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> 等同于<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法，而不是引发异常，它将返回的只不过`false`如果转换失败。</span><span class="sxs-lookup"><span data-stu-id="74078-622"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="74078-623">它不需要处理分析的字符串表示形式的枚举值时的异常。</span><span class="sxs-lookup"><span data-stu-id="74078-623">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="74078-624">`value`参数包含的字符串表示形式的枚举成员的基础值或已命名的常数，或由逗号 （，） 分隔的已命名的常数或基础值的列表。</span><span class="sxs-lookup"><span data-stu-id="74078-624">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="74078-625">如果`value`包含多个名为常量或值，一个或多个空格可以前加上或按照每个值、 名称或在逗号`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-625">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="74078-626">如果`value`是列表，`result`反映指定名称的值或基础值的按位组合`OR`操作。</span><span class="sxs-lookup"><span data-stu-id="74078-626">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="74078-627">如果`value`是一个枚举值，比较的名称的字符串表示`value`枚举的名称是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="74078-627">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="74078-628">如果`value`是不对应的命名常量的名称`TEnum`，该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="74078-628">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="74078-629">如果`value`是一个整数，它不表示的基础值的字符串表示`TEnum`枚举，该方法返回一个枚举成员，其基础值为`value`转换为整数类型。</span><span class="sxs-lookup"><span data-stu-id="74078-629">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="74078-630">如果不需要此行为，调用<xref:System.Enum.IsDefined%2A>方法，以确保特定的字符串表示形式整数是实际的成员`TEnum`。</span><span class="sxs-lookup"><span data-stu-id="74078-630">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-631">下面的示例定义`Colors`枚举，调用<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29>方法将字符串转换为其相应的枚举值和调用<xref:System.Enum.IsDefined%2A>中值的方法，以确保特定的整数值基础`Colors`枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-631">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-632">
            <paramref name="TEnum" /> 不是枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-632">
              <paramref name="TEnum" /> is not an enumeration type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * bool *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">
          <span data-ttu-id="74078-633">要转换为枚举类型<c>值</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-633">The enumeration type to which to convert <c>value</c>.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="74078-634">要转换的枚举名称或基础值的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-634">The string representation of the enumeration name or underlying value to convert.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="74078-635">
            <see langword="true" /> 表示不区分大小写；<see langword="false" /> 表示区分大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-635">
              <see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="74078-636">此方法返回时，如果分析操作成功，则 <c>result</c> 包含其值由 <c>value</c> 表示的 <c>TEnum</c> 类型的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-636">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span>
          </span>
          <span data-ttu-id="74078-637">如果分析操作失败，<c>result</c> 包括 <c>TEnum</c> 基础类型的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-637">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span>
          </span>
          <span data-ttu-id="74078-638">请注意，此值无需为 <c>TEnum</c> 枚举的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-638">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span>
          </span>
          <span data-ttu-id="74078-639">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-639">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74078-640">将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-640">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="74078-641">一个参数指定该操作是否区分大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-641">A parameter specifies whether the operation is case-sensitive.</span>
          </span>
          <span data-ttu-id="74078-642">用于指示转换是否成功的返回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-642">The return value indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="74078-643">如果 <paramref name="value" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-643">
              <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74078-644"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 等同于<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>方法，而不是引发异常，它将返回的只不过`false`如果转换失败。</span><span class="sxs-lookup"><span data-stu-id="74078-644"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="74078-645">它不需要处理分析的字符串表示形式的枚举值时的异常。</span><span class="sxs-lookup"><span data-stu-id="74078-645">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="74078-646">`value`参数包含的字符串表示形式的枚举成员的基础值或已命名的常数，或由逗号 （，） 分隔的已命名的常数或基础值的列表。</span><span class="sxs-lookup"><span data-stu-id="74078-646">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="74078-647">如果`value`包含多个名为常量或值，一个或多个空格可以前加上或按照每个值、 名称或在逗号`value`。</span><span class="sxs-lookup"><span data-stu-id="74078-647">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="74078-648">如果`value`是列表，`result`反映指定名称的值或基础值的按位组合`OR`操作。</span><span class="sxs-lookup"><span data-stu-id="74078-648">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="74078-649">如果`value`是一个枚举值，比较的名称的字符串表示`value`枚举名称依赖于`ignoreCase`参数。</span><span class="sxs-lookup"><span data-stu-id="74078-649">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="74078-650">如果`true`，比较不区分大小写; 如果`false`，它是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="74078-650">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="74078-651">如果`value`是不对应的命名常量的名称`TEnum`，该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="74078-651">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="74078-652">如果`value`是一个整数，它不表示的基础值的字符串表示`TEnum`枚举，该方法返回一个枚举成员，其基础值为`value`转换为整数类型。</span><span class="sxs-lookup"><span data-stu-id="74078-652">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="74078-653">如果不需要此行为，调用<xref:System.Enum.IsDefined%2A>方法，以确保特定的字符串表示形式整数是实际的成员`TEnum`。</span><span class="sxs-lookup"><span data-stu-id="74078-653">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74078-654">下面的示例定义`Colors`枚举，调用<xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>方法将字符串转换为其相应的枚举值和调用<xref:System.Enum.IsDefined%2A>中值的方法，以确保特定的整数值基础`Colors`枚举。</span><span class="sxs-lookup"><span data-stu-id="74078-654">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="74078-655"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>方法使用不区分大小写的比较时尝试转换的字符串表示形式命名为其等效的枚举值的常量。</span><span class="sxs-lookup"><span data-stu-id="74078-655">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="74078-656">
            <paramref name="TEnum" /> 不是枚举类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74078-656">
              <paramref name="TEnum" /> is not an enumeration type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>