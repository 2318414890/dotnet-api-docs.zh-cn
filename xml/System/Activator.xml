<Type Name="Activator" FullName="System.Activator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="598e53cc199b66ed30cb710e0d1b094b88632f49" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52603265" /></Metadata><TypeSignature Language="C#" Value="public sealed class Activator : System.Runtime.InteropServices._Activator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Activator extends System.Object implements class System.Runtime.InteropServices._Activator" />
  <TypeSignature Language="DocId" Value="T:System.Activator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Activator&#xA;Implements _Activator" />
  <TypeSignature Language="C++ CLI" Value="public ref class Activator sealed : System::Runtime::InteropServices::_Activator" />
  <TypeSignature Language="F#" Value="type Activator = class&#xA;    interface _Activator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Activator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Activator))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="98113-101">包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-101">Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects.</span></span> <span data-ttu-id="98113-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="98113-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-103"><xref:System.Activator.CreateInstance%2A>方法创建通过调用匹配程度最高的构造函数的程序集中定义的类型的一个实例指定的参数。</span><span class="sxs-lookup"><span data-stu-id="98113-103">The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type defined in an assembly by invoking the constructor that best matches the specified arguments.</span></span> <span data-ttu-id="98113-104">如果未不指定任何参数，则调用不带任何参数，它是默认构造函数，该构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-104">If no arguments are specified, the constructor that takes no parameters, that is, the default constructor, is invoked.</span></span>  
  
 <span data-ttu-id="98113-105">您必须有足够的权限来搜索和调用构造函数;否则，引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-105">You must have sufficient permission to search for and call a constructor; otherwise, an exception is thrown.</span></span> <span data-ttu-id="98113-106">默认情况下，仅公共构造函数被视为一个构造函数在搜索过程中。</span><span class="sxs-lookup"><span data-stu-id="98113-106">By default, only public constructors are considered during the search for a constructor.</span></span> <span data-ttu-id="98113-107">如果可以找到任何构造函数或默认构造函数，是引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-107">If no constructor or default constructor can be found, an exception is thrown.</span></span>  
  
 <span data-ttu-id="98113-108">联编程序参数指定搜索合适的构造函数的程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-108">A binder parameter specifies an object that searches an assembly for a suitable constructor.</span></span> <span data-ttu-id="98113-109">您可以指定您自己的联编程序和搜索条件。</span><span class="sxs-lookup"><span data-stu-id="98113-109">You can specify your own binder and search criteria.</span></span> <span data-ttu-id="98113-110">如果指定没有联编程序，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-110">If no binder is specified, a default binder is used.</span></span> <span data-ttu-id="98113-111">有关更多信息，请参见 <xref:System.Reflection.Binder?displayProperty=nameWithType> 和 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="98113-111">For more information, see the <xref:System.Reflection.Binder?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> classes.</span></span>  
  
 <span data-ttu-id="98113-112">Evidence 参数会影响安全策略和构造函数的权限。</span><span class="sxs-lookup"><span data-stu-id="98113-112">An evidence parameter affects the security policy and permissions for the constructor.</span></span> <span data-ttu-id="98113-113">有关更多信息，请参见 <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="98113-113">For more information, see the <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="98113-114">可以在本地或远程站点上创建类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-114">An instance of a type can be created at a local or remote site.</span></span> <span data-ttu-id="98113-115">如果远程创建类型时，激活特性参数指定的远程站点的 URI。</span><span class="sxs-lookup"><span data-stu-id="98113-115">If the type is created remotely, an activation attribute parameter specifies the URI of the remote site.</span></span> <span data-ttu-id="98113-116">若要创建实例的调用可能会到达远程站点之前通过中间站点。</span><span class="sxs-lookup"><span data-stu-id="98113-116">The call to create the instance might pass through intermediary sites before it reaches the remote site.</span></span> <span data-ttu-id="98113-117">环境中或上下文，调用在远程和中间站点上运行，可以修改其他激活特性。</span><span class="sxs-lookup"><span data-stu-id="98113-117">Other activation attributes can modify the environment, or context, in which the call operates at the remote and intermediary sites.</span></span>  
  
 <span data-ttu-id="98113-118">如果实例在本地创建，则返回对该对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-118">If the instance is created locally, a reference to that object is returned.</span></span> <span data-ttu-id="98113-119">如果远程创建实例，则返回对代理的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-119">If the instance is created remotely, a reference to a proxy is returned.</span></span> <span data-ttu-id="98113-120">远程对象是通过代理操作的就好像本地对象。</span><span class="sxs-lookup"><span data-stu-id="98113-120">The remote object is manipulated through the proxy as if it were a local object.</span></span>  
  
 <span data-ttu-id="98113-121"><xref:System.Activator.GetObject%2A>方法创建的代理当前正在运行远程对象、 服务器激活的已知对象或 XML Web 服务。</span><span class="sxs-lookup"><span data-stu-id="98113-121">The <xref:System.Activator.GetObject%2A> method creates a proxy to a currently running remote object, server-activated well-known object, or XML Web service.</span></span> <span data-ttu-id="98113-122">您可以指定连接媒体，即通道。</span><span class="sxs-lookup"><span data-stu-id="98113-122">You can specify the connection medium, that is, the channel.</span></span> <span data-ttu-id="98113-123">有关更多信息，请参见 <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="98113-123">For more information, see the <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="98113-124">程序集包含类型定义。</span><span class="sxs-lookup"><span data-stu-id="98113-124">Assemblies contain type definitions.</span></span> <span data-ttu-id="98113-125"><xref:System.Activator.CreateInstance%2A>方法从当前正在运行的程序集创建一种类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-125">The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type from a currently running assembly.</span></span> <span data-ttu-id="98113-126"><xref:System.Activator.CreateInstanceFrom%2A>方法从包含程序集的文件创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="98113-126">The <xref:System.Activator.CreateInstanceFrom%2A> method creates an instance from a file that contains an assembly.</span></span> <span data-ttu-id="98113-127"><xref:System.Activator.CreateComInstanceFrom%2A>方法从包含程序集的文件创建 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-127">The <xref:System.Activator.CreateComInstanceFrom%2A> method creates an instance of a COM object from a file that contains an assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98113-128">下面的示例演示如何使用<xref:System.Activator>类在运行时动态构造对象。</span><span class="sxs-lookup"><span data-stu-id="98113-128">The following example shows how to use the <xref:System.Activator> class to dynamically construct objects at run time.</span></span>  
  
 [!code-cpp[ActivatorX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#1)]
 [!code-csharp[ActivatorX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#1)]
 [!code-vb[ActivatorX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateComInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98113-129">创建指定名称的 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-129">Creates an instance of the COM object whose name is specified.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateComInstanceFrom (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateComInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateComInstanceFrom (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="98113-130">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-130">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-131">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-131">The name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="98113-132">使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-132">Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-133">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-133">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-134">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-134">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-135">一个<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>值的属性`true`必须应用显式或默认情况下对 COM 类型，因此<xref:System.Activator.CreateComInstanceFrom%2A>方法可以创建该类型的实例; 否则为<xref:System.TypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="98113-135">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 <span data-ttu-id="98113-136">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-136">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-137">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于创建非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志，如果包含非公共类型的程序集的授予集被限制到调用方的授权设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-137">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-138">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-138">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-139">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-139">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-140"><paramref name="typeName" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-140"><paramref name="typeName" /> or <paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-141">无法通过 COM 创建实例。</span><span class="sxs-lookup"><span data-stu-id="98113-141">An instance cannot be created through COM.</span></span>  
  
<span data-ttu-id="98113-142">或</span><span class="sxs-lookup"><span data-stu-id="98113-142">-or-</span></span> 
 <span data-ttu-id="98113-143">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-143"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-144">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-144">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-145">未找到 <paramref name="assemblyName" />，或者你正在试图加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="98113-145"><paramref name="assemblyName" /> is not found, or the module you are trying to load does not specify a file name extension.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-146">无法创建抽象类的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-146">Cannot create an instance of an abstract class.</span></span>  
  
<span data-ttu-id="98113-147">或</span><span class="sxs-lookup"><span data-stu-id="98113-147">-or-</span></span> 
<span data-ttu-id="98113-148">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-148">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-149">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="98113-149">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-150"><paramref name="assemblyName" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="98113-150"><paramref name="assemblyName" /> is the empty string ("").</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-151">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-151">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-152">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateComInstanceFrom (assemblyName As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="static member CreateComInstanceFrom : string * string * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateComInstanceFrom (assemblyName, typeName, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="98113-153">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-153">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-154">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-154">The name of the preferred type.</span></span></param>
        <param name="hashValue"><span data-ttu-id="98113-155">计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="98113-155">The value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="98113-156">用于对文件进行哈希计算并生成强名称的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="98113-156">The hash algorithm used for hashing files and generating the strong name.</span></span></param>
        <summary><span data-ttu-id="98113-157">使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-157">Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-158">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-158">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-159">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-159">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-160">一个<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>值的属性`true`必须应用显式或默认情况下对 COM 类型，因此<xref:System.Activator.CreateComInstanceFrom%2A>方法可以创建该类型的实例; 否则为<xref:System.TypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="98113-160">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 <span data-ttu-id="98113-161">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-161">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-162">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于创建非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志，如果包含非公共类型的程序集的授予集被限制到调用方的授权设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-162">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-163">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-163">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-164">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-164">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-165"><paramref name="typeName" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-165"><paramref name="typeName" /> or <paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-166"><paramref name="assemblyName" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="98113-166"><paramref name="assemblyName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="98113-167">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-167">An assembly or module was loaded twice with two different evidences.</span></span>
        
<span data-ttu-id="98113-168">或</span><span class="sxs-lookup"><span data-stu-id="98113-168">-or-</span></span> 
 <span data-ttu-id="98113-169"><paramref name="assemblyName" /> 超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="98113-169"><paramref name="assemblyName" /> is longer than the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-170">未找到 <paramref name="assemblyName" />，或者你正在试图加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="98113-170"><paramref name="assemblyName" /> is not found, or the module you are trying to load does not specify a file name extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-171"><paramref name="assemblyName" /> 已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="98113-171"><paramref name="assemblyName" /> is found but cannot be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-172"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-172"><paramref name="assemblyName" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-173">指定了不以“file://”开头的基本代码，且没有所需的 <see langword="WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-173">A code base that does not start with "file://" was specified without the required <see langword="WebPermission" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-174">无法通过 COM 创建实例。</span><span class="sxs-lookup"><span data-stu-id="98113-174">An instance cannot be created through COM.</span></span>  
  
<span data-ttu-id="98113-175">或</span><span class="sxs-lookup"><span data-stu-id="98113-175">-or-</span></span> 
 <span data-ttu-id="98113-176">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-176"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-177">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-177">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-178">无法创建抽象类的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-178">An instance of an abstract class cannot be created.</span></span>  
  
<span data-ttu-id="98113-179">或</span><span class="sxs-lookup"><span data-stu-id="98113-179">-or-</span></span> 
<span data-ttu-id="98113-180">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-180">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-181">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="98113-181">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-182">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-182">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-183">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-183">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-184">用于读取以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="98113-184">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="98113-185">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-185">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="98113-186">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="98113-186">for reading a URI that does not begin with "file://".</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98113-187">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-187">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance activationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext"><span data-ttu-id="98113-188">一个激活上下文对象，用于指定要创建的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-188">An activation context object that specifies the object to create.</span></span></param>
        <summary><span data-ttu-id="98113-189">创建类型的一个实例，该类型由指定的 <see cref="T:System.ActivationContext" /> 对象指定。</span><span class="sxs-lookup"><span data-stu-id="98113-189">Creates an instance of the type designated by the specified <see cref="T:System.ActivationContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="98113-190">要访问新创建的对象则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-190">A handle that must be unwrapped to access the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-191">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-191">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-192">若要设置域策略，并提供基于应用程序的安全模型，在基于清单的激活过程中使用的激活上下文。</span><span class="sxs-lookup"><span data-stu-id="98113-192">The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model.</span></span> <span data-ttu-id="98113-193"><xref:System.ActivationContext>类包含<xref:System.ApplicationIdentity>提供对应用程序清单的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-193">The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest.</span></span> <span data-ttu-id="98113-194">有关更多信息，请参见 <xref:System.Security.Policy.ApplicationSecurityManager> 类。</span><span class="sxs-lookup"><span data-stu-id="98113-194">For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ActivationContext" />
        <altmember cref="T:System.ApplicationIdentity" />
        <altmember cref="T:System.Security.Policy.ApplicationSecurityManager" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type -&gt; obj" Usage="System.Activator.CreateInstance type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-195">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-195">The type of object to create.</span></span></param>
        <summary><span data-ttu-id="98113-196">使用指定类型的默认构造函数来创建该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-196">Creates an instance of the specified type using that type's default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-197">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-197">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-198">要调用的构造函数必须是可访问。</span><span class="sxs-lookup"><span data-stu-id="98113-198">The constructor to be invoked must be accessible.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-199">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志，如果包含非公共类型的程序集的授予集被限制到调用方的授权设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-199">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-200">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-200">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-201">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-201">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98113-202">下面的代码示例演示如何调用<xref:System.Activator.CreateInstance%28System.Type%29>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-202">The following code example demonstrates how to call the <xref:System.Activator.CreateInstance%28System.Type%29> method.</span></span> <span data-ttu-id="98113-203">创建几种不同类型的实例，并显示其默认值。</span><span class="sxs-lookup"><span data-stu-id="98113-203">Instances of several different types are created and their default values are displayed.</span></span>  
  
 [!code-cpp[ActivatorX#4](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/source2.cpp#4)]
 [!code-csharp[ActivatorX#4](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/source2.cs#4)]
 [!code-vb[ActivatorX#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/source2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-204"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-204"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-205"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="98113-205"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="98113-206">或</span><span class="sxs-lookup"><span data-stu-id="98113-206">-or-</span></span> 
 <span data-ttu-id="98113-207"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="98113-207"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-208"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="98113-208"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="98113-209">或</span><span class="sxs-lookup"><span data-stu-id="98113-209">-or-</span></span> 
<span data-ttu-id="98113-210">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-210">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-211">或</span><span class="sxs-lookup"><span data-stu-id="98113-211">-or-</span></span> 
<span data-ttu-id="98113-212">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-212">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-213">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="98113-213">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="98113-214">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="98113-214">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="98113-215">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-215">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-216">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-216">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-217">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-217">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="98113-218">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。</span><span class="sxs-lookup"><span data-stu-id="98113-218">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="98113-219">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-219">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="98113-220"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="98113-220"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-221"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="98113-221"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-222">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-222">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-223">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-223">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-224">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-224">for accessing nonpublic types regardless of their grant sets.</span></span> <span data-ttu-id="98113-225">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-225">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (activationContext, activationCustomData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext"><span data-ttu-id="98113-226">一个激活上下文对象，用于指定要创建的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-226">An activation context object that specifies the object to create.</span></span></param>
        <param name="activationCustomData"><span data-ttu-id="98113-227">一个包含自定义激活数据的 Unicode 字符串数组。</span><span class="sxs-lookup"><span data-stu-id="98113-227">An array of Unicode strings that contain custom activation data.</span></span></param>
        <summary><span data-ttu-id="98113-228">创建类型的一个实例，该类型由指定的 <see cref="T:System.ActivationContext" /> 对象指定，并由指定的自定义激活数据激活。</span><span class="sxs-lookup"><span data-stu-id="98113-228">Creates an instance of the type that is designated by the specified <see cref="T:System.ActivationContext" /> object and activated with the specified custom activation data.</span></span></summary>
        <returns><span data-ttu-id="98113-229">要访问新创建的对象则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-229">A handle that must be unwrapped to access the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-230">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-230">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-231">若要设置域策略，并提供基于应用程序的安全模型，在基于清单的激活过程中使用的激活上下文。</span><span class="sxs-lookup"><span data-stu-id="98113-231">The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model.</span></span> <span data-ttu-id="98113-232"><xref:System.ActivationContext>类包含<xref:System.ApplicationIdentity>提供对应用程序清单的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-232">The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest.</span></span> <span data-ttu-id="98113-233">有关更多信息，请参见 <xref:System.Security.Policy.ApplicationSecurityManager> 类。</span><span class="sxs-lookup"><span data-stu-id="98113-233">For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ActivationContext" />
        <altmember cref="T:System.ApplicationIdentity" />
        <altmember cref="T:System.Security.Policy.ApplicationSecurityManager" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="98113-234">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-234">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-235">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-235">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-236">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-236">The fully qualified name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="98113-237">使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-237">Creates an instance of the type whose name is specified, using the named assembly and default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-238">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-238">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-239">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-239">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-240">`assemblyName` 可以是以下之一：</span><span class="sxs-lookup"><span data-stu-id="98113-240">`assemblyName` can be either of the following:</span></span>  
  
-   <span data-ttu-id="98113-241">程序集，不带路径或文件扩展名的简单名称。</span><span class="sxs-lookup"><span data-stu-id="98113-241">The simple name of an assembly, without its path or file extension.</span></span> <span data-ttu-id="98113-242">例如，将指定`TypeExtensions`其路径和名称是.\bin\TypeExtensions.dll 程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-242">For example, you would specify `TypeExtensions` for an assembly whose path and name are .\bin\TypeExtensions.dll.</span></span>  
  
-   <span data-ttu-id="98113-243">签名的程序集，其中包括其简单名称、 版本、 区域性和公钥标记; 完整名称例如，"TypeExtensions，版本 = 1.0.0.0，区域性 = 中性，PublicKeyToken = 181869f2f7435b51"。</span><span class="sxs-lookup"><span data-stu-id="98113-243">The full name of a signed assembly, which consists of its simple name, version, culture, and public key token; for example, "TypeExtensions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=181869f2f7435b51".</span></span>  
  
 <span data-ttu-id="98113-244">公共语言运行时如何识别和加载程序集的详细信息，请参阅[运行时如何定位程序集](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="98113-244">For more information on how the common language runtime identifies and loads assemblies, see [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).</span></span> <span data-ttu-id="98113-245">有关使用应用程序配置文件以定义程序集的位置的信息，请参阅[指定程序集位置](~/docs/framework/configure-apps/specify-assembly-location.md)。</span><span class="sxs-lookup"><span data-stu-id="98113-245">For information on using the application configuration file to define assembly locations, see [Specifying an Assembly's Location](~/docs/framework/configure-apps/specify-assembly-location.md).</span></span> <span data-ttu-id="98113-246">如果`assemblyName`找到，则在默认上下文中加载。</span><span class="sxs-lookup"><span data-stu-id="98113-246">If `assemblyName` is found, it is loaded in the default context.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-247">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于创建非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志，如果包含非公共类型的程序集的授予集被限制到调用方的授权设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-247">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-248">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-248">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-249">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-249">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98113-250">下面的示例定义一个名为`Person`程序集中名为`PersonInfo`。</span><span class="sxs-lookup"><span data-stu-id="98113-250">The following example defines a class named `Person` in an assembly named `PersonInfo`.</span></span> <span data-ttu-id="98113-251">请注意，`Person`类具有两个构造函数，其中之一是无参数。</span><span class="sxs-lookup"><span data-stu-id="98113-251">Note that the `Person` class has two constructors, one of which is parameterless.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/personinfo.cs#1)]
 [!code-vb[System.Activator.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/personinfo.vb#1)]  
  
 <span data-ttu-id="98113-252">下面的示例调用<xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29>方法来实例化`Person`类。</span><span class="sxs-lookup"><span data-stu-id="98113-252">The following example calls the <xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29> method to instantiate the `Person` class.</span></span> <span data-ttu-id="98113-253">它需要对 PersonInfo.dll 要添加到项目的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-253">It requires a reference to PersonInfo.dll to be added to the project.</span></span> <span data-ttu-id="98113-254">因为<xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29>方法调用`Person`类默认构造函数，该示例将一个值赋给其`Name`属性。</span><span class="sxs-lookup"><span data-stu-id="98113-254">Because the <xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29> method calls the `Person` class default constructor,  the example assigns a value to its `Name` property.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1.cs#2)]
 [!code-vb[System.Activator.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1.vb#2)]  
  
 <span data-ttu-id="98113-255">但是，<xref:System.Activator.CreateInstance%2A>频繁调用来实例化，是跨计算机边界或不在设计时已知的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-255">However, <xref:System.Activator.CreateInstance%2A> is frequently called to instantiate a type that crosses machine boundaries or that is not known at design time.</span></span> <span data-ttu-id="98113-256">在这种情况下，您不能在项目中包含的程序集引用并不能进行早期绑定调用该类型的成员。</span><span class="sxs-lookup"><span data-stu-id="98113-256">In this case, you cannot include a reference to the assembly in the project and cannot make early-bound calls to the type's members.</span></span> <span data-ttu-id="98113-257">若要解决此限制，下面的示例，请使用<xref:System.Activator.CreateInstance%2A>方法以及反射来将值赋给`Person`对象的`Name`属性并显示其值。</span><span class="sxs-lookup"><span data-stu-id="98113-257">To work around this limitation, the following example uses the <xref:System.Activator.CreateInstance%2A> method along with reflection to assign a value to the `Person` object's `Name` property and to display its value.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1a.cs#3)]
 [!code-vb[System.Activator.CreateInstance#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1a.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-258"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-258"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-259">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-259">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-260">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-260"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-261">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-261"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-262">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-262">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-263">你无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-263">You cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-264">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-264">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-265">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-265">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-266">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-266">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-267"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-267"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-268">或</span><span class="sxs-lookup"><span data-stu-id="98113-268">-or-</span></span> 
<span data-ttu-id="98113-269">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-269">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-270">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-270">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-271">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-271">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-272">或</span><span class="sxs-lookup"><span data-stu-id="98113-272">-or-</span></span> 
<span data-ttu-id="98113-273">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-273">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-274">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-274">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-275">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-275">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-276">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-276">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-277">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-277">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, bool nonPublic);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * bool -&gt; obj" Usage="System.Activator.CreateInstance (type, nonPublic)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-278">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-278">The type of object to create.</span></span></param>
        <param name="nonPublic"><span data-ttu-id="98113-279">如果公共或非公共默认构造函数可以匹配，则为 <see langword="true" />；如果只有公共默认构造函数可以匹配，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="98113-279"><see langword="true" /> if a public or nonpublic default constructor can match; <see langword="false" /> if only a public default constructor can match.</span></span></param>
        <summary><span data-ttu-id="98113-280">使用指定类型的默认构造函数来创建该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-280">Creates an instance of the specified type using that type's default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-281">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-281">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="98113-282">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-282">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-283">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-283">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-284">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-284">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-285"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-285"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-286"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="98113-286"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="98113-287">或</span><span class="sxs-lookup"><span data-stu-id="98113-287">-or-</span></span> 
 <span data-ttu-id="98113-288"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="98113-288"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-289"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="98113-289"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="98113-290">或</span><span class="sxs-lookup"><span data-stu-id="98113-290">-or-</span></span> 
<span data-ttu-id="98113-291">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-291">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-292">或</span><span class="sxs-lookup"><span data-stu-id="98113-292">-or-</span></span> 
<span data-ttu-id="98113-293">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-293">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-294">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="98113-294">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-295">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-295">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-296">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-296">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-297">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-297">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-298">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-298">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="98113-299"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="98113-299"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-300"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="98113-300"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-301">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-301">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-302">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-302">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-303">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-303">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-304">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-304">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * obj[] -&gt; obj" Usage="System.Activator.CreateInstance (type, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-305">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-305">The type of object to create.</span></span></param>
        <param name="args"><span data-ttu-id="98113-306">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-306">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-307">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-307">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <summary><span data-ttu-id="98113-308">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-308">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-309">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-309">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-310">要调用的构造函数必须是可访问，并且必须提供与指定的参数列表最具体的匹配。</span><span class="sxs-lookup"><span data-stu-id="98113-310">The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-311">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志，如果包含非公共类型的程序集的授予集被限制到调用方的授权设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-311">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-312">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-312">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-313">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-313">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98113-314">下面的示例调用<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29>方法来创建<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="98113-314">The following example calls the  <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29> method to create a <xref:System.String> object.</span></span> <span data-ttu-id="98113-315">它将调用<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>构造函数实例化一个字符串，包含从字符数组的第 14 个位置开始的 10 个元素。</span><span class="sxs-lookup"><span data-stu-id="98113-315">It calls the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> constructor to instantiate a string that contains ten elements from a character array starting at the fourteenth position.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/CreateInstance5.cs#5)]
 [!code-vb[System.Activator.CreateInstance#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/CreateInstance5.vb#5)]  
  
 <span data-ttu-id="98113-316">下面的示例创建交错的数组，其元素是自变量传递给<xref:System.String>构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-316">The following example creates a jagged array whose elements are arguments to be passed to a <xref:System.String> constructor.</span></span> <span data-ttu-id="98113-317">该示例然后将每个阵列分区到<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29>方法以调用适当的字符串构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-317">The example then passes each array to the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29> method to invoke the appropriate string constructor.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstance2.cs#4)]
 [!code-vb[System.Activator.CreateInstance#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstance2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-318"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-318"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-319"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="98113-319"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="98113-320">或</span><span class="sxs-lookup"><span data-stu-id="98113-320">-or-</span></span> 
 <span data-ttu-id="98113-321"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="98113-321"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-322"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="98113-322"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="98113-323">或</span><span class="sxs-lookup"><span data-stu-id="98113-323">-or-</span></span> 
<span data-ttu-id="98113-324">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-324">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-325">或</span><span class="sxs-lookup"><span data-stu-id="98113-325">-or-</span></span> 
<span data-ttu-id="98113-326">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-326">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
<span data-ttu-id="98113-327">或</span><span class="sxs-lookup"><span data-stu-id="98113-327">-or-</span></span> 
<span data-ttu-id="98113-328">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-328">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-329">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="98113-329">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="98113-330">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="98113-330">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="98113-331">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-331">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-332">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-332">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-333">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-333">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="98113-334">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。</span><span class="sxs-lookup"><span data-stu-id="98113-334">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="98113-335">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-335">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="98113-336"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="98113-336"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-337"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="98113-337"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-338">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-338">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-339">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-339">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-340">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-340">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-341">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-341">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (domain As AppDomain, assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : AppDomain * string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (domain, assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="98113-342">在其中创建名为 <paramref name="typeName" /> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="98113-342">The remote domain where the type named <paramref name="typeName" /> is created.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="98113-343">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-343">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-344">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-344">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-345">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-345">The fully qualified name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="98113-346">使用命名的程序集和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-346">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-347">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-347">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-348">使用<xref:System.Activator.CreateInstance%2A>主机需要具有受限的安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="98113-348">Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="98113-349">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-349">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-350">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要直接调用方具有完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-350">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-351"><paramref name="typeName" /> 或 <paramref name="domain" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-351"><paramref name="typeName" /> or <paramref name="domain" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-352">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-352">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-353">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-353"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-354">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-354"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-355">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-355">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-356">无法创建抽象类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-356">Cannot create an instance of an abstract type.</span></span>  
  
<span data-ttu-id="98113-357">或</span><span class="sxs-lookup"><span data-stu-id="98113-357">-or-</span></span> 
<span data-ttu-id="98113-358">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-358">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-359">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-359">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-360">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-360">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-361">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-361">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-362"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-362"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-363">或</span><span class="sxs-lookup"><span data-stu-id="98113-363">-or-</span></span> 
<span data-ttu-id="98113-364">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-364">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-365">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-365">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-366">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-366">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-367">或</span><span class="sxs-lookup"><span data-stu-id="98113-367">-or-</span></span> 
<span data-ttu-id="98113-368">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-368">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-369">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-369">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-370">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-370">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-371">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="98113-371">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="98113-372">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-372">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-373">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-373">requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-374">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-374">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="98113-375">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-375">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-376">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-376">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-377">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-377">The fully qualified name of the preferred type.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-378">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-378">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-379">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-379">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-380">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-380">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-381">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-381">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-382">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-382">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-383">使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-383">Creates an instance of the type whose name is specified, using the named assembly and default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-384">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-384">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-385">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-385">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-386">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于创建非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和非公共类型的授予集是否限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-386">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-387">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-387">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-388">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-388">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-389"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-389"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-390">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-390">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-391">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-391"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-392">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-392"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-393">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-393">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-394">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-394">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-395">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-395">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-396">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-396">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-397">或</span><span class="sxs-lookup"><span data-stu-id="98113-397">-or-</span></span> 
 <span data-ttu-id="98113-398"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-398"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-399">或</span><span class="sxs-lookup"><span data-stu-id="98113-399">-or-</span></span> 
 <span data-ttu-id="98113-400"><paramref name="activationAttributes" /> 不是 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="98113-400"><paramref name="activationAttributes" /> is not a <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /></span></span>  
  
<span data-ttu-id="98113-401">数组。</span><span class="sxs-lookup"><span data-stu-id="98113-401">array.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-402"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-402"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-403">或</span><span class="sxs-lookup"><span data-stu-id="98113-403">-or-</span></span> 
<span data-ttu-id="98113-404">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-404">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-405">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-405">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-406">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-406">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-407">或</span><span class="sxs-lookup"><span data-stu-id="98113-407">-or-</span></span> 
<span data-ttu-id="98113-408">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-408">The assembly name or code base is invalid.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-409">在 <paramref name="activationAttributes" /> 中指定的目标中尝试远程激活时出错。</span><span class="sxs-lookup"><span data-stu-id="98113-409">An error occurred when attempting remote activation in a target specified in <paramref name="activationAttributes" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-410">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-410">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-411">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-411">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-412">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-412">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-413">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-413">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, object[] args, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, object[] args, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * obj[] * obj[] -&gt; obj" Usage="System.Activator.CreateInstance (type, args, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-414">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-414">The type of object to create.</span></span></param>
        <param name="args"><span data-ttu-id="98113-415">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-415">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-416">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-416">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-417">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-417">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-418">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-418">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-419">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-419">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-420">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-420">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-421">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-421">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-422">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-422">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-423">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-423">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-424">要调用的构造函数必须是可访问，并且必须提供与指定的参数列表最具体的匹配。</span><span class="sxs-lookup"><span data-stu-id="98113-424">The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-425">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共类型，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志，如果包含非公共类型的程序集的授予集被限制到调用方的授权设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-425">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-426">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-426">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-427">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-427">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-428"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-428"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-429"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="98113-429"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="98113-430">或</span><span class="sxs-lookup"><span data-stu-id="98113-430">-or-</span></span> 
 <span data-ttu-id="98113-431"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="98113-431"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-432"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="98113-432"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="98113-433">或</span><span class="sxs-lookup"><span data-stu-id="98113-433">-or-</span></span> 
<span data-ttu-id="98113-434">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-434">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-435">或</span><span class="sxs-lookup"><span data-stu-id="98113-435">-or-</span></span> 
 <span data-ttu-id="98113-436"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-436"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-437">或</span><span class="sxs-lookup"><span data-stu-id="98113-437">-or-</span></span> 
<span data-ttu-id="98113-438">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-438">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
<span data-ttu-id="98113-439">或</span><span class="sxs-lookup"><span data-stu-id="98113-439">-or-</span></span> 
<span data-ttu-id="98113-440">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-440">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-441">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="98113-441">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-442">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-442">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-443">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-443">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-444">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-444">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-445">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-445">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="98113-446"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="98113-446"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-447"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="98113-447"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-448">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-448">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-449">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-449">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-450">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-450">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-451">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-451">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="System.Activator.CreateInstance (type, bindingAttr, binder, args, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-452">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-452">The type of object to create.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-453">影响 <paramref name="type" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-453">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor.</span></span> <span data-ttu-id="98113-454">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-454">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-455">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="type" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-455">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor.</span></span> <span data-ttu-id="98113-456">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-456">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-457">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-457">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-458">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-458">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-459">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="type" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-459">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor.</span></span> <span data-ttu-id="98113-460">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-460">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <summary><span data-ttu-id="98113-461">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-461">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-462">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-462">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-463">要调用的构造函数必须提供与指定联编程序和绑定特性的约束下指定的参数列表最精确的匹配。</span><span class="sxs-lookup"><span data-stu-id="98113-463">The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-464">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-464">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-465">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-465">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-466">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-466">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-467"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-467"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-468"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="98113-468"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="98113-469">或</span><span class="sxs-lookup"><span data-stu-id="98113-469">-or-</span></span> 
 <span data-ttu-id="98113-470"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="98113-470"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-471"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="98113-471"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="98113-472">或</span><span class="sxs-lookup"><span data-stu-id="98113-472">-or-</span></span> 
<span data-ttu-id="98113-473">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-473">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-474">或</span><span class="sxs-lookup"><span data-stu-id="98113-474">-or-</span></span> 
<span data-ttu-id="98113-475">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-475">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
<span data-ttu-id="98113-476">或</span><span class="sxs-lookup"><span data-stu-id="98113-476">-or-</span></span> 
<span data-ttu-id="98113-477">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-477">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-478">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="98113-478">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-479">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-479">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-480">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-480">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-481">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-481">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-482">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-482">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="98113-483"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="98113-483"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-484"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="98113-484"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-485">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-485">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-486">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-486">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-487">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-487">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-488">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-488">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="System.Activator.CreateInstance (type, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-489">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-489">The type of object to create.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-490">影响 <paramref name="type" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-490">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor.</span></span> <span data-ttu-id="98113-491">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-491">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-492">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="type" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-492">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor.</span></span> <span data-ttu-id="98113-493">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-493">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-494">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-494">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-495">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-495">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-496">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="type" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-496">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor.</span></span> <span data-ttu-id="98113-497">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-497">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-498">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-498">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-499">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-499">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-500">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-500">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-501">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-501">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-502">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-502">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-503">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-503">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-504">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-504">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-505">要调用的构造函数必须提供与指定联编程序和绑定特性的约束下指定的参数列表最精确的匹配。</span><span class="sxs-lookup"><span data-stu-id="98113-505">The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-506">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和非公共类型和成员的授予集如果被限制到调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-506">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the nonpublic types and members is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-507">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-507">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-508">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-508">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-509"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-509"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98113-510"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="98113-510"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="98113-511">或</span><span class="sxs-lookup"><span data-stu-id="98113-511">-or-</span></span> 
 <span data-ttu-id="98113-512"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="98113-512"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-513"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="98113-513"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="98113-514">或</span><span class="sxs-lookup"><span data-stu-id="98113-514">-or-</span></span> 
<span data-ttu-id="98113-515">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-515">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-516">或</span><span class="sxs-lookup"><span data-stu-id="98113-516">-or-</span></span> 
 <span data-ttu-id="98113-517"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-517"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-518">或</span><span class="sxs-lookup"><span data-stu-id="98113-518">-or-</span></span> 
<span data-ttu-id="98113-519">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-519">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
<span data-ttu-id="98113-520">或</span><span class="sxs-lookup"><span data-stu-id="98113-520">-or-</span></span> 
<span data-ttu-id="98113-521">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-521">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-522">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="98113-522">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-523">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-523">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-524">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-524">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-525">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-525">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-526">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-526">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="98113-527"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="98113-527"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-528"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="98113-528"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-529">为提供证据。</span><span class="sxs-lookup"><span data-stu-id="98113-529">for supplying evidence.</span></span> <span data-ttu-id="98113-530">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="98113-530">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-531">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-531">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-532">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="98113-533">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-533">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-534">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-534">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-535">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-535">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-536">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-536"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-537">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-537">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-538">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-538">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-539">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-539">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-540">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-540">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-541">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-541">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-542">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-542">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-543">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-543">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-544">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-544">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-545">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-545">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-546">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-546">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-547">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-547">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-548">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-548">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-549">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-549">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-550">使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-550">Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-551">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-551">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-552">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-552">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-553">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于创建非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-553">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-554">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-554">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-555">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-555">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-556"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-556"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-557">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-557">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-558">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-558"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-559">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-559"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-560">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-560">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-561">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-561">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-562">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-562">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-563">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-563">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-564">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-564">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-565">或</span><span class="sxs-lookup"><span data-stu-id="98113-565">-or-</span></span> 
 <span data-ttu-id="98113-566"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-566"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-567">或</span><span class="sxs-lookup"><span data-stu-id="98113-567">-or-</span></span> 
<span data-ttu-id="98113-568">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-568">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-569"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-569"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-570">或</span><span class="sxs-lookup"><span data-stu-id="98113-570">-or-</span></span> 
<span data-ttu-id="98113-571">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-571">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-572">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-572">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-573">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-573">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-574">或</span><span class="sxs-lookup"><span data-stu-id="98113-574">-or-</span></span> 
<span data-ttu-id="98113-575">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-575">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-576">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-576">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-577">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-577">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-578">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-578">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-579">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-579">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : AppDomain * string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (domain, assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="98113-580">在其中创建名为 <paramref name="typeName" /> 的类型的域。</span><span class="sxs-lookup"><span data-stu-id="98113-580">The domain where the type named <paramref name="typeName" /> is created.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="98113-581">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-581">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-582">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-582">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-583">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-583">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-584">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-584"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-585">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-585">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-586">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-586">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-587">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-587">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-588">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-588">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-589">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-589">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-590">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-590">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-591">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-591">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-592">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-592">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-593">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-593">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-594">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-594">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-595">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-595">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-596">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-596">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-597">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-597">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-598">使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-598">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-599">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-599">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-600">使用<xref:System.Activator.CreateInstance%2A>主机需要具有受限的安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="98113-600">Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="98113-601">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-601">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-602">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要直接调用方具有完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-602">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-603"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-603"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-604">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-604">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-605">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-605"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-606">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-606"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-607">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-607">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-608">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-608">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-609">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-609">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-610">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-610">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-611">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-611">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-612">或</span><span class="sxs-lookup"><span data-stu-id="98113-612">-or-</span></span> 
 <span data-ttu-id="98113-613"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-613"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-614">或</span><span class="sxs-lookup"><span data-stu-id="98113-614">-or-</span></span> 
<span data-ttu-id="98113-615">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-615">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-616"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-616"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-617">或</span><span class="sxs-lookup"><span data-stu-id="98113-617">-or-</span></span> 
<span data-ttu-id="98113-618">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-618">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-619">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-619">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-620">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-620">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-621">或</span><span class="sxs-lookup"><span data-stu-id="98113-621">-or-</span></span> 
<span data-ttu-id="98113-622">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-622">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-623">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-623">requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-624">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-624">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-625">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-625">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-626">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-626">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-627">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="98113-627">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="98113-628">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-628">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="98113-629">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-629">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-630">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-630">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-631">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-631">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-632">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-632"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-633">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-633">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-634">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-634">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-635">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-635">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-636">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-636">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-637">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-637">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-638">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-638">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-639">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-639">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-640">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-640">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-641">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-641">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-642">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-642">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-643">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-643">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-644">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-644">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-645">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-645">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="98113-646">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="98113-646">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="98113-647">使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-647">Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-648">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-648">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-649">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-649">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-650">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可用于创建非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="98113-650">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller's grant set or to a subset thereof.</span></span> <span data-ttu-id="98113-651">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="98113-651">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="98113-652">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="98113-652">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-653"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-653"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-654">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-654">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-655">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-655"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-656">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-656"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-657">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-657">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-658">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-658">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-659">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-659">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-660">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-660">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-661">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-661">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-662">或</span><span class="sxs-lookup"><span data-stu-id="98113-662">-or-</span></span> 
 <span data-ttu-id="98113-663"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-663"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-664">或</span><span class="sxs-lookup"><span data-stu-id="98113-664">-or-</span></span> 
<span data-ttu-id="98113-665">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-665">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-666"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-666"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-667">或</span><span class="sxs-lookup"><span data-stu-id="98113-667">-or-</span></span> 
<span data-ttu-id="98113-668">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-668">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-669">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-669">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-670">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-670">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-671">或</span><span class="sxs-lookup"><span data-stu-id="98113-671">-or-</span></span> 
<span data-ttu-id="98113-672">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-672">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-673">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-673">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-674">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-674">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-675">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-675">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-676">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-676">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : AppDomain * string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstance (domain, assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="98113-677">在其中创建名为 <paramref name="typeName" /> 的类型的域。</span><span class="sxs-lookup"><span data-stu-id="98113-677">The domain where the type named <paramref name="typeName" /> is created.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="98113-678">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-678">The name of the assembly where the type named <paramref name="typeName" /> is sought.</span></span> <span data-ttu-id="98113-679">如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-679">If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-680">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="98113-680">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-681">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-681"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-682">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-682">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-683">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-683">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-684">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-684">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-685">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-685">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-686">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-686">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-687">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-687">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-688">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-688">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-689">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-689">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-690">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-690">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-691">通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-691">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object.</span></span> <span data-ttu-id="98113-692"><see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-692">The <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> specifies the URL that is required to activate a remote object.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="98113-693">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="98113-693">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="98113-694">使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-694">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-695">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-695">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-696">使用<xref:System.Activator.CreateInstance%2A>主机需要具有受限的安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="98113-696">Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="98113-697">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-697">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-698">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要直接调用方具有完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-698">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-699"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-699"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-700">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-700">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-701">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-701"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-702">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="98113-702"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-703">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-703">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-704">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-704">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-705">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-705">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="98113-706">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="98113-706">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-707">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-707">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
<span data-ttu-id="98113-708">或</span><span class="sxs-lookup"><span data-stu-id="98113-708">-or-</span></span> 
 <span data-ttu-id="98113-709"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-709"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="98113-710">或</span><span class="sxs-lookup"><span data-stu-id="98113-710">-or-</span></span> 
<span data-ttu-id="98113-711">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="98113-711">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-712"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-712"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-713">或</span><span class="sxs-lookup"><span data-stu-id="98113-713">-or-</span></span> 
<span data-ttu-id="98113-714">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-714">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-715">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-715">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="98113-716">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="98113-716">An assembly or module was loaded twice with two different evidences.</span></span>  
  
<span data-ttu-id="98113-717">或</span><span class="sxs-lookup"><span data-stu-id="98113-717">-or-</span></span> 
<span data-ttu-id="98113-718">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="98113-718">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-719">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-719">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-720">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-720">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-721">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="98113-721">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="98113-722">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-722">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-723">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-723">requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-724">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-724">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateInstance&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateInstance&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T CreateInstance();" />
      <MemberSignature Language="F#" Value="static member CreateInstance : unit -&gt; 'T" Usage="System.Activator.CreateInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="98113-725">要创建的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-725">The type to create.</span></span></typeparam>
        <summary><span data-ttu-id="98113-726">使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-726">Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-727">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="98113-727">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-728"><xref:System.Activator.CreateInstance%60%601>泛型方法由编译器用来实现的实例化指定类型参数的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-728">The <xref:System.Activator.CreateInstance%60%601> generic method is used by compilers to implement the instantiation of types specified by type parameters.</span></span> <span data-ttu-id="98113-729">例如，在以下泛型方法的实现`new T()`(`gcnew T()` c + + 中) 使用<xref:System.Activator.CreateInstance%60%601>泛型方法。</span><span class="sxs-lookup"><span data-stu-id="98113-729">For example, in the following generic method, the implementation of `new T()` (`gcnew T()` in C++) uses the <xref:System.Activator.CreateInstance%60%601> generic method.</span></span>  
  
 [!code-cpp[System.Activation.CreateInstance~~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cpp/remarks.cpp#1)]
 [!code-csharp[System.Activation.CreateInstance~~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cs/remarks.cs#1)]
 [!code-vb[System.Activation.CreateInstance~~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activation.createinstance~~1/vb/remarks.vb#1)]  
  
 <span data-ttu-id="98113-730">一般情况下，没有为使用<xref:System.Activator.CreateInstance%60%601>代码，应用程序中的泛型方法，因为必须在编译时已知类型。</span><span class="sxs-lookup"><span data-stu-id="98113-730">In general, there is no use for the <xref:System.Activator.CreateInstance%60%601> generic method in application code, because the type must be known at compile time.</span></span> <span data-ttu-id="98113-731">如果在编译时已知类型，可以使用正常的实例化语法 (`new`在 C# 中，运算符`New`在 Visual Basic 中`gcnew`c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="98113-731">If the type is known at compile time, normal instantiation syntax can be used (`new` operator in C#, `New` in Visual Basic, `gcnew` in C++).</span></span> <span data-ttu-id="98113-732">如果在编译时不知道类型，则可以调用的非泛型重载<xref:System.Activator.CreateInstance%2A>。</span><span class="sxs-lookup"><span data-stu-id="98113-732">If the type is not known at compile time, you can call a non-generic overload of <xref:System.Activator.CreateInstance%2A>.</span></span>  
  
 <span data-ttu-id="98113-733">不有的任何重载<xref:System.Activator.CreateInstance%60%601>泛型方法采用自变量列表，因为非泛型重载的<xref:System.Activator.CreateInstance%2A>已提供后期绑定构造函数解析。</span><span class="sxs-lookup"><span data-stu-id="98113-733">There are no overloads of the <xref:System.Activator.CreateInstance%60%601> generic method that take argument lists, because the non-generic overloads of <xref:System.Activator.CreateInstance%2A> already provide late-bound constructor resolution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMethodException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="98113-734">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。</span><span class="sxs-lookup"><span data-stu-id="98113-734">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="98113-735">为 <paramref name="T" /> 指定的类型没有无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-735">The type that is specified for <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98113-736">使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-736">Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (assemblyFile, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="98113-737">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-737">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-738">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-738">The name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="98113-739">使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-739">Creates an instance of the type whose name is specified, using the named assembly file and default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-740">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-740">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-741">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-741">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-742">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-742">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98113-743">下面的代码示例演示如何调用<xref:System.Activator.CreateInstanceFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-743">The following code example demonstrates how to call the <xref:System.Activator.CreateInstanceFrom%2A> method.</span></span> <span data-ttu-id="98113-744">此代码示例是为提供一个更大示例的一部分<xref:System.Activator>类。</span><span class="sxs-lookup"><span data-stu-id="98113-744">This code example is part of a larger example provided for the <xref:System.Activator> class.</span></span>  
  
 [!code-cpp[ActivatorX#3](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#3)]
 [!code-csharp[ActivatorX#3](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#3)]
 [!code-vb[ActivatorX#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-745"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-745"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-746">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-746">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-747">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-747"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-748">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-748"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-749">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-749">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-750">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-750">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-751">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-751">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-752">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-752">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-753"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-753"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-754">或</span><span class="sxs-lookup"><span data-stu-id="98113-754">-or-</span></span> 
<span data-ttu-id="98113-755">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-755">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-756">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-756">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-757">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-757">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-758">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-758">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-759">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-759">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-760">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-760">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-761">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-761">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-762">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-762">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (domain As AppDomain, assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : AppDomain * string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (domain, assemblyFile, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="98113-763">在其中创建名为 <paramref name="typeName" /> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="98113-763">The remote domain where the type named <paramref name="typeName" /> is created.</span></span></param>
        <param name="assemblyFile"><span data-ttu-id="98113-764">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-764">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-765">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-765">The name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="98113-766">使用命名的程序集文件和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-766">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-767">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-767">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-768">使用<xref:System.Activator.CreateInstanceFrom%2A>主机需要具有受限的安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="98113-768">Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="98113-769">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-769">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-770">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要直接调用方具有完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-770">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 <span data-ttu-id="98113-771">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-771">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-772"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-772"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-773">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-773">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-774">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-774"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-775">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-775"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-776">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-776">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-777">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-777">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-778">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-778">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-779">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-779">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-780"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-780"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-781">或</span><span class="sxs-lookup"><span data-stu-id="98113-781">-or-</span></span> 
<span data-ttu-id="98113-782">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-782">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-783">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-783">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-784">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-784">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-785">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-785">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-786">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-786">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-787">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-787">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-788">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-788">requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-789">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-789">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (assemblyFile, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="98113-790">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-790">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-791">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-791">The name of the preferred type.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-792">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-792">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-793">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-793">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-794">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-794">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-795">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-795">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-796">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-796">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-797">使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-797">Creates an instance of the type whose name is specified, using the named assembly file and default constructor.</span></span></summary>
        <returns><span data-ttu-id="98113-798">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-798">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-799">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-799">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-800">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-800">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-801"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-801"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-802">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-802">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-803">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-803"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-804">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-804"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-805">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-805">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-806">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-806">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-807">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-807">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-808"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-808"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-809">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-809">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-810"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-810"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-811">或</span><span class="sxs-lookup"><span data-stu-id="98113-811">-or-</span></span> 
<span data-ttu-id="98113-812">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-812">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-813">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-813">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-814">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-814">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-815">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-815">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-816">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-816">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-817">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-817">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-818">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-818">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="98113-819">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-819">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="98113-820">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-820">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-821">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-821">The name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-822">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-822"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-823">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-823">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-824">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-824">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-825">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-825">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-826">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-826">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-827">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-827">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-828">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-828">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-829">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-829">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-830">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-830">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-831">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-831">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-832">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-832">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-833">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-833">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-834">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-834">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-835">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-835">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-836">使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-836">Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-837">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-837">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-838">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-838">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-839">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-839">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-840"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-840"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-841">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-841">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-842">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-842"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-843">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-843"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-844">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-844">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-845">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-845">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-846">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-846">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-847">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-847">The caller does not have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-848"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-848"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-849"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-849"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-850">或</span><span class="sxs-lookup"><span data-stu-id="98113-850">-or-</span></span> 
<span data-ttu-id="98113-851">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-851">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-852">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-852">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-853">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-853">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-854">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-854">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-855">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-855">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-856">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-856">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-857">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-857">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-858">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-858">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : AppDomain * string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (domain, assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="98113-859">在其中创建名为 <paramref name="typeName" /> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="98113-859">The remote domain where the type named <paramref name="typeName" /> is created.</span></span></param>
        <param name="assemblyFile"><span data-ttu-id="98113-860">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-860">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-861">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-861">The name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-862">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-862"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-863">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-863">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-864">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-864">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-865">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-865">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-866">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-866">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-867">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-867">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-868">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-868">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-869">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-869">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-870">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-870">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-871">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-871">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-872">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-872">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-873">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-873">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-874">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-874">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-875">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-875">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="98113-876">使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-876">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-877">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-877">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-878">使用<xref:System.Activator.CreateInstanceFrom%2A>主机需要具有受限的安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="98113-878">Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="98113-879">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-879">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-880">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-880">For information about other exceptions that can be thrown by invoked methods, see the Exceptions sections of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-881"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-881"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-882">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-882">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-883">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-883"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-884">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-884"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-885">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-885">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-886">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-886">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-887">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-887">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-888">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-888">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-889"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-889"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-890"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-890"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-891">或</span><span class="sxs-lookup"><span data-stu-id="98113-891">-or-</span></span> 
 <span data-ttu-id="98113-892"><paramref name="assemblyName" /> 是针对晚于当前加载版本的公共语言运行时版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-892"><paramref name="assemblyName" /> was compiled for a version of the common language runtime that is later than the version that is currently loaded.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-893">为提供证据。</span><span class="sxs-lookup"><span data-stu-id="98113-893">for supplying evidence.</span></span> <span data-ttu-id="98113-894">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="98113-894">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-895">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-895">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-896">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-896">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-897">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-897">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-898">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-898">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-899">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-899">requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-900">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-900">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="98113-901">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-901">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-902">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-902">The name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-903">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-903"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-904">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-904">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-905">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-905">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-906">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-906">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-907">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-907">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-908">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-908">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-909">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-909">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-910">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-910">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-911">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-911">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-912">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-912">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-913">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-913">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-914">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-914">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-915">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-915">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-916">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-916">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="98113-917">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="98113-917">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="98113-918">使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-918">Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-919">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-919">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-920">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-920">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="98113-921">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-921">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-922"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-922"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-923">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-923">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-924">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-924"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-925">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-925"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-926">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-926">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-927">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-927">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-928">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-928">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-929">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-929">The caller does not have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-930"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-930"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-931"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-931"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-932">或</span><span class="sxs-lookup"><span data-stu-id="98113-932">-or-</span></span> 
<span data-ttu-id="98113-933">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-933">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-934">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-934">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-935">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="98113-935">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="98113-936">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="98113-936">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-937">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-937">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-938">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-938">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-939">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-939">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-940">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-940">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFrom : AppDomain * string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Activator.CreateInstanceFrom (domain, assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use Evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="98113-941">在其中创建名为 <paramref name="typeName" /> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="98113-941">The remote domain where the type named <paramref name="typeName" /> is created.</span></span></param>
        <param name="assemblyFile"><span data-ttu-id="98113-942">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-942">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="98113-943">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="98113-943">The name of the preferred type.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="98113-944">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="98113-944"><see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="98113-945">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="98113-945">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-946">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="98113-946">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="98113-947">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="98113-947">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-948">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="98113-948">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="98113-949">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="98113-949">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="98113-950">如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="98113-950">If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="98113-951">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="98113-951">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="98113-952">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="98113-952">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="98113-953">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="98113-953">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="98113-954">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-954">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="98113-955">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="98113-955">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="98113-956">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="98113-956">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="98113-957">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="98113-957">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="98113-958">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="98113-958">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="98113-959">使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="98113-959">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="98113-960">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="98113-960">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-961">使用<xref:System.Activator.CreateInstanceFrom%2A>主机需要具有受限的安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="98113-961">Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="98113-962">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法来打开返回的值。</span><span class="sxs-lookup"><span data-stu-id="98113-962">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98113-963">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要直接调用方具有完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-963">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 <span data-ttu-id="98113-964">有关可由被调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-964">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-965"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-965"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="98113-966">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-966">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="98113-967">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="98113-967"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98113-968">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="98113-968"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="98113-969">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="98113-969">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-970">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="98113-970">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="98113-971">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="98113-971">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="98113-972">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="98113-972">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98113-973"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="98113-973"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="98113-974"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="98113-974"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="98113-975">或</span><span class="sxs-lookup"><span data-stu-id="98113-975">-or-</span></span> 
<span data-ttu-id="98113-976">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="98113-976">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="98113-977">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="98113-977">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="98113-978">为提供证据。</span><span class="sxs-lookup"><span data-stu-id="98113-978">for supplying evidence.</span></span> <span data-ttu-id="98113-979">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="98113-979">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="98113-980">为目录路径中搜索和读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="98113-980">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="98113-981">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="98113-981">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="98113-982">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="98113-982">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="98113-983">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="98113-983">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-984">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-984">requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-985">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-985">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98113-986">为已知对象或 XML Web services 创建一个代理。</span><span class="sxs-lookup"><span data-stu-id="98113-986">Creates a proxy for a well-known object or XML Web service.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (Type type, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObject(class System.Type type, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.GetObject(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObject(Type ^ type, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member GetObject : Type * string -&gt; obj" Usage="System.Activator.GetObject (type, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-987">希望连接到的已知对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-987">The type of the well-known object to which you want to connect.</span></span></param>
        <param name="url"><span data-ttu-id="98113-988">已知对象的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-988">The URL of the well-known object.</span></span></param>
        <summary><span data-ttu-id="98113-989">为指定类型和 URL 所指示的已知对象创建一个代理。</span><span class="sxs-lookup"><span data-stu-id="98113-989">Creates a proxy for the well-known object indicated by the specified type and URL.</span></span></summary>
        <returns><span data-ttu-id="98113-990">一个代理，它指向由所请求的已知对象服务的终结点。</span><span class="sxs-lookup"><span data-stu-id="98113-990">A proxy that points to an endpoint served by the requested well-known object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-991">调用要将消息发送到远程对象的代理。</span><span class="sxs-lookup"><span data-stu-id="98113-991">Call the proxy to send messages to the remote object.</span></span> <span data-ttu-id="98113-992">在代理上调用方法之前，是通过网络不发送任何消息。</span><span class="sxs-lookup"><span data-stu-id="98113-992">No messages are sent over the network until a method is called on the proxy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-993"><paramref name="type" /> 或 <paramref name="url" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-993"><paramref name="type" /> or <paramref name="url" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Remoting.RemotingException"><span data-ttu-id="98113-994"><paramref name="type" /> 不会通过参考封送并且并非接口。</span><span class="sxs-lookup"><span data-stu-id="98113-994"><paramref name="type" /> is not marshaled by reference and is not an interface.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-995">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-995">This member was invoked with a late-binding mechanism.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-996">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-996">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-997">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-997">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownObjectMode" />
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (Type type, string url, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObject(class System.Type type, string url, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.GetObject(System.Type,System.String,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObject(Type ^ type, System::String ^ url, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member GetObject : Type * string * obj -&gt; obj" Usage="System.Activator.GetObject (type, url, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="98113-998">希望连接到的已知对象的类型。</span><span class="sxs-lookup"><span data-stu-id="98113-998">The type of the well-known object to which you want to connect.</span></span></param>
        <param name="url"><span data-ttu-id="98113-999">已知对象的 URL。</span><span class="sxs-lookup"><span data-stu-id="98113-999">The URL of the well-known object.</span></span></param>
        <param name="state"><span data-ttu-id="98113-1000">通道特定的数据或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-1000">Channel-specific data or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="98113-1001">为指定类型、URL 和通道数据所指示的已知对象创建一个代理。</span><span class="sxs-lookup"><span data-stu-id="98113-1001">Creates a proxy for the well-known object indicated by the specified type, URL, and channel data.</span></span></summary>
        <returns><span data-ttu-id="98113-1002">一个代理，它指向由所请求的已知对象服务的终结点。</span><span class="sxs-lookup"><span data-stu-id="98113-1002">A proxy that points to an endpoint served by the requested well-known object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-1003">调用要将消息发送到远程对象的代理。</span><span class="sxs-lookup"><span data-stu-id="98113-1003">Call the proxy to send messages to the remote object.</span></span> <span data-ttu-id="98113-1004">在代理上调用方法之前，是通过网络不发送任何消息。</span><span class="sxs-lookup"><span data-stu-id="98113-1004">No messages are sent over the network until a method is called on the proxy.</span></span>  
  
 <span data-ttu-id="98113-1005">`state`参数将信息传递给通道，并传递给<xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="98113-1005">The `state` parameter communicates information to the channel, and is passed to the <xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98113-1006"><paramref name="type" /> 或 <paramref name="url" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98113-1006"><paramref name="type" /> or <paramref name="url" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Remoting.RemotingException"><span data-ttu-id="98113-1007"><paramref name="type" /> 不会通过参考封送并且并非接口。</span><span class="sxs-lookup"><span data-stu-id="98113-1007"><paramref name="type" /> is not marshaled by reference and is not an interface.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="98113-1008">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-1008">This member was invoked with a late-binding mechanism.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="98113-1009">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="98113-1009">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="98113-1010">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="98113-1010">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownObjectMode" />
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Activator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Activator.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Activator::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="98113-1011">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="98113-1011">Reserved for future use.</span></span> <span data-ttu-id="98113-1012">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="98113-1012">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="98113-1013">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="98113-1013">The passed-in array of names to map.</span></span></param>
        <param name="cNames"><span data-ttu-id="98113-1014">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="98113-1014">The count of the names to map.</span></span></param>
        <param name="lcid"><span data-ttu-id="98113-1015">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="98113-1015">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="98113-1016">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="98113-1016">The caller-allocated array that receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="98113-1017">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="98113-1017">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-1018">此方法用于从非托管代码访问的托管的类，并且不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="98113-1018">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="98113-1019">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="98113-1019">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="98113-1020">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="98113-1020">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Activator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Activator.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Activator::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="98113-1021">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="98113-1021">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="98113-1022">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="98113-1022">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="98113-1023">一个对象，该对象接收指向请求的类型信息对象的指针。</span><span class="sxs-lookup"><span data-stu-id="98113-1023">An object that receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="98113-1024">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="98113-1024">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-1025">此方法用于从非托管代码访问的托管的类，并且不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="98113-1025">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="98113-1026">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="98113-1026">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="98113-1027">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="98113-1027">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Activator.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Activator.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Activator::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="98113-1028">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。</span><span class="sxs-lookup"><span data-stu-id="98113-1028">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object.</span></span> <span data-ttu-id="98113-1029">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="98113-1029">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="98113-1030">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="98113-1030">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-1031">此方法用于从非托管代码访问的托管的类，并且不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="98113-1031">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="98113-1032">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="98113-1032">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="98113-1033">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="98113-1033">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.Invoke">
      <MemberSignature Language="C#" Value="void _Activator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Activator.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Activator::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="98113-1034">一个用于标识成员的调度标识符。</span><span class="sxs-lookup"><span data-stu-id="98113-1034">A dispatch identifier that identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="98113-1035">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="98113-1035">Reserved for future use.</span></span> <span data-ttu-id="98113-1036">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="98113-1036">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="98113-1037">要在其中解释参数的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="98113-1037">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="98113-1038">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="98113-1038">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="98113-1039">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</span><span class="sxs-lookup"><span data-stu-id="98113-1039">A pointer to a structure that contains an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="98113-1040">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="98113-1040">A pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="98113-1041">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="98113-1041">A pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="98113-1042">第一个出错自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="98113-1042">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="98113-1043">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="98113-1043">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98113-1044">此方法用于从非托管代码访问的托管的类，并且不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="98113-1044">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="98113-1045">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="98113-1045">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="98113-1046">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="98113-1046">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>