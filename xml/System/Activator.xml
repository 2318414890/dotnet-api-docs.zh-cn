<Type Name="Activator" FullName="System.Activator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f08f871f06a5bb5712acbc5adee12315d853a99c" />
    <Meta Name="ms.sourcegitcommit" Value="29c771f79cf4eac4f49e5fae5f1aa8b457acf146" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/21/2018" />
    <Meta Name="ms.locfileid" Value="36299046" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Activator : System.Runtime.InteropServices._Activator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Activator extends System.Object implements class System.Runtime.InteropServices._Activator" />
  <TypeSignature Language="DocId" Value="T:System.Activator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Activator&#xA;Implements _Activator" />
  <TypeSignature Language="C++ CLI" Value="public ref class Activator sealed : System::Runtime::InteropServices::_Activator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Activator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Activator))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activator.CreateInstance%2A>方法创建一个实例通过调用匹配程度最高的构造函数的程序集中定义的类型指定的参数。 如果未不指定任何参数，则调用没有采用任何参数，即默认构造函数，该构造函数。  
  
 您必须有足够的权限，以搜索并调用构造函数;否则，会引发异常。 默认情况下，仅公共构造函数被视为的构造函数在搜索过程中。 如果可以找到任何构造函数或默认构造函数，是引发异常。  
  
 联编程序参数指定合适的构造函数的程序集中搜索的对象。 你可以指定你自己的活页夹和搜索条件。 如果未不指定任何联编，则使用默认联编程序。 有关更多信息，请参见 <xref:System.Reflection.Binder?displayProperty=nameWithType> 和 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> 类。  
  
 Evidence 参数会影响的安全策略和构造函数的权限。 有关更多信息，请参见 <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> 类。  
  
 可以在本地或远程站点创建类型的实例。 如果远程创建的类型、 激活特性参数指定远程网站的 URI。 用于创建实例的调用可能会到达该远程站点之前通过中间站点。 环境中或上下文，调用在远程和中间站点运行，则可以修改其他激活特性。  
  
 如果实例在本地创建，则返回对该对象的引用。 如果从远程创建实例，则返回到代理服务器的引用。 就像它是本地对象，将通过代理操作远程对象。  
  
 <xref:System.Activator.GetObject%2A>方法创建的当前正在运行远程对象、 服务器激活的已知对象或 XML Web 服务的代理。 你可以指定连接中，即通道。 有关更多信息，请参见 <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=nameWithType> 类。  
  
 程序集包含类型定义。 <xref:System.Activator.CreateInstance%2A>方法从当前正在运行的程序集创建类型的一个实例。 <xref:System.Activator.CreateInstanceFrom%2A>方法从包含程序集的文件创建一个实例。 <xref:System.Activator.CreateComInstanceFrom%2A>方法从文件包含的程序集创建 COM 对象的一个实例。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Activator>类在运行时动态构造对象。  
  
 [!code-cpp[ActivatorX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#1)]
 [!code-csharp[ActivatorX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#1)]
 [!code-vb[ActivatorX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateComInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建指定名称的 COM 对象的实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateComInstanceFrom (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <summary>使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 A<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>属性值为`true`必须以显式或默认方式对 COM 类型应用因此<xref:System.Activator.CreateComInstanceFrom%2A>方法可以创建该类型的实例; 否则为<xref:System.TypeLoadException>引发。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.TypeLoadException">无法通过 COM 创建实例。  - 或 -  在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />，或者你正在试图加载的模块未指定文件扩展名。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例。  - 或 -  使用晚期绑定机制调用了此成员。</exception>
        <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assemblyName" /> 为空字符串 ("")。</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateComInstanceFrom (assemblyName As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyName">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <param name="hashValue">计算所得的哈希代码的值。</param>
        <param name="hashAlgorithm">用于对文件进行哈希计算并生成强名称的哈希算法。</param>
        <summary>使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 A<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>属性值为`true`必须以显式或默认方式对 COM 类型应用因此<xref:System.Activator.CreateComInstanceFrom%2A>方法可以创建该类型的实例; 否则为<xref:System.TypeLoadException>引发。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assemblyName" /> 为空字符串 ("")。</exception>
        <exception cref="T:System.IO.PathTooLongException">一个程序集或模块用两个不同的证据加载了两次。
 - 或 -  <paramref name="assemblyName" /> 超过系统定义的最大长度。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />，或者你正在试图加载的模块未指定文件扩展名。</exception>
        <exception cref="T:System.IO.FileLoadException">
          <paramref name="assemblyName" /> 已找到，但无法加载。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。</exception>
        <exception cref="T:System.Security.SecurityException">指定了不以“file://”开头的基本代码，且没有所需的 <see langword="WebPermission" />。</exception>
        <exception cref="T:System.TypeLoadException">无法通过 COM 创建实例。  - 或 -  在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例。  - 或 -  使用晚期绑定机制调用了此成员。</exception>
        <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于读取开头"file://"的 URI。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Net.WebPermission">用于读取一个 URI，不以"file://"开头。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">一个激活上下文对象，用于指定要创建的对象。</param>
        <summary>创建类型的一个实例，该类型由指定的 <see cref="T:System.ActivationContext" /> 对象指定。</summary>
        <returns>要访问新创建的对象则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 设置域策略，以便基于应用程序的安全模型，在基于清单的激活过程中使用的激活上下文。 <xref:System.ActivationContext>类包含<xref:System.ApplicationIdentity>提供对应用程序清单的访问的对象。 有关更多信息，请参见 <xref:System.Security.Policy.ApplicationSecurityManager> 类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ActivationContext" />
        <altmember cref="T:System.ApplicationIdentity" />
        <altmember cref="T:System.Security.Policy.ApplicationSecurityManager" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要创建的对象的类型。</param>
        <summary>使用指定类型的默认构造函数来创建该类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要调用构造函数必须可访问。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Activator.CreateInstance%28System.Type%29>方法。 创建几种不同类型的实例，并显示其默认值。  
  
 [!code-cpp[ActivatorX#4](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/source2.cpp#4)]
 [!code-csharp[ActivatorX#4](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/source2.cs#4)]
 [!code-vb[ActivatorX#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/source2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 不是 <see langword="RuntimeType" />。  - 或 -  <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  - 或 -  不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>改为在 [用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或 [可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) 中捕获基类异常 <see cref="T:System.MemberAccessException" />。</para>
          </block>  调用方没有调用此构造函数的权限。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para> 改为在 [用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或 [可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) 中捕获基类异常 <see cref="T:System.MissingMemberException" />。</para>
          </block>  找不到匹配的公共构造函数。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
        <exception cref="T:System.TypeLoadException">
          <paramref name="type" /> 不是有效类型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">一个激活上下文对象，用于指定要创建的对象。</param>
        <param name="activationCustomData">一个包含自定义激活数据的 Unicode 字符串数组。</param>
        <summary>创建类型的一个实例，该类型由指定的 <see cref="T:System.ActivationContext" /> 对象指定，并由指定的自定义激活数据激活。</summary>
        <returns>要访问新创建的对象则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 设置域策略，以便基于应用程序的安全模型，在基于清单的激活过程中使用的激活上下文。 <xref:System.ActivationContext>类包含<xref:System.ApplicationIdentity>提供对应用程序清单的访问的对象。 有关更多信息，请参见 <xref:System.Security.Policy.ApplicationSecurityManager> 类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ActivationContext" />
        <altmember cref="T:System.ApplicationIdentity" />
        <altmember cref="T:System.Security.Policy.ApplicationSecurityManager" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <summary>使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
 `assemblyName` 可以是以下方法之一：  
  
-   程序集，不带路径或文件扩展名的简单名称。 例如，将指定`TypeExtensions`其路径和名称是.\bin\TypeExtensions.dll 程序集。  
  
-   签名的程序集，其中包括其简单名称、 版本、 区域性和公钥标记; 完整名称例如，"TypeExtensions，Version = 1.0.0.0，Culture = neutral，PublicKeyToken = 181869f2f7435b51"。  
  
 有关公共语言运行时如何标识和加载程序集的详细信息，请参阅[运行时如何定位程序集](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)。 有关使用应用程序配置文件以定义程序集的位置的信息，请参阅[指定程序集的位置](~/docs/framework/configure-apps/specify-assembly-location.md)。 如果`assemblyName`位于加载到默认上下文中。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
   
  
## Examples  
 下面的示例定义一个名为`Person`的程序集中名为`PersonInfo`。 请注意，`Person`类具有两个构造函数，其中之一是无参数。  
  
 [!code-csharp[System.Activator.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/personinfo.cs#1)]
 [!code-vb[System.Activator.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/personinfo.vb#1)]  
  
 下面的示例调用<xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29>方法可实例化`Person`类。 它要求对 PersonInfo.dll 要添加到项目的引用。 因为<xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29>方法调用`Person`类默认构造函数，该示例将值赋给其`Name`属性。  
  
 [!code-csharp[System.Activator.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1.cs#2)]
 [!code-vb[System.Activator.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1.vb#2)]  
  
 但是，<xref:System.Activator.CreateInstance%2A>频繁调用以实例化的类型，是跨计算机边界或不在设计时已知。 在这种情况下，您不能在项目中包含程序集的引用，并不能使对该类型的成员的早期绑定调用。 若要解决此限制，下面的示例使用<xref:System.Activator.CreateInstance%2A>方法以及反射来将值赋给`Person`对象的`Name`属性并显示其值。  
  
 [!code-csharp[System.Activator.CreateInstance#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1a.cs#3)]
 [!code-vb[System.Activator.CreateInstance#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1a.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">你无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, bool nonPublic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">要创建的对象的类型。</param>
        <param name="nonPublic">如果公共或非公共默认构造函数可以匹配，则为 <see langword="true" />；如果只有公共默认构造函数可以匹配，则为 <see langword="false" />。</param>
        <summary>使用指定类型的默认构造函数来创建该类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 不是 <see langword="RuntimeType" />。  - 或 -  <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  - 或 -  不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
        <exception cref="T:System.TypeLoadException">
          <paramref name="type" /> 不是有效类型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">要创建的对象的类型。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要调用构造函数必须是可访问，并且必须提供与指定的参数列表最具体的匹配。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
   
  
## Examples  
 下面的示例调用<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29>方法来创建<xref:System.String>对象。 它调用<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>构造函数实例化一个字符串，包含从字符数组的第 14 个位置开始的十个元素。  
  
 [!code-csharp[System.Activator.CreateInstance#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/CreateInstance5.cs#5)]
 [!code-vb[System.Activator.CreateInstance#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/CreateInstance5.vb#5)]  
  
 下面的示例创建一个交错的数组，其元素是自变量传递给<xref:System.String>构造函数。 该示例然后将传递到每个数组<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29>要调用的相应字符串构造函数方法。  
  
 [!code-csharp[System.Activator.CreateInstance#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstance2.cs#4)]
 [!code-vb[System.Activator.CreateInstance#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstance2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 不是 <see langword="RuntimeType" />。  - 或 -  <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  - 或 -  不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>改为在 [用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或 [可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) 中捕获基类异常 <see cref="T:System.MemberAccessException" />。</para>
          </block>  调用方没有调用此构造函数的权限。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para> 改为在 [用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或 [可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) 中捕获基类异常 <see cref="T:System.MissingMemberException" />。</para>
          </block>  找不到匹配的公共构造函数。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
        <exception cref="T:System.TypeLoadException">
          <paramref name="type" /> 不是有效类型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (domain As AppDomain, assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain">在其中创建名为 <c>typeName</c> 的类型的远程域。</param>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <summary>使用命名的程序集和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Activator.CreateInstance%2A>托管需要在具有受限安全权限的应用程序域中执行代码。  
  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
> [!NOTE]
>  此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 或 <paramref name="domain" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类型的实例。  - 或 -  使用晚期绑定机制调用了此成员。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">表示所有类型的成员上调用操作的能力。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和非公共类型的授予集是否限制为调用方的授予集或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  <paramref name="activationAttributes" /> 不是 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 数组。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">尝试在 <paramref name="activationAttributes" /> 中指定的目标中进行远程激活时发生错误。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, object[] args, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, object[] args, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type">要创建的对象的类型。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要调用构造函数必须是可访问，并且必须提供与指定的参数列表最具体的匹配。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 不是 <see langword="RuntimeType" />。  - 或 -  <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  - 或 -  不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
        <exception cref="T:System.TypeLoadException">
          <paramref name="type" /> 不是有效类型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="type">要创建的对象的类型。</param>
        <param name="bindingAttr">影响 <c>type</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c></c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>type</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要调用构造函数必须提供与指定的活页夹和绑定特性的约束下指定的自变量列表最精确的匹配项。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 不是 <see langword="RuntimeType" />。  - 或 -  <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  - 或 -  不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
        <exception cref="T:System.TypeLoadException">
          <paramref name="type" /> 不是有效类型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type">要创建的对象的类型。</param>
        <param name="bindingAttr">影响 <c>type</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c></c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>type</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要调用构造函数必须提供与指定的活页夹和绑定特性的约束下指定的自变量列表最精确的匹配项。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和非公共类型和成员的授予集如果被限制到调用方的授予集或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 不是 <see langword="RuntimeType" />。  - 或 -  <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  - 或 -  不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
        <exception cref="T:System.TypeLoadException">
          <paramref name="type" /> 不是有效类型。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供的证据。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)42d9dc2a-8fcc-4ff3-b002-4ff260ef3dc5。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="domain">在其中创建名为 <c>typeName</c> 的类型的域。</param>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Activator.CreateInstance%2A>托管需要在具有受限安全权限的应用程序域中执行代码。  
  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
> [!NOTE]
>  此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">表示所有类型的成员上调用操作的能力。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <param name="securityInfo">用于做出安全策略决策和授予代码权限的信息。</param>
        <summary>使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
> [!NOTE]
>  从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。 (请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)  
>   
>  若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="domain">在其中创建名为 <c>typeName</c> 的类型的域。</param>
        <param name="assemblyName">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。 如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
        <param name="typeName">首选类型的完全限定名。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组。 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 指定激活远程对象所需的 URL。</param>
        <param name="securityAttributes">用于做出安全策略决策和授予代码权限的信息。</param>
        <summary>使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Activator.CreateInstance%2A>托管需要在具有受限安全权限的应用程序域中执行代码。  
  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。  
  
> [!NOTE]
>  此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
        <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  - 或 -  <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  - 或 -  最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyName" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  - 或 -  程序集名称或基本代码无效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">表示所有类型的成员上调用操作的能力。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateInstance&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateInstance&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T CreateInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要创建的类型。</typeparam>
        <summary>使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</summary>
        <returns>对新创建对象的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activator.CreateInstance%60%601>编译器使用泛型方法来实现指定类型参数的类型实例化。 例如，在下面的泛型方法的实现`new T()`(`gcnew T()` c + + 中) 使用<xref:System.Activator.CreateInstance%60%601>泛型方法。  
  
 [!code-cpp[System.Activation.CreateInstance~~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cpp/remarks.cpp#1)]
 [!code-csharp[System.Activation.CreateInstance~~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cs/remarks.cs#1)]
 [!code-vb[System.Activation.CreateInstance~~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activation.createinstance~~1/vb/remarks.vb#1)]  
  
 一般情况下，没有无需使用<xref:System.Activator.CreateInstance%60%601>在应用程序中的泛型方法的代码，因为必须在编译时知道的类型。 如果在编译时已知类型，可以使用正常的实例化语法 (`new`在 C# 中，运算符`New`在 Visual Basic 中， `gcnew` c + + 中)。 如果类型不在编译时已知的则可以调用的非泛型重载<xref:System.Activator.CreateInstance%2A>。  
  
 不有的任何重载<xref:System.Activator.CreateInstance%60%601>因为非泛型重载的需要自变量列表的泛型方法<xref:System.Activator.CreateInstance%2A>已提供后期绑定构造函数解析。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para> 改为在 [用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或 [可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) 中捕获基类异常 <see cref="T:System.MissingMemberException" />。</para>
          </block>  为 <paramref name="T" /> 指定的类型没有无参数构造函数。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <summary>使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Activator.CreateInstanceFrom%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Activator>类。  
  
 [!code-cpp[ActivatorX#3](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#3)]
 [!code-csharp[ActivatorX#3](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#3)]
 [!code-vb[ActivatorX#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (domain As AppDomain, assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain">在其中创建名为 <c>typeName</c> 的类型的远程域。</param>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <summary>使用命名的程序集文件和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Activator.CreateInstanceFrom%2A>托管需要在具有受限安全权限的应用程序域中执行代码。  
  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
> [!NOTE]
>  此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
        <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型，而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="domain">在其中创建名为 <c>typeName</c> 的类型的远程域。</param>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <summary>使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Activator.CreateInstanceFrom%2A>托管需要在具有受限安全权限的应用程序域中执行代码。  
  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 有关可由调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  <paramref name="assemblyName" /> 是针对晚于当前加载版本的公共语言运行时版本编译的。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供的证据。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <param name="securityInfo">用于做出安全策略决策和授予代码权限的信息。</param>
        <summary>使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">创建委托的一个实例时调用非托管的代码的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use Evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="domain">在其中创建名为 <c>typeName</c> 的类型的远程域。</param>
        <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</param>
        <param name="typeName">首选类型的名称。</param>
        <param name="ignoreCase">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</param>
        <param name="bindingAttr">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。 如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</param>
        <param name="binder">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。 如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</param>
        <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</param>
        <param name="culture">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。 如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
        <param name="securityAttributes">用于做出安全策略决策和授予代码权限的信息。</param>
        <summary>使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</summary>
        <returns>要访问新创建的实例则必须解包的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Activator.CreateInstanceFrom%2A>托管需要在具有受限安全权限的应用程序域中执行代码。  
  
 使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。  
  
> [!NOTE]
>  此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。  
  
 有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
        <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
        <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
        <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
        <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="assemblyFile" /> 不是有效的程序集。  - 或 -  当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供的证据。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要搜索的目录路径，并读取其内容的功能。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">用于访问非公共类型和成员而不考虑其授予集。 关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为已知对象或 XML Web services 创建一个代理。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (Type type, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObject(class System.Type type, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.GetObject(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObject(Type ^ type, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">希望连接到的已知对象的类型。</param>
        <param name="url">已知对象的 URL。</param>
        <summary>为指定类型和 URL 所指示的已知对象创建一个代理。</summary>
        <returns>一个代理，它指向由所请求的已知对象服务的终结点。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用要将消息发送到远程对象的代理。 对此代理调用方法之前通过网络不发送任何消息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 或 <paramref name="url" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.Remoting.RemotingException">
          <paramref name="type" /> 不会通过参考封送并且并非接口。</exception>
        <exception cref="T:System.MemberAccessException">使用晚期绑定机制调用了此成员。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownObjectMode" />
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (Type type, string url, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObject(class System.Type type, string url, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.GetObject(System.Type,System.String,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObject(Type ^ type, System::String ^ url, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">希望连接到的已知对象的类型。</param>
        <param name="url">已知对象的 URL。</param>
        <param name="state">通道特定的数据或 <see langword="null" />。</param>
        <summary>为指定类型、URL 和通道数据所指示的已知对象创建一个代理。</summary>
        <returns>一个代理，它指向由所请求的已知对象服务的终结点。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用要将消息发送到远程对象的代理。 对此代理调用方法之前通过网络不发送任何消息。  
  
 `state`参数将信息传递给通道，并传递给<xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 或 <paramref name="url" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.Remoting.RemotingException">
          <paramref name="type" /> 不会通过参考封送并且并非接口。</exception>
        <exception cref="T:System.MemberAccessException">使用晚期绑定机制调用了此成员。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownObjectMode" />
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Activator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Activator.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Activator::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">留待将来使用。 必须为 IID_NULL。</param>
        <param name="rgszNames">要映射的名称的传入数组。</param>
        <param name="cNames">要映射的名称的计数。</param>
        <param name="lcid">要在其中解释名称的区域设置上下文。</param>
        <param name="rgDispId">调用方分配的数组，用于接收与名称对应的 ID。</param>
        <summary>将一组名称映射为对应的一组调度标识符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于从非托管代码，访问托管的类，不应从托管代码调用。 有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Activator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Activator.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Activator::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">要返回的类型信息。</param>
        <param name="lcid">类型信息的区域设置标识符。</param>
        <param name="ppTInfo">一个对象，该对象接收指向请求的类型信息对象的指针。</param>
        <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于从非托管代码，访问托管的类，不应从托管代码调用。 有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Activator.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Activator.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Activator::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。 此参数未经初始化即被传递。</param>
        <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于从非托管代码，访问托管的类，不应从托管代码调用。 有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.Invoke">
      <MemberSignature Language="C#" Value="void _Activator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Activator.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Activator::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">一个用于标识成员的调度标识符。</param>
        <param name="riid">留待将来使用。 必须为 IID_NULL。</param>
        <param name="lcid">要在其中解释参数的区域设置上下文。</param>
        <param name="wFlags">描述调用的上下文的标志。</param>
        <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
        <param name="pVarResult">指向要存储结果的位置的指针。</param>
        <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
        <param name="puArgErr">第一个出错自变量的索引。</param>
        <summary>提供对某一对象公开的属性和方法的访问。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于从非托管代码，访问托管的类，不应从托管代码调用。 有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</exception>
      </Docs>
    </Member>
  </Members>
</Type>