<Type Name="Activator" FullName="System.Activator">
  <TypeSignature Language="C#" Value="public sealed class Activator : System.Runtime.InteropServices._Activator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Activator extends System.Object implements class System.Runtime.InteropServices._Activator" />
  <TypeSignature Language="DocId" Value="T:System.Activator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Activator&#xA;Implements _Activator" />
  <TypeSignature Language="C++ CLI" Value="public ref class Activator sealed : System::Runtime::InteropServices::_Activator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Activator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Activator))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="60b3c-101">包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-101">Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects.</span></span> <span data-ttu-id="60b3c-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="60b3c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-103"><xref:System.Activator.CreateInstance%2A>方法创建一个实例通过调用匹配程度最高的构造函数的程序集中定义的类型指定的参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-103">The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type defined in an assembly by invoking the constructor that best matches the specified arguments.</span></span> <span data-ttu-id="60b3c-104">如果未不指定任何参数，则调用没有采用任何参数，即默认构造函数，该构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-104">If no arguments are specified, the constructor that takes no parameters, that is, the default constructor, is invoked.</span></span>  
  
 <span data-ttu-id="60b3c-105">您必须有足够的权限，以搜索并调用构造函数;否则，会引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-105">You must have sufficient permission to search for and call a constructor; otherwise, an exception is thrown.</span></span> <span data-ttu-id="60b3c-106">默认情况下，仅公共构造函数被视为的构造函数在搜索过程中。</span><span class="sxs-lookup"><span data-stu-id="60b3c-106">By default, only public constructors are considered during the search for a constructor.</span></span> <span data-ttu-id="60b3c-107">如果可以找到任何构造函数或默认构造函数，是引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-107">If no constructor or default constructor can be found, an exception is thrown.</span></span>  
  
 <span data-ttu-id="60b3c-108">联编程序参数指定合适的构造函数的程序集中搜索的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-108">A binder parameter specifies an object that searches an assembly for a suitable constructor.</span></span> <span data-ttu-id="60b3c-109">你可以指定你自己的活页夹和搜索条件。</span><span class="sxs-lookup"><span data-stu-id="60b3c-109">You can specify your own binder and search criteria.</span></span> <span data-ttu-id="60b3c-110">如果未不指定任何联编，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-110">If no binder is specified, a default binder is used.</span></span> <span data-ttu-id="60b3c-111">有关更多信息，请参见 <xref:System.Reflection.Binder?displayProperty=nameWithType> 和 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-111">For more information, see the <xref:System.Reflection.Binder?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> classes.</span></span>  
  
 <span data-ttu-id="60b3c-112">Evidence 参数会影响的安全策略和构造函数的权限。</span><span class="sxs-lookup"><span data-stu-id="60b3c-112">An evidence parameter affects the security policy and permissions for the constructor.</span></span> <span data-ttu-id="60b3c-113">有关更多信息，请参见 <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-113">For more information, see the <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="60b3c-114">可以在本地或远程站点创建类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-114">An instance of a type can be created at a local or remote site.</span></span> <span data-ttu-id="60b3c-115">如果远程创建的类型、 激活特性参数指定远程网站的 URI。</span><span class="sxs-lookup"><span data-stu-id="60b3c-115">If the type is created remotely, an activation attribute parameter specifies the URI of the remote site.</span></span> <span data-ttu-id="60b3c-116">用于创建实例的调用可能会到达该远程站点之前通过中间站点。</span><span class="sxs-lookup"><span data-stu-id="60b3c-116">The call to create the instance might pass through intermediary sites before it reaches the remote site.</span></span> <span data-ttu-id="60b3c-117">环境中或上下文，调用在远程和中间站点运行，则可以修改其他激活特性。</span><span class="sxs-lookup"><span data-stu-id="60b3c-117">Other activation attributes can modify the environment, or context, in which the call operates at the remote and intermediary sites.</span></span>  
  
 <span data-ttu-id="60b3c-118">如果实例在本地创建，则返回对该对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-118">If the instance is created locally, a reference to that object is returned.</span></span> <span data-ttu-id="60b3c-119">如果从远程创建实例，则返回到代理服务器的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-119">If the instance is created remotely, a reference to a proxy is returned.</span></span> <span data-ttu-id="60b3c-120">就像它是本地对象，将通过代理操作远程对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-120">The remote object is manipulated through the proxy as if it were a local object.</span></span>  
  
 <span data-ttu-id="60b3c-121"><xref:System.Activator.GetObject%2A>方法创建的当前正在运行远程对象、 服务器激活的已知对象或 XML Web 服务的代理。</span><span class="sxs-lookup"><span data-stu-id="60b3c-121">The <xref:System.Activator.GetObject%2A> method creates a proxy to a currently running remote object, server-activated well-known object, or XML Web service.</span></span> <span data-ttu-id="60b3c-122">你可以指定连接中，即通道。</span><span class="sxs-lookup"><span data-stu-id="60b3c-122">You can specify the connection medium, that is, the channel.</span></span> <span data-ttu-id="60b3c-123">有关更多信息，请参见 <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-123">For more information, see the <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="60b3c-124">程序集包含类型定义。</span><span class="sxs-lookup"><span data-stu-id="60b3c-124">Assemblies contain type definitions.</span></span> <span data-ttu-id="60b3c-125"><xref:System.Activator.CreateInstance%2A>方法从当前正在运行的程序集创建类型的一个实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-125">The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type from a currently running assembly.</span></span> <span data-ttu-id="60b3c-126"><xref:System.Activator.CreateInstanceFrom%2A>方法从包含程序集的文件创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-126">The <xref:System.Activator.CreateInstanceFrom%2A> method creates an instance from a file that contains an assembly.</span></span> <span data-ttu-id="60b3c-127"><xref:System.Activator.CreateComInstanceFrom%2A>方法从文件包含的程序集创建 COM 对象的一个实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-127">The <xref:System.Activator.CreateComInstanceFrom%2A> method creates an instance of a COM object from a file that contains an assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b3c-128">下面的示例演示如何使用<xref:System.Activator>类在运行时动态构造对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-128">The following example shows how to use the <xref:System.Activator> class to dynamically construct objects at run time.</span></span>  
  
 [!code-cpp[ActivatorX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#1)]
 [!code-csharp[ActivatorX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#1)]
 [!code-vb[ActivatorX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateComInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b3c-129">创建指定名称的 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-129">Creates an instance of the COM object whose name is specified.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateComInstanceFrom (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="60b3c-130">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-130">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-131">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-131">The name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="60b3c-132">使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-132">Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-133">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-133">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-134">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-134">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-135">A<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>属性值为`true`必须以显式或默认方式对 COM 类型应用因此<xref:System.Activator.CreateComInstanceFrom%2A>方法可以创建该类型的实例; 否则为<xref:System.TypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-135">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 <span data-ttu-id="60b3c-136">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-136">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-137">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-137">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-138">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-138">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-139">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-139">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-140"><paramref name="typeName" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-140"><paramref name="typeName" /> or <paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="60b3c-141">无法通过 COM 创建实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-141">An instance cannot be created through COM.</span></span>  
  
 <span data-ttu-id="60b3c-142">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-142">-or-</span></span>  
  
 <span data-ttu-id="60b3c-143">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-143"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-144">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-144">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-145">未找到 <paramref name="assemblyName" />，或者你正在试图加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-145"><paramref name="assemblyName" /> is not found, or the module you are trying to load does not specify a file name extension.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-146">无法创建抽象类的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-146">Cannot create an instance of an abstract class.</span></span>  
  
 <span data-ttu-id="60b3c-147">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-147">-or-</span></span>  
  
 <span data-ttu-id="60b3c-148">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="60b3c-148">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-149">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="60b3c-149">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-150"><paramref name="assemblyName" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="60b3c-150"><paramref name="assemblyName" /> is the empty string ("").</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-151">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-151">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-152">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateComInstanceFrom (assemblyName As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="60b3c-153">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-153">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-154">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-154">The name of the preferred type.</span></span></param>
        <param name="hashValue"><span data-ttu-id="60b3c-155">计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-155">The value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="60b3c-156">用于对文件进行哈希计算并生成强名称的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-156">The hash algorithm used for hashing files and generating the strong name.</span></span></param>
        <summary><span data-ttu-id="60b3c-157">使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-157">Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-158">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-158">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-159">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-159">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-160">A<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>属性值为`true`必须以显式或默认方式对 COM 类型应用因此<xref:System.Activator.CreateComInstanceFrom%2A>方法可以创建该类型的实例; 否则为<xref:System.TypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-160">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 <span data-ttu-id="60b3c-161">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-161">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-162">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-162">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-163">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-163">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-164">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-164">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-165"><paramref name="typeName" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-165"><paramref name="typeName" /> or <paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-166"><paramref name="assemblyName" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="60b3c-166"><paramref name="assemblyName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="60b3c-167">两次用两个不同的证据加载了程序集或模块，或程序集名称的长度超过 MAX_PATH 个字符。</span><span class="sxs-lookup"><span data-stu-id="60b3c-167">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-168">未找到 <paramref name="assemblyName" />，或者你正在试图加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-168"><paramref name="assemblyName" /> is not found, or the module you are trying to load does not specify a file name extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="60b3c-169"><paramref name="assemblyName" /> 已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="60b3c-169"><paramref name="assemblyName" /> is found but cannot be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-170"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-170"><paramref name="assemblyName" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-171">指定了不以“file://”开头的基本代码，且没有所需的 <see langword="WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-171">A code base that does not start with "file://" was specified without the required <see langword="WebPermission" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="60b3c-172">无法通过 COM 创建实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-172">An instance cannot be created through COM.</span></span>  
  
 <span data-ttu-id="60b3c-173">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-173">-or-</span></span>  
  
 <span data-ttu-id="60b3c-174">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-174"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-175">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-175">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-176">无法创建抽象类的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-176">An instance of an abstract class cannot be created.</span></span>  
  
 <span data-ttu-id="60b3c-177">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-177">-or-</span></span>  
  
 <span data-ttu-id="60b3c-178">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="60b3c-178">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-179">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="60b3c-179">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-180">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-180">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-181">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-181">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-182">用于读取开头"file://"的 URI。</span><span class="sxs-lookup"><span data-stu-id="60b3c-182">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="60b3c-183">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-183">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="60b3c-184">用于读取一个 URI，不以"file://"开头。</span><span class="sxs-lookup"><span data-stu-id="60b3c-184">for reading a URI that does not begin with "file://".</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b3c-185">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-185">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext"><span data-ttu-id="60b3c-186">一个激活上下文对象，用于指定要创建的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-186">An activation context object that specifies the object to create.</span></span></param>
        <summary><span data-ttu-id="60b3c-187">创建类型的一个实例，该类型由指定的 <see cref="T:System.ActivationContext" /> 对象指定。</span><span class="sxs-lookup"><span data-stu-id="60b3c-187">Creates an instance of the type designated by the specified <see cref="T:System.ActivationContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="60b3c-188">要访问新创建的对象则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-188">A handle that must be unwrapped to access the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-189">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-189">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-190">设置域策略，以便基于应用程序的安全模型，在基于清单的激活过程中使用的激活上下文。</span><span class="sxs-lookup"><span data-stu-id="60b3c-190">The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model.</span></span> <span data-ttu-id="60b3c-191"><xref:System.ActivationContext>类包含<xref:System.ApplicationIdentity>提供对应用程序清单的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-191">The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest.</span></span> <span data-ttu-id="60b3c-192">有关更多信息，请参见 <xref:System.Security.Policy.ApplicationSecurityManager> 类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-192">For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ActivationContext" />
        <altmember cref="T:System.ApplicationIdentity" />
        <altmember cref="T:System.Security.Policy.ApplicationSecurityManager" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-193">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-193">The type of object to create.</span></span></param>
        <summary><span data-ttu-id="60b3c-194">使用指定类型的默认构造函数来创建该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-194">Creates an instance of the specified type using that type's default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-195">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-195">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-196">要调用构造函数必须可访问。</span><span class="sxs-lookup"><span data-stu-id="60b3c-196">The constructor to be invoked must be accessible.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-197">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-197">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-198">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-198">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-199">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-199">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b3c-200">下面的代码示例演示如何调用<xref:System.Activator.CreateInstance%28System.Type%29>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-200">The following code example demonstrates how to call the <xref:System.Activator.CreateInstance%28System.Type%29> method.</span></span> <span data-ttu-id="60b3c-201">创建几种不同类型的实例，并显示其默认值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-201">Instances of several different types are created and their default values are displayed.</span></span>  
  
 [!code-cpp[ActivatorX#4](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/source2.cpp#4)]
 [!code-csharp[ActivatorX#4](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/source2.cs#4)]
 [!code-vb[ActivatorX#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/source2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-202"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-202"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-203"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-203"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
 <span data-ttu-id="60b3c-204">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-204">-or-</span></span>  
  
 <span data-ttu-id="60b3c-205"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-205"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-206"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-206"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="60b3c-207">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-207">-or-</span></span>  
  
 <span data-ttu-id="60b3c-208">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-208">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-209">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-209">-or-</span></span>  
  
 <span data-ttu-id="60b3c-210">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-210">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-211">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-211">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="60b3c-212">在[适用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或[可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-212">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="60b3c-213">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-213">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-214">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-214">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-215">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-215">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="60b3c-216">在[适用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或[可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-216">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="60b3c-217">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-217">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="60b3c-218"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="60b3c-218"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-219"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-219"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-220">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-220">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-221">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-221">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-222">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-222">for accessing nonpublic types regardless of their grant sets.</span></span> <span data-ttu-id="60b3c-223">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-223">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext"><span data-ttu-id="60b3c-224">一个激活上下文对象，用于指定要创建的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-224">An activation context object that specifies the object to create.</span></span></param>
        <param name="activationCustomData"><span data-ttu-id="60b3c-225">一个包含自定义激活数据的 Unicode 字符串数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-225">An array of Unicode strings that contain custom activation data.</span></span></param>
        <summary><span data-ttu-id="60b3c-226">创建类型的一个实例，该类型由指定的 <see cref="T:System.ActivationContext" /> 对象指定，并由指定的自定义激活数据激活。</span><span class="sxs-lookup"><span data-stu-id="60b3c-226">Creates an instance of the type that is designated by the specified <see cref="T:System.ActivationContext" /> object and activated with the specified custom activation data.</span></span></summary>
        <returns><span data-ttu-id="60b3c-227">要访问新创建的对象则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-227">A handle that must be unwrapped to access the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-228">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-228">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-229">设置域策略，以便基于应用程序的安全模型，在基于清单的激活过程中使用的激活上下文。</span><span class="sxs-lookup"><span data-stu-id="60b3c-229">The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model.</span></span> <span data-ttu-id="60b3c-230"><xref:System.ActivationContext>类包含<xref:System.ApplicationIdentity>提供对应用程序清单的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-230">The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest.</span></span> <span data-ttu-id="60b3c-231">有关更多信息，请参见 <xref:System.Security.Policy.ApplicationSecurityManager> 类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-231">For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ActivationContext" />
        <altmember cref="T:System.ApplicationIdentity" />
        <altmember cref="T:System.Security.Policy.ApplicationSecurityManager" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="60b3c-232">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-232">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-233">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-233">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-234">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-234">The fully qualified name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="60b3c-235">使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-235">Creates an instance of the type whose name is specified, using the named assembly and default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-236">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-236">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-237">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-237">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-238">`assemblyName` 可以是以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="60b3c-238">`assemblyName` can be either of the following:</span></span>  
  
-   <span data-ttu-id="60b3c-239">程序集，不带路径或文件扩展名的简单名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-239">The simple name of an assembly, without its path or file extension.</span></span> <span data-ttu-id="60b3c-240">例如，将指定`TypeExtensions`其路径和名称是.\bin\TypeExtensions.dll 程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-240">For example, you would specify `TypeExtensions` for an assembly whose path and name are .\bin\TypeExtensions.dll.</span></span>  
  
-   <span data-ttu-id="60b3c-241">签名的程序集，其中包括其简单名称、 版本、 区域性和公钥标记; 完整名称例如，"TypeExtensions，Version = 1.0.0.0，Culture = neutral，PublicKeyToken = 181869f2f7435b51"。</span><span class="sxs-lookup"><span data-stu-id="60b3c-241">The full name of a signed assembly, which consists of its simple name, version, culture, and public key token; for example, "TypeExtensions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=181869f2f7435b51".</span></span>  
  
 <span data-ttu-id="60b3c-242">有关公共语言运行时如何标识和加载程序集的详细信息，请参阅[运行时如何定位程序集](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="60b3c-242">For more information on how the common language runtime identifies and loads assemblies, see [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).</span></span> <span data-ttu-id="60b3c-243">有关使用应用程序配置文件以定义程序集的位置的信息，请参阅[指定程序集的位置](~/docs/framework/configure-apps/specify-assembly-location.md)。</span><span class="sxs-lookup"><span data-stu-id="60b3c-243">For information on using the application configuration file to define assembly locations, see [Specifying an Assembly's Location](~/docs/framework/configure-apps/specify-assembly-location.md).</span></span> <span data-ttu-id="60b3c-244">如果`assemblyName`位于加载到默认上下文中。</span><span class="sxs-lookup"><span data-stu-id="60b3c-244">If `assemblyName` is found, it is loaded in the default context.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-245">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-245">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-246">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-246">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-247">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-247">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b3c-248">下面的示例定义一个名为`Person`的程序集中名为`PersonInfo`。</span><span class="sxs-lookup"><span data-stu-id="60b3c-248">The following example defines a class named `Person` in an assembly named `PersonInfo`.</span></span> <span data-ttu-id="60b3c-249">请注意，`Person`类具有两个构造函数，其中之一是无参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-249">Note that the `Person` class has two constructors, one of which is parameterless.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/personinfo.cs#1)]
 [!code-vb[System.Activator.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/personinfo.vb#1)]  
  
 <span data-ttu-id="60b3c-250">下面的示例调用<xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29>方法可实例化`Person`类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-250">The following example calls the <xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29> method to instantiate the `Person` class.</span></span> <span data-ttu-id="60b3c-251">它要求对 PersonInfo.dll 要添加到项目的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-251">It requires a reference to PersonInfo.dll to be added to the project.</span></span> <span data-ttu-id="60b3c-252">因为<xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29>方法调用`Person`类默认构造函数，该示例将值赋给其`Name`属性。</span><span class="sxs-lookup"><span data-stu-id="60b3c-252">Because the <xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29> method calls the `Person` class default constructor,  the example assigns a value to its `Name` property.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1.cs#2)]
 [!code-vb[System.Activator.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1.vb#2)]  
  
 <span data-ttu-id="60b3c-253">但是，<xref:System.Activator.CreateInstance%2A>频繁调用以实例化的类型，是跨计算机边界或不在设计时已知。</span><span class="sxs-lookup"><span data-stu-id="60b3c-253">However, <xref:System.Activator.CreateInstance%2A> is frequently called to instantiate a type that crosses machine boundaries or that is not known at design time.</span></span> <span data-ttu-id="60b3c-254">在这种情况下，您不能在项目中包含程序集的引用，并不能使对该类型的成员的早期绑定调用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-254">In this case, you cannot include a reference to the assembly in the project and cannot make early-bound calls to the type's members.</span></span> <span data-ttu-id="60b3c-255">若要解决此限制，下面的示例使用<xref:System.Activator.CreateInstance%2A>方法以及反射来将值赋给`Person`对象的`Name`属性并显示其值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-255">To work around this limitation, the following example uses the <xref:System.Activator.CreateInstance%2A> method along with reflection to assign a value to the `Person` object's `Name` property and to display its value.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1a.cs#3)]
 [!code-vb[System.Activator.CreateInstance#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1a.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-256"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-256"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-257">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-257">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-258">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-258"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-259">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-259"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-260">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-260">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-261">你无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-261">You cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-262">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-262">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-263">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-263">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-264">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-264">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-265"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-265"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-266">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-266">-or-</span></span>  
  
 <span data-ttu-id="60b3c-267">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-267">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-268">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-268">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-269">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-269">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-270">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-270">-or-</span></span>  
  
 <span data-ttu-id="60b3c-271">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-271">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-272">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-272">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-273">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-273">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-274">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-274">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-275">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-275">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, bool nonPublic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-276">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-276">The type of object to create.</span></span></param>
        <param name="nonPublic">
          <span data-ttu-id="60b3c-277">如果公共或非公共默认构造函数可以匹配，则为 <see langword="true" />；如果只有公共默认构造函数可以匹配，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-277"><see langword="true" /> if a public or nonpublic default constructor can match; <see langword="false" /> if only a public default constructor can match.</span></span></param>
        <summary><span data-ttu-id="60b3c-278">使用指定类型的默认构造函数来创建该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-278">Creates an instance of the specified type using that type's default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-279">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-279">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-280">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-280">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-281">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-281">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-282">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-282">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-283"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-283"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-284"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-284"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
 <span data-ttu-id="60b3c-285">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-285">-or-</span></span>  
  
 <span data-ttu-id="60b3c-286"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-286"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-287"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-287"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="60b3c-288">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-288">-or-</span></span>  
  
 <span data-ttu-id="60b3c-289">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-289">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-290">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-290">-or-</span></span>  
  
 <span data-ttu-id="60b3c-291">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-291">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-292">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-292">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-293">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-293">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-294">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-294">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-295">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-295">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-296">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-296">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="60b3c-297"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="60b3c-297"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-298"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-298"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-299">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-299">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-300">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-300">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-301">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-301">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-302">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-302">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-303">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-303">The type of object to create.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-304">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-304">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-305">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-305">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <summary><span data-ttu-id="60b3c-306">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-306">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-307">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-307">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-308">要调用构造函数必须是可访问，并且必须提供与指定的参数列表最具体的匹配。</span><span class="sxs-lookup"><span data-stu-id="60b3c-308">The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-309">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-309">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-310">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-310">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-311">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-311">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b3c-312">下面的示例调用<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29>方法来创建<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-312">The following example calls the  <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29> method to create a <xref:System.String> object.</span></span> <span data-ttu-id="60b3c-313">它调用<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>构造函数实例化一个字符串，包含从字符数组的第 14 个位置开始的十个元素。</span><span class="sxs-lookup"><span data-stu-id="60b3c-313">It calls the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> constructor to instantiate a string that contains ten elements from a character array starting at the fourteenth position.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/CreateInstance5.cs#5)]
 [!code-vb[System.Activator.CreateInstance#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/CreateInstance5.vb#5)]  
  
 <span data-ttu-id="60b3c-314">下面的示例创建一个交错的数组，其元素是自变量传递给<xref:System.String>构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-314">The following example creates a jagged array whose elements are arguments to be passed to a <xref:System.String> constructor.</span></span> <span data-ttu-id="60b3c-315">该示例然后将传递到每个数组<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29>要调用的相应字符串构造函数方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-315">The example then passes each array to the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29> method to invoke the appropriate string constructor.</span></span>  
  
 [!code-csharp[System.Activator.CreateInstance#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstance2.cs#4)]
 [!code-vb[System.Activator.CreateInstance#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstance2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-316"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-316"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-317"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-317"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
 <span data-ttu-id="60b3c-318">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-318">-or-</span></span>  
  
 <span data-ttu-id="60b3c-319"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-319"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-320"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-320"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="60b3c-321">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-321">-or-</span></span>  
  
 <span data-ttu-id="60b3c-322">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-322">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-323">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-323">-or-</span></span>  
  
 <span data-ttu-id="60b3c-324">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-324">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
 <span data-ttu-id="60b3c-325">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-325">-or-</span></span>  
  
 <span data-ttu-id="60b3c-326">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-326">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-327">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-327">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="60b3c-328">在[适用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或[可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-328">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="60b3c-329">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-329">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-330">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-330">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-331">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-331">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="60b3c-332">在[适用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或[可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-332">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="60b3c-333">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-333">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="60b3c-334"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="60b3c-334"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-335"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-335"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-336">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-336">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-337">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-337">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-338">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-338">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-339">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-339">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (domain As AppDomain, assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="60b3c-340">在其中创建名为 <c>typeName</c> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="60b3c-340">The remote domain where the type named <c>typeName</c> is created.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="60b3c-341">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-341">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-342">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-342">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-343">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-343">The fully qualified name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="60b3c-344">使用命名的程序集和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-344">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-345">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-345">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-346">使用<xref:System.Activator.CreateInstance%2A>托管需要在具有受限安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-346">Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="60b3c-347">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-347">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-348">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-348">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-349"><paramref name="typeName" /> 或 <paramref name="domain" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-349"><paramref name="typeName" /> or <paramref name="domain" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-350">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-350">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-351">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-351"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-352">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-352"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-353">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-353">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-354">无法创建抽象类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-354">Cannot create an instance of an abstract type.</span></span>  
  
 <span data-ttu-id="60b3c-355">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-355">-or-</span></span>  
  
 <span data-ttu-id="60b3c-356">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="60b3c-356">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-357">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-357">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-358">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-358">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-359">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-359">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-360"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-360"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-361">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-361">-or-</span></span>  
  
 <span data-ttu-id="60b3c-362">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-362">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-363">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-363">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-364">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-364">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-365">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-365">-or-</span></span>  
  
 <span data-ttu-id="60b3c-366">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-366">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-367">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-367">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-368">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-368">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-369">表示所有类型的成员上调用操作的能力。</span><span class="sxs-lookup"><span data-stu-id="60b3c-369">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="60b3c-370">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-370">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-371">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-371">requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-372">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-372">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="60b3c-373">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-373">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-374">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-374">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-375">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-375">The fully qualified name of the preferred type.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-376">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-376">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-377">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-377">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-378">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-378">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-379">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-379">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-380">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-380">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-381">使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-381">Creates an instance of the type whose name is specified, using the named assembly and default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-382">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-382">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-383">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-383">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-384">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和非公共类型的授予集是否限制为调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-384">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-385">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-385">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-386">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-386">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-387"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-387"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-388">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-388">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-389">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-389"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-390">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-390"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-391">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-391">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-392">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-392">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-393">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-393">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-394">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-394">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-395">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-395">-or-</span></span>  
  
 <span data-ttu-id="60b3c-396"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-396"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-397">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-397">-or-</span></span>  
  
 <span data-ttu-id="60b3c-398"><paramref name="activationAttributes" /> 不是 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-398"><paramref name="activationAttributes" /> is not a <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /></span></span>  
  
 <span data-ttu-id="60b3c-399">数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-399">array.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-400"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-400"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-401">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-401">-or-</span></span>  
  
 <span data-ttu-id="60b3c-402">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-402">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-403">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-403">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-404">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-404">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-405">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-405">-or-</span></span>  
  
 <span data-ttu-id="60b3c-406">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-406">The assembly name or code base is invalid.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-407">尝试在 <paramref name="activationAttributes" /> 中指定的目标中进行远程激活时发生错误。</span><span class="sxs-lookup"><span data-stu-id="60b3c-407">An error occurred when attempting remote activation in a target specified in <paramref name="activationAttributes" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-408">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-408">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-409">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-409">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-410">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-410">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-411">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-411">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, object[] args, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, object[] args, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-412">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-412">The type of object to create.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-413">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-413">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-414">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-414">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-415">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-415">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-416">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-416">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-417">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-417">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-418">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-418">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-419">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-419">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-420">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-420">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-421">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-421">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-422">要调用构造函数必须是可访问，并且必须提供与指定的参数列表最具体的匹配。</span><span class="sxs-lookup"><span data-stu-id="60b3c-422">The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-423">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志以及是否限制调用方授予为包含非公共类型的程序集的授予集设置或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-423">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-424">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-424">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-425">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-425">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-426"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-426"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-427"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-427"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
 <span data-ttu-id="60b3c-428">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-428">-or-</span></span>  
  
 <span data-ttu-id="60b3c-429"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-429"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-430"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-430"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="60b3c-431">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-431">-or-</span></span>  
  
 <span data-ttu-id="60b3c-432">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-432">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-433">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-433">-or-</span></span>  
  
 <span data-ttu-id="60b3c-434"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-434"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-435">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-435">-or-</span></span>  
  
 <span data-ttu-id="60b3c-436">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-436">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
 <span data-ttu-id="60b3c-437">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-437">-or-</span></span>  
  
 <span data-ttu-id="60b3c-438">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-438">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-439">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-439">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-440">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-440">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-441">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-441">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-442">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-442">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-443">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-443">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="60b3c-444"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="60b3c-444"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-445"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-445"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-446">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-446">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-447">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-447">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-448">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-448">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-449">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-449">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-450">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-450">The type of object to create.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-451">影响 <c>type</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-451">A combination of zero or more bit flags that affect the search for the <c>type</c> constructor.</span></span> <span data-ttu-id="60b3c-452">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-452">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-453">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c></c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-453">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>type</c> constructor.</span></span> <span data-ttu-id="60b3c-454">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-454">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-455">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-455">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-456">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-456">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-457">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>type</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-457">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>type</c> constructor.</span></span> <span data-ttu-id="60b3c-458">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-458">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <summary><span data-ttu-id="60b3c-459">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-459">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-460">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-460">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-461">要调用构造函数必须提供与指定的活页夹和绑定特性的约束下指定的自变量列表最精确的匹配项。</span><span class="sxs-lookup"><span data-stu-id="60b3c-461">The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-462">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-462">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-463">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-463">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-464">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-464">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-465"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-465"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-466"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-466"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
 <span data-ttu-id="60b3c-467">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-467">-or-</span></span>  
  
 <span data-ttu-id="60b3c-468"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-468"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-469"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-469"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="60b3c-470">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-470">-or-</span></span>  
  
 <span data-ttu-id="60b3c-471">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-471">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-472">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-472">-or-</span></span>  
  
 <span data-ttu-id="60b3c-473">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-473">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
 <span data-ttu-id="60b3c-474">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-474">-or-</span></span>  
  
 <span data-ttu-id="60b3c-475">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-475">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-476">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-476">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-477">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-477">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-478">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-478">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-479">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-479">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-480">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-480">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="60b3c-481"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="60b3c-481"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-482"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-482"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-483">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-483">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-484">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-484">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-485">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-485">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-486">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-486">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.Type type, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(Type ^ type, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-487">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-487">The type of object to create.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-488">影响 <c>type</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-488">A combination of zero or more bit flags that affect the search for the <c>type</c> constructor.</span></span> <span data-ttu-id="60b3c-489">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-489">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-490">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c></c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-490">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>type</c> constructor.</span></span> <span data-ttu-id="60b3c-491">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-491">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-492">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-492">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-493">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-493">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-494">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>type</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-494">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>type</c> constructor.</span></span> <span data-ttu-id="60b3c-495">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-495">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-496">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-496">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-497">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-497">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-498">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-498">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-499">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-499">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-500">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-500">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-501">使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-501">Creates an instance of the specified type using the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-502">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-502">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-503">要调用构造函数必须提供与指定的活页夹和绑定特性的约束下指定的自变量列表最精确的匹配项。</span><span class="sxs-lookup"><span data-stu-id="60b3c-503">The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-504">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和非公共类型和成员的授予集如果被限制到调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-504">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-505">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-505">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-506">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-506">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-507"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-507"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60b3c-508"><paramref name="type" /> 不是 <see langword="RuntimeType" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-508"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span>  
  
 <span data-ttu-id="60b3c-509">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-509">-or-</span></span>  
  
 <span data-ttu-id="60b3c-510"><paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-510"><paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-511"><paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-511"><paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="60b3c-512">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-512">-or-</span></span>  
  
 <span data-ttu-id="60b3c-513">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-513">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-514">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-514">-or-</span></span>  
  
 <span data-ttu-id="60b3c-515"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-515"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-516">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-516">-or-</span></span>  
  
 <span data-ttu-id="60b3c-517">包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-517">The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</span></span>  
  
 <span data-ttu-id="60b3c-518">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-518">-or-</span></span>  
  
 <span data-ttu-id="60b3c-519">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-519">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-520">正在被调用的构造函数引发了一个异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-520">The constructor being called throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-521">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-521">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-522">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-522">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-523">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-523">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-524">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-524">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="60b3c-525"><paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</span><span class="sxs-lookup"><span data-stu-id="60b3c-525"><paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-526"><paramref name="type" /> 不是有效类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-526"><paramref name="type" /> is not a valid type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-527">提供的证据。</span><span class="sxs-lookup"><span data-stu-id="60b3c-527">for supplying evidence.</span></span> <span data-ttu-id="60b3c-528">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-528">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-529">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-529">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-530">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-530">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="60b3c-531">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-531">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-532">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-532">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-533">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-533">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-534">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-534"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-535">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-535">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-536">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-536">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-537">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-537">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-538">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-538">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-539">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-539">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-540">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-540">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-541">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-541">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-542">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-542">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-543">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-543">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-544">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-544">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-545">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-545">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-546">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-546">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-547">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-547">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-548">使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-548">Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-549">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-549">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-550">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-550">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-551">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-551">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-552">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)42d9dc2a-8fcc-4ff3-b002-4ff260ef3dc5。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-552">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)42d9dc2a-8fcc-4ff3-b002-4ff260ef3dc5.)</span></span>  
>   
>  <span data-ttu-id="60b3c-553">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-553">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-554"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-554"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-555">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-555">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-556">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-556"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-557">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-557"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-558">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-558">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-559">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-559">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-560">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-560">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-561">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-561">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-562">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-562">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-563">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-563">-or-</span></span>  
  
 <span data-ttu-id="60b3c-564"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-564"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-565">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-565">-or-</span></span>  
  
 <span data-ttu-id="60b3c-566">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-566">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-567"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-567"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-568">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-568">-or-</span></span>  
  
 <span data-ttu-id="60b3c-569">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-569">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-570">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-570">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-571">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-571">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-572">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-572">-or-</span></span>  
  
 <span data-ttu-id="60b3c-573">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-573">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-574">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-574">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-575">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-575">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-576">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-576">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-577">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-577">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="60b3c-578">在其中创建名为 <c>typeName</c> 的类型的域。</span><span class="sxs-lookup"><span data-stu-id="60b3c-578">The domain where the type named <c>typeName</c> is created.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="60b3c-579">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-579">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-580">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-580">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-581">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-581">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-582">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-582"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-583">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-583">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-584">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-584">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-585">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-585">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-586">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-586">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-587">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-587">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-588">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-588">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-589">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-589">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-590">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-590">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-591">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-591">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-592">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-592">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-593">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-593">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-594">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-594">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-595">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-595">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-596">使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-596">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-597">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-597">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-598">使用<xref:System.Activator.CreateInstance%2A>托管需要在具有受限安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-598">Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="60b3c-599">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-599">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-600">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-600">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-601"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-601"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-602">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-602">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-603">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-603"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-604">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-604"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-605">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-605">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-606">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-606">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-607">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-607">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-608">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-608">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-609">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-609">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-610">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-610">-or-</span></span>  
  
 <span data-ttu-id="60b3c-611"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-611"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-612">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-612">-or-</span></span>  
  
 <span data-ttu-id="60b3c-613">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-613">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-614"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-614"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-615">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-615">-or-</span></span>  
  
 <span data-ttu-id="60b3c-616">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-616">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-617">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-617">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-618">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-618">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-619">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-619">-or-</span></span>  
  
 <span data-ttu-id="60b3c-620">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-620">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-621">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-621">requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-622">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-622">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-623">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-623">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-624">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-624">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-625">表示所有类型的成员上调用操作的能力。</span><span class="sxs-lookup"><span data-stu-id="60b3c-625">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="60b3c-626">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-626">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="60b3c-627">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-627">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-628">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-628">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-629">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-629">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-630">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-630"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-631">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-631">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-632">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-632">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-633">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-633">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-634">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-634">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-635">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-635">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-636">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-636">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-637">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-637">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-638">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-638">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-639">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-639">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-640">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-640">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-641">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-641">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-642">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-642">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-643">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-643">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="60b3c-644">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-644">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="60b3c-645">使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-645">Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-646">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-646">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-647">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-647">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-648">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此方法可以用于创建非公共类型和成员调用方是否已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标志和包含的非公共类型和成员的程序集的授予集是否受限制调用方的授予集或其子集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-648">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof.</span></span> <span data-ttu-id="60b3c-649">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="60b3c-649">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60b3c-650">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="60b3c-650">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-651"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-651"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-652">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-652">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-653">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-653"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-654">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-654"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-655">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-655">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-656">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-656">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-657">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-657">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-658">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-658">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-659">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-659">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-660">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-660">-or-</span></span>  
  
 <span data-ttu-id="60b3c-661"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-661"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-662">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-662">-or-</span></span>  
  
 <span data-ttu-id="60b3c-663">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-663">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-664"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-664"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-665">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-665">-or-</span></span>  
  
 <span data-ttu-id="60b3c-666">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-666">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-667">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-667">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-668">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-668">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-669">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-669">-or-</span></span>  
  
 <span data-ttu-id="60b3c-670">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-670">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-671">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-671">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-672">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-672">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-673">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-673">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-674">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-674">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstance(AppDomain ^ domain, System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="60b3c-675">在其中创建名为 <c>typeName</c> 的类型的域。</span><span class="sxs-lookup"><span data-stu-id="60b3c-675">The domain where the type named <c>typeName</c> is created.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="60b3c-676">将在其中查找名为 <c>typeName</c> 的类型的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-676">The name of the assembly where the type named <c>typeName</c> is sought.</span></span> <span data-ttu-id="60b3c-677">如果 <c>assemblyName</c> 为 <see langword="null" />，则搜索正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-677">If <c>assemblyName</c> is <see langword="null" />, the executing assembly is searched.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-678">首选类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="60b3c-678">The fully qualified name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-679">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-679"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-680">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-680">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-681">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-681">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-682">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-682">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-683">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-683">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-684">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-684">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-685">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-685">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-686">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-686">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-687">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-687">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-688">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-688">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-689">通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-689">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object.</span></span> <span data-ttu-id="60b3c-690"><see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-690">The <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> specifies the URL that is required to activate a remote object.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="60b3c-691">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-691">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="60b3c-692">使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-692">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-693">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-693">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-694">使用<xref:System.Activator.CreateInstance%2A>托管需要在具有受限安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-694">Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="60b3c-695">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-695">Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-696">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-696">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-697"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-697"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-698">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-698">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-699">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-699"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-700">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-700"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-701">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-701">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-702">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-702">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-703">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-703">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException"><span data-ttu-id="60b3c-704">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-704">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60b3c-705">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-705">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</span></span>  
  
 <span data-ttu-id="60b3c-706">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-706">-or-</span></span>  
  
 <span data-ttu-id="60b3c-707"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-707"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="60b3c-708">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-708">-or-</span></span>  
  
 <span data-ttu-id="60b3c-709">最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-709">The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-710"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-710"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-711">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-711">-or-</span></span>  
  
 <span data-ttu-id="60b3c-712">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-712">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-713">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-713">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="60b3c-714">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="60b3c-714">An assembly or module was loaded twice with two different evidences.</span></span>  
  
 <span data-ttu-id="60b3c-715">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-715">-or-</span></span>  
  
 <span data-ttu-id="60b3c-716">程序集名称或基本代码无效。</span><span class="sxs-lookup"><span data-stu-id="60b3c-716">The assembly name or code base is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-717">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-717">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-718">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-718">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-719">表示所有类型的成员上调用操作的能力。</span><span class="sxs-lookup"><span data-stu-id="60b3c-719">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="60b3c-720">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-720">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-721">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-721">requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-722">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-722">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateInstance&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateInstance&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstance``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T CreateInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="60b3c-723">要创建的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-723">The type to create.</span></span></typeparam>
        <summary><span data-ttu-id="60b3c-724">使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-724">Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-725">对新创建对象的引用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-725">A reference to the newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-726"><xref:System.Activator.CreateInstance%60%601>编译器使用泛型方法来实现指定类型参数的类型实例化。</span><span class="sxs-lookup"><span data-stu-id="60b3c-726">The <xref:System.Activator.CreateInstance%60%601> generic method is used by compilers to implement the instantiation of types specified by type parameters.</span></span> <span data-ttu-id="60b3c-727">例如，在下面的泛型方法的实现`new T()`(`gcnew T()` c + + 中) 使用<xref:System.Activator.CreateInstance%60%601>泛型方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-727">For example, in the following generic method, the implementation of `new T()` (`gcnew T()` in C++) uses the <xref:System.Activator.CreateInstance%60%601> generic method.</span></span>  
  
 [!code-cpp[System.Activation.CreateInstance~~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cpp/remarks.cpp#1)]
 [!code-csharp[System.Activation.CreateInstance~~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cs/remarks.cs#1)]
 [!code-vb[System.Activation.CreateInstance~~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activation.createinstance~~1/vb/remarks.vb#1)]  
  
 <span data-ttu-id="60b3c-728">一般情况下，没有无需使用<xref:System.Activator.CreateInstance%60%601>在应用程序中的泛型方法的代码，因为必须在编译时知道的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-728">In general, there is no use for the <xref:System.Activator.CreateInstance%60%601> generic method in application code, because the type must be known at compile time.</span></span> <span data-ttu-id="60b3c-729">如果在编译时已知类型，可以使用正常的实例化语法 (`new`在 C# 中，运算符`New`在 Visual Basic 中， `gcnew` c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="60b3c-729">If the type is known at compile time, normal instantiation syntax can be used (`new` operator in C#, `New` in Visual Basic, `gcnew` in C++).</span></span> <span data-ttu-id="60b3c-730">如果类型不在编译时已知的则可以调用的非泛型重载<xref:System.Activator.CreateInstance%2A>。</span><span class="sxs-lookup"><span data-stu-id="60b3c-730">If the type is not known at compile time, you can call a non-generic overload of <xref:System.Activator.CreateInstance%2A>.</span></span>  
  
 <span data-ttu-id="60b3c-731">不有的任何重载<xref:System.Activator.CreateInstance%60%601>因为非泛型重载的需要自变量列表的泛型方法<xref:System.Activator.CreateInstance%2A>已提供后期绑定构造函数解析。</span><span class="sxs-lookup"><span data-stu-id="60b3c-731">There are no overloads of the <xref:System.Activator.CreateInstance%60%601> generic method that take argument lists, because the non-generic overloads of <xref:System.Activator.CreateInstance%2A> already provide late-bound constructor resolution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="60b3c-732">在[适用于 Windows 应用商店应用的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或[可移植类库](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-732">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="60b3c-733">为 <paramref name="T" /> 指定的类型没有无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-733">The type that is specified for <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b3c-734">使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-734">Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="60b3c-735">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-735">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-736">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-736">The name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="60b3c-737">使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-737">Creates an instance of the type whose name is specified, using the named assembly file and default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-738">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-738">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-739">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-739">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-740">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-740">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b3c-741">下面的代码示例演示如何调用<xref:System.Activator.CreateInstanceFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-741">The following code example demonstrates how to call the <xref:System.Activator.CreateInstanceFrom%2A> method.</span></span> <span data-ttu-id="60b3c-742">此代码示例摘自更大的示例为提供<xref:System.Activator>类。</span><span class="sxs-lookup"><span data-stu-id="60b3c-742">This code example is part of a larger example provided for the <xref:System.Activator> class.</span></span>  
  
 [!code-cpp[ActivatorX#3](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#3)]
 [!code-csharp[ActivatorX#3](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#3)]
 [!code-vb[ActivatorX#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-743"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-743"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-744">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-744">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-745">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-745"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-746">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-746"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-747">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-747">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-748">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-748">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-749">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-749">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-750">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-750">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-751"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-751"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-752">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-752">-or-</span></span>  
  
 <span data-ttu-id="60b3c-753">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-753">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-754">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-754">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-755">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-755">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-756">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-756">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-757">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-757">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-758">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-758">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-759">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-759">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-760">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-760">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (domain As AppDomain, assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="60b3c-761">在其中创建名为 <c>typeName</c> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="60b3c-761">The remote domain where the type named <c>typeName</c> is created.</span></span></param>
        <param name="assemblyFile"><span data-ttu-id="60b3c-762">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-762">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-763">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-763">The name of the preferred type.</span></span></param>
        <summary><span data-ttu-id="60b3c-764">使用命名的程序集文件和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-764">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-765">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-765">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-766">使用<xref:System.Activator.CreateInstanceFrom%2A>托管需要在具有受限安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-766">Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="60b3c-767">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-767">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-768">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-768">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 <span data-ttu-id="60b3c-769">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-769">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-770"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-770"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-771">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-771">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-772">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-772"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-773">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-773"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-774">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-774">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-775">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-775">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-776">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-776">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-777">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-777">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-778"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-778"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-779">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-779">-or-</span></span>  
  
 <span data-ttu-id="60b3c-780">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-780">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-781">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-781">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-782">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-782">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-783">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-783">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-784">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-784">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-785">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-785">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-786">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-786">requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-787">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-787">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFrom (assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="60b3c-788">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-788">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-789">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-789">The name of the preferred type.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-790">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-790">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-791">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-791">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-792">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-792">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-793">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-793">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-794">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-794">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-795">使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-795">Creates an instance of the type whose name is specified, using the named assembly file and default constructor.</span></span></summary>
        <returns><span data-ttu-id="60b3c-796">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-796">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-797">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-797">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-798">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-798">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-799"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-799"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-800">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-800">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-801">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-801"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-802">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-802"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-803">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-803">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-804">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-804">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-805">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-805">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-806"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-806"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-807">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-807">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-808"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-808"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-809">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-809">-or-</span></span>  
  
 <span data-ttu-id="60b3c-810">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-810">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-811">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-811">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-812">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-812">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-813">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-813">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-814">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-814">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-815">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-815">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-816">用于访问非公共类型，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-816">for accessing nonpublic types regardless of their grant set.</span></span> <span data-ttu-id="60b3c-817">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="60b3c-818">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-818">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-819">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-819">The name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-820">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-820"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-821">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-821">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-822">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-822">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-823">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-823">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-824">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-824">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-825">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-825">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-826">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-826">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-827">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-827">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-828">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-828">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-829">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-829">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-830">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-830">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-831">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-831">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-832">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-832">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-833">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-833">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-834">使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-834">Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-835">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-835">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-836">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-836">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-837">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-837">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-838"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-838"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-839">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-839">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-840">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-840"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-841">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-841"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-842">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-842">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-843">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-843">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-844">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-844">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-845">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-845">The caller does not have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-846"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-846"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-847"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-847"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-848">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-848">-or-</span></span>  
  
 <span data-ttu-id="60b3c-849">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-849">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-850">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-850">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-851">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-851">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-852">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-852">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-853">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-853">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-854">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-854">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-855">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-855">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-856">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-856">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="60b3c-857">在其中创建名为 <c>typeName</c> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="60b3c-857">The remote domain where the type named <c>typeName</c> is created.</span></span></param>
        <param name="assemblyFile"><span data-ttu-id="60b3c-858">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-858">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-859">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-859">The name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-860">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-860"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-861">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-861">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-862">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-862">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-863">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-863">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-864">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-864">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-865">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-865">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-866">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-866">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-867">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-867">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-868">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-868">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-869">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-869">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-870">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-870">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-871">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-871">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-872">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-872">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-873">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-873">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="60b3c-874">使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-874">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-875">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-875">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-876">使用<xref:System.Activator.CreateInstanceFrom%2A>托管需要在具有受限安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-876">Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="60b3c-877">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-877">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-878">有关可由调用的方法引发其他异常信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-878">For information about other exceptions that can be thrown by invoked methods, see the Exceptions sections of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-879"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-879"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-880">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-880">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-881">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-881"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-882">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-882"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-883">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-883">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-884">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-884">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-885">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-885">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-886">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-886">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-887"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-887"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-888"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-888"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-889">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-889">-or-</span></span>  
  
 <span data-ttu-id="60b3c-890"><paramref name="assemblyName" /> 是针对晚于当前加载版本的公共语言运行时版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-890"><paramref name="assemblyName" /> was compiled for a version of the common language runtime that is later than the version that is currently loaded.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-891">提供的证据。</span><span class="sxs-lookup"><span data-stu-id="60b3c-891">for supplying evidence.</span></span> <span data-ttu-id="60b3c-892">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-892">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-893">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-893">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-894">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-894">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-895">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-895">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-896">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-896">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-897">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-897">requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-898">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-898">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="60b3c-899">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-899">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-900">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-900">The name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-901">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-901"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-902">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-902">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-903">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-903">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-904">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-904">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-905">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-905">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-906">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-906">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-907">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-907">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-908">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-908">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-909">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-909">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-910">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-910">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-911">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-911">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-912">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-912">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-913">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-913">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-914">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-914">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="60b3c-915">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-915">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="60b3c-916">使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-916">Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-917">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-917">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-918">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-918">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
 <span data-ttu-id="60b3c-919">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-919">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-920"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-920"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-921">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-921">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-922">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-922"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-923">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-923"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-924">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-924">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-925">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-925">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-926">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-926">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-927">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-927">The caller does not have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-928"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-928"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-929"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-929"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-930">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-930">-or-</span></span>  
  
 <span data-ttu-id="60b3c-931">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-931">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-932">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-932">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-933">创建委托的一个实例时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-933">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="60b3c-934">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-934">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-935">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-935">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-936">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-936">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-937">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-937">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-938">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-938">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(AppDomain ^ domain, System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Methods which use Evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="60b3c-939">在其中创建名为 <c>typeName</c> 的类型的远程域。</span><span class="sxs-lookup"><span data-stu-id="60b3c-939">The remote domain where the type named <c>typeName</c> is created.</span></span></param>
        <param name="assemblyFile"><span data-ttu-id="60b3c-940">包含某程序集的文件的名称，将在该程序集内查找名为 <c>typeName</c> 的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-940">The name of a file that contains an assembly where the type named <c>typeName</c> is sought.</span></span></param>
        <param name="typeName"><span data-ttu-id="60b3c-941">首选类型的名称。</span><span class="sxs-lookup"><span data-stu-id="60b3c-941">The name of the preferred type.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="60b3c-942">如果指定对 <c>typeName</c> 的搜索不区分大小写，则为 <see langword="true" />；如果指定搜索要区分大小写，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-942"><see langword="true" /> to specify that the search for <c>typeName</c> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="60b3c-943">影响 <c>typeName</c> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="60b3c-943">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-944">如果 <c>bindingAttr</c> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="60b3c-944">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="60b3c-945">使用 <c>bindingAttr</c> 和 <c>args</c> 查找和标识 <c>typeName</c> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="60b3c-945">An object that uses <c>bindingAttr</c> and <c>args</c> to seek and identify the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-946">如果 <c>binder</c> 为 <see langword="null" />，则使用默认活页夹。</span><span class="sxs-lookup"><span data-stu-id="60b3c-946">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="60b3c-947">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-947">An array of arguments that match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="60b3c-948">如果 <c>args</c> 为空数组或为 <see langword="null" />，则调用不带任何参数的构造函数（默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-948">If <c>args</c> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked.</span></span></param>
        <param name="culture"><span data-ttu-id="60b3c-949">区域性特定的信息，这些信息控制将 <c>args</c> 强制转换为 <c>typeName</c> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-949">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="60b3c-950">如果 <c>culture</c> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-950">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="60b3c-951">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-951">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="60b3c-952">这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-952">This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="60b3c-953">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="60b3c-953">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="60b3c-954">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="60b3c-954">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="60b3c-955">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="60b3c-955">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="60b3c-956">用于做出安全策略决策和授予代码权限的信息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-956">Information used to make security policy decisions and grant code permissions.</span></span></param>
        <summary><span data-ttu-id="60b3c-957">使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="60b3c-957">Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="60b3c-958">要访问新创建的实例则必须解包的句柄。</span><span class="sxs-lookup"><span data-stu-id="60b3c-958">A handle that must be unwrapped to access the newly created instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-959">使用<xref:System.Activator.CreateInstanceFrom%2A>托管需要在具有受限安全权限的应用程序域中执行代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-959">Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.</span></span>  
  
 <span data-ttu-id="60b3c-960">使用<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>方法进行解包返回的值。</span><span class="sxs-lookup"><span data-stu-id="60b3c-960">Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType> method to unwrap the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b3c-961">此方法使用<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>需要具有完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-961">This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> to require the immediate caller to have full trust.</span></span>  
  
 <span data-ttu-id="60b3c-962">有关可由调用的方法引发其他异常的信息，请参阅的异常部分<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>和<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-962">For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> and <xref:System.Activator.CreateInstance%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-963"><paramref name="domain" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-963"><paramref name="domain" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60b3c-964">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-964">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="60b3c-965">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-965"><paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="60b3c-966">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-966"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60b3c-967">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-967">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-968">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-968">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60b3c-969">通过反射调用的构造函数引发异常。</span><span class="sxs-lookup"><span data-stu-id="60b3c-969">The constructor, which was invoked through reflection, threw an exception.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="60b3c-970">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-970">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="60b3c-971"><paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-971"><paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="60b3c-972"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-972"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="60b3c-973">或</span><span class="sxs-lookup"><span data-stu-id="60b3c-973">-or-</span></span>  
  
 <span data-ttu-id="60b3c-974">当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。</span><span class="sxs-lookup"><span data-stu-id="60b3c-974">The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version.</span></span> <span data-ttu-id="60b3c-975">请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</span><span class="sxs-lookup"><span data-stu-id="60b3c-975">Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="60b3c-976">提供的证据。</span><span class="sxs-lookup"><span data-stu-id="60b3c-976">for supplying evidence.</span></span> <span data-ttu-id="60b3c-977">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-977">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="60b3c-978">若要搜索的目录路径，并读取其内容的功能。</span><span class="sxs-lookup"><span data-stu-id="60b3c-978">for the ability to search directory paths and read their contents.</span></span> <span data-ttu-id="60b3c-979">关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-979">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="60b3c-980">用于访问非公共类型和成员而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="60b3c-980">for accessing nonpublic types and members regardless of their grant set.</span></span> <span data-ttu-id="60b3c-981">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="60b3c-981">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-982">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-982">requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-983">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-983">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b3c-984">为已知对象或 XML Web services 创建一个代理。</span><span class="sxs-lookup"><span data-stu-id="60b3c-984">Creates a proxy for a well-known object or XML Web service.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (Type type, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObject(class System.Type type, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.GetObject(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObject(Type ^ type, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-985">希望连接到的已知对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-985">The type of the well-known object to which you want to connect.</span></span></param>
        <param name="url"><span data-ttu-id="60b3c-986">已知对象的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-986">The URL of the well-known object.</span></span></param>
        <summary><span data-ttu-id="60b3c-987">为指定类型和 URL 所指示的已知对象创建一个代理。</span><span class="sxs-lookup"><span data-stu-id="60b3c-987">Creates a proxy for the well-known object indicated by the specified type and URL.</span></span></summary>
        <returns><span data-ttu-id="60b3c-988">一个代理，它指向由所请求的已知对象服务的终结点。</span><span class="sxs-lookup"><span data-stu-id="60b3c-988">A proxy that points to an endpoint served by the requested well-known object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-989">调用要将消息发送到远程对象的代理。</span><span class="sxs-lookup"><span data-stu-id="60b3c-989">Call the proxy to send messages to the remote object.</span></span> <span data-ttu-id="60b3c-990">对此代理调用方法之前通过网络不发送任何消息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-990">No messages are sent over the network until a method is called on the proxy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-991"><paramref name="type" /> 或 <paramref name="url" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-991"><paramref name="type" /> or <paramref name="url" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Remoting.RemotingException">
          <span data-ttu-id="60b3c-992"><paramref name="type" /> 不会通过参考封送并且并非接口。</span><span class="sxs-lookup"><span data-stu-id="60b3c-992"><paramref name="type" /> is not marshaled by reference and is not an interface.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-993">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="60b3c-993">This member was invoked with a late-binding mechanism.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-994">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-994">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-995">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-995">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownObjectMode" />
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (Type type, string url, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObject(class System.Type type, string url, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.GetObject(System.Type,System.String,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObject(Type ^ type, System::String ^ url, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60b3c-996">希望连接到的已知对象的类型。</span><span class="sxs-lookup"><span data-stu-id="60b3c-996">The type of the well-known object to which you want to connect.</span></span></param>
        <param name="url"><span data-ttu-id="60b3c-997">已知对象的 URL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-997">The URL of the well-known object.</span></span></param>
        <param name="state"><span data-ttu-id="60b3c-998">通道特定的数据或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-998">Channel-specific data or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="60b3c-999">为指定类型、URL 和通道数据所指示的已知对象创建一个代理。</span><span class="sxs-lookup"><span data-stu-id="60b3c-999">Creates a proxy for the well-known object indicated by the specified type, URL, and channel data.</span></span></summary>
        <returns><span data-ttu-id="60b3c-1000">一个代理，它指向由所请求的已知对象服务的终结点。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1000">A proxy that points to an endpoint served by the requested well-known object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-1001">调用要将消息发送到远程对象的代理。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1001">Call the proxy to send messages to the remote object.</span></span> <span data-ttu-id="60b3c-1002">对此代理调用方法之前通过网络不发送任何消息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1002">No messages are sent over the network until a method is called on the proxy.</span></span>  
  
 <span data-ttu-id="60b3c-1003">`state`参数将信息传递给通道，并传递给<xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1003">The `state` parameter communicates information to the channel, and is passed to the <xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60b3c-1004"><paramref name="type" /> 或 <paramref name="url" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1004"><paramref name="type" /> or <paramref name="url" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Remoting.RemotingException">
          <span data-ttu-id="60b3c-1005"><paramref name="type" /> 不会通过参考封送并且并非接口。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1005"><paramref name="type" /> is not marshaled by reference and is not an interface.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60b3c-1006">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1006">This member was invoked with a late-binding mechanism.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="60b3c-1007">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1007">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="60b3c-1008">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1008">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownObjectMode" />
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Activator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Activator.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Activator::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="60b3c-1009">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1009">Reserved for future use.</span></span> <span data-ttu-id="60b3c-1010">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1010">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="60b3c-1011">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1011">The passed-in array of names to map.</span></span></param>
        <param name="cNames"><span data-ttu-id="60b3c-1012">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1012">The count of the names to map.</span></span></param>
        <param name="lcid"><span data-ttu-id="60b3c-1013">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1013">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="60b3c-1014">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1014">The caller-allocated array that receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="60b3c-1015">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1015">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-1016">此方法用于从非托管代码，访问托管的类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1016">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="60b3c-1017">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1017">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="60b3c-1018">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1018">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Activator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Activator.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Activator::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="60b3c-1019">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1019">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="60b3c-1020">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1020">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="60b3c-1021">一个对象，该对象接收指向请求的类型信息对象的指针。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1021">An object that receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="60b3c-1022">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1022">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-1023">此方法用于从非托管代码，访问托管的类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1023">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="60b3c-1024">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1024">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="60b3c-1025">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1025">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Activator.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Activator.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Activator::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="60b3c-1026">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1026">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object.</span></span> <span data-ttu-id="60b3c-1027">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1027">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="60b3c-1028">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1028">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-1029">此方法用于从非托管代码，访问托管的类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1029">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="60b3c-1030">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1030">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="60b3c-1031">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1031">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Activator.Invoke">
      <MemberSignature Language="C#" Value="void _Activator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Activator.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Activator.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Activator.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Activator::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Activator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="60b3c-1032">一个用于标识成员的调度标识符。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1032">A dispatch identifier that identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="60b3c-1033">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1033">Reserved for future use.</span></span> <span data-ttu-id="60b3c-1034">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1034">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="60b3c-1035">要在其中解释参数的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1035">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="60b3c-1036">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1036">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="60b3c-1037">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1037">A pointer to a structure that contains an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="60b3c-1038">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1038">A pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="60b3c-1039">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1039">A pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="60b3c-1040">第一个出错自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1040">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="60b3c-1041">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1041">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b3c-1042">此方法用于从非托管代码，访问托管的类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1042">This method is used to access managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="60b3c-1043">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1043">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="60b3c-1044">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="60b3c-1044">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>