<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f54e2e84e8387855c2add6a214afa57814e391c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431009" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="53708-101">定义一个方法，该方法支持自定义对象值的格式。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53708-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53708-102"><xref:System.ICustomFormatter>接口包含单个方法<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53708-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="53708-103">由引用或值类型，实现此接口时<xref:System.ICustomFormatter.Format%2A>方法返回的自定义格式的字符串表示形式的对象的值。</span><span class="sxs-lookup"><span data-stu-id="53708-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="53708-104">通常情况下，<xref:System.ICustomFormatter>与实现接口<xref:System.IFormatProvider>接口可自定义的行为的两个.NET Framework 复合字符串格式设置方法包括<xref:System.IFormatProvider>参数。</span><span class="sxs-lookup"><span data-stu-id="53708-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="53708-105">具体而言，<xref:System.ICustomFormatter>接口可提供自定义传递给对象的值的格式<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="53708-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="53708-106">提供自定义值的表示形式的对象的需要，你以下操作：</span><span class="sxs-lookup"><span data-stu-id="53708-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="53708-107">定义一个类以实现<xref:System.ICustomFormatter>接口和其单个成员，<xref:System.ICustomFormatter.Format%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="53708-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="53708-108">定义一个类以实现<xref:System.IFormatProvider>接口和其单个成员，<xref:System.IFormatProvider.GetFormat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="53708-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="53708-109"><xref:System.IFormatProvider.GetFormat%2A>方法返回的实例你<xref:System.ICustomFormatter>实现。</span><span class="sxs-lookup"><span data-stu-id="53708-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="53708-110">通常情况下，一个类同时实现<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="53708-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="53708-111">在此情况下，类的`GetFormat`实现只返回它自身的实例。</span><span class="sxs-lookup"><span data-stu-id="53708-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="53708-112">传递<xref:System.IFormatProvider>实现作为`provider`参数<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法或类似方法。</span><span class="sxs-lookup"><span data-stu-id="53708-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="53708-113">.NET Framework 方法随后将使用你自定义格式设置而不其自身。</span><span class="sxs-lookup"><span data-stu-id="53708-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53708-114">下面的示例实现<xref:System.ICustomFormatter>以允许二进制、 八进制和十六进制格式的整数值。</span><span class="sxs-lookup"><span data-stu-id="53708-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="53708-115">在此示例中，单个类， `IBinaryFormatter`，同时实现<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="53708-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="53708-116">其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法确定是否`formatType`参数表示<xref:System.ICustomFormatter>类型。</span><span class="sxs-lookup"><span data-stu-id="53708-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="53708-117">如果是这样，`BinaryFormatter`实例返回然后重试。 否则，它将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="53708-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="53708-118">其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>实现确定 format 参数是否是一个三个受支持的格式字符串 (为二进制文件，"O"的"B"八进制和十六进制"H") 和格式`arg`参数适当。</span><span class="sxs-lookup"><span data-stu-id="53708-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="53708-119">否则为如果`arg`不`null`，它调用`arg`参数的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现中，如果存在，或其无参数`ToString`方法时，如果一个不使用。</span><span class="sxs-lookup"><span data-stu-id="53708-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="53708-120">如果 `arg` 为 `null`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53708-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="53708-121">`BinaryFormatter` 用于提供自定义格式设置，通过传递`BinaryFormatter`对象作为`provider`参数<xref:System.String.Format%2A>方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="53708-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="53708-122">
        <para>公共语言运行时尝试使用你<see cref="T:System.ICustomFormatter" />的复合格式字符串中每个格式项的实现。因此，您应期望你<see cref="T:System.ICustomFormatter" />实现将调用，以提供对对象的格式设置服务或它的值未设计为处理。在这些情况下，你<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法必须调用相应的格式设置方法，该对象或值。有两种类型的<see cref="T:System.ICustomFormatter" />实现： 内部函数和扩展。内部函数实现是为的应用程序定义的对象提供自定义格式设置的实现。在这种情况下，您的实现应包括以下:-定义对象的格式设置的格式字符串的定义。格式字符串是可选的。通常情况下，"G"或"g"格式字符串定义的常规 （或最常使用） 格式。但是，你可以随意定义你选择的任何格式字符串。你也可以自由地决定它们是否区分大小写或不区分大小写。 -一个测试以确保对象的类型传递给你<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是你应用程序定义的类型。如果不是这样，你应调用对象的<see cref="T:System.IFormattable" />实现中，如果存在，或其<see cref="M:System.Object.ToString" />方法，如果它不存在。你应准备好处理这些方法调用可能会引发任何异常。 -代码来处理 null 格式字符串，如果你实现支持格式字符串。最常见方法是一个 null 格式字符串将替换为使用常规格式说明符。 -代码来处理您的实现支持的任何格式字符串。 -代码来处理不支持的格式字符串。最常用的方法是引发<see cref="T:System.FormatException" />，尽管你可以提供默认格式设置。扩展实现是为已具有格式设置支持的类型提供自定义格式设置的实现。例如，你可以定义<c>CustomerNumberFormatter</c>进行格式设置特定的数字间的连字符的整数类型。在这种情况下，您的实现应包括以下:-扩展对象的格式的格式字符串的定义。这些格式字符串是必需的但它们必须与该类型的现有格式字符串发生冲突。例如，如果要扩展的格式设置<see cref="T:System.Int32" />类型，不应实现"C"、"D"、"E"、"F"和"G"格式说明符，等等。 -传递到的对象的类型测试你<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是一种类型的格式设置你的扩展支持。如果不是，调用对象的<see cref="T:System.IFormattable" />实现中，如果存在，或对象的无参数<see cref="M:System.Object.ToString" />方法，如果它不存在。你应准备好处理这些方法调用可能会引发任何异常。 -代码来处理你的扩展支持的任何格式字符串。 -代码来处理你的扩展不支持的任何格式字符串。这些应传递到该类型的<see cref="T:System.IFormattable" />实现。你应准备好处理这些方法调用可能会引发任何异常。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="53708-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="53708-123">包含格式规范的格式字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53708-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="53708-124">要设置其格式的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53708-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="53708-125">一个对象，提供有关当前实例的区域性特定格式信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53708-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53708-126">使用指定的格式和区域性特定格式信息将指定对象的值转换为它的等效字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53708-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53708-127">
            <paramref name="arg" /> 的值的字符串表示形式，按照 <paramref name="format" /> 和 <paramref name="formatProvider" /> 的指定来进行格式设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53708-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53708-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 为回调方法。</span><span class="sxs-lookup"><span data-stu-id="53708-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="53708-129">调用方法的支持自定义格式设置，如<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53708-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="53708-130">为每个格式项中一次调用该实现[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="53708-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="53708-131">例如，在下面的语句<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>方法调用三次。</span><span class="sxs-lookup"><span data-stu-id="53708-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="53708-132">`arg`参数是其从零开始的位置对应于特定的格式项的索引的对象列表中的对象。</span><span class="sxs-lookup"><span data-stu-id="53708-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="53708-133">`format`参数包含一个格式字符串，这是`formatString`格式项的组件。</span><span class="sxs-lookup"><span data-stu-id="53708-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="53708-134">如果格式项未包含任何`formatString`组件、 的值`format`是`null`。</span><span class="sxs-lookup"><span data-stu-id="53708-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="53708-135">如果`format`是`null`，具体的类型取决于`arg`，你可能能够使用你选择的默认格式规范。</span><span class="sxs-lookup"><span data-stu-id="53708-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="53708-136">`formatProvider`参数是<xref:System.IFormatProvider>实现，提供有关格式设置`arg`。</span><span class="sxs-lookup"><span data-stu-id="53708-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="53708-137">通常情况下，它是实例你<xref:System.ICustomFormatter>实现。</span><span class="sxs-lookup"><span data-stu-id="53708-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="53708-138">如果`formatProvider`是`null`，忽略该参数。</span><span class="sxs-lookup"><span data-stu-id="53708-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="53708-139">实现<xref:System.ICustomFormatter.Format%2A>方法必须包括以下功能，因此.NET Framework 可以提供格式设置不支持。</span><span class="sxs-lookup"><span data-stu-id="53708-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="53708-140">如果你格式的方法不支持一种格式，确定是否对象正在格式化实现<xref:System.IFormattable>接口。</span><span class="sxs-lookup"><span data-stu-id="53708-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="53708-141">如果实现，请调用<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>该接口的方法。</span><span class="sxs-lookup"><span data-stu-id="53708-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="53708-142">否则，调用默认值<xref:System.Object.ToString%2A?displayProperty=nameWithType>基础对象的方法。</span><span class="sxs-lookup"><span data-stu-id="53708-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="53708-143">下面的代码演示此模式。</span><span class="sxs-lookup"><span data-stu-id="53708-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="53708-144">下面的示例实现<xref:System.ICustomFormatter>以允许二进制、 八进制和十六进制格式的整数值。</span><span class="sxs-lookup"><span data-stu-id="53708-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="53708-145">其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>实现确定 format 参数是否是一个三个受支持的格式字符串 (为二进制文件，"O"的"B"八进制和十六进制"H") 和格式`arg`参数适当。</span><span class="sxs-lookup"><span data-stu-id="53708-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="53708-146">否则为如果`arg`不`null`，它调用`arg`参数的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现中，如果存在，或其无参数`ToString`方法时，如果一个不使用。</span><span class="sxs-lookup"><span data-stu-id="53708-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="53708-147">如果 `arg` 为 `null`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53708-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="53708-148">`BinaryFormatter` 用于提供自定义格式设置，通过传递`BinaryFormatter`对象作为`provider`参数<xref:System.String.Format%2A>方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="53708-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>