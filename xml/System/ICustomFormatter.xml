<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9905ea1b04870148d87d7b4065ef7e2d5ad1d34" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728454" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义一个方法，该方法支持自定义对象值的格式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter>接口包含一个方法， <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>。 此接口实现的引用或值类型时<xref:System.ICustomFormatter.Format%2A>方法返回的对象值的自定义格式的字符串表示形式。  
  
 通常情况下，<xref:System.ICustomFormatter>接口实现与<xref:System.IFormatProvider>接口可自定义行为的两个.NET Framework 复合字符串格式设置方法，包括<xref:System.IFormatProvider>参数。 具体而言，<xref:System.ICustomFormatter>接口可提供自定义格式设置的值的对象传递给<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法。  
  
 提供对象的值的自定义表示需要你以下：  
  
1.  定义实现的类<xref:System.ICustomFormatter>接口和其单个成员<xref:System.ICustomFormatter.Format%2A>方法。  
  
2.  定义实现的类<xref:System.IFormatProvider>接口和其单个成员<xref:System.IFormatProvider.GetFormat%2A>方法。 <xref:System.IFormatProvider.GetFormat%2A>方法返回的一个实例在<xref:System.ICustomFormatter>实现。 通常情况下，一个类同时实现<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。 在此情况下，类的`GetFormat`实现只是返回自身的实例。  
  
3.  传递<xref:System.IFormatProvider>实现作为`provider`自变量的<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法或类似方法。  
  
 .NET Framework 方法随后将使用您自定义的格式而不其自身。  
  
   
  
## Examples  
 下面的示例实现<xref:System.ICustomFormatter>允许二进制、 八进制和十六进制格式的整数值。 在此示例中，单个类， `IBinaryFormatter`，同时实现<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。 其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法确定是否`formatType`参数表示<xref:System.ICustomFormatter>类型。 如果是这样，`BinaryFormatter`返回的实例然后重试。 否则，它返回`null`。 其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>实现确定格式参数是否为一个三个受支持的格式字符串 ("B"的二进制文件中，"O"的八进制和十六进制的"H") 和格式`arg`参数适当。 否则为如果`arg`不是`null`，它将调用`arg`参数的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现，如果存在，或者其无参数`ToString`方法时，如果一个不使用。 如果 `arg` 为 `null`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 然后可用于提供自定义格式设置，通过传递`BinaryFormatter`对象作为`provider`参数的<xref:System.String.Format%2A>方法，如以下示例所示。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>公共语言运行时尝试使用你<see cref="T:System.ICustomFormatter" />复合格式字符串中的每个格式项的实现。因此，你应该会在<see cref="T:System.ICustomFormatter" />实现将调用来提供格式设置服务对象或值，它是未设计为处理。在这些情况下，你<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法必须调用相应的格式设置方法，该对象或值。有两种类型的<see cref="T:System.ICustomFormatter" />实现： 内部函数和扩展。内部函数实现是为的应用程序定义的对象提供自定义格式设置的实现。在这种情况下，您的实现应包括以下:-定义对象的格式设置的格式字符串的定义。格式字符串是可选的。通常情况下，"G"或"g"格式字符串定义的常规 （或最常使用） 格式。但是，你可以随意定义你选择的任何格式字符串。您还可以自由确定它们是否区分大小写或不区分大小写。 -一个测试，以确保对象的类型传递给你<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是在应用程序定义的类型。如果不存在，则应调用对象的<see cref="T:System.IFormattable" />实现中，如果存在，或其<see cref="M:System.Object.ToString" />方法时，如果不是。你应准备好处理这些方法调用可能会引发任何异常。 -代码来处理 null 的格式字符串，如果您的实现支持格式字符串。最常见方法是使用常规格式说明符替换 null 格式字符串。 -代码来处理您的实现支持的任何格式字符串。 -代码来处理不支持的格式字符串。最常用的方法是引发<see cref="T:System.FormatException" />，尽管你可以提供默认格式设置。扩展实现是为已经具有格式设置支持的类型提供自定义格式设置的实现。例如，可以定义<c>CustomerNumberFormatter</c>进行格式设置特定位之间的连字符的整数类型。在这种情况下，您的实现应包括以下:-扩展对象的格式设置的格式字符串的定义。这些格式字符串是必需的但它们必须与该类型的现有格式字符串不冲突。例如，如果要扩展的格式设置<see cref="T:System.Int32" />类型，不应实现"C"、"D"、"E"、"F"和"G"格式说明符，等等。 -对象的类型传递给测试你<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是一种类型的格式设置你的扩展支持。如果不是，调用对象的<see cref="T:System.IFormattable" />实现中，如果存在，或该对象的无参数<see cref="M:System.Object.ToString" />方法时，如果不是。你应准备好处理这些方法调用可能会引发任何异常。 -代码来处理您的扩展支持的任何格式字符串。 -代码来处理您的扩展插件不支持任何格式字符串。这些应传递到该类型的<see cref="T:System.IFormattable" />实现。你应准备好处理这些方法调用可能会引发任何异常。</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">包含格式规范的格式字符串。</param>
        <param name="arg">要设置其格式的对象。</param>
        <param name="formatProvider">一个对象，提供有关当前实例的区域性特定格式信息。</param>
        <summary>使用指定的格式和区域性特定格式信息将指定对象的值转换为它的等效字符串表示形式。</summary>
        <returns>
          <paramref name="arg" /> 的值的字符串表示形式，按照 <paramref name="format" /> 和 <paramref name="formatProvider" /> 的指定来进行格式设置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 为回调方法。 支持自定义格式设置，例如方法调用<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 为每个格式项中一次调用的实现[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。 例如，在下面的语句，<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>方法被调用三次。  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg`参数是在对象列表中的从零开始的位置对应于特定的格式项的索引的对象。  
  
 `format`参数包含一个格式字符串，它是`formatString`格式项的组件。 如果格式项没有`formatString`的值，组件`format`是`null`。 如果`format`是`null`，具体的类型取决于`arg`，您可能能够使用所选的默认格式规范。  
  
 `formatProvider`参数是<xref:System.IFormatProvider>实现，提供的格式设置`arg`。 通常情况下，它是实例在<xref:System.ICustomFormatter>实现。 如果`formatProvider`是`null`，忽略该参数。  
  
 实现<xref:System.ICustomFormatter.Format%2A>方法必须包含以下功能，以便.NET Framework 可提供格式设置不支持。 如果您的格式方法不支持一种格式，确定是否对象正在格式化实现<xref:System.IFormattable>接口。 如果实现，请调用<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>该接口的方法。 否则，调用默认<xref:System.Object.ToString%2A?displayProperty=nameWithType>基础对象的方法。 以下代码演示了此模式。  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 下面的示例实现<xref:System.ICustomFormatter>允许二进制、 八进制和十六进制格式的整数值。 其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>实现确定格式参数是否为一个三个受支持的格式字符串 ("B"的二进制文件中，"O"的八进制和十六进制的"H") 和格式`arg`参数适当。 否则为如果`arg`不是`null`，它将调用`arg`参数的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现，如果存在，或者其无参数`ToString`方法时，如果一个不使用。 如果 `arg` 为 `null`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 然后可用于提供自定义格式设置，通过传递`BinaryFormatter`对象作为`provider`参数的<xref:System.String.Format%2A>方法，如以下示例所示。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>